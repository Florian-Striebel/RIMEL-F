<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/ht-internal.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HT_INTERNAL_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_INTERNAL_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_HEAD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct name { struct type **hth_table; unsigned hth_table_length; unsigned hth_n_entries; unsigned hth_load_limit; int hth_prime_idx; }</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_INITIALIZER</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ NULL, 0, 0, 0, -1 }</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HT_NO_CACHE_HASH_VALUES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_ENTRY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { struct type *hte_next; }</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_ENTRY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { struct type *hte_next; unsigned hte_hash; }</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_EMPTY</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;hth_n_entries == 0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_SIZE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;hth_n_entries)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_MEM_USAGE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(*head) + (head)-&gt;hth_table_length * sizeof(void*))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_FIND</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##_HT_FIND((head), (elm))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_INSERT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##_HT_INSERT((head), (elm))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_REPLACE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##_HT_REPLACE((head), (elm))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_REMOVE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##_HT_REMOVE((head), (elm))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_START</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##_HT_START(head)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_NEXT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##_HT_NEXT((head), (elm))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_NEXT_RMV</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##_HT_NEXT_RMV((head), (elm))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_CLEAR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##_HT_CLEAR(head)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_INIT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##_HT_INIT(head)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type>
<name>ht_improve_hash_</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><name>h</name> <operator>+=</operator> <operator>~</operator><operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>+=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static inline unsigned
ht_string_hash_(const char *s)
{
unsigned h = 0;
int m = 1;
while (*s) {
h += ((signed char)*s++)*m;
m = (m&lt;&lt;5)-1;
}
return h;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type>
<name>ht_string_hash_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>*</operator><name>cp</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><literal type="number">1000003</literal><operator>*</operator><name>h</name><operator>)</operator> <operator>^</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>cp</name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HT_NO_CACHE_HASH_VALUES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_SET_HASH_</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>hashfn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.hte_hash = hashfn(elm); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_SET_HASHVAL_</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.hte_hash = (val); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_ELT_HASH_</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>hashfn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((elm)-&gt;field.hte_hash)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_SET_HASH_</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>hashfn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_ELT_HASH_</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>hashfn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(hashfn(elm))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_SET_HASHVAL_</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_BUCKET_</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>hashfn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;hth_table[HT_ELT_HASH_(elm,field,hashfn) % head-&gt;hth_table_length])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_FOREACH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((x) = HT_START(name, head); (x) != NULL; (x) = HT_NEXT(name, head, x))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_PROTOTYPE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>hashfn</name></type></parameter>, <parameter><type><name>eqfn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int name##_HT_GROW(struct name *ht, unsigned min_capacity); void name##_HT_CLEAR(struct name *ht); int name##_HT_REP_IS_BAD_(const struct name *ht); static inline void name##_HT_INIT(struct name *head) { head-&gt;hth_table_length = 0; head-&gt;hth_table = NULL; head-&gt;hth_n_entries = 0; head-&gt;hth_load_limit = 0; head-&gt;hth_prime_idx = -1; } static inline struct type ** name##_HT_FIND_P_(struct name *head, struct type *elm) { struct type **p; if (!head-&gt;hth_table) return NULL; p = &amp;HT_BUCKET_(head, field, elm, hashfn); while (*p) { if (eqfn(*p, elm)) return p; p = &amp;(*p)-&gt;field.hte_next; } return p; } static inline struct type * name##_HT_FIND(const struct name *head, struct type *elm) { struct type **p; struct name *h = (struct name *) head; HT_SET_HASH_(elm, field, hashfn); p = name##_HT_FIND_P_(h, elm); return p ? *p : NULL; } static inline void name##_HT_INSERT(struct name *head, struct type *elm) { struct type **p; if (!head-&gt;hth_table || head-&gt;hth_n_entries &gt;= head-&gt;hth_load_limit) name##_HT_GROW(head, head-&gt;hth_n_entries+1); ++head-&gt;hth_n_entries; HT_SET_HASH_(elm, field, hashfn); p = &amp;HT_BUCKET_(head, field, elm, hashfn); elm-&gt;field.hte_next = *p; *p = elm; } static inline struct type * name##_HT_REPLACE(struct name *head, struct type *elm) { struct type **p, *r; if (!head-&gt;hth_table || head-&gt;hth_n_entries &gt;= head-&gt;hth_load_limit) name##_HT_GROW(head, head-&gt;hth_n_entries+1); HT_SET_HASH_(elm, field, hashfn); p = name##_HT_FIND_P_(head, elm); r = *p; *p = elm; if (r &amp;&amp; (r!=elm)) { elm-&gt;field.hte_next = r-&gt;field.hte_next; r-&gt;field.hte_next = NULL; return r; } else { ++head-&gt;hth_n_entries; return NULL; } } static inline struct type * name##_HT_REMOVE(struct name *head, struct type *elm) { struct type **p, *r; HT_SET_HASH_(elm, field, hashfn); p = name##_HT_FIND_P_(head,elm); if (!p || !*p) return NULL; r = *p; *p = r-&gt;field.hte_next; r-&gt;field.hte_next = NULL; --head-&gt;hth_n_entries; return r; } static inline void name##_HT_FOREACH_FN(struct name *head, int (*fn)(struct type *, void *), void *data) { unsigned idx; struct type **p, **nextp, *next; if (!head-&gt;hth_table) return; for (idx=0; idx &lt; head-&gt;hth_table_length; ++idx) { p = &amp;head-&gt;hth_table[idx]; while (*p) { nextp = &amp;(*p)-&gt;field.hte_next; next = *nextp; if (fn(*p, data)) { --head-&gt;hth_n_entries; *p = next; } else { p = nextp; } } } } static inline struct type ** name##_HT_START(struct name *head) { unsigned b = 0; while (b &lt; head-&gt;hth_table_length) { if (head-&gt;hth_table[b]) return &amp;head-&gt;hth_table[b]; ++b; } return NULL; } static inline struct type ** name##_HT_NEXT(struct name *head, struct type **elm) { if ((*elm)-&gt;field.hte_next) { return &amp;(*elm)-&gt;field.hte_next; } else { unsigned b = (HT_ELT_HASH_(*elm, field, hashfn) % head-&gt;hth_table_length)+1; while (b &lt; head-&gt;hth_table_length) { if (head-&gt;hth_table[b]) return &amp;head-&gt;hth_table[b]; ++b; } return NULL; } } static inline struct type ** name##_HT_NEXT_RMV(struct name *head, struct type **elm) { unsigned h = HT_ELT_HASH_(*elm, field, hashfn); *elm = (*elm)-&gt;field.hte_next; --head-&gt;hth_n_entries; if (*elm) { return elm; } else { unsigned b = (h % head-&gt;hth_table_length)+1; while (b &lt; head-&gt;hth_table_length) { if (head-&gt;hth_table[b]) return &amp;head-&gt;hth_table[b]; ++b; } return NULL; } }</cpp:value></cpp:define>










































































































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_GENERATE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>hashfn</name></type></parameter>, <parameter><type><name>eqfn</name></type></parameter>, <parameter><type><name>load</name></type></parameter>, <parameter><type><name>mallocfn</name></type></parameter>, <parameter><type><name>reallocfn</name></type></parameter>, <parameter><type><name>freefn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static unsigned name##_PRIMES[] = { 53, 97, 193, 389, 769, 1543, 3079, 6151, 12289, 24593, 49157, 98317, 196613, 393241, 786433, 1572869, 3145739, 6291469, 12582917, 25165843, 50331653, 100663319, 201326611, 402653189, 805306457, 1610612741 }; static unsigned name##_N_PRIMES = (unsigned)(sizeof(name##_PRIMES)/sizeof(name##_PRIMES[0])); int name##_HT_GROW(struct name *head, unsigned size) { unsigned new_len, new_load_limit; int prime_idx; struct type **new_table; if (head-&gt;hth_prime_idx == (int)name##_N_PRIMES - 1) return 0; if (head-&gt;hth_load_limit &gt; size) return 0; prime_idx = head-&gt;hth_prime_idx; do { new_len = name##_PRIMES[++prime_idx]; new_load_limit = (unsigned)(load*new_len); } while (new_load_limit &lt;= size &amp;&amp; prime_idx &lt; (int)name##_N_PRIMES); if ((new_table = mallocfn(new_len*sizeof(struct type*)))) { unsigned b; memset(new_table, 0, new_len*sizeof(struct type*)); for (b = 0; b &lt; head-&gt;hth_table_length; ++b) { struct type *elm, *next; unsigned b2; elm = head-&gt;hth_table[b]; while (elm) { next = elm-&gt;field.hte_next; b2 = HT_ELT_HASH_(elm, field, hashfn) % new_len; elm-&gt;field.hte_next = new_table[b2]; new_table[b2] = elm; elm = next; } } if (head-&gt;hth_table) freefn(head-&gt;hth_table); head-&gt;hth_table = new_table; } else { unsigned b, b2; new_table = reallocfn(head-&gt;hth_table, new_len*sizeof(struct type*)); if (!new_table) return -1; memset(new_table + head-&gt;hth_table_length, 0, (new_len - head-&gt;hth_table_length)*sizeof(struct type*)); for (b=0; b &lt; head-&gt;hth_table_length; ++b) { struct type *e, **pE; for (pE = &amp;new_table[b], e = *pE; e != NULL; e = *pE) { b2 = HT_ELT_HASH_(e, field, hashfn) % new_len; if (b2 == b) { pE = &amp;e-&gt;field.hte_next; } else { *pE = e-&gt;field.hte_next; e-&gt;field.hte_next = new_table[b2]; new_table[b2] = e; } } } head-&gt;hth_table = new_table; } head-&gt;hth_table_length = new_len; head-&gt;hth_prime_idx = prime_idx; head-&gt;hth_load_limit = new_load_limit; return 0; } void name##_HT_CLEAR(struct name *head) { if (head-&gt;hth_table) freefn(head-&gt;hth_table); name##_HT_INIT(head); } int name##_HT_REP_IS_BAD_(const struct name *head) { unsigned n, i; struct type *elm; if (!head-&gt;hth_table_length) { if (!head-&gt;hth_table &amp;&amp; !head-&gt;hth_n_entries &amp;&amp; !head-&gt;hth_load_limit &amp;&amp; head-&gt;hth_prime_idx == -1) return 0; else return 1; } if (!head-&gt;hth_table || head-&gt;hth_prime_idx &lt; 0 || !head-&gt;hth_load_limit) return 2; if (head-&gt;hth_n_entries &gt; head-&gt;hth_load_limit) return 3; if (head-&gt;hth_table_length != name##_PRIMES[head-&gt;hth_prime_idx]) return 4; if (head-&gt;hth_load_limit != (unsigned)(load*head-&gt;hth_table_length)) return 5; for (n = i = 0; i &lt; head-&gt;hth_table_length; ++i) { for (elm = head-&gt;hth_table[i]; elm; elm = elm-&gt;field.hte_next) { if (HT_ELT_HASH_(elm, field, hashfn) != hashfn(elm)) return 1000 + i; if ((HT_ELT_HASH_(elm, field, hashfn) % head-&gt;hth_table_length) != i) return 10000 + i; ++n; } } if (n != head-&gt;hth_n_entries) return 6; return 0; }</cpp:value></cpp:define>




























































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_FIND_OR_INSERT_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>hashfn</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>eltype</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ struct name *var##_head_ = head; struct eltype **var; if (!var##_head_-&gt;hth_table || var##_head_-&gt;hth_n_entries &gt;= var##_head_-&gt;hth_load_limit) name##_HT_GROW(var##_head_, var##_head_-&gt;hth_n_entries+1); HT_SET_HASH_((elm), field, hashfn); var = name##_HT_FIND_P_(var##_head_, (elm)); if (*var) { y; } else { n; } }</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_FOI_INSERT_</name><parameter_list>(<parameter><type><name>field</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>newent</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ HT_SET_HASHVAL_(newent, field, (elm)-&gt;field.hte_hash); newent-&gt;field.hte_next = NULL; *var = newent; ++((head)-&gt;hth_n_entries); }</cpp:value></cpp:define>













































<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
