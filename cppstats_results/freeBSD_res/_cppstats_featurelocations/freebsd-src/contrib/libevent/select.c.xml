<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/select.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DARWIN_UNLIMITED_SELECT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_SELECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evsignal-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evthread-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evmap-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_FD_MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>fd_mask</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NFDBITS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFDBITS</name></cpp:macro> <cpp:value>(sizeof(fd_mask)*8)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIV_ROUNDUP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)+((y)-1))/(y))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_ALLOC_SIZE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DIV_ROUNDUP(n, NFDBITS) * sizeof(fd_mask))</cpp:value></cpp:define>


<struct>struct <name>selectop</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>event_fds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>event_fdsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>resize_out_sets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>event_readset_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>event_writeset_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>event_readset_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>event_writeset_out</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>select_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>select_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>select_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>select_dispatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>select_dealloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name></type> <name>selectops</name> <init>= <expr><block>{
<expr><literal type="string">"select"</literal></expr>,
<expr><name>select_init</name></expr>,
<expr><name>select_add</name></expr>,
<expr><name>select_del</name></expr>,
<expr><name>select_dispatch</name></expr>,
<expr><name>select_dealloc</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>EV_FEATURE_FDS</name></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>select_resize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>selectop</name></name> <modifier>*</modifier></type><name>sop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fdsz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>select_free_selectop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>selectop</name></name> <modifier>*</modifier></type><name>sop</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>select_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>selectop</name></name> <modifier>*</modifier></type><name>sop</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sop</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>selectop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>select_resize</name><argument_list>(<argument><expr><name>sop</name></expr></argument>, <argument><expr><call><name>SELECT_ALLOC_SIZE</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>select_free_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evsig_init_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_weakrand_seed_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>weakrand_seed</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>sop</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_INVARIANTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_selectop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>selectop</name></name> <modifier>*</modifier></type><name>sop</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_selectop</name><parameter_list>(<parameter><type><name>sop</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (void) sop; } while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>select_dispatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>nfds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>selectop</name></name> <modifier>*</modifier></type><name>sop</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sop</name><operator>-&gt;</operator><name>resize_out_sets</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>readset_out</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>writeset_out</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><name><name>sop</name><operator>-&gt;</operator><name>event_fdsz</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>readset_out</name> <operator>=</operator> <call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_out</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_out</name></name> <operator>=</operator> <name>readset_out</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>writeset_out</name> <operator>=</operator> <call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_out</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>




<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_out</name></name> <operator>=</operator> <name>writeset_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sop</name><operator>-&gt;</operator><name>resize_out_sets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_out</name></name></expr></argument>, <argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_in</name></name></expr></argument>,
<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_fdsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_out</name></name></expr></argument>, <argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_in</name></name></expr></argument>,
<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_fdsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nfds</name> <operator>=</operator> <name><name>sop</name><operator>-&gt;</operator><name>event_fds</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_out</name></name></expr></argument>,
<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"select"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: select reports %d"</literal><operator>,</operator> <name>__func__</name><operator>,</operator> <name>res</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evutil_weakrand_range_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>weakrand_seed</name></name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <name>nfds</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_out</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>EV_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_out</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>EV_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evmap_io_active_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>check_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>select_resize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>selectop</name></name> <modifier>*</modifier></type><name>sop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fdsz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>readset_in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>writeset_in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>readset_in</name> <operator>=</operator> <call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_in</name></name></expr></argument>, <argument><expr><name>fdsz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_in</name></name> <operator>=</operator> <name>readset_in</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>writeset_in</name> <operator>=</operator> <call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_in</name></name></expr></argument>, <argument><expr><name>fdsz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>






<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_in</name></name> <operator>=</operator> <name>writeset_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sop</name><operator>-&gt;</operator><name>resize_out_sets</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sop</name><operator>-&gt;</operator><name>event_readset_in</name></name> <operator>+</operator> <name><name>sop</name><operator>-&gt;</operator><name>event_fdsz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>fdsz</name> <operator>-</operator> <name><name>sop</name><operator>-&gt;</operator><name>event_fdsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_in</name></name> <operator>+</operator> <name><name>sop</name><operator>-&gt;</operator><name>event_fdsz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>fdsz</name> <operator>-</operator> <name><name>sop</name><operator>-&gt;</operator><name>event_fdsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sop</name><operator>-&gt;</operator><name>event_fdsz</name></name> <operator>=</operator> <name>fdsz</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>select_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>selectop</name></name> <modifier>*</modifier></type><name>sop</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>events</name> <operator>&amp;</operator> <name>EV_SIGNAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>sop</name><operator>-&gt;</operator><name>event_fds</name></name> <operator>&lt;</operator> <name>fd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fdsz</name> <init>= <expr><name><name>sop</name><operator>-&gt;</operator><name>event_fdsz</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fdsz</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>fd_mask</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fdsz</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>fd_mask</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>




<while>while <condition>(<expr><name>fdsz</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>SELECT_ALLOC_SIZE</name><argument_list>(<argument><expr><name>fd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fdsz</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>fdsz</name> <operator>!=</operator> <name><name>sop</name><operator>-&gt;</operator><name>event_fdsz</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>select_resize</name><argument_list>(<argument><expr><name>sop</name></expr></argument>, <argument><expr><name>fdsz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>check_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sop</name><operator>-&gt;</operator><name>event_fds</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>check_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>select_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>selectop</name></name> <modifier>*</modifier></type><name>sop</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>events</name> <operator>&amp;</operator> <name>EV_SIGNAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sop</name><operator>-&gt;</operator><name>event_fds</name></name> <operator>&lt;</operator> <name>fd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>check_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_selectop</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>select_free_selectop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>selectop</name></name> <modifier>*</modifier></type><name>sop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_readset_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>event_writeset_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>selectop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>sop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>select_dealloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evsig_dealloc_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>select_free_selectop</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
