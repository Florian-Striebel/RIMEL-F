<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/evbuffer-internal.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVBUFFER_INTERNAL_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_INTERNAL_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defer-internal.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_CB_NODEFER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EVENT__SIZEOF_VOID_P</name> <operator>&lt;</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_BUFFER_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_BUFFER_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<struct>struct <name>evbuffer_cb_entry</name> <block>{

<macro><name>LIST_ENTRY</name><argument_list>(<argument>evbuffer_cb_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>next</name></expr>;</expr_stmt>



<union>union <block>{
<decl_stmt><decl><type><name>evbuffer_cb_func</name></type> <name>cb_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evbuffer_cb</name></type> <name>cb_obsolete</name></decl>;</decl_stmt>
}</block> <decl><name>cb</name></decl>;</union>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>

<struct_decl>struct <name>bufferevent</name>;</struct_decl>
<struct_decl>struct <name>evbuffer_chain</name>;</struct_decl>
<struct>struct <name>evbuffer</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>














<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last_with_datap</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>total_len</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>n_add_for_cb</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>n_del_for_cb</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>unsigned</name></type> <name>own_lock</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>freeze_start</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>freeze_end</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>deferred_cbs</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name></type> <name>is_overlapped</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>cb_queue</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>refcnt</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name></type> <name>deferred</name></decl>;</decl_stmt>


<macro><name>LIST_HEAD</name><argument_list>(<argument>evbuffer_cb_queue</argument>, <argument>evbuffer_cb_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>callbacks</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EVENT__SIZEOF_OFF_T</name> <operator>&lt;</operator> <name>EVENT__SIZEOF_SIZE_T</name></expr></cpp:if>
<typedef>typedef <type><name>ev_ssize_t</name></type> <name>ev_misalign_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_CHAIN_MAX</name></cpp:macro> <cpp:value>((size_t)EV_SSIZE_MAX)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>ev_off_t</name></type> <name>ev_misalign_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EVENT__SIZEOF_OFF_T</name> <operator>&gt;</operator> <name>EVENT__SIZEOF_SIZE_T</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_CHAIN_MAX</name></cpp:macro> <cpp:value>EV_SIZE_MAX</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_CHAIN_MAX</name></cpp:macro> <cpp:value>((size_t)EV_SSIZE_MAX)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct>struct <name>evbuffer_chain</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_len</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ev_misalign_t</name></type> <name>misalign</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>size_t</name></type> <name>off</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_FILESEGMENT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_SENDFILE</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_REFERENCE</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_IMMUTABLE</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_MEM_PINNED_R</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_MEM_PINNED_W</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_MEM_PINNED_ANY</name></cpp:macro> <cpp:value>(EVBUFFER_MEM_PINNED_R|EVBUFFER_MEM_PINNED_W)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_DANGLING</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_MULTICAST</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>


<decl_stmt><decl><type><name>int</name></type> <name>refcnt</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>evbuffer_chain_reference</name> <block>{
<decl_stmt><decl><type><name>evbuffer_ref_cleanup_cb</name></type> <name>cleanupfn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>evbuffer_chain_file_segment</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_file_segment</name></name> <modifier>*</modifier></type><name>segment</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>view_handle</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>


<struct>struct <name>evbuffer_file_segment</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>can_sendfile</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>is_mapping</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mapping</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>mapping_handle</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ev_off_t</name></type> <name>file_offset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ev_off_t</name></type> <name>mmap_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ev_off_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>evbuffer_file_segment_cleanup_cb</name></type> <name>cleanup_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cleanup_cb_arg</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>evbuffer_multicast_parent</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_CHAIN_SIZE</name></cpp:macro> <cpp:value>sizeof(struct evbuffer_chain)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_CHAIN_EXTRA</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(t *)((struct evbuffer_chain *)(c) + 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_EVBUFFER_LOCKED</name><parameter_list>(<parameter><type><name>buffer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVLOCK_ASSERT_LOCKED((buffer)-&gt;lock)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_LOCK</name><parameter_list>(<parameter><type><name>buffer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { EVLOCK_LOCK((buffer)-&gt;lock, 0); } while (0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_UNLOCK</name><parameter_list>(<parameter><type><name>buffer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { EVLOCK_UNLOCK((buffer)-&gt;lock, 0); } while (0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_LOCK2</name><parameter_list>(<parameter><type><name>buffer1</name></type></parameter>, <parameter><type><name>buffer2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { EVLOCK_LOCK2((buffer1)-&gt;lock, (buffer2)-&gt;lock, 0, 0); } while (0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_UNLOCK2</name><parameter_list>(<parameter><type><name>buffer1</name></type></parameter>, <parameter><type><name>buffer2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { EVLOCK_UNLOCK2((buffer1)-&gt;lock, (buffer2)-&gt;lock, 0, 0); } while (0)</cpp:value></cpp:define>





<function_decl><type><name>void</name></type> <name>evbuffer_incref_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>evbuffer_incref_and_lock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>evbuffer_chain_pin_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>evbuffer_chain_unpin_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>evbuffer_decref_and_unlock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>evbuffer_expand_fast_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>evbuffer_read_setup_vecs_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>howmuch</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name> <modifier>*</modifier></type><name>vecs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_vecs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>chainp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>exact</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSABUF_FROM_EVBUFFER_IOV</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>ei</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (i)-&gt;buf = (ei)-&gt;iov_base; (i)-&gt;len = (unsigned long)(ei)-&gt;iov_len; } while (0)</cpp:value></cpp:define>







<function_decl><type><name>void</name></type> <name>evbuffer_set_parent_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>evbuffer_invoke_callbacks_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>evbuffer_get_callbacks_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cbs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_cbs</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
