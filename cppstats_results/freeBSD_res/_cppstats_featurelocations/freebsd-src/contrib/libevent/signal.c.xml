<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/signal.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WIN32_LEAN_AND_MEAN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evsignal-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evmap-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evthread-internal.h"</cpp:file></cpp:include>



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__cdecl</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evsig_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evsig_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name></type> <name>evsigops</name> <init>= <expr><block>{
<expr><literal type="string">"signal"</literal></expr>,
<expr><name>NULL</name></expr>,
<expr><name>evsig_add</name></expr>,
<expr><name>evsig_del</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>evsig_base_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>evsig_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>evsig_base_n_signals_added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>evutil_socket_t</name></type> <name>evsig_base_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name> <name>__cdecl</name></type> <name>evsig_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVSIGBASE_LOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>EVLOCK_LOCK(evsig_base_lock, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVSIGBASE_UNLOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>EVLOCK_UNLOCK(evsig_base_lock, 0)</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>evsig_set_base_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVSIGBASE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>evsig_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name>evsig_base_n_signals_added</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_n_signals_added</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>evsig_base_fd</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVSIGBASE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>evsig_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>signals</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ncaught</name><index>[<expr><name>NSIG</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ncaught</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ncaught</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>signals</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>signals</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>signals</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>signals</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>evutil_socket_geterror</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_sock_err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s: recv"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>sig</name> <init>= <expr><name><name>signals</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>&lt;</operator> <name>NSIG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ncaught</name><index>[<expr><name>sig</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSIG</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ncaught</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evmap_signal_active_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ncaught</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evsig_init_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>evutil_make_internal_pipe_</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>event_sock_warn</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: socketpair"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>event_sock_err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: socketpair"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>sh_old</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>sh_old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>sh_old</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>sh_old_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>, <argument><expr><name>evsig_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal</name><operator>.</operator><name>ev_flags</name></name> <operator>|=</operator> <name>EVLIST_INTERNAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_priority_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>evsigsel</name></name> <operator>=</operator> <operator>&amp;</operator><name>evsigops</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>evsig_set_handler_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>evsignal</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<name>__cdecl</name> <modifier>*</modifier><name>handler</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SIGACTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>ev_sighandler_t</name></type> <name>sh</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>evsig_info</name></name> <modifier>*</modifier></type><name>sig</name> <init>= <expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sig</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>evsignal</name> <operator>&gt;=</operator> <name><name>sig</name><operator>-&gt;</operator><name>sh_old_max</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_max</name> <init>= <expr><name>evsignal</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: evsignal (%d) &gt;= sh_old_max (%d), resizing"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name>evsignal</name><operator>,</operator> <name><name>sig</name><operator>-&gt;</operator><name>sh_old_max</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name></name></expr></argument>, <argument><expr><name>new_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"realloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name><name>sig</name><operator>-&gt;</operator><name>sh_old_max</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>new_max</name> <operator>-</operator> <name><name>sig</name><operator>-&gt;</operator><name>sh_old_max</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sig</name><operator>-&gt;</operator><name>sh_old_max</name></name> <operator>=</operator> <name>new_max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name><index>[<expr><name>evsignal</name></expr>]</index></name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>sig</name><operator>-&gt;</operator><name>sh_old</name><index>[<expr><name>evsignal</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name><index>[<expr><name>evsignal</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SIGACTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>|=</operator> <name>SA_RESTART</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigfillset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>evsignal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name><index>[<expr><name>evsignal</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"sigaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name><index>[<expr><name>evsignal</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name><index>[<expr><name>evsignal</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sh</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>evsignal</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"signal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name><index>[<expr><name>evsignal</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name><index>[<expr><name>evsignal</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name><index>[<expr><name>evsignal</name></expr>]</index></name> <operator>=</operator> <name>sh</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evsig_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>evsignal</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evsig_info</name></name> <modifier>*</modifier></type><name>sig</name> <init>= <expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sig</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>evsignal</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>evsignal</name> <operator>&lt;</operator> <name>NSIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EVSIGBASE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evsig_base</name> <operator>!=</operator> <name>base</name> <operator>&amp;&amp;</operator> <name>evsig_base_n_signals_added</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"Added a signal to event base %p with signals "</literal>
<literal type="string">"already added to event_base %p. Only one can have "</literal>
<literal type="string">"signals at a time with the %s backend. The base with "</literal>
<literal type="string">"the most recently added signal or the most recent "</literal>
<literal type="string">"event_base_loop() call gets preference; do "</literal>
<literal type="string">"not rely on this behavior in future Libevent versions."</literal></expr></argument>,
<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evsig_base</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>evsel</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>evsig_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name>evsig_base_n_signals_added</name> <operator>=</operator> <operator>++</operator><name><name>sig</name><operator>-&gt;</operator><name>ev_n_signals_added</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>evsig_base_fd</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVSIGBASE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: %d: changing signal handler"</literal><operator>,</operator> <name>__func__</name><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name>evsignal</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evsig_set_handler_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>evsignal</name></expr></argument>, <argument><expr><name>evsig_handler</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sig</name><operator>-&gt;</operator><name>ev_signal_added</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>event_add_nolock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sig</name><operator>-&gt;</operator><name>ev_signal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sig</name><operator>-&gt;</operator><name>ev_signal_added</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>EVSIGBASE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>evsig_base_n_signals_added</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>sig</name><operator>-&gt;</operator><name>ev_n_signals_added</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVSIGBASE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evsig_restore_handler_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evsignal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evsig_info</name></name> <modifier>*</modifier></type><name>sig</name> <init>= <expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sig</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SIGACTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>ev_sighandler_t</name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>evsignal</name> <operator>&gt;=</operator> <name><name>sig</name><operator>-&gt;</operator><name>sh_old_max</name></name></expr>)</condition> <block>{<block_content>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>sh</name> <operator>=</operator> <name><name>sig</name><operator>-&gt;</operator><name>sh_old</name><index>[<expr><name>evsignal</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sig</name><operator>-&gt;</operator><name>sh_old</name><index>[<expr><name>evsignal</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SIGACTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>evsignal</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"sigaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>signal</name><argument_list>(<argument><expr><name>evsignal</name></expr></argument>, <argument><expr><operator>*</operator><name>sh</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"signal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evsig_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>evsignal</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>evsignal</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>evsignal</name> <operator>&lt;</operator> <name>NSIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: "</literal><name>EV_SOCK_FMT</name><literal type="string">": restoring signal handler"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name>evsignal</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVSIGBASE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>evsig_base_n_signals_added</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_n_signals_added</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVSIGBASE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>evsig_restore_handler_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>evsignal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>__cdecl</name></type>
<name>evsig_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>socket_errno</name> <init>= <expr><call><name>EVUTIL_SOCKET_ERROR</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>evsig_base</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(
<argument><expr><literal type="string">"%s: received signal %d, but have no base configured"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SIGACTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>evsig_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>sig</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><name>evsig_base_fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name>evsig_base_fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>EVUTIL_SET_SOCKET_ERROR</name><argument_list>(<argument><expr><name>socket_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evsig_dealloc_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_added</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_added</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>event_debug_unassign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSIG</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>sh_old_max</name></name> <operator>&amp;&amp;</operator> <name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>sh_old</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evsig_restore_handler_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>EVSIGBASE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>evsig_base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>evsig_base</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>evsig_base_n_signals_added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>evsig_base_fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVSIGBASE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>sh_old_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>sh_old</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>sh_old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>sh_old</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evsig_free_globals_locks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>evsig_base_lock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name>evsig_base_lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>evsig_base_lock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evsig_free_globals_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evsig_free_globals_locks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>evsig_global_setup_locks_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>enable_locks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVTHREAD_SETUP_GLOBAL_LOCK</name><argument_list>(<argument><expr><name>evsig_base_lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
