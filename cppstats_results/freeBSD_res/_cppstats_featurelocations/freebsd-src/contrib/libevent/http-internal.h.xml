<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/http-internal.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HTTP_INTERNAL_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_INTERNAL_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defer-internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_CONNECT_TIMEOUT</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_WRITE_TIMEOUT</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_READ_TIMEOUT</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_PREFIX</name></cpp:macro> <cpp:value>"http://"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_DEFAULTPORT</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<enum>enum <name>message_read_status</name> <block>{
<decl><name>ALL_DATA_READ</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MORE_DATA_EXPECTED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>DATA_CORRUPTED</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>REQUEST_CANCELED</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,
<decl><name>DATA_TOO_LONG</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<struct_decl>struct <name>evbuffer</name>;</struct_decl>
<struct_decl>struct <name>addrinfo</name>;</struct_decl>
<struct_decl>struct <name>evhttp_request</name>;</struct_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVHTTP_REQ_UNKNOWN_</name></cpp:macro> <cpp:value>(1&lt;&lt;15)</cpp:value></cpp:define>

<enum>enum <name>evhttp_connection_state</name> <block>{
<decl><name>EVCON_DISCONNECTED</name></decl>,
<decl><name>EVCON_CONNECTING</name></decl>,
<decl><name>EVCON_IDLE</name></decl>,
<decl><name>EVCON_READING_FIRSTLINE</name></decl>,

<decl><name>EVCON_READING_HEADERS</name></decl>,
<decl><name>EVCON_READING_BODY</name></decl>,
<decl><name>EVCON_READING_TRAILER</name></decl>,
<decl><name>EVCON_WRITING</name></decl>
}</block>;</enum>

<struct_decl>struct <name>event_base</name>;</struct_decl>


<struct>struct <name>evhttp_connection</name> <block>{


<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>evhttp_connection</argument>)</argument_list></macro> <expr_stmt><expr><name>next</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>retry_ev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bind_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>bind_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>max_headers_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>max_body_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVHTTP_CON_INCOMING</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVHTTP_CON_OUTGOING</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVHTTP_CON_CLOSEDETECT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVHTTP_CON_AUTOFREE</name></cpp:macro> <cpp:value>EVHTTP_CON_PUBLIC_FLAGS_END</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVHTTP_CON_READING_ERROR</name></cpp:macro> <cpp:value>(EVHTTP_CON_AUTOFREE &lt;&lt; 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retry_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retry_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>initial_retry_timeout</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>enum</name> <name>evhttp_connection_state</name></name></type> <name>state</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http_server</name></decl>;</decl_stmt>

<macro><name>TAILQ_HEAD</name><argument_list>(<argument>evcon_requestq</argument>, <argument>evhttp_request</argument>)</argument_list></macro> <expr_stmt><expr><name>requests</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>closecb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>closecb_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name></type> <name>read_more_deferred_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ai_family</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>evhttp_cb</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>evhttp_cb</argument>)</argument_list></macro> <expr_stmt><expr><name>next</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>what</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl>;</decl_stmt>
}</block>;</struct>


<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>evconq</name></expr></argument>, <argument><expr><name>evhttp_connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<struct>struct <name>evhttp_bound_socket</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>evhttp_bound_socket</argument>)</argument_list></macro> <expr_stmt><expr><name>next</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>listener</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>evhttp_server_alias</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>evhttp_server_alias</argument>)</argument_list></macro> <expr_stmt><expr><name>next</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>evhttp</name> <block>{

<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>evhttp</argument>)</argument_list></macro> <expr_stmt><expr><name>next_vhost</name></expr>;</expr_stmt>


<macro><name>TAILQ_HEAD</name><argument_list>(<argument>boundq</argument>, <argument>evhttp_bound_socket</argument>)</argument_list></macro> <expr_stmt><expr><name>sockets</name></expr>;</expr_stmt>

<macro><name>TAILQ_HEAD</name><argument_list>(<argument>httpcbq</argument>, <argument>evhttp_cb</argument>)</argument_list></macro> <expr_stmt><expr><name>callbacks</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>evconq</name></name></type> <name>connections</name></decl>;</decl_stmt>

<macro><name>TAILQ_HEAD</name><argument_list>(<argument>vhostsq</argument>, <argument>evhttp</argument>)</argument_list></macro> <expr_stmt><expr><name>virtualhosts</name></expr>;</expr_stmt>

<macro><name>TAILQ_HEAD</name><argument_list>(<argument>aliasq</argument>, <argument>evhttp_server_alias</argument>)</argument_list></macro> <expr_stmt><expr><name>aliases</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vhost_pattern</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>default_max_headers_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>default_max_body_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_content_type</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>allowed_methods</name></decl>;</decl_stmt>



<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gencb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>gencbarg</name></decl>;</decl_stmt>
<function_decl><type><name><name>struct</name> <name>bufferevent</name></name><modifier>*</modifier></type> (<modifier>*</modifier><name>bevcb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bevcbarg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
}</block>;</struct>




<function_decl><type><name>void</name></type> <name>evhttp_connection_reset_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>evhttp_connection_connect_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<enum_decl>enum <name>evhttp_request_error</name>;</enum_decl>

<function_decl><type><name>void</name></type> <name>evhttp_connection_fail_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>evhttp_request_error</name></name></type> <name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<enum_decl>enum <name>message_read_status</name>;</enum_decl>

<function_decl><type><name><name>enum</name> <name>message_read_status</name></name></type> <name>evhttp_parse_firstline_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>message_read_status</name></name></type> <name>evhttp_parse_headers_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>evhttp_start_read_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evhttp_start_write_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>evhttp_response_code_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evhttp_send_page_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>evhttp_decode_uri_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decode_plus</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
