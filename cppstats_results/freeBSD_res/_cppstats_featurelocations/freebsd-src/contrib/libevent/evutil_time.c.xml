<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/evutil_time.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WIN32_LEAN_AND_MEAN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETTIMEOFDAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timeb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NANOSLEEP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_HAVE_USLEEP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NANOSLEEP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_USLEEP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETTIMEOFDAY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>
<name>evutil_gettimeofday</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timezone</name></name> <modifier>*</modifier></type><name>tz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U64_LITERAL</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>n##ui64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U64_LITERAL</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>n##llu</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPOCH_BIAS</name></cpp:macro> <cpp:value>U64_LITERAL(116444736000000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNITS_PER_SEC</name></cpp:macro> <cpp:value>U64_LITERAL(10000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USEC_PER_SEC</name></cpp:macro> <cpp:value>U64_LITERAL(1000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNITS_PER_USEC</name></cpp:macro> <cpp:value>U64_LITERAL(10)</cpp:value></cpp:define>
<union>union <block>{
<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft_ft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>ft_64</name></decl>;</decl_stmt>
}</block> <decl><name>ft</name></decl>;</union>

<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ft</name><operator>.</operator><name>ft_ft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_UNLIKELY</name><argument_list>(<argument><expr><name><name>ft</name><operator>.</operator><name>ft_64</name></name> <operator>&lt;</operator> <name>EPOCH_BIAS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ft</name><operator>.</operator><name>ft_64</name></name> <operator>-=</operator> <name>EPOCH_BIAS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>ft</name><operator>.</operator><name>ft_64</name></name> <operator>/</operator> <name>UNITS_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ft</name><operator>.</operator><name>ft_64</name></name> <operator>/</operator> <name>UNITS_PER_USEC</name><operator>)</operator> <operator>%</operator> <name>USEC_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SECONDS_IN_MSEC_LONG</name></cpp:macro> <cpp:value>(((LONG_MAX) - 999) / 1000)</cpp:value></cpp:define>


<function><type><name>long</name></type>
<name>evutil_tv_to_msec_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&gt;</operator> <literal type="number">1000000</literal> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&gt;</operator> <name>MAX_SECONDS_IN_MSEC_LONG</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>+</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>evutil_usleep_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>msec</name> <init>= <expr><call><name>evutil_tv_to_msec_</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>msec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NANOSLEEP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nanosleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_USLEEP</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>select</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_date_rfc1123</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>datelen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>DAYS</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"Sun"</literal></expr>, <expr><literal type="string">"Mon"</literal></expr>, <expr><literal type="string">"Tue"</literal></expr>, <expr><literal type="string">"Wed"</literal></expr>, <expr><literal type="string">"Thu"</literal></expr>, <expr><literal type="string">"Fri"</literal></expr>, <expr><literal type="string">"Sat"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>MONTHS</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"Jan"</literal></expr>, <expr><literal type="string">"Feb"</literal></expr>, <expr><literal type="string">"Mar"</literal></expr>, <expr><literal type="string">"Apr"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"Jun"</literal></expr>, <expr><literal type="string">"Jul"</literal></expr>, <expr><literal type="string">"Aug"</literal></expr>, <expr><literal type="string">"Sep"</literal></expr>, <expr><literal type="string">"Oct"</literal></expr>, <expr><literal type="string">"Nov"</literal></expr>, <expr><literal type="string">"Dec"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>sys</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>tm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>&amp;</operator><name>sys</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>evutil_snprintf</name><argument_list>(
<argument><expr><name>date</name></expr></argument>, <argument><expr><name>datelen</name></expr></argument>, <argument><expr><literal type="string">"%s, %02d %s %4d %02d:%02d:%02d GMT"</literal></expr></argument>,
<argument><expr><name><name>DAYS</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>MONTHS</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">1900</literal> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>adjust_monotonic_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evutil_timeradd</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>adjust_monotonic_clock</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evutil_timercmp</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>last_time</name></name></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>adjust</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>last_time</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adjust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timeradd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adjust</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>adjust_monotonic_clock</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>adjust_monotonic_clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tv</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>last_time</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <operator>*</operator><name>tv</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type>
<name>evutil_monotonic_timer_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>evutil_monotonic_timer_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>timer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>evutil_configure_monotonic_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evutil_configure_monotonic_time_</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>evutil_gettime_monotonic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evutil_gettime_monotonic_</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_MONOTONIC</name></expr></argument>)</argument_list></call></expr></cpp:if>









<function><type><name>int</name></type>
<name>evutil_configure_monotonic_time_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC_COARSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>precise</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>EV_MONOT_PRECISE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fallback</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>EV_MONOT_FALLBACK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC_COARSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>CLOCK_MONOTONIC_COARSE</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"I didn't expect CLOCK_MONOTONIC_COARSE to be &lt; 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>precise</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>fallback</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC_COARSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>monotonic_clock</name></name> <operator>=</operator> <name>CLOCK_MONOTONIC_COARSE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fallback</name> <operator>&amp;&amp;</operator> <call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>monotonic_clock</name></name> <operator>=</operator> <name>CLOCK_MONOTONIC</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CLOCK_MONOTONIC</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"I didn't expect CLOCK_MONOTONIC to be &lt; 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>monotonic_clock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_gettime_monotonic_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>monotonic_clock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>adjust_monotonic_time</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>monotonic_clock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MACH_MONOTONIC</name></expr></argument>)</argument_list></call></expr></cpp:if>











<function><type><name>int</name></type>
<name>evutil_configure_monotonic_time_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fallback</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>EV_MONOT_FALLBACK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mach_timebase_info</name></name></type> <name>mi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>base</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fallback</name> <operator>&amp;&amp;</operator>
<call><name>mach_timebase_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>mach_absolute_time</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>mi</name><operator>.</operator><name>denom</name></name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mach_timebase_units</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>mach_timebase_units</name><operator>.</operator><name>numer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_gettime_monotonic_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>abstime</name></decl>, <decl><type ref="prev"/><name>usec</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>mach_timebase_units</name><operator>.</operator><name>numer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>adjust_monotonic_time</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>abstime</name> <operator>=</operator> <call><name>mach_absolute_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usec</name> <operator>=</operator> <operator>(</operator><name>abstime</name> <operator>*</operator> <name><name>base</name><operator>-&gt;</operator><name>mach_timebase_units</name><operator>.</operator><name>numer</name></name><operator>)</operator>
<operator>/</operator> <operator>(</operator><name><name>base</name><operator>-&gt;</operator><name>mach_timebase_units</name><operator>.</operator><name>denom</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name>usec</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <name>usec</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WIN32_MONOTONIC</name></expr></argument>)</argument_list></call></expr></cpp:if>




























































<function><type><specifier>static</specifier> <name>ev_uint64_t</name></type>
<name>evutil_GetTickCount_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>GetTickCount64_fn</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>base</name><operator>-&gt;</operator><name>GetTickCount64_fn</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>GetTickCount_fn</name></name></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>v</name> <init>= <expr><call><name><name>base</name><operator>-&gt;</operator><name>GetTickCount_fn</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>v</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF00000000</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>




<decl_stmt><decl><type><name>DWORD</name></type> <name>ticks</name> <init>= <expr><call><name>GetTickCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ticks</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>last_tick_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>adjust_tick_count</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>ev_uint64_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>last_tick_count</name></name> <operator>=</operator> <name>ticks</name></expr>;</expr_stmt>
<return>return <expr><name>ticks</name> <operator>+</operator> <name><name>base</name><operator>-&gt;</operator><name>adjust_tick_count</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_configure_monotonic_time_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>precise</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>EV_MONOT_PRECISE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fallback</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>EV_MONOT_FALLBACK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>base</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>evutil_load_windows_system_library_</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fallback</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>GetTickCount64_fn</name></name> <operator>=</operator> <operator>(</operator><name>ev_GetTickCount_func</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"GetTickCount64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>GetTickCount_fn</name></name> <operator>=</operator> <operator>(</operator><name>ev_GetTickCount_func</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"GetTickCount"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>first_tick</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>last_tick_count</name></name> <operator>=</operator> <call><name>evutil_GetTickCount_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>precise</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fallback</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>freq</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>freq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>counter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>first_counter</name></name> <operator>=</operator> <name><name>counter</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>usec_per_count</name></name> <operator>=</operator> <literal type="number">1.0e6</literal> <operator>/</operator> <name><name>freq</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>use_performance_counter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ev_int64_t</name></type>
<name>abs64</name><parameter_list>(<parameter><decl><type><name>ev_int64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>i</name></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evutil_gettime_monotonic_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>ticks</name> <init>= <expr><call><name>evutil_GetTickCount_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>use_performance_counter</name></name></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_int64_t</name></type> <name>counter_elapsed</name></decl>, <decl><type ref="prev"/><name>counter_usec_elapsed</name></decl>, <decl><type ref="prev"/><name>ticks_elapsed</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>counter_elapsed</name> <operator>=</operator> <operator>(</operator><name>ev_int64_t</name><operator>)</operator>
<operator>(</operator><name><name>counter</name><operator>.</operator><name>QuadPart</name></name> <operator>-</operator> <name><name>base</name><operator>-&gt;</operator><name>first_counter</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ticks_elapsed</name> <operator>=</operator> <name>ticks</name> <operator>-</operator> <name><name>base</name><operator>-&gt;</operator><name>first_tick</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>counter_usec_elapsed</name> <operator>=</operator> <operator>(</operator><name>ev_int64_t</name><operator>)</operator>
<operator>(</operator><name>counter_elapsed</name> <operator>*</operator> <name><name>base</name><operator>-&gt;</operator><name>usec_per_count</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>abs64</name><argument_list>(<argument><expr><name>ticks_elapsed</name><operator>*</operator><literal type="number">1000</literal> <operator>-</operator> <name>counter_usec_elapsed</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>counter_usec_elapsed</name> <operator>=</operator> <name>ticks_elapsed</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>first_counter</name></name> <operator>=</operator> <operator>(</operator><name>ev_uint64_t</name><operator>)</operator> <operator>(</operator><name><name>counter</name><operator>.</operator><name>QuadPart</name></name> <operator>-</operator> <name>counter_usec_elapsed</name> <operator>/</operator> <name><name>base</name><operator>-&gt;</operator><name>usec_per_count</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <operator>(</operator><name>counter_usec_elapsed</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <name>counter_usec_elapsed</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <operator>(</operator><name>ticks</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>ticks</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>adjust_monotonic_time</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FALLBACK_MONOTONIC</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><name>int</name></type>
<name>evutil_configure_monotonic_time_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>precise</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>base</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_gettime_monotonic_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>adjust_monotonic_time</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
