<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/http.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCCOM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioccom.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_RESOURCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_WAIT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>timeout_pending</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>timeout_initialized</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strlcpy-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/http_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/http_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/listener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bufferevent-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETNAMEINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_MAXSERV</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_MAXHOST</name></cpp:macro> <cpp:value>1025</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_NUMERICHOST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_NUMERICSERV</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fake_getnameinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>salen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>hostlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>serv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>servlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>serv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmpserv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>tmpserv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpserv</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><name>tmpserv</name></expr></argument>, <argument><expr><name>servlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>servlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>host</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NI_NUMERICHOST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>hostlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>hostlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>gethostbyaddr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>, <argument><expr><name>hostlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>hostlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_VERSION_BEFORE</name><parameter_list>(<parameter><type><name>req</name></type></parameter>, <parameter><type><name>major_v</name></type></parameter>, <parameter><type><name>minor_v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((req)-&gt;major &lt; (major_v) || ((req)-&gt;major == (major_v) &amp;&amp; (req)-&gt;minor &lt; (minor_v)))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_VERSION_ATLEAST</name><parameter_list>(<parameter><type><name>req</name></type></parameter>, <parameter><type><name>major_v</name></type></parameter>, <parameter><type><name>minor_v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((req)-&gt;major &gt; (major_v) || ((req)-&gt;major == (major_v) &amp;&amp; (req)-&gt;minor &gt;= (minor_v)))</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&lt;(b))?(a):(b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>debug</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>evutil_socket_t</name></type> <name>bind_socket_ai</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reuse</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>evutil_socket_t</name></type> <name>bind_socket</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reuse</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>name_from_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_socklen_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evhttp_associate_new_request_with_connection</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evhttp_connection_start_detectclose</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evhttp_connection_stop_detectclose</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evhttp_request_dispatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name><modifier>*</modifier></type> <name>evcon</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evhttp_read_firstline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evhttp_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evhttp_add_header_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>evhttp_response_phrase_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evhttp_get_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_socklen_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evhttp_write_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evhttp_make_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evhttp_read_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evhttp_write_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evhttp_error_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evhttp_find_vhost</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>outhttp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STRSEP</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>strsep</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>del</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tok</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>del</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>tok</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>html_replace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>escaped</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>escaped</name> <operator>=</operator> <literal type="string">"&amp;lt;"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>escaped</name> <operator>=</operator> <literal type="string">"&amp;gt;"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>escaped</name> <operator>=</operator> <literal type="string">"&amp;quot;"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">6</literal></expr>;</return>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>escaped</name> <operator>=</operator> <literal type="string">"&amp;#039;"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">6</literal></expr>;</return>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>escaped</name> <operator>=</operator> <literal type="string">"&amp;amp;"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">5</literal></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>char</name> <modifier>*</modifier></type>
<name>evhttp_htmlescape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>html</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>old_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped_html</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>html</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>old_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>replaced</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>replace_size</name> <init>= <expr><call><name>html_replace</name><argument_list>(<argument><expr><name><name>html</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replaced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>replace_size</name> <operator>&gt;</operator> <name>EV_SIZE_MAX</name> <operator>-</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: html_replace overflow"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_size</name> <operator>+=</operator> <name>replace_size</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>==</operator> <name>EV_SIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>escaped_html</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>new_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>escaped_html</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malloc(%lu)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>new_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>old_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>replaced</name> <init>= <expr><operator>&amp;</operator><name><name>html</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>html_replace</name><argument_list>(<argument><expr><name><name>html</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replaced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>replaced</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>escaped_html</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evhttp_method</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>evhttp_cmd_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVHTTP_REQ_GET</name></expr>:</case>
<expr_stmt><expr><name>method</name> <operator>=</operator> <literal type="string">"GET"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVHTTP_REQ_POST</name></expr>:</case>
<expr_stmt><expr><name>method</name> <operator>=</operator> <literal type="string">"POST"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVHTTP_REQ_HEAD</name></expr>:</case>
<expr_stmt><expr><name>method</name> <operator>=</operator> <literal type="string">"HEAD"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVHTTP_REQ_PUT</name></expr>:</case>
<expr_stmt><expr><name>method</name> <operator>=</operator> <literal type="string">"PUT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVHTTP_REQ_DELETE</name></expr>:</case>
<expr_stmt><expr><name>method</name> <operator>=</operator> <literal type="string">"DELETE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVHTTP_REQ_OPTIONS</name></expr>:</case>
<expr_stmt><expr><name>method</name> <operator>=</operator> <literal type="string">"OPTIONS"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVHTTP_REQ_TRACE</name></expr>:</case>
<expr_stmt><expr><name>method</name> <operator>=</operator> <literal type="string">"TRACE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVHTTP_REQ_CONNECT</name></expr>:</case>
<expr_stmt><expr><name>method</name> <operator>=</operator> <literal type="string">"CONNECT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVHTTP_REQ_PATCH</name></expr>:</case>
<expr_stmt><expr><name>method</name> <operator>=</operator> <literal type="string">"PATCH"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>method</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>method</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_response_needs_body</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name> <operator>!=</operator> <name>HTTP_NOCONTENT</name> <operator>&amp;&amp;</operator>
<name><name>req</name><operator>-&gt;</operator><name>response_code</name></name> <operator>!=</operator> <name>HTTP_NOTMODIFIED</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name> <operator>&lt;</operator> <literal type="number">100</literal> <operator>||</operator> <name><name>req</name><operator>-&gt;</operator><name>response_code</name></name> <operator>&gt;=</operator> <literal type="number">200</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EVHTTP_REQ_HEAD</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_write_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: preparing to write buffer\n"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>cb_arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>evhttp_write_cb</name></expr></argument>,
<argument><expr><name>evhttp_error_cb</name></expr></argument>,
<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_send_continue_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_send_continue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"HTTP/%d.%d 100 Continue\r\n\r\n"</literal></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>evhttp_send_continue_done</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>cb_arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>,
<argument><expr><name>evhttp_read_cb</name></expr></argument>,
<argument><expr><name>evhttp_write_cb</name></expr></argument>,
<argument><expr><name>evhttp_error_cb</name></expr></argument>,
<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_connected</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVCON_DISCONNECTED</name></expr>:</case>
<case>case <expr><name>EVCON_CONNECTING</name></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>EVCON_IDLE</name></expr>:</case>
<case>case <expr><name>EVCON_READING_FIRSTLINE</name></expr>:</case>
<case>case <expr><name>EVCON_READING_HEADERS</name></expr>:</case>
<case>case <expr><name>EVCON_READING_BODY</name></expr>:</case>
<case>case <expr><name>EVCON_READING_TRAILER</name></expr>:</case>
<case>case <expr><name>EVCON_WRITING</name></expr>:</case>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_make_header_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evhttp_remove_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Proxy-Connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>method</name> <operator>=</operator> <call><name>evhttp_method</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>method</name> <operator>=</operator> <literal type="string">"NULL"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%s %s HTTP/%d.%d\r\n"</literal></expr></argument>,
<argument><expr><name>method</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EVHTTP_REQ_POST</name> <operator>||</operator> <name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EVHTTP_REQ_PUT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>evhttp_find_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>size</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>EV_SIZE_FMT</name></expr></argument>,
<argument><expr><call><name>EV_SIZE_ARG</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_is_connection_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name><modifier>*</modifier></type> <name>headers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EVHTTP_PROXY_REQUEST</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="string">"Proxy-Connection"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>connection</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>connection</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_is_request_connection_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return
<expr><call><name>evhttp_is_connection_close</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>evhttp_is_connection_close</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_is_connection_keepalive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name><modifier>*</modifier></type> <name>headers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>connection</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>evutil_ascii_strncasecmp</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_maybe_add_date_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="string">"Date"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>evutil_date_rfc1123</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="string">"Date"</literal></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_maybe_add_content_length_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>content_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="string">"Transfer-Encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>evhttp_find_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>len</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>EV_SIZE_FMT</name></expr></argument>,
<argument><expr><call><name>EV_SIZE_ARG</name><argument_list>(<argument><expr><name>content_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_make_header_response</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_keepalive</name> <init>= <expr><call><name>evhttp_is_connection_keepalive</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"HTTP/%d.%d %d %s\r\n"</literal></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>response_code_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>major</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>minor</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_maybe_add_date_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>minor</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>is_keepalive</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>,
<argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>minor</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>||</operator> <name>is_keepalive</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>evhttp_response_needs_body</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>evhttp_maybe_add_content_length_header</name><argument_list>(
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>,
<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_response_needs_body</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>,
<argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>evcon</name><operator>-&gt;</operator><name>http_server</name><operator>-&gt;</operator><name>default_content_type</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>,
<argument><expr><literal type="string">"Content-Type"</literal></expr></argument>,
<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>http_server</name><operator>-&gt;</operator><name>default_content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_is_connection_close</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_remove_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_PROXY_REQUEST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>evhttp_remove_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Proxy-Connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<enum>enum <name>expect</name> <block>{ <decl><name>NO</name></decl>, <decl><name>CONTINUE</name></decl>, <decl><name>OTHER</name></decl> }</block>;</enum>
<function><type><specifier>static</specifier> <name><name>enum</name> <name>expect</name></name></type> <name>evhttp_have_expect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr> </then><else>: <expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>EVHTTP_REQUEST</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>REQ_VERSION_ATLEAST</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NO</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>evhttp_find_header</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"Expect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>expect</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NO</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>expect</name></expr></argument>, <argument><expr><literal type="string">"100-continue"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>CONTINUE</name></expr> </then><else>: <expr><name>OTHER</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_make_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyval</name></name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>EVHTTP_REQUEST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_make_header_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_make_header_response</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>header</argument>, <argument>req-&gt;output_headers</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\r\n"</literal></expr></argument>,
<argument><expr><name><name>header</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_have_expect</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONTINUE</name> <operator>&amp;&amp;</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_connection_set_max_headers_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name>ev_ssize_t</name></type> <name>new_max_headers_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_max_headers_size</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>max_headers_size</name></name> <operator>=</operator> <name>EV_SIZE_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>max_headers_size</name></name> <operator>=</operator> <name>new_max_headers_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>evhttp_connection_set_max_body_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name><modifier>*</modifier></type> <name>evcon</name></decl></parameter>,
<parameter><decl><type><name>ev_ssize_t</name></type> <name>new_max_body_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_max_body_size</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>max_body_size</name></name> <operator>=</operator> <name>EV_UINT64_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>max_body_size</name></name> <operator>=</operator> <name>new_max_body_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_connection_incoming_fail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>evhttp_request_error</name></name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVREQ_HTTP_DATA_TOO_LONG</name></expr>:</case>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name> <operator>=</operator> <name>HTTP_ENTITYTOOLARGE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name> <operator>=</operator> <name>HTTP_BADREQUEST</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVREQ_HTTP_TIMEOUT</name></expr>:</case>
<case>case <expr><name>EVREQ_HTTP_EOF</name></expr>:</case>








<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>userdone</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>EVREQ_HTTP_INVALID_HEADER</name></expr>:</case>
<case>case <expr><name>EVREQ_HTTP_BUFFER_ERROR</name></expr>:</case>
<case>case <expr><name>EVREQ_HTTP_REQUEST_CANCEL</name></expr>:</case>
<case>case <expr><name>EVREQ_HTTP_DATA_TOO_LONG</name></expr>:</case>
<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call>(<modifier>*</modifier><name><name>req</name><operator>-&gt;</operator><name>cb</name></name>)<argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>cb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>evhttp_request_free_auto</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_USER_OWNED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_request_free_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_request_free_auto</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>evhttp_connection_fail_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>evhttp_request_error</name></name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>errsave</name> <init>= <expr><call><name>EVUTIL_SOCKET_ERROR</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name><modifier>*</modifier></type> <name>req</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>error_cb</name>)<parameter_list>(<parameter><decl><type><name><name>enum</name> <name>evhttp_request_error</name></name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>error_cb_arg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>req</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_CON_INCOMING</name></expr>)</condition> <block>{<block_content>








<if_stmt><if>if <condition>(<expr><call><name>evhttp_connection_incoming_fail</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error_cb</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>error_cb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error_cb_arg</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>cb_arg</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>EVREQ_HTTP_REQUEST_CANCEL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>cb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cb_arg</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>cb_arg</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cb_arg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><call><name>evhttp_request_free_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_connection_reset_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_connect_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>EVUTIL_SET_SOCKET_ERROR</name><argument_list>(<argument><expr><name>errsave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>error_cb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error_cb</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>error_cb_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>cb</name>)<argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cb_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_write_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>evcon</name><operator>-&gt;</operator><name>cb</name></name>)<argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>cb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_connection_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>con_outgoing</name> <init>= <expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_CON_OUTGOING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>free_evcon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>con_outgoing</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>need_close</name> <init>= <expr><call><name>evhttp_is_request_connection_close</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_IDLE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>need_close</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_reset_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evhttp_connected</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_connect_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_request_dispatch</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>need_close</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>evhttp_connection_start_detectclose</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_CON_AUTOFREE</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>free_evcon</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_WRITING</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call>(<modifier>*</modifier><name><name>req</name><operator>-&gt;</operator><name>cb</name></name>)<argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>cb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>con_outgoing</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_request_free_auto</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>free_evcon</name> <operator>&amp;&amp;</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name><name>enum</name> <name>message_read_status</name></name></type>
<name>evhttp_handle_chunked_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>DATA_CORRUPTED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buflen</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;</operator> <name>EV_SSIZE_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>DATA_CORRUPTED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ev_int64_t</name></type> <name>ntoread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ntoread</name> <operator>=</operator> <call><name>evutil_strtoll</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>endp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>endp</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator>
<name>ntoread</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>DATA_CORRUPTED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ev_uint64_t</name><operator>)</operator><name>ntoread</name> <operator>&gt;</operator> <name>EV_SIZE_MAX</name> <operator>-</operator> <name><name>req</name><operator>-&gt;</operator><name>body_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>DATA_CORRUPTED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>body_size</name></name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ntoread</name> <operator>&gt;</operator> <name><name>req</name><operator>-&gt;</operator><name>evcon</name><operator>-&gt;</operator><name>max_body_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Request body is too long"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DATA_TOO_LONG</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>body_size</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ntoread</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>=</operator> <name>ntoread</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>ALL_DATA_READ</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>&gt;</operator> <name>EV_SSIZE_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>DATA_CORRUPTED</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>buflen</name> <operator>&lt;</operator> <operator>(</operator><name>ev_uint64_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>MORE_DATA_EXPECTED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>evbuffer_remove_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>chunk_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVHTTP_REQ_DEFER_FREE</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>req</name><operator>-&gt;</operator><name>chunk_cb</name></name>)<argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>cb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>,
<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVHTTP_REQ_DEFER_FREE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_REQ_NEEDS_FREE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>REQUEST_CANCELED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>MORE_DATA_EXPECTED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_read_trailer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>evhttp_parse_headers_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DATA_CORRUPTED</name></expr>:</case>
<case>case <expr><name>DATA_TOO_LONG</name></expr>:</case>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_DATA_TOO_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALL_DATA_READ</name></expr>:</case>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_done</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MORE_DATA_EXPECTED</name></expr>:</case>
<case>case <expr><name>REQUEST_CANCELED</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_lingering_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>body_size</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Request body is too long, left "</literal> <name>EV_I64_FMT</name><operator>,</operator>
<call><name>EV_I64_ARG</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_DATA_TOO_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_lingering_fail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_CON_LINGERING_CLOSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_lingering_close</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_DATA_TOO_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_read_body</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>chunked</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>evhttp_handle_chunked_read</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALL_DATA_READ</name></expr>:</case>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_READING_TRAILER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_read_trailer</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DATA_CORRUPTED</name></expr>:</case>
<case>case <expr><name>DATA_TOO_LONG</name></expr>:</case>

<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>,
<argument><expr><name>EVREQ_HTTP_DATA_TOO_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>REQUEST_CANCELED</name></expr>:</case>

<expr_stmt><expr><call><name>evhttp_request_free_auto</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>MORE_DATA_EXPECTED</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>body_size</name></name> <operator>+</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name><name>req</name><operator>-&gt;</operator><name>body_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_INVALID_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>body_size</name></name> <operator>+=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>chunk_cb</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>body_size</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_remove_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>body_size</name></name> <operator>&gt;</operator> <name><name>req</name><operator>-&gt;</operator><name>evcon</name><operator>-&gt;</operator><name>max_body_size</name></name> <operator>||</operator>
<operator>(</operator><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>chunked</name></name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>&gt;</operator> <name><name>req</name><operator>-&gt;</operator><name>evcon</name><operator>-&gt;</operator><name>max_body_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>evhttp_lingering_fail</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>chunk_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVHTTP_REQ_DEFER_FREE</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>req</name><operator>-&gt;</operator><name>chunk_cb</name></name>)<argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>cb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVHTTP_REQ_DEFER_FREE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>,
<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_REQ_NEEDS_FREE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_request_free_auto</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_connection_done</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_deferred_queue</name><parameter_list>(<parameter><type><name>evcon</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((evcon)-&gt;base)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_read_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>event_deferred_cb_cancel_</name><argument_list>(<argument><expr><call><name>get_deferred_queue</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>read_more_deferred_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVCON_READING_FIRSTLINE</name></expr>:</case>
<expr_stmt><expr><call><name>evhttp_read_firstline</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<break>break;</break>
<case>case <expr><name>EVCON_READING_HEADERS</name></expr>:</case>
<expr_stmt><expr><call><name>evhttp_read_header</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<break>break;</break>
<case>case <expr><name>EVCON_READING_BODY</name></expr>:</case>
<expr_stmt><expr><call><name>evhttp_read_body</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<break>break;</break>
<case>case <expr><name>EVCON_READING_TRAILER</name></expr>:</case>
<expr_stmt><expr><call><name>evhttp_read_trailer</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVCON_IDLE</name></expr>:</case>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total_len</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: read "</literal><name>EV_SIZE_FMT</name>
<literal type="string">" bytes in EVCON_IDLE state,"</literal>
<literal type="string">" resetting connection"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <call><name>EV_SIZE_ARG</name><argument_list>(<argument><expr><name>total_len</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>evhttp_connection_reset_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>EVCON_DISCONNECTED</name></expr>:</case>
<case>case <expr><name>EVCON_CONNECTING</name></expr>:</case>
<case>case <expr><name>EVCON_WRITING</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: illegal connection state %d"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_deferred_read_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evhttp_read_cb</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_write_connectioncb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>req</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>EVCON_WRITING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>EVHTTP_RESPONSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_start_read_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>evhttp_connection_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_connected</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>evcon</name><operator>-&gt;</operator><name>closecb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>evcon</name><operator>-&gt;</operator><name>closecb</name></name>)<argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>closecb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<while>while <condition>(<expr><operator>(</operator><name>req</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_request_free_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>http_server</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>evcon</name><operator>-&gt;</operator><name>http_server</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>connections</name></name></expr></argument>, <argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>event_initialized</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>retry_ev</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>retry_ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_unassign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>retry_ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>event_deferred_cb_cancel_</name><argument_list>(<argument><expr><call><name>get_deferred_queue</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>read_more_deferred_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>bufferevent_getfd</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EVUTIL_SHUT_WR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>bufferevent_get_options_</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>BEV_OPT_CLOSE_ON_FREE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>bind_address</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bind_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>address</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_connection_free_on_completion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVHTTP_CON_AUTOFREE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_connection_set_local_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>EVCON_DISCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>bind_address</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bind_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>evcon</name><operator>-&gt;</operator><name>bind_address</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_connection_set_local_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>EVCON_DISCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>bind_port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_request_dispatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name><modifier>*</modifier></type> <name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>evhttp_connection_stop_detectclose</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>EVCON_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_WRITING</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_make_header</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_write_buffer</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>evhttp_write_connectioncb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>evhttp_connection_reset_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>












<expr_stmt><expr><call><name>bufferevent_disable_hard_</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>bufferevent_getfd</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_connected</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>evcon</name><operator>-&gt;</operator><name>closecb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>evcon</name><operator>-&gt;</operator><name>closecb</name></name>)<argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>closecb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EVUTIL_SHUT_WR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bufferevent_setfd</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>err</name> <operator>&amp;&amp;</operator> <literal type="string">"drain output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>err</name> <operator>&amp;&amp;</operator> <literal type="string">"drain input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVHTTP_CON_READING_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_DISCONNECTED</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_connection_start_detectclose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVHTTP_CON_CLOSEDETECT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_connection_stop_detectclose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVHTTP_CON_CLOSEDETECT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_connection_retry</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_DISCONNECTED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_connect_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_connection_cb_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evcon_requestq</name></name></type> <name>requests</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evhttp_connection_reset_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>retry_max</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>evcon</name><operator>-&gt;</operator><name>retry_cnt</name></name> <operator>&lt;</operator> <name><name>evcon</name><operator>-&gt;</operator><name>retry_max</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv_retry</name> <init>= <expr><name><name>evcon</name><operator>-&gt;</operator><name>initial_retry_timeout</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evtimer_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>retry_ev</name></name></expr></argument>, <argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>evhttp_connection_retry</name></expr></argument>, <argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>evcon</name><operator>-&gt;</operator><name>retry_cnt</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tv_retry</name><operator>.</operator><name>tv_usec</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv_retry</name><operator>.</operator><name>tv_usec</name></name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tv_retry</name><operator>.</operator><name>tv_usec</name></name> <operator>-=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv_retry</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tv_retry</name><operator>.</operator><name>tv_sec</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv_retry</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <literal type="number">3600</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tv_retry</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">3600</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv_retry</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>retry_ev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_retry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>retry_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>requests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>request</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>requests</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<while>while <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>requests</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>request</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>requests</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>requests</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>evcon</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>request</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>cb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_request_free_auto</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_connection_read_on_write_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_CON_READING_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVHTTP_CON_READING_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>EVHTTP_RESPONSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_unfreeze</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_freeze</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_start_read_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVHTTP_CON_READING_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_error_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>bufferevent_getfd</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVCON_CONNECTING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: connection timeout for \"%s:%d\" on "</literal>
<name>EV_SOCK_FMT</name><operator>,</operator>
<name>__func__</name><operator>,</operator> <name><name>evcon</name><operator>-&gt;</operator><name>address</name></name><operator>,</operator> <name><name>evcon</name><operator>-&gt;</operator><name>port</name></name><operator>,</operator>
<call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_cb_cleanup</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>EVCON_READING_BODY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>chunked</name></name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>what</name> <operator>==</operator> <operator>(</operator><name>BEV_EVENT_READING</name><operator>|</operator><name>BEV_EVENT_EOF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evhttp_connection_done</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>EVCON_DISCONNECTED</name></expr>:</case>
<case>case <expr><name>EVCON_IDLE</name></expr>:</case>
<case>case <expr><name>EVCON_READING_FIRSTLINE</name></expr>:</case>
<case>case <expr><name>EVCON_READING_HEADERS</name></expr>:</case>
<case>case <expr><name>EVCON_READING_TRAILER</name></expr>:</case>
<case>case <expr><name>EVCON_WRITING</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>




<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_CON_CLOSEDETECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVHTTP_CON_CLOSEDETECT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>http_server</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>EVCON_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_reset_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_CON_OUTGOING</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_CON_AUTOFREE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>what</name> <operator>&amp;</operator> <operator>(</operator><name>BEV_EVENT_EOF</name><operator>|</operator><name>BEV_EVENT_ERROR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_WRITING</name> <operator>&amp;&amp;</operator>
<name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_CON_READ_ON_WRITE_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_read_on_write_error</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>what</name> <operator>==</operator> <name>BEV_EVENT_CONNECTED</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_BUFFER_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_connection_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>errsz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>bufferevent_getfd</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_CONNECTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ECONNREFUSED</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>evhttp_error_cb</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: bufferevent_getfd returned -1"</literal><operator>,</operator>
<name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>errsz</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: getsockopt for \"%s:%d\" on "</literal><name>EV_SOCK_FMT</name><operator>,</operator>
<name>__func__</name><operator>,</operator> <name><name>evcon</name><operator>-&gt;</operator><name>address</name></name><operator>,</operator> <name><name>evcon</name><operator>-&gt;</operator><name>port</name></name><operator>,</operator>
<call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: connect failed for \"%s:%d\" on "</literal>
<name>EV_SOCK_FMT</name><literal type="string">": %s"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name><name>evcon</name><operator>-&gt;</operator><name>address</name></name><operator>,</operator> <name><name>evcon</name><operator>-&gt;</operator><name>port</name></name><operator>,</operator>
<call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name>evutil_socket_error_to_string</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: connected to \"%s:%d\" on "</literal><name>EV_SOCK_FMT</name><literal type="string">"\n"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name><name>evcon</name><operator>-&gt;</operator><name>address</name></name><operator>,</operator> <name><name>evcon</name><operator>-&gt;</operator><name>port</name></name><operator>,</operator>
<call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>retry_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_IDLE</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>,
<argument><expr><name>evhttp_read_cb</name></expr></argument>,
<argument><expr><name>evhttp_write_cb</name></expr></argument>,
<argument><expr><name>evhttp_error_cb</name></expr></argument>,
<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evutil_timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>read_tv</name> <init>= <expr><block>{ <expr><name>HTTP_READ_TIMEOUT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>write_tv</name> <init>= <expr><block>{ <expr><name>HTTP_WRITE_TIMEOUT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bufferevent_set_timeouts</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_set_timeouts</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>evhttp_request_dispatch</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>evhttp_connection_cb_cleanup</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_valid_response_code</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_parse_http_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="string">"HTTP/%d.%d%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: bad version %s on message %p from %s"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name>version</name><operator>,</operator> <name>req</name><operator>,</operator> <name><name>req</name><operator>-&gt;</operator><name>remote_host</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>major</name></name> <operator>=</operator> <name>major</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>minor</name></name> <operator>=</operator> <name>minor</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_parse_response_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>readable</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>protocol</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>readable</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_parse_http_version</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evhttp_valid_response_code</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: bad response code \"%s\""</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name>number</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>response_code_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>response_code_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>response_code_line</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>readable</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_parse_request_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>method_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>evhttp_cmd_type</name></name></type> <name>type</name></decl>;</decl_stmt>


<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>method_len</name> <operator>=</operator> <operator>(</operator><name>uri</name> <operator>-</operator> <name>method</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EVHTTP_REQ_UNKNOWN_</name></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name>method_len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>






<if_stmt><if>if <condition>(<expr><name><name>method</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'T'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>method</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>



<if_stmt><if>if <condition>(<expr><name><name>method</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EVHTTP_REQ_GET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>


<if_stmt><if>if <condition>(<expr><name><name>method</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EVHTTP_REQ_PUT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>

<switch>switch <condition>(<expr><operator>*</operator><name>method</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>method</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'O'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EVHTTP_REQ_POST</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>method</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EVHTTP_REQ_HEAD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>

<switch>switch <condition>(<expr><operator>*</operator><name>method</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>method</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'H'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EVHTTP_REQ_PATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>method</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EVHTTP_REQ_TRACE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>method</name> <operator>!=</operator> <literal type="char">'D'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>method</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EVHTTP_REQ_DELETE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>

<switch>switch <condition>(<expr><operator>*</operator><name>method</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>method</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'O'</literal> <operator>&amp;&amp;</operator>
<name><name>method</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'I'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EVHTTP_REQ_OPTIONS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>method</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal> <operator>&amp;&amp;</operator>
<name><name>method</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal> <operator>&amp;&amp;</operator> <name><name>method</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'O'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EVHTTP_REQ_CONNECT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>type</name> <operator>==</operator> <name>EVHTTP_REQ_UNKNOWN_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: bad method %s on request %p from %s"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name>method</name><operator>,</operator> <name>req</name><operator>,</operator> <name><name>req</name><operator>-&gt;</operator><name>remote_host</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_parse_http_version</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>uri</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: mm_strdup"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name> <operator>=</operator> <call><name>evhttp_uri_parse_with_flags</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>,
<argument><expr><name>EVHTTP_URI_NONCONFORMANT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>scheme</name> <operator>=</operator> <call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hostname</name> <operator>=</operator> <call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scheme</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<name>hostname</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>evhttp_find_vhost</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name><operator>-&gt;</operator><name>http_server</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVHTTP_PROXY_REQUEST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evhttp_find_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyval</name></name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>header</argument>, <argument>headers</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_clear_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyval</name></name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>header</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>header</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>header</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>evhttp_remove_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyval</name></name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>header</argument>, <argument>headers</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_header_is_valid_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_add_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: key: %s val: %s\n"</literal><operator>,</operator> <name>__func__</name><operator>,</operator> <name>key</name><operator>,</operator> <name>value</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: dropping illegal header key\n"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evhttp_header_is_valid_value</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: dropping illegal header value\n"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>evhttp_add_header_internal</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_add_header_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyval</name></name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evkeyval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>











<function><type><name><name>enum</name> <name>message_read_status</name></name></type>
<name>evhttp_parse_firstline_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>message_read_status</name></name></type> <name>status</name> <init>= <expr><name>ALL_DATA_READ</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>line_length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line_length</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>req</name><operator>-&gt;</operator><name>evcon</name><operator>-&gt;</operator><name>max_headers_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DATA_TOO_LONG</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>MORE_DATA_EXPECTED</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name>line_length</name> <operator>&gt;</operator> <name><name>req</name><operator>-&gt;</operator><name>evcon</name><operator>-&gt;</operator><name>max_headers_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DATA_TOO_LONG</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>headers_size</name></name> <operator>=</operator> <name>line_length</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVHTTP_REQUEST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_parse_request_line</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>DATA_CORRUPTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EVHTTP_RESPONSE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_parse_response_line</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>DATA_CORRUPTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>DATA_CORRUPTED</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_append_to_last_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyval</name></name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>TAILQ_LAST</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>evkeyvalq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>old_len</name></decl>, <decl><type ref="prev"/><name>line_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>line</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>evutil_rtrim_lws_</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>old_len</name> <operator>+</operator> <name>line_len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>newval</name><index>[<expr><name>old_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newval</name> <operator>+</operator> <name>old_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>line_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>message_read_status</name></name></type>
<name>evhttp_parse_headers_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>message_read_status</name></name></type> <name>errcode</name> <init>= <expr><name>DATA_CORRUPTED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>message_read_status</name></name></type> <name>status</name> <init>= <expr><name>MORE_DATA_EXPECTED</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evkeyvalq</name></name><modifier>*</modifier></type> <name>headers</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>line_length</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line_length</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>skey</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>svalue</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>headers_size</name></name> <operator>+=</operator> <name>line_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>req</name><operator>-&gt;</operator><name>headers_size</name></name> <operator>&gt;</operator> <name><name>req</name><operator>-&gt;</operator><name>evcon</name><operator>-&gt;</operator><name>max_headers_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errcode</name> <operator>=</operator> <name>DATA_TOO_LONG</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>ALL_DATA_READ</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_append_to_last_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>svalue</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skey</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>svalue</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>svalue</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>svalue</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>svalue</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_rtrim_lws_</name><argument_list>(<argument><expr><name>svalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>, <argument><expr><name>svalue</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>MORE_DATA_EXPECTED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>req</name><operator>-&gt;</operator><name>headers_size</name></name> <operator>+</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>req</name><operator>-&gt;</operator><name>evcon</name><operator>-&gt;</operator><name>max_headers_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DATA_TOO_LONG</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>errcode</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_get_body_length</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection</name></decl>;</decl_stmt>

<expr_stmt><expr><name>content_length</name> <operator>=</operator> <call><name>evhttp_find_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>connection</name> <operator>=</operator> <call><name>evhttp_find_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>content_length</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>connection</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>content_length</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><literal type="string">"Close"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: we got no content length, but the "</literal>
<literal type="string">"server wants to keep the connection open: %s."</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>content_length</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_int64_t</name></type> <name>ntoread</name> <init>= <expr><call><name>evutil_strtoll</name><argument_list>(<argument><expr><name>content_length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>content_length</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>endp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>ntoread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: illegal content length: %s"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name>content_length</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>=</operator> <name>ntoread</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: bytes to read: "</literal><name>EV_I64_FMT</name><literal type="string">" (in buffer "</literal><name>EV_SIZE_FMT</name><literal type="string">")\n"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <call><name>EV_I64_ARG</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name>EV_SIZE_ARG</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_method_may_have_body</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>evhttp_cmd_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVHTTP_REQ_POST</name></expr>:</case>
<case>case <expr><name>EVHTTP_REQ_PUT</name></expr>:</case>
<case>case <expr><name>EVHTTP_REQ_PATCH</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>EVHTTP_REQ_TRACE</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>EVHTTP_REQ_GET</name></expr>:</case>
<case>case <expr><name>EVHTTP_REQ_HEAD</name></expr>:</case>
<case>case <expr><name>EVHTTP_REQ_DELETE</name></expr>:</case>
<case>case <expr><name>EVHTTP_REQ_OPTIONS</name></expr>:</case>
<case>case <expr><name>EVHTTP_REQ_CONNECT</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_get_body</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xfer_enc</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>EVHTTP_REQUEST</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>evhttp_method_may_have_body</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_done</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_READING_BODY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xfer_enc</name> <operator>=</operator> <call><name>evhttp_find_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Transfer-Encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xfer_enc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>xfer_enc</name></expr></argument>, <argument><expr><literal type="string">"chunked"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>chunked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_get_body_length</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_INVALID_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>EVHTTP_REQUEST</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>evhttp_connection_done</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<switch>switch <condition>(<expr><call><name>evhttp_have_expect</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONTINUE</name></expr>:</case>






<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>evcon</name><operator>-&gt;</operator><name>max_body_size</name></name> <operator>&lt;=</operator> <name>EV_INT64_MAX</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ev_uint64_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>ntoread</name></name> <operator>&gt;</operator> <name><name>req</name><operator>-&gt;</operator><name>evcon</name><operator>-&gt;</operator><name>max_body_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_lingering_fail</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_send_continue</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OTHER</name></expr>:</case>
<expr_stmt><expr><call><name>evhttp_send_error</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_EXPECTATIONFAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>NO</name></expr>:</case> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>evhttp_read_body</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_read_firstline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>message_read_status</name></name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evhttp_parse_firstline_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>DATA_CORRUPTED</name> <operator>||</operator> <name>res</name> <operator>==</operator> <name>DATA_TOO_LONG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: bad header lines on "</literal><name>EV_SOCK_FMT</name><literal type="string">"\n"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_INVALID_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>res</name> <operator>==</operator> <name>MORE_DATA_EXPECTED</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_READING_HEADERS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_read_header</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>message_read_status</name></name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evhttp_parse_headers_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>DATA_CORRUPTED</name> <operator>||</operator> <name>res</name> <operator>==</operator> <name>DATA_TOO_LONG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: bad header lines on "</literal><name>EV_SOCK_FMT</name><literal type="string">"\n"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_INVALID_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>res</name> <operator>==</operator> <name>MORE_DATA_EXPECTED</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>header_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>req</name><operator>-&gt;</operator><name>header_cb</name></name>)<argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>cb_arg</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVHTTP_REQUEST</name></expr>:</case>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: checking for post data on "</literal><name>EV_SOCK_FMT</name><literal type="string">"\n"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_get_body</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EVHTTP_RESPONSE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name> <operator>==</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_start_write_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evhttp_response_needs_body</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: skipping body for code %d\n"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name><name>req</name><operator>-&gt;</operator><name>response_code</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_done</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: start of read body for %s on "</literal>
<name>EV_SOCK_FMT</name><literal type="string">"\n"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name><name>req</name><operator>-&gt;</operator><name>remote_host</name></name><operator>,</operator> <call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_get_body</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: bad header on "</literal><name>EV_SOCK_FMT</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_INVALID_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block></function>











<function><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type>
<name>evhttp_connection_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type>
<name>evhttp_connection_base_bufferevent_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dnsbase</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name><modifier>*</modifier></type> <name>bev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Attempting connection to %s:%d\n"</literal><operator>,</operator> <name>address</name><operator>,</operator> <name>port</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>evcon</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evhttp_connection</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: calloc failed"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>max_headers_size</name></name> <operator>=</operator> <name>EV_SIZE_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>max_body_size</name></name> <operator>=</operator> <name>EV_SIZE_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>retry_cnt</name></name> <operator>=</operator> <name><name>evcon</name><operator>-&gt;</operator><name>retry_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>evcon</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup failed"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bev</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: bufferevent_socket_new failed"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>evhttp_read_cb</name></expr></argument>, <argument><expr><name>evhttp_write_cb</name></expr></argument>, <argument><expr><name>evhttp_error_cb</name></expr></argument>, <argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name> <operator>=</operator> <name>bev</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_DISCONNECTED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>initial_retry_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>initial_retry_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bufferevent_get_base</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_base_set</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_deferred_cb_init_</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>read_more_deferred_cb</name></name></expr></argument>,
<argument><expr><call><name>bufferevent_get_priority</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>evhttp_deferred_read_cb</name></expr></argument>, <argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>dns_base</name></name> <operator>=</operator> <name>dnsbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>evcon</name><operator>)</operator></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bufferevent</name></name><modifier>*</modifier></type> <name>evhttp_connection_get_bufferevent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type>
<name>evhttp_connection_get_server</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>evcon</name><operator>-&gt;</operator><name>http_server</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type>
<name>evhttp_connection_base_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dnsbase</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evhttp_connection_base_bufferevent_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>dnsbase</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>evhttp_connection_set_family</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>family</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>evhttp_connection_set_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>avail_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>avail_flags</name> <operator>|=</operator> <name>EVHTTP_CON_REUSE_CONNECTED_ADDR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail_flags</name> <operator>|=</operator> <name>EVHTTP_CON_READ_ON_WRITE_ERROR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>avail_flags</name> <operator>||</operator> <name>flags</name> <operator>&gt;</operator> <name>EVHTTP_CON_PUBLIC_FLAGS_END</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>avail_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_connection_set_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>base</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>EVCON_DISCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_base_set</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_connection_set_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>timeout_in_secs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>timeout_in_secs</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_set_timeout_tv</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout_in_secs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_set_timeout_tv</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_connection_set_timeout_tv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name><modifier>*</modifier></type> <name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>*</operator><name>tv</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_set_timeouts</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>read_tv</name> <init>= <expr><block>{ <expr><name>HTTP_READ_TIMEOUT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>write_tv</name> <init>= <expr><block>{ <expr><name>HTTP_WRITE_TIMEOUT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_set_timeouts</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_connection_set_initial_retry_tv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>initial_retry_timeout</name></name> <operator>=</operator> <operator>*</operator><name>tv</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>initial_retry_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>initial_retry_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_connection_set_retries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>retry_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>retry_max</name></name> <operator>=</operator> <name>retry_max</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_connection_set_closecb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>closecb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>closecb_arg</name></name> <operator>=</operator> <name>cbarg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_connection_get_peer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>address</name> <operator>=</operator> <name><name>evcon</name><operator>-&gt;</operator><name>address</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <name><name>evcon</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name><modifier>*</modifier></type>
<name>evhttp_connection_get_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>bufferevent_socket_get_conn_address_</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_connection_connect_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_state</name> <init>= <expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><name><name>evcon</name><operator>-&gt;</operator><name>address</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><call><name>evhttp_connection_get_addr</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>EVCON_CONNECTING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evhttp_connection_reset_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_CON_INCOMING</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVHTTP_CON_OUTGOING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>bind_address</name></name> <operator>||</operator> <name><name>evcon</name><operator>-&gt;</operator><name>bind_port</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>bind_socket</name><argument_list>(
<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bind_address</name></name></expr></argument>, <argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bind_port</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: failed to bind to \"%s\""</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name><name>evcon</name><operator>-&gt;</operator><name>bind_address</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_setfd</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_setfd</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> ,
<argument><expr><name>NULL</name></expr></argument> ,
<argument><expr><name>evhttp_connection_cb</name></expr></argument>,
<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evutil_timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>conn_tv</name> <init>= <expr><block>{ <expr><name>HTTP_CONNECT_TIMEOUT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bufferevent_set_timeouts</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn_tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_set_timeouts</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_CONNECTING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_CON_REUSE_CONNECTED_ADDR</name> <operator>&amp;&amp;</operator>
<name>sa</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>socklen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>socklen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>bufferevent_socket_connect</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>bufferevent_socket_connect_hostname</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>,
<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>dns_base</name></name></expr></argument>, <argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>old_state</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_sock_warn</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="string">"%s: connection to \"%s\" failed"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>evhttp_connection_cb_cleanup</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>evhttp_make_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>evhttp_cmd_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>EVHTTP_REQUEST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>uri</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_request_free_auto</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>major</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>minor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>major</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>minor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name> <operator>=</operator> <name>evcon</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_REQ_OWN_CONNECTION</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evhttp_connected</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>evhttp_connection_connect_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_request_dispatch</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_cancel_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>evcon</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>req</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>,
<argument><expr><name>EVREQ_HTTP_REQUEST_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evhttp_request_free_auto</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>evhttp_start_read_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_READING_FIRSTLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>,
<argument><expr><name>evhttp_read_cb</name></expr></argument>,
<argument><expr><name>evhttp_write_cb</name></expr></argument>,
<argument><expr><name>evhttp_error_cb</name></expr></argument>,
<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_deferred_cb_schedule_</name><argument_list>(<argument><expr><call><name>get_deferred_queue</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>read_more_deferred_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_start_write_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_WRITING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_write_buffer</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>evhttp_write_connectioncb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_send_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>need_close</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>on_complete_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>on_complete_cb</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>on_complete_cb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>need_close</name> <operator>=</operator>
<operator>(</operator><call><name>REQ_VERSION_BEFORE</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>evhttp_is_connection_keepalive</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<call><name>evhttp_is_request_connection_close</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_REQ_OWN_CONNECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_close</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_associate_new_request_with_connection</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>evhttp_send_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_FORMAT</name></cpp:macro> <cpp:value>"&lt;HTML&gt;&lt;HEAD&gt;\n" "&lt;TITLE&gt;%d %s&lt;/TITLE&gt;\n" "&lt;/HEAD&gt;&lt;BODY&gt;\n" "&lt;H1&gt;%s&lt;/H1&gt;\n" "&lt;/BODY&gt;&lt;/HTML&gt;\n"</cpp:value></cpp:define>





<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>evhttp_response_phrase_internal</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evhttp_response_code_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ERR_FORMAT</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_send_page_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ERR_FORMAT</name></cpp:undef>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>evhttp_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>databuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>evcon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>userdone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>databuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>, <argument><expr><name>databuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>evhttp_make_header</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_write_buffer</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>evhttp_send_done</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_send_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>databuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evhttp_response_code_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_send</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>databuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_send_reply_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evhttp_response_code_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>REQ_VERSION_ATLEAST</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>evhttp_response_needs_body</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Transfer-Encoding"</literal></expr></argument>,
<argument><expr><literal type="string">"chunked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>chunked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>chunked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>evhttp_make_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_write_buffer</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_send_reply_chunk_with_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>databuf</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>evcon</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>databuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evhttp_response_needs_body</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>chunked</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%x\r\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>databuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>databuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>chunked</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evhttp_write_buffer</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_send_reply_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>databuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evhttp_send_reply_chunk_with_cb</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>databuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>evhttp_send_reply_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>evcon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>userdone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>chunked</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"0\r\n\r\n"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_write_buffer</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr></argument>, <argument><expr><name>evhttp_send_done</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>chunked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evhttp_send_done</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>evhttp_send_done</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>cb_arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>informational_phrases</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Continue"</literal></expr>,
<expr><literal type="string">"Switching Protocols"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>success_phrases</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"OK"</literal></expr>,
<expr><literal type="string">"Created"</literal></expr>,
<expr><literal type="string">"Accepted"</literal></expr>,
<expr><literal type="string">"Non-Authoritative Information"</literal></expr>,
<expr><literal type="string">"No Content"</literal></expr>,
<expr><literal type="string">"Reset Content"</literal></expr>,
<expr><literal type="string">"Partial Content"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>redirection_phrases</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Multiple Choices"</literal></expr>,
<expr><literal type="string">"Moved Permanently"</literal></expr>,
<expr><literal type="string">"Found"</literal></expr>,
<expr><literal type="string">"See Other"</literal></expr>,
<expr><literal type="string">"Not Modified"</literal></expr>,
<expr><literal type="string">"Use Proxy"</literal></expr>,
<expr><literal type="string">"Temporary Redirect"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>client_error_phrases</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Bad Request"</literal></expr>,
<expr><literal type="string">"Unauthorized"</literal></expr>,
<expr><literal type="string">"Payment Required"</literal></expr>,
<expr><literal type="string">"Forbidden"</literal></expr>,
<expr><literal type="string">"Not Found"</literal></expr>,
<expr><literal type="string">"Method Not Allowed"</literal></expr>,
<expr><literal type="string">"Not Acceptable"</literal></expr>,
<expr><literal type="string">"Proxy Authentication Required"</literal></expr>,
<expr><literal type="string">"Request Time-out"</literal></expr>,
<expr><literal type="string">"Conflict"</literal></expr>,
<expr><literal type="string">"Gone"</literal></expr>,
<expr><literal type="string">"Length Required"</literal></expr>,
<expr><literal type="string">"Precondition Failed"</literal></expr>,
<expr><literal type="string">"Request Entity Too Large"</literal></expr>,
<expr><literal type="string">"Request-URI Too Large"</literal></expr>,
<expr><literal type="string">"Unsupported Media Type"</literal></expr>,
<expr><literal type="string">"Requested range not satisfiable"</literal></expr>,
<expr><literal type="string">"Expectation Failed"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>server_error_phrases</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Internal Server Error"</literal></expr>,
<expr><literal type="string">"Not Implemented"</literal></expr>,
<expr><literal type="string">"Bad Gateway"</literal></expr>,
<expr><literal type="string">"Service Unavailable"</literal></expr>,
<expr><literal type="string">"Gateway Time-out"</literal></expr>,
<expr><literal type="string">"HTTP Version not supported"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>response_class</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_responses</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>responses</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEMBERSOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMBERSOF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(x)/sizeof(x[0]))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>response_class</name></name></type> <name><name>response_classes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"Informational"</literal></expr>, <expr><call><name>MEMBERSOF</name><argument_list>(<argument><expr><name>informational_phrases</name></expr></argument>)</argument_list></call></expr>, <expr><name>informational_phrases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Success"</literal></expr>, <expr><call><name>MEMBERSOF</name><argument_list>(<argument><expr><name>success_phrases</name></expr></argument>)</argument_list></call></expr>, <expr><name>success_phrases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Redirection"</literal></expr>, <expr><call><name>MEMBERSOF</name><argument_list>(<argument><expr><name>redirection_phrases</name></expr></argument>)</argument_list></call></expr>, <expr><name>redirection_phrases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Client Error"</literal></expr>, <expr><call><name>MEMBERSOF</name><argument_list>(<argument><expr><name>client_error_phrases</name></expr></argument>)</argument_list></call></expr>, <expr><name>client_error_phrases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Server Error"</literal></expr>, <expr><call><name>MEMBERSOF</name><argument_list>(<argument><expr><name>server_error_phrases</name></expr></argument>)</argument_list></call></expr>, <expr><name>server_error_phrases</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evhttp_response_phrase_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>klass</name> <init>= <expr><name>code</name> <operator>/</operator> <literal type="number">100</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subcode</name> <init>= <expr><name>code</name> <operator>%</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>klass</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>klass</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>MEMBERSOF</name><argument_list>(<argument><expr><name>response_classes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Unknown Status Class"</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>subcode</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>response_classes</name><index>[<expr><name>klass</name></expr>]</index></name><operator>.</operator><name>num_responses</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>response_classes</name><index>[<expr><name>klass</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>response_classes</name><index>[<expr><name>klass</name></expr>]</index></name><operator>.</operator><name><name>responses</name><index>[<expr><name>subcode</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_response_code_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>EVHTTP_RESPONSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>response_code_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>response_code_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>evhttp_response_phrase_internal</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>response_code_line</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>response_code_line</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_send_page_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>databuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>major</name></name> <operator>||</operator> <operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>minor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>major</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>minor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>kind</name></name> <operator>!=</operator> <name>EVHTTP_RESPONSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_response_code_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><literal type="string">"text/html"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_send</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>databuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>uri_chars</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_IS_UNRESERVED</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uri_chars[(unsigned char)(c)])</cpp:value></cpp:define>






<function><type><name>char</name> <modifier>*</modifier></type>
<name>evhttp_uriencode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>space_as_plus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>uri</name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <name>uri</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>uri</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&gt;=</operator> <name>EV_SSIZE_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uri</name> <operator>+</operator> <name>slen</name> <operator>&lt;</operator> <name>uri</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>uri</name> <operator>+</operator> <name>slen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>uri</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHAR_IS_UNRESERVED</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>space_as_plus</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%%%02X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>evhttp_encode_uri</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evhttp_uriencode</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>evhttp_decode_uri_internal</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decode_plus_ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decode_plus</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>decode_plus_ctl</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>uri</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>decode_plus_ctl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>decode_plus</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name>decode_plus</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <name>length</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator>
<call><name>EVUTIL_ISXDIGIT_</name><argument_list>(<argument><expr><name><name>uri</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>EVUTIL_ISXDIGIT_</name><argument_list>(<argument><expr><name><name>uri</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>uri</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>uri</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>j</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>evhttp_decode_uri</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malloc(%lu)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evhttp_decode_uri_internal</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>evhttp_uridecode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decode_plus</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malloc(%lu)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evhttp_decode_uri_internal</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name>decode_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size_out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size_out</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_parse_query_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_whole_uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>argument</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query_part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_whole_uri</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>evhttp_uri_parse</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uri</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>query_part</name> <operator>=</operator> <call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>query_part</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query_part</name> <operator>||</operator> <operator>!</operator><call><name>strlen</name><argument_list>(<argument><expr><name>query_part</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>query_part</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>argument</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>decoded_value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>argument</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>argument</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>key</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>decoded_value</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: mm_malloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evhttp_decode_uri_internal</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>decoded_value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Query Param: %s -&gt; %s\n"</literal><operator>,</operator> <name>key</name><operator>,</operator> <name>decoded_value</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header_internal</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>decoded_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>decoded_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uri</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_parse_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evhttp_parse_query_impl</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evhttp_parse_query_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evhttp_parse_query_impl</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>evhttp_cb</name></name> <modifier>*</modifier></type>
<name>evhttp_dispatch_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>httpcbq</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_cb</name></name> <modifier>*</modifier></type><name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>translated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>


<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>translated</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>evhttp_decode_uri_internal</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>translated</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>cb</argument>, <argument>callbacks</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><name>translated</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>translated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>cb</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>translated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>prefix_suffix_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ignorecase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><name>pattern</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<return>return <expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>;</return>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<while>while <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>prefix_suffix_match</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>ignorecase</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>name</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignorecase</name> <operator>||</operator>
<call><name>EVUTIL_TOLOWER_</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>EVUTIL_TOLOWER_</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>name</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>

</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_find_alias</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>outhttp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_server_alias</name></name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>vhost</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>alias</argument>, <argument>&amp;http-&gt;aliases</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>alias</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>outhttp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>outhttp</name> <operator>=</operator> <name>http</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>



<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>vhost</argument>, <argument>&amp;http-&gt;virtualhosts</argument>, <argument>next_vhost</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_alias</name><argument_list>(<argument><expr><name>vhost</name></expr></argument>, <argument><expr><name>outhttp</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_find_vhost</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>outhttp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>vhost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>oldhttp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_alias</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>outhttp</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>oldhttp</name> <operator>=</operator> <name>http</name></expr>;</expr_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>vhost</argument>, <argument>&amp;http-&gt;virtualhosts</argument>, <argument>next_vhost</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>prefix_suffix_match</name><argument_list>(<argument><expr><name><name>vhost</name><operator>-&gt;</operator><name>vhost_pattern</name></name></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>http</name> <operator>=</operator> <name>vhost</name></expr>;</expr_stmt>
<expr_stmt><expr><name>match_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block> while <condition>(<expr><name>oldhttp</name> <operator>!=</operator> <name>http</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>outhttp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>outhttp</name> <operator>=</operator> <name>http</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>match_found</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_handle_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_cb</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>userdone</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>req</name><operator>-&gt;</operator><name>uri</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_send_error</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>http</name><operator>-&gt;</operator><name>allowed_methods</name></name> <operator>&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Rejecting disallowed method %x (allowed: %x)\n"</literal><operator>,</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>type</name></name><operator>,</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>http</name><operator>-&gt;</operator><name>allowed_methods</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_send_error</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_NOTIMPLEMENTED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>hostname</name> <operator>=</operator> <call><name>evhttp_request_get_host</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hostname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_find_vhost</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>http</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cb</name> <operator>=</operator> <call><name>evhttp_dispatch_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>cb</name><operator>-&gt;</operator><name>cb</name></name>)<argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>cbarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>gencb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>http</name><operator>-&gt;</operator><name>gencb</name></name>)<argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>http</name><operator>-&gt;</operator><name>gencbarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_FORMAT</name></cpp:macro> <cpp:value>"&lt;html&gt;&lt;head&gt;" "&lt;title&gt;404 Not Found&lt;/title&gt;" "&lt;/head&gt;&lt;body&gt;" "&lt;h1&gt;Not Found&lt;/h1&gt;" "&lt;p&gt;The requested URL %s was not found on this server.&lt;/p&gt;""&lt;/body&gt;&lt;/html&gt;\n"
</cpp:value></cpp:define>





<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped_html</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>escaped_html</name> <operator>=</operator> <call><name>evhttp_htmlescape</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>escaped_html</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evhttp_response_code_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_NOTFOUND</name></expr></argument>, <argument><expr><literal type="string">"Not Found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ERR_FORMAT</name></expr></argument>, <argument><expr><name>escaped_html</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>escaped_html</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_send_page_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ERR_FORMAT</name></cpp:undef>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>accept_socket_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>listener</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>nfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>peer_sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peer_socklen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evhttp_get_request</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>peer_sa</name></expr></argument>, <argument><expr><name>peer_socklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_bind_socket</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>bound</name> <init>=
<expr><call><name>evhttp_bind_socket_with_handle</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bound</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type>
<name>evhttp_bind_socket_with_handle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>bound</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>bind_socket</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_sock_warn</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s: listen"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bound</name> <operator>=</operator> <call><name>evhttp_accept_socket_with_handle</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bound</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Bound to port %d - Awaiting connections ... "</literal><operator>,</operator>
<name>port</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>bound</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_accept_socket</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>bound</name> <init>=
<expr><call><name>evhttp_accept_socket_with_handle</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bound</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_foreach_bound_socket</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>,
<parameter><decl><type><name>evhttp_bound_socket_foreach_fn</name> <modifier>*</modifier></type><name>function</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argument</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>bound</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>bound</argument>, <argument>&amp;http-&gt;sockets</argument>, <argument>next</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><name>bound</name></expr></argument>, <argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type>
<name>evhttp_accept_socket_with_handle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>bound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>listener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>=
<expr><name>LEV_OPT_REUSEABLE</name><operator>|</operator><name>LEV_OPT_CLOSE_ON_EXEC</name><operator>|</operator><name>LEV_OPT_CLOSE_ON_FREE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>listener</name> <operator>=</operator> <call><name>evconnlistener_new</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>listener</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bound</name> <operator>=</operator> <call><name>evhttp_bind_listener</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evconnlistener_free</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>bound</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type>
<name>evhttp_bind_listener</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>listener</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>bound</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bound</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evhttp_bound_socket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bound</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bound</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>sockets</name></name></expr></argument>, <argument><expr><name>bound</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evconnlistener_set_cb</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><name>accept_socket_cb</name></expr></argument>, <argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bound</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>evutil_socket_t</name></type>
<name>evhttp_bound_socket_get_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>bound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evconnlistener_get_fd</name><argument_list>(<argument><expr><name><name>bound</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type>
<name>evhttp_bound_socket_get_listener</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>bound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>bound</name><operator>-&gt;</operator><name>listener</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_del_accept_socket</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>bound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>sockets</name></name></expr></argument>, <argument><expr><name>bound</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evconnlistener_free</name><argument_list>(<argument><expr><name><name>bound</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type>
<name>evhttp_new_object</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>http</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evhttp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_max_headers_size</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>EV_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_max_body_size</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>EV_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_default_content_type</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="string">"text/html; charset=ISO-8859-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_allowed_methods</name><argument_list>(<argument><expr><name>http</name></expr></argument>,
<argument><expr><name>EVHTTP_REQ_GET</name> <operator>|</operator>
<name>EVHTTP_REQ_POST</name> <operator>|</operator>
<name>EVHTTP_REQ_HEAD</name> <operator>|</operator>
<name>EVHTTP_REQ_PUT</name> <operator>|</operator>
<name>EVHTTP_REQ_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>sockets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>virtualhosts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>http</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type>
<name>evhttp_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>http</name> <operator>=</operator> <call><name>evhttp_new_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>http</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type>
<name>evhttp_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>http</name> <operator>=</operator> <call><name>evhttp_new_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_bind_socket</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>http</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>http</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_cb</name></name> <modifier>*</modifier></type><name>http_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>bound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>vhost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_server_alias</name></name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>(</operator><name>bound</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>sockets</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>sockets</name></name></expr></argument>, <argument><expr><name>bound</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evconnlistener_free</name><argument_list>(<argument><expr><name><name>bound</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><operator>(</operator><name>evcon</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>connections</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><operator>(</operator><name>http_cb</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><name>http_cb</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>http_cb</name><operator>-&gt;</operator><name>what</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>http_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><operator>(</operator><name>vhost</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>virtualhosts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>virtualhosts</name></name></expr></argument>, <argument><expr><name>vhost</name></expr></argument>, <argument><expr><name>next_vhost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>vhost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>vhost_pattern</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>vhost_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>alias</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>alias</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_add_virtual_host</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>http</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>vhost</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vhost</name><operator>-&gt;</operator><name>vhost_pattern</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator>
<call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vhost</name><operator>-&gt;</operator><name>sockets</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vhost</name><operator>-&gt;</operator><name>vhost_pattern</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vhost</name><operator>-&gt;</operator><name>vhost_pattern</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>virtualhosts</name></name></expr></argument>, <argument><expr><name>vhost</name></expr></argument>, <argument><expr><name>next_vhost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_remove_virtual_host</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>http</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>vhost</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vhost</name><operator>-&gt;</operator><name>vhost_pattern</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>virtualhosts</name></name></expr></argument>, <argument><expr><name>vhost</name></expr></argument>, <argument><expr><name>next_vhost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>vhost</name><operator>-&gt;</operator><name>vhost_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vhost</name><operator>-&gt;</operator><name>vhost_pattern</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_add_server_alias</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_server_alias</name></name> <modifier>*</modifier></type><name>evalias</name></decl>;</decl_stmt>

<expr_stmt><expr><name>evalias</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>evalias</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evalias</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>evalias</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>evalias</name><operator>-&gt;</operator><name>alias</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>evalias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>, <argument><expr><name>evalias</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_remove_server_alias</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_server_alias</name></name> <modifier>*</modifier></type><name>evalias</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>evalias</argument>, <argument>&amp;http-&gt;aliases</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>evalias</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>, <argument><expr><name>evalias</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>evalias</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>evalias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_set_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>http</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout_in_secs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>timeout_in_secs</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_set_timeout_tv</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout_in_secs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_timeout_tv</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_set_timeout_tv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>http</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name><modifier>*</modifier></type> <name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>*</operator><name>tv</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>evhttp_set_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>avail_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>avail_flags</name> <operator>|=</operator> <name>EVHTTP_SERVER_LINGERING_CLOSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>avail_flags</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>avail_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_set_max_headers_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>http</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>max_headers_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max_headers_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>default_max_headers_size</name></name> <operator>=</operator> <name>EV_SIZE_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>default_max_headers_size</name></name> <operator>=</operator> <name>max_headers_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_set_max_body_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>http</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>max_body_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max_body_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>default_max_body_size</name></name> <operator>=</operator> <name>EV_UINT64_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>default_max_body_size</name></name> <operator>=</operator> <name>max_body_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_set_default_content_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>default_content_type</name></name> <operator>=</operator> <name>content_type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_set_allowed_methods</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>http</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type> <name>methods</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>allowed_methods</name></name> <operator>=</operator> <name>methods</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_set_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_cb</name></name> <modifier>*</modifier></type><name>http_cb</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>http_cb</argument>, <argument>&amp;http-&gt;callbacks</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>http_cb</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>http_cb</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evhttp_cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>http_cb</name><operator>-&gt;</operator><name>what</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>http_cb</name><operator>-&gt;</operator><name>what</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>http_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">3</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>http_cb</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http_cb</name><operator>-&gt;</operator><name>cbarg</name></name> <operator>=</operator> <name>cbarg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><name>http_cb</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_del_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_cb</name></name> <modifier>*</modifier></type><name>http_cb</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>http_cb</argument>, <argument>&amp;http-&gt;callbacks</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>http_cb</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>http_cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><name>http_cb</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>http_cb</name><operator>-&gt;</operator><name>what</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>http_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_set_gencb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>gencb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>gencbarg</name></name> <operator>=</operator> <name>cbarg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type>
<name>evhttp_set_bevcb</name><argument_list>(<argument><expr>struct <name>evhttp</name> <operator>*</operator><name>http</name></expr></argument>,
<argument><expr>struct <name>bufferevent</name><operator>*</operator> <call>(<modifier>*</modifier><name>cb</name>)<argument_list>(<argument><expr>struct <name>event_base</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>cbarg</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>bevcb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>bevcbarg</name></name> <operator>=</operator> <name>cbarg</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<function><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type>
<name>evhttp_request_new</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evhttp_request</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>headers_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>body_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>EVHTTP_RESPONSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evkeyvalq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evkeyvalq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: evbuffer_new"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: evbuffer_new"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cb_arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>req</name><operator>)</operator></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>req</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_request_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_REQ_DEFER_FREE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVHTTP_REQ_NEEDS_FREE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>remote_host</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>remote_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>response_code_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>response_code_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>host_cache</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>host_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_request_own</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVHTTP_USER_OWNED</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_request_is_owned</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_USER_OWNED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type>
<name>evhttp_request_get_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type>
<name>evhttp_connection_get_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>conn</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_request_set_chunked_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>chunk_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_request_set_header_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>header_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_request_set_error_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>enum</name> <name>evhttp_request_error</name></name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>error_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_request_set_on_complete_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>on_complete_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>on_complete_cb_arg</name></name> <operator>=</operator> <name>cb_arg</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evhttp_request_get_uri</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: request %p has no uri\n"</literal><operator>,</operator> <name>__func__</name><operator>,</operator> <name>req</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>uri</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type>
<name>evhttp_request_get_evhttp_uri</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: request %p has no uri elems\n"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name>req</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evhttp_request_get_host</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>host_cache</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>req</name><operator>-&gt;</operator><name>host_cache</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri_elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>host</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>evhttp_find_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>host</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>host</name> <operator>&amp;&amp;</operator> <call><name>EVUTIL_ISDIGIT_</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>host</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>host</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>host_cache</name></name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>host_cache</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>host_cache</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>host_cache</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>host</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>host_cache</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>host</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>evhttp_cmd_type</name></name></type>
<name>evhttp_request_get_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evhttp_request_get_response_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evhttp_request_get_response_code_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>req</name><operator>-&gt;</operator><name>response_code_line</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>evhttp_request_get_input_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>evhttp_request_get_output_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evhttp_request_get_input_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evhttp_request_get_output_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name><name>struct</name> <name>evhttp_connection</name></name><modifier>*</modifier></type>
<name>evhttp_get_request_connection</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>http</name></decl></parameter>,
<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>ev_socklen_t</name></type> <name>salen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>portname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name><modifier>*</modifier></type> <name>bev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>name_from_addr</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>salen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hostname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>portname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>portname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>portname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: new request from %s:%s on "</literal><name>EV_SOCK_FMT</name><literal type="string">"\n"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name>hostname</name><operator>,</operator> <name>portname</name><operator>,</operator> <call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>bevcb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bev</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>http</name><operator>-&gt;</operator><name>bevcb</name></name>)<argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>http</name><operator>-&gt;</operator><name>bevcbarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_bufferevent_new</name><argument_list>(
<argument><expr><name><name>http</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>portname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>portname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evcon</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>max_headers_size</name></name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>default_max_headers_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>max_body_size</name></name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>default_max_body_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVHTTP_SERVER_LINGERING_CLOSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVHTTP_CON_LINGERING_CLOSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVHTTP_CON_INCOMING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EVCON_READING_FIRSTLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setfd</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>bufev</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>evcon</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evhttp_associate_new_request_with_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>evcon</name><operator>-&gt;</operator><name>http_server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>evhttp_handle_request</name></expr></argument>, <argument><expr><name>http</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>remote_host</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name><name>evcon</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>remote_port</name></name> <operator>=</operator> <name><name>evcon</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name> <operator>=</operator> <name>evcon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVHTTP_REQ_OWN_CONNECTION</name></expr>;</expr_stmt>






<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>userdone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>evcon</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>EVHTTP_REQUEST</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_start_read_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evhttp_get_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>ev_socklen_t</name></type> <name>salen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_get_request_connection</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>salen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evcon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_sock_warn</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s: cannot get connection on "</literal><name>EV_SOCK_FMT</name></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evutil_timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_set_timeout_tv</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name><name>evcon</name><operator>-&gt;</operator><name>http_server</name></name> <operator>=</operator> <name>http</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>connections</name></name></expr></argument>, <argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_associate_new_request_with_connection</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>name_from_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>ev_socklen_t</name></type> <name>salen</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>phost</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>ntop</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>strport</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ni_result</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETNAMEINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ni_result</name> <operator>=</operator> <call><name>getnameinfo</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>salen</name></expr></argument>,
<argument><expr><name>ntop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ntop</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>strport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strport</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NI_NUMERICHOST</name><operator>|</operator><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ni_result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAI_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>ni_result</name> <operator>==</operator> <name>EAI_SYSTEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"getnameinfo failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"getnameinfo failed: %s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>ni_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ni_result</name> <operator>=</operator> <call><name>fake_getnameinfo</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>salen</name></expr></argument>,
<argument><expr><name>ntop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ntop</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>strport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strport</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NI_NUMERICHOST</name><operator>|</operator><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ni_result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>phost</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>ntop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pport</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>strport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>evutil_socket_t</name></type>
<name>bind_socket_ai</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reuse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>on</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>serrno</name></decl>;</decl_stmt>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>evutil_socket_</name><argument_list>(<argument><expr><ternary><condition><expr><name>ai</name></expr> ?</condition><then> <expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr> </then><else>: <expr><name>AF_INET</name></expr></else></ternary></expr></argument>,
<argument><expr><name>SOCK_STREAM</name><operator>|</operator><name>EVUTIL_SOCK_NONBLOCK</name><operator>|</operator><name>EVUTIL_SOCK_CLOEXEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_sock_warn</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>on</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reuse</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_make_listen_socket_reuseable</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ai</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ev_socklen_t</name><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>fd</name><operator>)</operator></expr>;</return>

<label><name>out</name>:</label>
<expr_stmt><expr><name>serrno</name> <operator>=</operator> <call><name>EVUTIL_SOCKET_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_SET_SOCKET_ERROR</name><argument_list>(<argument><expr><name>serrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type>
<name>make_addrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>strport</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ai_result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>EVUTIL_AI_PASSIVE</name><operator>|</operator><name>EVUTIL_AI_ADDRCONFIG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>strport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ai_result</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>strport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ai_result</name> <operator>==</operator> <name>EVUTIL_EAI_SYSTEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"getaddrinfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"getaddrinfo: %s"</literal></expr></argument>,
<argument><expr><call><name>evutil_gai_strerror</name><argument_list>(<argument><expr><name>ai_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ai</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>evutil_socket_t</name></type>
<name>bind_socket</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reuse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>aitop</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>address</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>port</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>bind_socket_ai</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>aitop</name> <operator>=</operator> <call><name>make_addrinfo</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aitop</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>bind_socket_ai</name><argument_list>(<argument><expr><name>aitop</name></expr></argument>, <argument><expr><name>reuse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>aitop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>evhttp_uri</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>userinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fragment</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type>
<name>evhttp_uri_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>mm_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evhttp_uri</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>uri</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>uri</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_uri_set_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>scheme_ok</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eos</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>eos</name> <operator>&gt;=</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>eos</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVUTIL_ISALPHA_</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>++</operator><name>s</name> <operator>&lt;</operator> <name>eos</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>EVUTIL_ISALNUM_</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBDELIMS</name></cpp:macro> <cpp:value>"!$&amp;'()*+,;="</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>userinfo_ok</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>eos</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHAR_IS_UNRESERVED</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strchr</name><argument_list>(<argument><expr><name>SUBDELIMS</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <name>s</name><operator>+</operator><literal type="number">2</literal> <operator>&lt;</operator> <name>eos</name> <operator>&amp;&amp;</operator>
<call><name>EVUTIL_ISXDIGIT_</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>EVUTIL_ISXDIGIT_</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>regname_ok</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name>s</name><operator>&lt;</operator><name>eos</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHAR_IS_UNRESERVED</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strchr</name><argument_list>(<argument><expr><name>SUBDELIMS</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator>
<call><name>EVUTIL_ISXDIGIT_</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>EVUTIL_ISXDIGIT_</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_port</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>eos</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>EVUTIL_ISDIGIT_</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>portnum</name> <operator>=</operator> <operator>(</operator><name>portnum</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>portnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>portnum</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>portnum</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>bracket_addr_ok</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>eos</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'['</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>eos</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>eos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVUTIL_ISXDIGIT_</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>eos</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ISXDIGIT_</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>eos</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHAR_IS_UNRESERVED</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strchr</name><argument_list>(<argument><expr><name>SUBDELIMS</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>n_chars</name> <init>= <expr><name>eos</name><operator>-</operator><name>s</name><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>in6</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n_chars</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>n_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>n_chars</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>evutil_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>in6</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_authority</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>eos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>eos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eos</name> <operator>==</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>host</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;</operator> <name>eos</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>userinfo_ok</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>userinfo</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>userinfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>port</name><operator>=</operator><name>eos</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>port</name> <operator>&gt;=</operator> <name>cp</name> <operator>&amp;&amp;</operator> <call><name>EVUTIL_ISDIGIT_</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>--</operator><name>port</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&gt;=</operator> <name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>port</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>port</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <name>eos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>uri</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>parse_port</name><argument_list>(<argument><expr><name>port</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>eos</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>eos</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>eos</name> <operator>&gt;=</operator> <name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name>eos</name> <operator>&gt;=</operator> <name>cp</name><operator>+</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>eos</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>bracket_addr_ok</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>eos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>regname_ok</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><name>eos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>eos</name><operator>-</operator><name>cp</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>host</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>eos</name><operator>-</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>host</name><index>[<expr><name>eos</name><operator>-</operator><name>cp</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>end_of_authority</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cp</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>cp</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>uri_part</name> <block>{
<decl><name>PART_PATH</name></decl>,
<decl><name>PART_QUERY</name></decl>,
<decl><name>PART_FRAGMENT</name></decl>
}</block>;</enum>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>end_of_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>uri_part</name></name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EVHTTP_URI_NONCONFORMANT</name></expr>)</condition> <block>{<block_content>





<switch>switch <condition>(<expr><name>part</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PART_PATH</name></expr>:</case>
<while>while <condition>(<expr><operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>cp</name></expr>;</expr_stmt></block_content></block></while>
<break>break;</break>
<case>case <expr><name>PART_QUERY</name></expr>:</case>
<while>while <condition>(<expr><operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>cp</name></expr>;</expr_stmt></block_content></block></while>
<break>break;</break>
<case>case <expr><name>PART_FRAGMENT</name></expr>:</case>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHAR_IS_UNRESERVED</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strchr</name><argument_list>(<argument><expr><name>SUBDELIMS</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'@'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>cp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <call><name>EVUTIL_ISXDIGIT_</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>EVUTIL_ISXDIGIT_</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <name>part</name> <operator>!=</operator> <name>PART_PATH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>cp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>cp</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>path_matches_noscheme</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>cp</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type>
<name>evhttp_uri_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evhttp_uri_parse_with_flags</name><argument_list>(<argument><expr><name>source_uri</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type>
<name>evhttp_uri_parse_with_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_uri</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>readbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>readp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>token</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fragment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_authority</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evhttp_uri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>uri</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>readbuf</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>source_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>readbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>readp</name> <operator>=</operator> <name>readbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>










<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>readp</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>&amp;&amp;</operator> <call><name>scheme_ok</name><argument_list>(<argument><expr><name>readp</name></expr></argument>,<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>scheme</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>readp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>scheme</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>readp</name> <operator>=</operator> <name>token</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>readp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>readp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authority</name></decl>;</decl_stmt>
<expr_stmt><expr><name>readp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>authority</name> <operator>=</operator> <name>readp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>end_of_authority</name><argument_list>(<argument><expr><name>readp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_authority</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>authority</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>readp</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_authority</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>path</name> <operator>=</operator> <name>readp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>readp</name> <operator>=</operator> <call><name>end_of_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>PART_PATH</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>readp</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>readp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>readp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>query</name> <operator>=</operator> <name>readp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>readp</name> <operator>=</operator> <call><name>end_of_path</name><argument_list>(<argument><expr><name>readp</name></expr></argument>, <argument><expr><name>PART_QUERY</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>readp</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>readp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>readp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fragment</name> <operator>=</operator> <name>readp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>readp</name> <operator>=</operator> <call><name>end_of_path</name><argument_list>(<argument><expr><name>readp</name></expr></argument>, <argument><expr><name>PART_FRAGMENT</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>readp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_authority</name> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>got_authority</name> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>uri</name><operator>-&gt;</operator><name>scheme</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>path_matches_noscheme</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>query</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fragment</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>fragment</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>fragment</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>readbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>uri</name></expr>;</return>
<label><name>err</name>:</label>
<if_stmt><if>if <condition>(<expr><name>uri</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>readbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>readbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evhttp_uri_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URI_FREE_STR_</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (uri-&gt;f) { mm_free(uri-&gt;f); }</cpp:value></cpp:define>




<expr_stmt><expr><call><name>URI_FREE_STR_</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>URI_FREE_STR_</name><argument_list>(<argument><expr><name>userinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>URI_FREE_STR_</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>URI_FREE_STR_</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>URI_FREE_STR_</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>URI_FREE_STR_</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>URI_FREE_STR_</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>evhttp_uri_join</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>joined_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URI_ADD_</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>evbuffer_add(tmp, uri-&gt;f, strlen(uri-&gt;f))</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uri</name> <operator>||</operator> <operator>!</operator><name>buf</name> <operator>||</operator> <operator>!</operator><name>limit</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>scheme</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>URI_ADD_</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>host</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>userinfo</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>,<argument><expr><literal type="string">"%s@"</literal></expr></argument>, <argument><expr><name><name>uri</name><operator>-&gt;</operator><name>userinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>URI_ADD_</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>port</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>,<argument><expr><literal type="string">":%d"</literal></expr></argument>, <argument><expr><name><name>uri</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name> <operator>&amp;&amp;</operator> <name><name>uri</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>uri</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>URI_ADD_</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>URI_ADD_</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>fragment</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>URI_ADD_</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>joined_size</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>joined_size</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>joined_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>URI_ADD_</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evhttp_uri_get_scheme</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>uri</name><operator>-&gt;</operator><name>scheme</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evhttp_uri_get_userinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>uri</name><operator>-&gt;</operator><name>userinfo</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evhttp_uri_get_host</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>uri</name><operator>-&gt;</operator><name>host</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evhttp_uri_get_port</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>uri</name><operator>-&gt;</operator><name>port</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evhttp_uri_get_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evhttp_uri_get_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>uri</name><operator>-&gt;</operator><name>query</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evhttp_uri_get_fragment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>uri</name><operator>-&gt;</operator><name>fragment</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URI_SET_STR_</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (uri-&gt;f) mm_free(uri-&gt;f); if (f) { if ((uri-&gt;f = mm_strdup(f)) == NULL) { event_warn("%s: strdup()", __func__); return -1; } } else { uri-&gt;f = NULL; } } while(0)</cpp:value></cpp:define>












<function><type><name>int</name></type>
<name>evhttp_uri_set_scheme</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scheme</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>scheme</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>scheme_ok</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>scheme</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>URI_SET_STR_</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evhttp_uri_set_userinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>userinfo</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>userinfo_ok</name><argument_list>(<argument><expr><name>userinfo</name></expr></argument>, <argument><expr><name>userinfo</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>userinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>URI_SET_STR_</name><argument_list>(<argument><expr><name>userinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evhttp_uri_set_host</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>bracket_addr_ok</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>host</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>regname_ok</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>host</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>URI_SET_STR_</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evhttp_uri_set_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>end_of_cpath</name><parameter_list>(<parameter><type><name>cp</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((const char*)(end_of_path(((char*)(cp)), (p), (f))))</cpp:value></cpp:define>


<function><type><name>int</name></type>
<name>evhttp_uri_set_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>&amp;&amp;</operator> <call><name>end_of_cpath</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>PART_PATH</name></expr></argument>, <argument><expr><name><name>uri</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>path</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>URI_SET_STR_</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evhttp_uri_set_query</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>query</name> <operator>&amp;&amp;</operator> <call><name>end_of_cpath</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>PART_QUERY</name></expr></argument>, <argument><expr><name><name>uri</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>query</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>URI_SET_STR_</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evhttp_uri_set_fragment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fragment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fragment</name> <operator>&amp;&amp;</operator> <call><name>end_of_cpath</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>, <argument><expr><name>PART_FRAGMENT</name></expr></argument>, <argument><expr><name><name>uri</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>fragment</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>URI_SET_STR_</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
