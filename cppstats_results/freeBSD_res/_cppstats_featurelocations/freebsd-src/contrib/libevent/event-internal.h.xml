<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/event-internal.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_INTERNAL_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_INTERNAL_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minheap-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evsignal-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defer-internal.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ev_signal_next</name></cpp:macro> <cpp:value>ev_.ev_signal.ev_signal_next</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ev_io_next</name></cpp:macro> <cpp:value>ev_.ev_io.ev_io_next</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ev_io_timeout</name></cpp:macro> <cpp:value>ev_.ev_io.ev_timeout</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ev_ncalls</name></cpp:macro> <cpp:value>ev_.ev_signal.ev_ncalls</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ev_pncalls</name></cpp:macro> <cpp:value>ev_.ev_signal.ev_pncalls</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ev_pri</name></cpp:macro> <cpp:value>ev_evcallback.evcb_pri</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ev_flags</name></cpp:macro> <cpp:value>ev_evcallback.evcb_flags</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ev_closure</name></cpp:macro> <cpp:value>ev_evcallback.evcb_closure</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ev_callback</name></cpp:macro> <cpp:value>ev_evcallback.evcb_cb_union.evcb_callback</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ev_arg</name></cpp:macro> <cpp:value>ev_evcallback.evcb_arg</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_CLOSURE_EVENT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_CLOSURE_EVENT_SIGNAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_CLOSURE_EVENT_PERSIST</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_CLOSURE_CB_SELF</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_CLOSURE_CB_FINALIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_CLOSURE_EVENT_FINALIZE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_CLOSURE_EVENT_FINALIZE_FREE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>



<struct>struct <name>eventop</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>





<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>add</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fdinfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>del</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fdinfo</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>dispatch</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dealloc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>int</name></type> <name>need_reinit</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>event_method_feature</name></name></type> <name>features</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>size_t</name></type> <name>fdinfo_len</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVMAP_USE_HT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVMAP_USE_HT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_NO_CACHE_HASH_VALUES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ht-internal.h"</cpp:file></cpp:include>
<struct_decl>struct <name>event_map_entry</name>;</struct_decl>
<expr_stmt><expr><call><name>HT_HEAD</name><argument_list>(<argument><expr><name>event_io_map</name></expr></argument>, <argument><expr><name>event_map_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_io_map</name></cpp:macro> <cpp:value>event_signal_map</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<struct>struct <name>event_signal_map</name> <block>{


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nentries</name></decl>;</decl_stmt>
}</block>;</struct>





<struct>struct <name>common_timeout_list</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>event_list</name></name></type> <name>events</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>duration</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>timeout_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_TIMEOUT_MICROSECONDS_MASK</name></cpp:macro> <cpp:value>0x000fffff</cpp:value></cpp:define>

<struct_decl>struct <name>event_change</name>;</struct_decl>



<struct>struct <name>event_changelist</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>event_change</name></name> <modifier>*</modifier></type><name>changes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_changes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changes_size</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>event_debug_mode_on_</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_DEBUG_MODE_IS_ON</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(event_debug_mode_on_)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_DEBUG_MODE_IS_ON</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>evcallback_list</name></expr></argument>, <argument><expr><name>event_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<struct>struct <name>event_once</name> <block>{
<macro><name>LIST_ENTRY</name><argument_list>(<argument>event_once</argument>)</argument_list></macro> <expr_stmt><expr><name>next_once</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>ev</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>event_base</name> <block>{


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name> <modifier>*</modifier></type><name>evsel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>evbase</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>event_changelist</name></name></type> <name>changelist</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name> <modifier>*</modifier></type><name>evsigsel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evsig_info</name></name></type> <name>sig</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>virtual_event_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>virtual_event_count_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>event_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>event_count_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>event_count_active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>event_count_active_max</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>event_gotterm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>event_break</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>event_continue</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>event_running_priority</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>running_loop</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>n_deferreds_queued</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>struct</name> <name>evcallback_list</name></name> <modifier>*</modifier></type><name>activequeues</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nactivequeues</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>evcallback_list</name></name></type> <name>active_later_queue</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>common_timeout_queues</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_common_timeouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_common_timeouts_allocated</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>event_io_map</name></name></type> <name>io</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>event_signal_map</name></name></type> <name>sigmap</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>min_heap</name></name></type> <name>timeheap</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name></type> <name>monotonic_timer</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv_clock_diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>last_updated_clock_diff</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>th_owner_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>th_base_lock</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>current_event_cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>current_event_waiters</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>current_event</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>iocp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name><name>enum</name> <name>event_base_config_flag</name></name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>max_dispatch_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_dispatch_callbacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit_callbacks_after_prio</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>is_notify_pending</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name><name>th_notify_fd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>th_notify</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>th_notify_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name><name>struct</name> <name>evutil_weakrand_state</name></name></type> <name>weakrand_seed</name></decl>;</decl_stmt>


<macro><name>LIST_HEAD</name><argument_list>(<argument>once_event_list</argument>, <argument>event_once</argument>)</argument_list></macro> <expr_stmt><expr><name>once_events</name></expr>;</expr_stmt>

}</block>;</struct>

<struct>struct <name>event_config_entry</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>event_config_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>next</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avoid_method</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>event_config</name> <block>{
<macro><name>TAILQ_HEAD</name><argument_list>(<argument>event_configq</argument>, <argument>event_config_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>entries</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_cpus_hint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>max_dispatch_interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_dispatch_callbacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit_callbacks_after_prio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>event_method_feature</name></name></type> <name>require_features</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>event_base_config_flag</name></name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TAILQ_FIRST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_FIRST</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;tqh_first)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TAILQ_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_END</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TAILQ_NEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_NEXT</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((elm)-&gt;field.tqe_next)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TAILQ_FOREACH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_FOREACH</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((var) = TAILQ_FIRST(head); (var) != TAILQ_END(head); (var) = TAILQ_NEXT(var, field))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TAILQ_INSERT_BEFORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_INSERT_BEFORE</name><parameter_list>(<parameter><type><name>listelm</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.tqe_prev = (listelm)-&gt;field.tqe_prev; (elm)-&gt;field.tqe_next = (listelm); *(listelm)-&gt;field.tqe_prev = (elm); (listelm)-&gt;field.tqe_prev = &amp;(elm)-&gt;field.tqe_next; } while (0)</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_ACTIVE_CALLBACKS</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((base)-&gt;event_count_active)</cpp:value></cpp:define>


<function_decl><type><name>int</name></type> <name>evsig_set_handler_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evsignal</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evsig_restore_handler_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evsignal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>event_add_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tv_is_absolute</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_DEL_NOBLOCK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_DEL_BLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_DEL_AUTOBLOCK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_DEL_EVEN_IF_FINALIZING</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>event_del_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocking</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>event_remove_timer_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>event_active_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>event_callback_activate_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>event_callback_activate_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>event_callback_cancel_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>event_callback_finalize_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>event_callback_finalize_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>event_callback_finalize_many_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_cbs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>evcb</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>event_active_later_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>event_active_later_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>event_callback_activate_later_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>event_callback_cancel_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>even_if_finalizing</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>event_callback_init_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>event_base_add_virtual_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>event_base_del_virtual_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>event_base_assert_ok_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>event_base_assert_ok_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>event_base_foreach_event_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>event_base_foreach_event_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>event_disable_debug_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
