<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/buffer.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_VASPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_UIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_MMAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_SENDFILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sendfile.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_STAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STDARG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evthread-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evbuffer-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bufferevent-internal.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAP_FAILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FAILED</name></cpp:macro> <cpp:value>((void *)-1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_SENDFILE_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SENDFILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SENDFILE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENDFILE_IS_LINUX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SENDFILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SENDFILE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENDFILE_IS_FREEBSD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SENDFILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SENDFILE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENDFILE_IS_MACOSX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SENDFILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__svr4__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SENDFILE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENDFILE_IS_SOLARIS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_CB_USER_FLAGS</name></cpp:macro> <cpp:value>0xffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_CB_INTERNAL_FLAGS</name></cpp:macro> <cpp:value>0xffff0000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_CB_OBSOLETE</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAIN_SPACE_PTR</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ch)-&gt;buffer + (ch)-&gt;misalign + (ch)-&gt;off)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAIN_SPACE_LEN</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ch)-&gt;flags &amp; EVBUFFER_IMMUTABLE ? 0 : (ch)-&gt;buffer_len - ((ch)-&gt;misalign + (ch)-&gt;off))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAIN_PINNED</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ch)-&gt;flags &amp; EVBUFFER_MEM_PINNED_ANY) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAIN_PINNED_R</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ch)-&gt;flags &amp; EVBUFFER_MEM_PINNED_R) != 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_NOT_FOUND</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (ptr)-&gt;pos = -1; (ptr)-&gt;internal_.chain = NULL; (ptr)-&gt;internal_.pos_in_chain = 0; } while (0)</cpp:value></cpp:define>





<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evbuffer_chain_align</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evbuffer_chain_should_realign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>datalen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evbuffer_deferred_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evbuffer_ptr_memcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>evbuffer_expand_singlechain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evbuffer_ptr_subtract</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>howfar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evbuffer_file_segment_materialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_file_segment</name></name> <modifier>*</modifier></type><name>seg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>evbuffer_chain_incref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type>
<name>evbuffer_chain_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>to_alloc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>EVBUFFER_CHAIN_MAX</name> <operator>-</operator> <name>EVBUFFER_CHAIN_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>EVBUFFER_CHAIN_SIZE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>EVBUFFER_CHAIN_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to_alloc</name> <operator>=</operator> <name>MIN_BUFFER_SIZE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>to_alloc</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to_alloc</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>to_alloc</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chain</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>to_alloc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EVBUFFER_CHAIN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name>to_alloc</name> <operator>-</operator> <name>EVBUFFER_CHAIN_SIZE</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <macro><name>EVBUFFER_CHAIN_EXTRA</name><argument_list>(<argument>unsigned char</argument>, <argument>chain</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>chain</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>evbuffer_chain_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>chain</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHAIN_PINNED</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>refcnt</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVBUFFER_DANGLING</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_REFERENCE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain_reference</name></name> <modifier>*</modifier></type><name>info</name> <init>=
<expr><call><name>EVBUFFER_CHAIN_EXTRA</name><argument_list>(
<argument><expr>struct <name>evbuffer_chain_reference</name></expr></argument>,
<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>cleanupfn</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>cleanupfn</name></name>)<argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,
<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_FILESEGMENT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain_file_segment</name></name> <modifier>*</modifier></type><name>info</name> <init>=
<expr><call><name>EVBUFFER_CHAIN_EXTRA</name><argument_list>(
<argument><expr>struct <name>evbuffer_chain_file_segment</name></expr></argument>,
<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>segment</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>segment</name><operator>-&gt;</operator><name>is_mapping</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>evbuffer_file_segment_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_MULTICAST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_multicast_parent</name></name> <modifier>*</modifier></type><name>info</name> <init>=
<expr><call><name>EVBUFFER_CHAIN_EXTRA</name><argument_list>(
<argument><expr>struct <name>evbuffer_multicast_parent</name></expr></argument>,
<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>source</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_decref_and_unlock_</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evbuffer_free_all_chains</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>chain</name></expr>;</condition> <incr><expr><name>chain</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>evbuffer_chains_all_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>chain</name></expr>;</condition> <incr><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>evbuffer_chains_all_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><specifier>static</specifier> <name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier><modifier>*</modifier></type>
<name>evbuffer_free_trailing_empty_chains</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ch</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>ch</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><operator>(</operator><operator>*</operator><name>ch</name><operator>)</operator><operator>-&gt;</operator><name>off</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>CHAIN_PINNED</name><argument_list>(<argument><expr><operator>*</operator><name>ch</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ch</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>evbuffer_chains_all_empty</name><argument_list>(<argument><expr><operator>*</operator><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free_all_chains</name><argument_list>(<argument><expr><operator>*</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ch</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>evbuffer_chain_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>chp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>chp</name> <operator>=</operator> <call><name>evbuffer_free_trailing_empty_chains</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>chp</name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <name>chp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type>
<name>evbuffer_chain_insert_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chain</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><name>datlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_insert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>chain</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evbuffer_chain_pin_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flag</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flag</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evbuffer_chain_unpin_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flag</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flag</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_DANGLING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_chain_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>evbuffer_chain_incref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>chain</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type>
<name>evbuffer_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evbuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LIST_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>buffer</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_set_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ev_uint64_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <operator>(</operator><name>ev_uint32_t</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_clear_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ev_uint64_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ev_uint32_t</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evbuffer_incref_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>buf</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evbuffer_incref_and_lock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>buf</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_defer_callbacks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>cb_queue</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>deferred_cbs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_deferred_cb_init_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>,
<argument><expr><call><name>event_base_get_npriorities</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>evbuffer_deferred_callback</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_enable_locking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVTHREAD_ALLOC_LOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>own_lock</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>own_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evbuffer_set_parent_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>bev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evbuffer_run_callbacks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>running_deferred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>cbent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_cb_info</name></name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>masked_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clear</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>running_deferred</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>EVBUFFER_CB_NODEFER</name><operator>|</operator><name>EVBUFFER_CB_ENABLED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>masked_val</name> <operator>=</operator> <name>EVBUFFER_CB_ENABLED</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>deferred_cbs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>EVBUFFER_CB_NODEFER</name><operator>|</operator><name>EVBUFFER_CB_ENABLED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>masked_val</name> <operator>=</operator> <name>EVBUFFER_CB_NODEFER</name><operator>|</operator><name>EVBUFFER_CB_ENABLED</name></expr>;</expr_stmt>


<expr_stmt><expr><name>clear</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>EVBUFFER_CB_ENABLED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>masked_val</name> <operator>=</operator> <name>EVBUFFER_CB_ENABLED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LIST_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>n_del_for_cb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>n_del_for_cb</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>orig_size</name></name> <operator>=</operator> <name>new_size</name> <operator>+</operator> <name><name>buffer</name><operator>-&gt;</operator><name>n_del_for_cb</name></name> <operator>-</operator> <name><name>buffer</name><operator>-&gt;</operator><name>n_add_for_cb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>n_added</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>n_add_for_cb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>n_deleted</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>n_del_for_cb</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clear</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>n_del_for_cb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>cbent</name> <operator>=</operator> <call><name>LIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>cbent</name> <operator>!=</operator> <call><name>LIST_END</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>cbent</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>


<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>LIST_NEXT</name><argument_list>(<argument><expr><name>cbent</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cbent</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <name>masked_val</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cbent</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_CB_OBSOLETE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>cbent</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>cb_obsolete</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><name><name>info</name><operator>.</operator><name>orig_size</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>, <argument><expr><name><name>cbent</name><operator>-&gt;</operator><name>cbarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>cbent</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>cb_func</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name><name>cbent</name><operator>-&gt;</operator><name>cbarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evbuffer_invoke_callbacks_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LIST_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>n_del_for_cb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>deferred_cbs</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>event_deferred_cb_schedule_</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>cb_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_incref_and_lock_</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_incref_</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_run_callbacks</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evbuffer_deferred_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_run_callbacks</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_decref_and_unlock_</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_decref_</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evbuffer_remove_all_callbacks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>cbent</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cbent</name> <operator>=</operator> <call><name>LIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIST_REMOVE</name><argument_list>(<argument><expr><name>cbent</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>cbent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evbuffer_decref_and_unlock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>buffer</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>chain</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>chain</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>evbuffer_remove_all_callbacks</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>deferred_cbs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_deferred_cb_cancel_</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>cb_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>own_lock</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evbuffer_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_decref_and_unlock_</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evbuffer_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evbuffer_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>evbuffer_get_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>total_len</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>evbuffer_get_contiguous_space</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>evbuffer_add_iovec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name> <modifier>*</modifier></type> <name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_vec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>to_alloc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>to_alloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>n_vec</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>to_alloc</name> <operator>+=</operator> <name><name>vec</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_expand_fast_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>to_alloc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>n_vec</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>vec</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_reserve_space</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_vecs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>chainp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>freeze_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n_vecs</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n_vecs</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chain</name> <operator>=</operator> <call><name>evbuffer_expand_singlechain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>CHAIN_SPACE_PTR</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>size</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_expand_fast_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>n_vecs</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_read_setup_vecs_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>n_vecs</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>chainp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>advance_last_with_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><operator>(</operator><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>off</name></name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_commit_space</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_vecs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>firstchainp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>chainp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>freeze_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n_vecs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n_vecs</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>&amp;&amp;</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>CHAIN_SPACE_PTR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>added</name> <operator>=</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>added</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>advance_last_with_data</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>okay</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>firstchainp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>firstchainp</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><operator>*</operator><name>firstchainp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>firstchainp</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>firstchainp</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <operator>*</operator><name>firstchainp</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n_vecs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chain</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>!=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>CHAIN_SPACE_PTR</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>&gt;</operator> <call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>chainp</name> <operator>=</operator> <name>firstchainp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n_vecs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>chainp</name><operator>)</operator><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>added</name> <operator>+=</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <name>chainp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>chainp</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>chainp</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>okay</name>:</label>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>added</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>added</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>HAS_PINNED_R</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>&amp;&amp;</operator> <call><name>CHAIN_PINNED_R</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ZERO_CHAIN</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name>dst</name><operator>)</operator><operator>-&gt;</operator><name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>total_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>PRESERVE_PINNED</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pinned</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HAS_PINNED_R</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>first</name> <operator>=</operator> <operator>*</operator><name>last</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pinned</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHAIN_PINNED_R</name><argument_list>(<argument><expr><operator>*</operator><name>pinned</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pinned</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pinned</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>CHAIN_PINNED_R</name><argument_list>(<argument><expr><operator>*</operator><name>pinned</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <operator>*</operator><name>first</name> <operator>=</operator> <operator>*</operator><name>pinned</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>pinned</name> <operator>==</operator> <name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></argument>,
<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>*</operator><name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pinned</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>RESTORE_PINNED</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>pinned</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pinned</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ZERO_CHAIN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>pinned</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>total_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>COPY_CHAIN</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>total_len</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>APPEND_CHAIN</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>chp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chp</name> <operator>=</operator> <call><name>evbuffer_free_trailing_empty_chains</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>chp</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <name>chp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>APPEND_CHAIN_MULTICAST</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_multicast_parent</name></name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>chain</name></expr>;</condition> <incr><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>||</operator> <name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_DANGLING</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evbuffer_multicast_parent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: out of memory"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>extra</name> <operator>=</operator> <call><name>EVBUFFER_CHAIN_EXTRA</name><argument_list>(<argument><expr>struct <name>evbuffer_multicast_parent</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>evbuffer_incref_</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_chain_incref</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVBUFFER_IMMUTABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>misalign</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVBUFFER_MULTICAST</name><operator>|</operator><name>EVBUFFER_IMMUTABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_insert</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>PREPEND_CHAIN</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>dst</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name>src</name><operator>)</operator><operator>-&gt;</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_add_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>pinned</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>in_total_len</name></decl>, <decl><type ref="prev"/><name>out_total_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK2</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_total_len</name> <operator>=</operator> <name><name>inbuf</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_total_len</name> <operator>=</operator> <name><name>outbuf</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_total_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>outbuf</name> <operator>==</operator> <name>inbuf</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>outbuf</name><operator>-&gt;</operator><name>freeze_end</name></name> <operator>||</operator> <name><name>inbuf</name><operator>-&gt;</operator><name>freeze_start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PRESERVE_PINNED</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pinned</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_total_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>evbuffer_free_all_chains</name><argument_list>(<argument><expr><name><name>outbuf</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_CHAIN</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>APPEND_CHAIN</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RESTORE_PINNED</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>pinned</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inbuf</name><operator>-&gt;</operator><name>n_del_for_cb</name></name> <operator>+=</operator> <name>in_total_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>in_total_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK2</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_add_buffer_reference</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>in_total_len</name></decl>, <decl><type ref="prev"/><name>out_total_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK2</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_total_len</name> <operator>=</operator> <name><name>inbuf</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_total_len</name> <operator>=</operator> <name><name>outbuf</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>inbuf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_total_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>outbuf</name><operator>-&gt;</operator><name>freeze_end</name></name> <operator>||</operator> <name>outbuf</name> <operator>==</operator> <name>inbuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>chain</name></expr>;</condition> <incr><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVBUFFER_FILESEGMENT</name><operator>|</operator><name>EVBUFFER_SENDFILE</name><operator>|</operator><name>EVBUFFER_MULTICAST</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>out_total_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>evbuffer_free_all_chains</name><argument_list>(<argument><expr><name><name>outbuf</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>APPEND_CHAIN_MULTICAST</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outbuf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>in_total_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK2</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_prepend_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>pinned</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>in_total_len</name></decl>, <decl><type ref="prev"/><name>out_total_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK2</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_total_len</name> <operator>=</operator> <name><name>inbuf</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_total_len</name> <operator>=</operator> <name><name>outbuf</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_total_len</name> <operator>||</operator> <name>inbuf</name> <operator>==</operator> <name>outbuf</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>outbuf</name><operator>-&gt;</operator><name>freeze_start</name></name> <operator>||</operator> <name><name>inbuf</name><operator>-&gt;</operator><name>freeze_start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PRESERVE_PINNED</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pinned</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_total_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>evbuffer_free_all_chains</name><argument_list>(<argument><expr><name><name>outbuf</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_CHAIN</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>PREPEND_CHAIN</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RESTORE_PINNED</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>pinned</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inbuf</name><operator>-&gt;</operator><name>n_del_for_cb</name></name> <operator>+=</operator> <name>in_total_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>in_total_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK2</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_drain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name></decl>, <decl><type ref="prev"/><name>old_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_len</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>freeze_start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>old_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HAS_PINNED_R</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>old_len</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>chain</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>chain</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ZERO_CHAIN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>old_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>old_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>chain</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</init>
<condition><expr><name>remaining</name> <operator>&gt;=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</condition>
<incr><expr><name>chain</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHAIN_PINNED_R</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>remaining</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_chain_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>chain</name> <operator>&amp;&amp;</operator> <name>remaining</name> <operator>&lt;=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+=</operator> <name>remaining</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>-=</operator> <name>remaining</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>n_del_for_cb</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evbuffer_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data_out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_copyout_from</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>data_out</name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ev_ssize_t</name></type>
<name>evbuffer_copyout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data_out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evbuffer_copyout_from</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>data_out</name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ev_ssize_t</name></type>
<name>evbuffer_copyout_from</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data_out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>data_out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos_in_chain</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>datlen</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>EV_SSIZE_MAX</name> <operator>-</operator> <name><name>pos</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_in_chain</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>datlen</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>datlen</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>-</operator> <name><name>pos</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_in_chain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>datlen</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>datlen</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>datlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>freeze_start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <name>datlen</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>datlen</name> <operator>&amp;&amp;</operator> <name>datlen</name> <operator>&gt;=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name>pos_in_chain</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>copylen</name> <init>= <expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name>pos_in_chain</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator> <name>pos_in_chain</name></expr></argument>,
<argument><expr><name>copylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>copylen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>datlen</name> <operator>-=</operator> <name>copylen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_in_chain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>chain</name> <operator>||</operator> <name>datlen</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>datlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>datlen</name><operator>+</operator><name>pos_in_chain</name> <operator>&lt;=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator> <name>pos_in_chain</name></expr></argument>,
<argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>nread</name></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>evbuffer_remove_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <name>previous</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>datlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>dst</name> <operator>==</operator> <name>src</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>freeze_end</name></name> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>freeze_start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>datlen</name> <operator>&gt;=</operator> <name><name>src</name><operator>-&gt;</operator><name>total_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>datlen</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>datlen</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;=</operator> <name>datlen</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>chain</name> <operator>!=</operator> <operator>*</operator><name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nread</name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>datlen</name> <operator>-=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>previous</name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>nread</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>chp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>chp</name> <operator>=</operator> <call><name>evbuffer_free_trailing_empty_chains</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>chp</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>previous</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>previous</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>advance_last_with_data</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>-=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nread</name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>total_len</name></name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>n_del_for_cb</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nread</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nread</name></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>evbuffer_pullup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_with_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>removed_last_with_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>removed_last_with_datap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>remaining</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>tmp</name><operator>=</operator><name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name><operator>=</operator><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHAIN_PINNED</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>remaining</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>CHAIN_PINNED</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>old_off</name> <init>= <expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>CHAIN_SPACE_PTR</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>old_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>old_off</name> <init>= <expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>old_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: out of memory"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name>last_with_data</name> <operator>=</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>chain</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name> <operator>&gt;=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</condition> <incr><expr><name>chain</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>last_with_data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>removed_last_with_data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>removed_last_with_datap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_chain_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>removed_last_with_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>removed_last_with_datap</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>tmp</name><operator>-&gt;</operator><name>misalign</name></name><operator>)</operator></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char</name> <modifier>*</modifier></type>
<name>evbuffer_readline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_ANY</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ev_ssize_t</name></type>
<name>evbuffer_strchr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>chr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>buffer</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>chr</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>=</operator> <name>cp</name> <operator>-</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <operator>(</operator><name>cp</name> <operator>-</operator> <name>buffer</name> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type>
<name>find_eol_char</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_SZ</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s_end</name> <operator>=</operator> <name>s</name><operator>+</operator><name>len</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>s_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>chunk</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>s</name> <operator>+</operator> <name>CHUNK_SZ</name> <operator>&lt;</operator> <name>s_end</name><operator>)</operator></expr> ?</condition><then> <expr><name>CHUNK_SZ</name></expr> </then><else>: <expr><operator>(</operator><name>s_end</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lf</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lf</name> <operator>&amp;&amp;</operator> <name>lf</name> <operator>&lt;</operator> <name>cr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>lf</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>cr</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>lf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>CHUNK_SZ</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHUNK_SZ</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ev_ssize_t</name></type>
<name>evbuffer_find_eol_char</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>find_eol_char</name><argument_list>(<argument><expr><name>buffer</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>=</operator> <name>cp</name> <operator>-</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <operator>(</operator><name>cp</name> <operator>-</operator> <name>buffer</name><operator>)</operator> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>evbuffer_strspn</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chrset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name><name>ptr</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>ptr</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chain</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>chrset</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
<label><name>next</name>:</label>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>evbuffer_getchr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>off</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator> <name>off</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type>
<name>evbuffer_search_eol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>eol_len_out</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>evbuffer_eol_style</name></name></type> <name>eol_style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type> <name>it</name></decl>, <decl><type ref="prev"/><name>it2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>extra_drain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&amp;&amp;</operator> <name><name>start</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PTR_NOT_FOUND</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eol_len_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>eol_len_out</name> <operator>=</operator> <name>extra_drain</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>it</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>.</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>.</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<switch>switch <condition>(<expr><name>eol_style</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVBUFFER_EOL_ANY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_find_eol_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_drain</name> <operator>=</operator> <call><name>evbuffer_strspn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it2</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>evbuffer_search</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>extra_drain</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>EVBUFFER_EOL_CRLF</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>start_pos</name> <init>= <expr><name><name>it</name><operator>.</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_strchr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>extra_drain</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name>start_pos</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_ptr_subtract</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_getchr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_drain</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>EVBUFFER_EOL_LF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_strchr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>extra_drain</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVBUFFER_EOL_NUL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_strchr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>extra_drain</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PTR_NOT_FOUND</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>eol_len_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>eol_len_out</name> <operator>=</operator> <name>extra_drain</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>it</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>evbuffer_readln</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>n_read_out</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>evbuffer_eol_style</name></name></type> <name>eol_style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type> <name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n_to_copy</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>extra_drain</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>freeze_start</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>evbuffer_search_eol</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra_drain</name></expr></argument>, <argument><expr><name>eol_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n_to_copy</name> <operator>=</operator> <name><name>it</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>n_to_copy</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: out of memory"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>n_to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>n_to_copy</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>extra_drain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n_read_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>n_read_out</name> <operator>=</operator> <ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><name>n_to_copy</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_CHAIN_MAX_AUTO_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>



<function><type><name>int</name></type>
<name>evbuffer_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data_in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>data_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>remain</name></decl>, <decl><type ref="prev"/><name>to_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>freeze_end</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>datlen</name> <operator>&gt;</operator> <name>EV_SIZE_MAX</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chain</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_insert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_IMMUTABLE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ev_uint64_t</name><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>&lt;=</operator> <name>EVBUFFER_CHAIN_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>remain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>-</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&gt;=</operator> <name>datlen</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>CHAIN_PINNED</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>evbuffer_chain_should_realign</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evbuffer_chain_align</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>remain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>to_alloc</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>to_alloc</name> <operator>&lt;=</operator> <name>EVBUFFER_CHAIN_MAX_AUTO_SIZE</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to_alloc</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>datlen</name> <operator>&gt;</operator> <name>to_alloc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to_alloc</name> <operator>=</operator> <name>datlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><name>to_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>remain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>remain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>remain</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>remain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>datlen</name> <operator>-=</operator> <name>remain</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_insert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_prepend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>freeze_start</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>datlen</name> <operator>&gt;</operator> <name>EV_SIZE_MAX</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chain</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_insert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_IMMUTABLE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ev_uint64_t</name><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>&lt;=</operator> <name>EVBUFFER_CHAIN_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>&gt;=</operator> <name>datlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>-</operator> <name>datlen</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>-=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>datlen</name> <operator>-</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>datlen</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><name>datlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>datlen</name> <operator>&lt;=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>misalign</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <name>datlen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>tmp</name><operator>-&gt;</operator><name>misalign</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>evbuffer_chain_align</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_IMMUTABLE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_MEM_PINNED_ANY</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TO_COPY_IN_EXPAND</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TO_REALIGN_IN_EXPAND</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>evbuffer_chain_should_realign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;=</operator> <name>datlen</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;=</operator> <name>MAX_TO_REALIGN_IN_EXPAND</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type>
<name>evbuffer_expand_singlechain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>chainp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chainp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>chainp</name> <operator>&amp;&amp;</operator> <call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><operator>*</operator><name>chainp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chainp</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>chainp</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>chain</name> <operator>=</operator> <operator>*</operator><name>chainp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVBUFFER_IMMUTABLE</name><operator>|</operator><name>EVBUFFER_MEM_PINNED_ANY</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>


<goto>goto <name>insert_new</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>datlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>insert_new</name>;</goto>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>evbuffer_chain_should_realign</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_chain_align</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>/</operator> <literal type="number">8</literal> <operator>||</operator>
<name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;</operator> <name>MAX_TO_COPY_IN_EXPAND</name> <operator>||</operator>
<name>datlen</name> <operator>&gt;=</operator> <operator>(</operator><name>EVBUFFER_CHAIN_MAX</name> <operator>-</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>datlen</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>


<goto>goto <name>insert_new</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name>datlen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></argument>,
<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>chainp</name> <operator>==</operator> <name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><name>chainp</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>chain</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
</block_content>}</block></else></if_stmt>

<label><name>insert_new</name>:</label>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>evbuffer_chain_insert_new</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<label><name>ok</name>:</label>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err</name>:</label>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>evbuffer_expand_fast_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_IMMUTABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>chain</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_chain_insert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>chain</name> <operator>=</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</init> <condition><expr><name>chain</name></expr>;</condition> <incr><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>space</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>chain</name> <operator>==</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>space</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>avail</name> <operator>+=</operator> <name>space</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>used</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>used</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&gt;=</operator> <name>datlen</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>==</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>chain</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><name>datlen</name> <operator>-</operator> <name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>



<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rmv_all</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>chain</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rmv_all</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>avail</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init>;</init> <condition><expr><name>chain</name></expr>;</condition> <incr><expr><name>chain</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>datlen</name> <operator>&gt;=</operator> <name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><name>datlen</name> <operator>-</operator> <name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rmv_all</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ZERO_CHAIN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rmv_all</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_expand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <call><name>evbuffer_expand_singlechain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>chain</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_UIO_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_IOVEC_IMPL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_IOVEC_IMPL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_UIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_WRITE_IOVEC</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UIO_MAXIOV</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>UIO_MAXIOV</name> <operator>&lt;</operator> <name>DEFAULT_WRITE_IOVEC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_WRITE_IOVEC</name></cpp:macro> <cpp:value>UIO_MAXIOV</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IOV_MAX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>IOV_MAX</name> <operator>&lt;</operator> <name>DEFAULT_WRITE_IOVEC</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_WRITE_IOVEC</name></cpp:macro> <cpp:value>IOV_MAX</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_WRITE_IOVEC</name></cpp:macro> <cpp:value>DEFAULT_WRITE_IOVEC</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOV_TYPE</name></cpp:macro> <cpp:value>struct iovec</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOV_PTR_FIELD</name></cpp:macro> <cpp:value>iov_base</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOV_LEN_FIELD</name></cpp:macro> <cpp:value>iov_len</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOV_LEN_TYPE</name></cpp:macro> <cpp:value>size_t</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_WRITE_IOVEC</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOV_TYPE</name></cpp:macro> <cpp:value>WSABUF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOV_PTR_FIELD</name></cpp:macro> <cpp:value>buf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOV_LEN_FIELD</name></cpp:macro> <cpp:value>len</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOV_LEN_TYPE</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_READ_IOVEC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_MAX_READ</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>














<function><type><name>int</name></type>
<name>evbuffer_read_setup_vecs_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>howmuch</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name> <modifier>*</modifier></type><name>vecs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_vecs_avail</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>chainp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>firstchainp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>so_far</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>howmuch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>so_far</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>firstchainp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><operator>*</operator><name>firstchainp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>firstchainp</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>firstchainp</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <operator>*</operator><name>firstchainp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_vecs_avail</name> <operator>&amp;&amp;</operator> <name>so_far</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>howmuch</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&gt;</operator> <operator>(</operator><name>howmuch</name> <operator>-</operator> <name>so_far</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>exact</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <name>howmuch</name> <operator>-</operator> <name>so_far</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>CHAIN_SPACE_PTR</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name>so_far</name> <operator>+=</operator> <name>avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>chainp</name> <operator>=</operator> <name>firstchainp</name></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_n_bytes_readable_on_socket</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIONREAD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>lng</name> <init>= <expr><name>EVBUFFER_MAX_READ</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lng</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>lng</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIONREAD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>EVBUFFER_MAX_READ</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>EVBUFFER_MAX_READ</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>evbuffer_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>howmuch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>chainp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_IOVEC_IMPL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>nvecs</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>remaining</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>freeze_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>get_n_bytes_readable_on_socket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;</operator> <name>EVBUFFER_MAX_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>EVBUFFER_MAX_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>howmuch</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>howmuch</name></expr></argument> &gt;</argument_list></name> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>howmuch</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_IOVEC_IMPL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>evbuffer_expand_fast_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>howmuch</name></expr></argument>, <argument><expr><name>NUM_READ_IOVEC</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>IOV_TYPE</name></type> <name><name>vecs</name><index>[<expr><name>NUM_READ_IOVEC</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVBUFFER_IOVEC_IS_NATIVE_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>nvecs</name> <operator>=</operator> <call><name>evbuffer_read_setup_vecs_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>howmuch</name></expr></argument>, <argument><expr><name>vecs</name></expr></argument>,
<argument><expr><name>NUM_READ_IOVEC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chainp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>ev_vecs</name><index>[<expr><name>NUM_READ_IOVEC</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>nvecs</name> <operator>=</operator> <call><name>evbuffer_read_setup_vecs_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>howmuch</name></expr></argument>, <argument><expr><name>ev_vecs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>chainp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nvecs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WSABUF_FROM_EVBUFFER_IOV</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vecs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev_vecs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bytesRead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>WSARecv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>vecs</name></expr></argument>, <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytesRead</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>WSAECONNABORTED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>bytesRead</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>readv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>vecs</name></expr></argument>, <argument><expr><name>nvecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chain</name> <operator>=</operator> <call><name>evbuffer_expand_singlechain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>howmuch</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>howmuch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>howmuch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_IOVEC_IMPL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nvecs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>


<decl_stmt><decl><type><name>size_t</name></type> <name>space</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><operator>*</operator><name>chainp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>space</name> <operator>&gt;</operator> <name>EVBUFFER_CHAIN_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>space</name> <operator>=</operator> <name>EVBUFFER_CHAIN_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ev_ssize_t</name><operator>)</operator><name>space</name> <operator>&lt;</operator> <name>remaining</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>chainp</name><operator>)</operator><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>space</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>space</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>chainp</name><operator>)</operator><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>remaining</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>=</operator> <name>chainp</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>chainp</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>chainp</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>advance_last_with_data</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_IOVEC_IMPL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>evbuffer_write_iovec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>ev_ssize_t</name></type> <name>howmuch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IOV_TYPE</name></type> <name><name>iov</name><index>[<expr><name>NUM_WRITE_IOVEC</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name><name>buffer</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>howmuch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<while>while <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>NUM_WRITE_IOVEC</name> <operator>&amp;&amp;</operator> <name>howmuch</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SENDFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_SENDFILE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>IOV_PTR_FIELD</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>howmuch</name> <operator>&gt;=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iov</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>IOV_LEN_FIELD</name> <operator>=</operator> <operator>(</operator><name>IOV_LEN_TYPE</name><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>howmuch</name> <operator>-=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>iov</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>IOV_LEN_FIELD</name> <operator>=</operator> <operator>(</operator><name>IOV_LEN_TYPE</name><operator>)</operator><name>howmuch</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bytesSent</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>WSASend</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytesSent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>bytesSent</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SENDFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>evbuffer_write_sendfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>dest_fd</name></decl></parameter>,
<parameter><decl><type><name>ev_ssize_t</name></type> <name>howmuch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name><name>buffer</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain_file_segment</name></name> <modifier>*</modifier></type><name>info</name> <init>=
<expr><call><name>EVBUFFER_CHAIN_EXTRA</name><argument_list>(<argument><expr>struct <name>evbuffer_chain_file_segment</name></expr></argument>,
<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>source_fd</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>segment</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SENDFILE_IS_MACOSX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SENDFILE_IS_FREEBSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_off_t</name></type> <name>len</name> <init>= <expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SENDFILE_IS_LINUX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SENDFILE_IS_SOLARIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_off_t</name></type> <name>offset</name> <init>= <expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SENDFILE_IS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sendfile</name><argument_list>(<argument><expr><name>source_fd</name></expr></argument>, <argument><expr><name>dest_fd</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SENDFILE_IS_FREEBSD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sendfile</name><argument_list>(<argument><expr><name>source_fd</name></expr></argument>, <argument><expr><name>dest_fd</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SENDFILE_IS_LINUX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sendfile</name><argument_list>(<argument><expr><name>dest_fd</name></expr></argument>, <argument><expr><name>source_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SENDFILE_IS_SOLARIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>off_t</name></type> <name>offset_orig</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sendfile</name><argument_list>(<argument><expr><name>dest_fd</name></expr></argument>, <argument><expr><name>source_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>-</operator> <name>offset_orig</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>offset</name> <operator>-</operator> <name>offset_orig</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>evbuffer_write_atmost</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>ev_ssize_t</name></type> <name>howmuch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>freeze_start</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>howmuch</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>howmuch</name></expr></argument> &gt;</argument_list></name> <name><name>buffer</name><operator>-&gt;</operator><name>total_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>howmuch</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>howmuch</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SENDFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name><name>buffer</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_SENDFILE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_write_sendfile</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>howmuch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_IOVEC_IMPL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_write_iovec</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>howmuch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>howmuch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>p</name> <operator>||</operator> <operator>!</operator><name>howmuch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>howmuch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>howmuch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>p</name> <operator>||</operator> <operator>!</operator><name>howmuch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>howmuch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SENDFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evbuffer_write_atmost</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>evbuffer_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>search</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type> <name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>evbuffer_search</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>what</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>search</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>search</name> <operator>=</operator> <call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>.</operator><name>pos</name></name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>search</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>search</name> <operator>+=</operator> <name><name>ptr</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>search</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>evbuffer_ptr_subtract</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>howfar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>howfar</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>pos</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>&amp;&amp;</operator> <name>howfar</name> <operator>&lt;=</operator> <name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>-=</operator> <name>howfar</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>pos</name></name> <operator>-=</operator> <name>howfar</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>newpos</name> <init>= <expr><name><name>pos</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>howfar</name></expr></init></decl>;</decl_stmt>


<return>return <expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>newpos</name></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_ptr_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>evbuffer_ptr_how</name></name></type> <name>how</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>= <expr><name>position</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>how</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVBUFFER_PTR_SET</name></expr>:</case>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVBUFFER_PTR_ADD</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>EV_SIZE_MAX</name> <operator>-</operator> <name>position</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>pos</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>EV_SIZE_MAX</name> <operator>-</operator> <name>left</name> <operator>&gt;=</operator> <name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>chain</name> <operator>&amp;&amp;</operator> <name>position</name> <operator>+</operator> <name>left</name> <operator>&gt;=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>left</name> <operator>-=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>chain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>=</operator> <name>position</name> <operator>+</operator> <name>left</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>PTR_NOT_FOUND</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>evbuffer_ptr_memcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_EVBUFFER_LOCKED</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name>EV_SIZE_MAX</name> <operator>-</operator> <name><name>len</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pos</name><operator>-&gt;</operator><name>pos</name></name> <operator>||</operator>
<name><name>pos</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name>chain</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n_comparable</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <name>position</name> <operator>&gt;</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n_comparable</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name>position</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n_comparable</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator> <name>position</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>,
<argument><expr><name>n_comparable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mem</name> <operator>+=</operator> <name>n_comparable</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n_comparable</name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type>
<name>evbuffer_search</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evbuffer_search_range</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type>
<name>evbuffer_search_range</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>first</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>chain</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_chain</name> <operator>=</operator> <name><name>end</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <name>EV_SSIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>chain</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start_at</name> <init>=
<expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator>
<name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>start_at</name></expr></argument>, <argument><expr><name>first</name></expr></argument>,
<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>p</name> <operator>-</operator> <name>start_at</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>+=</operator> <name>p</name> <operator>-</operator> <name>start_at</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evbuffer_ptr_memcmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>+</operator> <operator>(</operator><name>ev_ssize_t</name><operator>)</operator><name>len</name> <operator>&gt;</operator> <name><name>end</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>not_found</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>==</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>last_chain</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>not_found</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<label><name>not_found</name>:</label>
<expr_stmt><expr><call><name>PTR_NOT_FOUND</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_peek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name> <modifier>*</modifier></type><name>start_at</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_vec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>len_so_far</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>start_at</name> <operator>&amp;&amp;</operator> <name><name>start_at</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_at</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>start_at</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>chain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len_so_far</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name>
<operator>-</operator> <name><name>start_at</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n_vec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name>
<operator>+</operator> <name><name>start_at</name><operator>-&gt;</operator><name>internal_</name><operator>.</operator><name>pos_in_chain</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>len_so_far</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n_vec</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start_at</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name><name>start_at</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>chain</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len_so_far</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name><operator>&lt;</operator><name>n_vec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len_so_far</name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evbuffer_add_vprintf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>aq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>freeze_end</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chain</name> <operator>=</operator> <call><name>evbuffer_expand_singlechain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
size_t used = chain-&gt;misalign + chain-&gt;off;
buffer = (char *)chain-&gt;buffer + chain-&gt;misalign + chain-&gt;off;
EVUTIL_ASSERT(chain-&gt;buffer_len &gt;= used);
space = chain-&gt;buffer_len - used;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>CHAIN_SPACE_PTR</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>space</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>CHAIN_SPACE_LEN</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>va_copy</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>va_copy</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(&amp;(dst), &amp;(src), sizeof(va_list))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>aq</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>evutil_vsnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>space</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>aq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>aq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>INT_MAX</name> <operator>&gt;=</operator> <name>EVBUFFER_CHAIN_MAX</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name>sz</name> <operator>&gt;=</operator> <name>EVBUFFER_CHAIN_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sz</name> <operator>&lt;</operator> <name>space</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>advance_last_with_data</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chain</name> <operator>=</operator> <call><name>evbuffer_expand_singlechain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>


<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_add_printf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evbuffer_add_vprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_add_reference</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datlen</name></decl></parameter>,
<parameter><decl><type><name>evbuffer_ref_cleanup_cb</name></type> <name>cleanupfn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain_reference</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evbuffer_chain_reference</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chain</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVBUFFER_REFERENCE</name> <operator>|</operator> <name>EVBUFFER_IMMUTABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name>datlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>datlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>EVBUFFER_CHAIN_EXTRA</name><argument_list>(<argument><expr>struct <name>evbuffer_chain_reference</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cleanupfn</name></name> <operator>=</operator> <name>cleanupfn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>outbuf</name><operator>-&gt;</operator><name>freeze_end</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_insert</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>datlen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>evbuffer_file_segment</name></name> <modifier>*</modifier></type>
<name>evbuffer_file_segment_new</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ev_off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ev_off_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_file_segment</name></name> <modifier>*</modifier></type><name>seg</name> <init>=
<expr><call><name>mm_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evbuffer_file_segment</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>cleanup_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>cleanup_cb_arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lseek</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lseek</name></cpp:macro> <cpp:value>_lseeki64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>fstat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fstat</name></cpp:macro> <cpp:value>_fstat</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stat</name></cpp:macro> <cpp:value>_stat</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>length</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>ev_uint64_t</name><operator>)</operator><name>length</name> <operator>&gt;</operator> <name>EVBUFFER_CHAIN_MAX</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>ev_uint64_t</name><operator>)</operator><name>offset</name> <operator>&gt;</operator> <operator>(</operator><name>ev_uint64_t</name><operator>)</operator><operator>(</operator><name>EVBUFFER_CHAIN_MAX</name> <operator>-</operator> <name>length</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SENDFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EVBUF_FS_DISABLE_SENDFILE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>can_sendfile</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_file_segment_materialize</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SENDFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>done</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EVBUF_FS_DISABLE_LOCKING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVTHREAD_ALLOC_LOCK</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>seg</name></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_MMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>get_page_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SC_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>SC_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SC_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>evbuffer_file_segment_materialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_file_segment</name></name> <modifier>*</modifier></type><name>seg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>flags</name> <init>= <expr><name><name>seg</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><name><name>seg</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ev_off_t</name></type> <name>length</name> <init>= <expr><name><name>seg</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ev_off_t</name></type> <name>offset</name> <init>= <expr><name><name>seg</name><operator>-&gt;</operator><name>file_offset</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>contents</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_MMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EVBUF_FS_DISABLE_MMAP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>offset_rounded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset_leftover</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mapped</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>long</name></type> <name>page_size</name> <init>= <expr><call><name>get_page_size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>page_size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset_leftover</name> <operator>=</operator> <name>offset</name> <operator>%</operator> <name>page_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_rounded</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name>offset_leftover</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mapped</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <name>offset_leftover</name></expr></argument>,
<argument><expr><name>PROT_READ</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAP_NOCACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>MAP_NOCACHE</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAP_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>MAP_FILE</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>MAP_PRIVATE</name></expr></argument>,
<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>offset_rounded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mapped</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: mmap(%d, %d, %zu) failed"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>+</operator> <name>length</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>mapping</name></name> <operator>=</operator> <name>mapped</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>contents</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>mapped</name><operator>+</operator><name>offset_leftover</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>mmap_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>is_mapping</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EVBUF_FS_DISABLE_MMAP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>h</name> <init>= <expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>total_size</name> <init>= <expr><name>length</name><operator>+</operator><name>offset</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>CreateFileMapping</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PAGE_READONLY</name></expr></argument>,
<argument><expr><operator>(</operator><name>total_size</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><name>total_size</name> <operator>&amp;</operator> <literal type="number">0xfffffffful</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>mapping_handle</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>mmap_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>is_mapping</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_off_t</name></type> <name>start_pos</name> <init>= <expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_off_t</name></type> <name>read_so_far</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mem</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start_pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>read_so_far</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mem</name><operator>+</operator><name>read_so_far</name></expr></argument>, <argument><expr><name>length</name><operator>-</operator><name>read_so_far</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>read_so_far</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>length</name> <operator>&gt;</operator> <name>read_so_far</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>contents</name></name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>
</block_content>}</block>

<label><name>done</name>:</label>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>err</name>:</label>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>evbuffer_file_segment_add_cleanup_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_file_segment</name></name> <modifier>*</modifier></type><name>seg</name></decl></parameter>,
<parameter><decl><type><name>evbuffer_file_segment_cleanup_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>cleanup_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>cleanup_cb_arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evbuffer_file_segment_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_file_segment</name></name> <modifier>*</modifier></type><name>seg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>refcnt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVLOCK_LOCK</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>refcnt</name> <operator>=</operator> <operator>--</operator><name><name>seg</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>refcnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>refcnt</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>is_mapping</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>mapping_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>EVENT__HAVE_MMAP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>off_t</name></type> <name>offset_leftover</name></decl>;</decl_stmt>
<expr_stmt><expr><name>offset_leftover</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>%</operator> <call><name>get_page_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>offset_leftover</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: munmap failed"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>contents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>seg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUF_FS_CLOSE_ON_FREE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>seg</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>cleanup_cb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>seg</name><operator>-&gt;</operator><name>cleanup_cb</name></name>)<argument_list>(<argument><expr><operator>(</operator>struct <name>evbuffer_file_segment</name> <specifier>const</specifier><operator>*</operator><operator>)</operator><name>seg</name></expr></argument>,
<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>cleanup_cb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>cleanup_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>cleanup_cb_arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_add_file_segment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_file_segment</name></name> <modifier>*</modifier></type><name>seg</name></decl></parameter>, <parameter><decl><type><name>ev_off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ev_off_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain_file_segment</name></name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>can_use_sendfile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVLOCK_LOCK</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVBUFFER_FLAG_DRAINS_TO_FD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>can_use_sendfile</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seg</name><operator>-&gt;</operator><name>contents</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_file_segment_materialize</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>seg</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>freeze_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name><name>seg</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>offset</name><operator>+</operator><name>length</name> <operator>&gt;</operator> <name><name>seg</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <call><name>evbuffer_chain_new</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evbuffer_chain_file_segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chain</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>extra</name> <operator>=</operator> <call><name>EVBUFFER_CHAIN_EXTRA</name><argument_list>(<argument><expr>struct <name>evbuffer_chain_file_segment</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVBUFFER_IMMUTABLE</name><operator>|</operator><name>EVBUFFER_FILESEGMENT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>can_use_sendfile</name> <operator>&amp;&amp;</operator> <name><name>seg</name><operator>-&gt;</operator><name>can_sendfile</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVBUFFER_SENDFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>is_mapping</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>total_offset</name> <init>= <expr><name><name>seg</name><operator>-&gt;</operator><name>mmap_offset</name></name><operator>+</operator><name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>offset_rounded</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset_remaining</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPVOID</name></type> <name>data</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>total_offset</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>si</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_remaining</name> <operator>=</operator> <name>total_offset</name> <operator>%</operator> <name><name>si</name><operator>.</operator><name>dwAllocationGranularity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_rounded</name> <operator>=</operator> <name>total_offset</name> <operator>-</operator> <name>offset_remaining</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>MapViewOfFile</name><argument_list>(
<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>mapping_handle</name></name></expr></argument>,
<argument><expr><name>FILE_MAP_READ</name></expr></argument>,
<argument><expr><name>offset_rounded</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>,
<argument><expr><name>offset_rounded</name> <operator>&amp;</operator> <literal type="number">0xfffffffful</literal></expr></argument>,
<argument><expr><name>length</name> <operator>+</operator> <name>offset_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name>length</name><operator>+</operator><name>offset_remaining</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>=</operator> <name>offset_remaining</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>seg</name><operator>-&gt;</operator><name>contents</name></name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>seg</name><operator>-&gt;</operator><name>contents</name></name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>segment</name></name> <operator>=</operator> <name>seg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>n_add_for_cb</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_chain_insert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_invoke_callbacks_</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_file_segment_free</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_add_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ev_off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ev_off_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_file_segment</name></name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name>EVBUF_FS_CLOSE_ON_FREE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>evbuffer_file_segment_new</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_add_file_segment</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_file_segment_free</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evbuffer_setcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>evbuffer_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LIST_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_remove_all_callbacks</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>ent</name> <init>=
<expr><call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cbarg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>cb_obsolete</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVBUFFER_CB_OBSOLETE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type>
<name>evbuffer_add_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>evbuffer_cb_func</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evbuffer_cb_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>cb_func</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>cbarg</name></name> <operator>=</operator> <name>cbarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>EVBUFFER_CB_ENABLED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_remove_cb_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_REMOVE</name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_remove_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>evbuffer_cb_func</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>cbent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>LIST_FOREACH</name><argument_list>(<argument>cbent</argument>, <argument>&amp;buffer-&gt;callbacks</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name><name>cbent</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>cb_func</name></name> <operator>&amp;&amp;</operator> <name>cbarg</name> <operator>==</operator> <name><name>cbent</name><operator>-&gt;</operator><name>cbarg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>evbuffer_remove_cb_entry</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>cbent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_cb_set_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>EVBUFFER_CB_INTERNAL_FLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_cb_clear_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>EVBUFFER_CB_INTERNAL_FLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_freeze</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>freeze_start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>freeze_end</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evbuffer_unfreeze</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>freeze_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>freeze_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
void
evbuffer_cb_suspend(struct evbuffer *buffer, struct evbuffer_cb_entry *cb)
{
if (!(cb-&gt;flags &amp; EVBUFFER_CB_SUSPENDED)) {
cb-&gt;size_before_suspend = evbuffer_get_length(buffer);
cb-&gt;flags |= EVBUFFER_CB_SUSPENDED;
}
}

void
evbuffer_cb_unsuspend(struct evbuffer *buffer, struct evbuffer_cb_entry *cb)
{
if ((cb-&gt;flags &amp; EVBUFFER_CB_SUSPENDED)) {
unsigned call = (cb-&gt;flags &amp; EVBUFFER_CB_CALL_ON_UNSUSPEND);
size_t sz = cb-&gt;size_before_suspend;
cb-&gt;flags &amp;= ~(EVBUFFER_CB_SUSPENDED|
EVBUFFER_CB_CALL_ON_UNSUSPEND);
cb-&gt;size_before_suspend = 0;
if (call &amp;&amp; (cb-&gt;flags &amp; EVBUFFER_CB_ENABLED)) {
cb-&gt;cb(buffer, sz, evbuffer_get_length(buffer), cb-&gt;cbarg);
}
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>evbuffer_get_callbacks_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cbs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_cbs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVBUFFER_LOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>deferred_cbs</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max_cbs</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cbs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>deferred</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBUFFER_UNLOCK</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
</unit>
