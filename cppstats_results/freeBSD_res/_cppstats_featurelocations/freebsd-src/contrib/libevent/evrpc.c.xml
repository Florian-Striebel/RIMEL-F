<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/evrpc.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WIN32_LEAN_AND_MEAN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/rpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/rpc_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evrpc-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/tag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/http_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/http_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type>
<name>evrpc_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http_server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_base</name></name><modifier>*</modifier></type> <name>base</name> <init>= <expr><call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evrpc_base</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>evtag_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>registered_rpcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>input_hooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>output_hooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>paused_requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>http_server</name></name> <operator>=</operator> <name>http_server</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>base</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evrpc_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc</name></name> <modifier>*</modifier></type><name>rpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_ctx</name></name> <modifier>*</modifier></type><name>pause</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>rpc</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>registered_rpcs</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evrpc_unregister_rpc</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>rpc</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><operator>(</operator><name>pause</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>paused_requests</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>paused_requests</name></name></expr></argument>, <argument><expr><name>pause</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><operator>(</operator><name>hook</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>input_hooks</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evrpc_remove_hook</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>EVRPC_INPUT</name></expr></argument>, <argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><operator>(</operator><name>hook</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>output_hooks</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evrpc_remove_hook</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>EVRPC_OUTPUT</name></expr></argument>, <argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>evrpc_add_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vbase</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_TYPE</name></name></type> <name>hook_type</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hooks_</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>vbase</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_list</name></name> <modifier>*</modifier></type><name>head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook</name></name> <modifier>*</modifier></type><name>hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>hook_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVRPC_INPUT</name></expr>:</case>
<expr_stmt><expr><name>head</name> <operator>=</operator> <operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>in_hooks</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVRPC_OUTPUT</name></expr>:</case>
<expr_stmt><expr><name>head</name> <operator>=</operator> <operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>out_hooks</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>hook_type</name> <operator>==</operator> <name>EVRPC_INPUT</name> <operator>||</operator> <name>hook_type</name> <operator>==</operator> <name>EVRPC_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>hook</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evrpc_hook</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>hook</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>process_arg</name></name> <operator>=</operator> <name>cb_arg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>hook</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>hook</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evrpc_remove_hook_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_hook_list</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook</name></name> <modifier>*</modifier></type><name>hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>hook</argument>, <argument>head</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hook</name> <operator>==</operator> <name>handle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>hook</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>evrpc_remove_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vbase</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_TYPE</name></name></type> <name>hook_type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hooks_</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>vbase</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_list</name></name> <modifier>*</modifier></type><name>head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>hook_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVRPC_INPUT</name></expr>:</case>
<expr_stmt><expr><name>head</name> <operator>=</operator> <operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>in_hooks</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVRPC_OUTPUT</name></expr>:</case>
<expr_stmt><expr><name>head</name> <operator>=</operator> <operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>out_hooks</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>hook_type</name> <operator>==</operator> <name>EVRPC_INPUT</name> <operator>||</operator> <name>hook_type</name> <operator>==</operator> <name>EVRPC_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><call><name>evrpc_remove_hook_internal</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evrpc_process_hooks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_hook_list</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl>;</decl_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>hook</argument>, <argument>head</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name><name>hook</name><operator>-&gt;</operator><name>process</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name><name>hook</name><operator>-&gt;</operator><name>process_arg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>EVRPC_CONTINUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>EVRPC_CONTINUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evrpc_pool_schedule</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evrpc_request_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evrpc_construct_uri</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>constructed_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>constructed_uri_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>constructed_uri_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>EVRPC_URI_PREFIX</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>constructed_uri</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>constructed_uri_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: failed to register rpc at %s"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>constructed_uri</name></expr></argument>, <argument><expr><name>EVRPC_URI_PREFIX</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>EVRPC_URI_PREFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>constructed_uri</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>EVRPC_URI_PREFIX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>constructed_uri</name><index>[<expr><name>constructed_uri_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>constructed_uri</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evrpc_register_rpc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evrpc</name></name> <modifier>*</modifier></type><name>rpc</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>constructed_uri</name> <init>= <expr><call><name>evrpc_construct_uri</name><argument_list>(<argument><expr><name><name>rpc</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>cb_arg</name></name> <operator>=</operator> <name>cb_arg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>registered_rpcs</name></name></expr></argument>, <argument><expr><name>rpc</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>http_server</name></name></expr></argument>,
<argument><expr><name>constructed_uri</name></expr></argument>,
<argument><expr><name>evrpc_request_cb</name></expr></argument>,
<argument><expr><name>rpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>constructed_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evrpc_unregister_rpc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>registered_uri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc</name></name> <modifier>*</modifier></type><name>rpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>


<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>rpc</argument>, <argument>&amp;base-&gt;registered_rpcs</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rpc</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>rpc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>registered_rpcs</name></name></expr></argument>, <argument><expr><name>rpc</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>registered_uri</name> <operator>=</operator> <call><name>evrpc_construct_uri</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_del_cb</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>http_server</name></name></expr></argument>, <argument><expr><name>registered_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>registered_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>rpc</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>rpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evrpc_pause_request</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vbase</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evrpc_request_cb_closure</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_request_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc</name></name> <modifier>*</modifier></type><name>rpc</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name> <modifier>*</modifier></type><name>rpc_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EVHTTP_REQ_POST</name> <operator>||</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rpc_state</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evrpc_req_generic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rpc_state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>rpc</name></name> <operator>=</operator> <name>rpc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>http_req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>rpc_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rpc</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>input_hooks</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hook_res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evrpc_hook_associate_meta_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rpc_state</name><operator>-&gt;</operator><name>hook_meta</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>hook_res</name> <operator>=</operator> <call><name>evrpc_process_hooks</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rpc</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>input_hooks</name></name></expr></argument>,
<argument><expr><name>rpc_state</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>hook_res</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVRPC_TERMINATE</name></expr>:</case>
<goto>goto <name>error</name>;</goto>
<case>case <expr><name>EVRPC_PAUSE</name></expr>:</case>
<expr_stmt><expr><call><name>evrpc_pause_request</name><argument_list>(<argument><expr><name><name>rpc</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>rpc_state</name></expr></argument>,
<argument><expr><name>evrpc_request_cb_closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>EVRPC_CONTINUE</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>hook_res</name> <operator>==</operator> <name>EVRPC_TERMINATE</name> <operator>||</operator>
<name>hook_res</name> <operator>==</operator> <name>EVRPC_CONTINUE</name> <operator>||</operator>
<name>hook_res</name> <operator>==</operator> <name>EVRPC_PAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evrpc_request_cb_closure</name><argument_list>(<argument><expr><name>rpc_state</name></expr></argument>, <argument><expr><name>EVRPC_CONTINUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>evrpc_reqstate_free_</name><argument_list>(<argument><expr><name>rpc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_send_error</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_SERVUNAVAIL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_request_cb_closure</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type> <name>hook_res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name> <modifier>*</modifier></type><name>rpc_state</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc</name></name> <modifier>*</modifier></type><name>rpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>rpc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rpc</name> <operator>=</operator> <name><name>rpc_state</name><operator>-&gt;</operator><name>rpc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>rpc_state</name><operator>-&gt;</operator><name>http_req</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hook_res</name> <operator>==</operator> <name>EVRPC_TERMINATE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>request</name></name> <operator>=</operator> <call><name><name>rpc</name><operator>-&gt;</operator><name>request_new</name></name><argument_list>(<argument><expr><name><name>rpc</name><operator>-&gt;</operator><name>request_new_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rpc_state</name><operator>-&gt;</operator><name>request</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>rpc</name><operator>-&gt;</operator><name>request_unmarshal</name></name><argument_list>(
<argument><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>reply</name></name> <operator>=</operator> <call><name><name>rpc</name><operator>-&gt;</operator><name>reply_new</name></name><argument_list>(<argument><expr><name><name>rpc</name><operator>-&gt;</operator><name>reply_new_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rpc_state</name><operator>-&gt;</operator><name>reply</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name><name>rpc</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>rpc_state</name></expr></argument>, <argument><expr><name><name>rpc</name><operator>-&gt;</operator><name>cb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>evrpc_reqstate_free_</name><argument_list>(<argument><expr><name>rpc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_send_error</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_SERVUNAVAIL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>evrpc_reqstate_free_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name><modifier>*</modifier></type> <name>rpc_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc</name></name> <modifier>*</modifier></type><name>rpc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>rpc_state</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rpc</name> <operator>=</operator> <name><name>rpc_state</name><operator>-&gt;</operator><name>rpc</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rpc_state</name><operator>-&gt;</operator><name>hook_meta</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evrpc_hook_context_free_</name><argument_list>(<argument><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>hook_meta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rpc_state</name><operator>-&gt;</operator><name>request</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>rpc</name><operator>-&gt;</operator><name>request_free</name></name><argument_list>(<argument><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rpc_state</name><operator>-&gt;</operator><name>reply</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>rpc</name><operator>-&gt;</operator><name>reply_free</name></name><argument_list>(<argument><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rpc_state</name><operator>-&gt;</operator><name>rpc_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>rpc_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>rpc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_request_done_closure</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>evrpc_request_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name> <modifier>*</modifier></type><name>rpc_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc</name></name> <modifier>*</modifier></type><name>rpc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>rpc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>rpc_state</name><operator>-&gt;</operator><name>http_req</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rpc</name> <operator>=</operator> <name><name>rpc_state</name><operator>-&gt;</operator><name>rpc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>rpc</name><operator>-&gt;</operator><name>reply_complete</name></name><argument_list>(<argument><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rpc_state</name><operator>-&gt;</operator><name>rpc_data</name></name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name><name>rpc</name><operator>-&gt;</operator><name>reply_marshal</name></name><argument_list>(<argument><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>rpc_data</name></name></expr></argument>, <argument><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rpc</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>output_hooks</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hook_res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evrpc_hook_associate_meta_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rpc_state</name><operator>-&gt;</operator><name>hook_meta</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>evcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>hook_res</name> <operator>=</operator> <call><name>evrpc_process_hooks</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rpc</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>output_hooks</name></name></expr></argument>,
<argument><expr><name>rpc_state</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>rpc_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>hook_res</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVRPC_TERMINATE</name></expr>:</case>
<goto>goto <name>error</name>;</goto>
<case>case <expr><name>EVRPC_PAUSE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>evrpc_pause_request</name><argument_list>(<argument><expr><name><name>rpc</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>rpc_state</name></expr></argument>,
<argument><expr><name>evrpc_request_done_closure</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<return>return;</return>
<case>case <expr><name>EVRPC_CONTINUE</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>hook_res</name> <operator>==</operator> <name>EVRPC_TERMINATE</name> <operator>||</operator>
<name>hook_res</name> <operator>==</operator> <name>EVRPC_CONTINUE</name> <operator>||</operator>
<name>hook_res</name> <operator>==</operator> <name>EVRPC_PAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evrpc_request_done_closure</name><argument_list>(<argument><expr><name>rpc_state</name></expr></argument>, <argument><expr><name>EVRPC_CONTINUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>evrpc_reqstate_free_</name><argument_list>(<argument><expr><name>rpc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_send_error</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_SERVUNAVAIL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>evrpc_get_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>req</name><operator>-&gt;</operator><name>request</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>evrpc_get_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>req</name><operator>-&gt;</operator><name>reply</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_request_done_closure</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type> <name>hook_res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name> <modifier>*</modifier></type><name>rpc_state</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>rpc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>rpc_state</name><operator>-&gt;</operator><name>http_req</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hook_res</name> <operator>==</operator> <name>EVRPC_TERMINATE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>,
<argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><literal type="string">"application/octet-stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evhttp_send_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><name><name>rpc_state</name><operator>-&gt;</operator><name>rpc_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evrpc_reqstate_free_</name><argument_list>(<argument><expr><name>rpc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>evrpc_reqstate_free_</name><argument_list>(<argument><expr><name>rpc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_send_error</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_SERVUNAVAIL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evrpc_schedule_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>connection</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type>
<name>evrpc_pool_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evrpc_pool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>paused_requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>input_hooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>output_hooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>pool</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_request_wrapper_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>hook_meta</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evrpc_hook_context_free_</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>hook_meta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evrpc_pool_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>connection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_ctx</name></name> <modifier>*</modifier></type><name>pause</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook</name></name> <modifier>*</modifier></type><name>hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>request</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evrpc_request_wrapper_free</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><operator>(</operator><name>pause</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>paused_requests</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>paused_requests</name></name></expr></argument>, <argument><expr><name>pause</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><operator>(</operator><name>connection</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>connections</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>connections</name></name></expr></argument>, <argument><expr><name>connection</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><operator>(</operator><name>hook</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>input_hooks</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evrpc_remove_hook</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>EVRPC_INPUT</name></expr></argument>, <argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><operator>(</operator><name>hook</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>output_hooks</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evrpc_remove_hook</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>EVRPC_OUTPUT</name></expr></argument>, <argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>evrpc_pool_add_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>connection</name><operator>-&gt;</operator><name>http_server</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>connections</name></name></expr></argument>, <argument><expr><name>connection</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>base</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_set_base</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evutil_timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connection</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_set_timeout</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>request</name> <init>=
<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evrpc_schedule_request</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evrpc_pool_remove_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>connections</name></name></expr></argument>, <argument><expr><name>connection</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evrpc_pool_set_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout_in_secs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>evcon</argument>, <argument>&amp;pool-&gt;connections</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_set_timeout</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>timeout_in_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout_in_secs</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evrpc_reply_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evrpc_request_timeout</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type>
<name>evrpc_pool_find_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>connection</name></decl>;</decl_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>connection</argument>, <argument>&amp;pool-&gt;connections</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connection</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>connection</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evrpc_schedule_request_closure</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type></decl></parameter>)</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>evrpc_schedule_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>connection</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_status</name></name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>evrpc_reply_done</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>request_marshal</name></name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>evcon</name></name> <operator>=</operator> <name>connection</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>output_hooks</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hook_res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evrpc_hook_associate_meta_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hook_meta</name></name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>hook_res</name> <operator>=</operator> <call><name>evrpc_process_hooks</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>output_hooks</name></name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>hook_res</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVRPC_TERMINATE</name></expr>:</case>
<goto>goto <name>error</name>;</goto>
<case>case <expr><name>EVRPC_PAUSE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>evrpc_pause_request</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>evrpc_schedule_request_closure</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>EVRPC_CONTINUE</name></expr>:</case>

<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>hook_res</name> <operator>==</operator> <name>EVRPC_TERMINATE</name> <operator>||</operator>
<name>hook_res</name> <operator>==</operator> <name>EVRPC_CONTINUE</name> <operator>||</operator>
<name>hook_res</name> <operator>==</operator> <name>EVRPC_PAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evrpc_schedule_request_closure</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>EVRPC_CONTINUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>EVRPC_STATUS_ERR_UNSTARTED</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evrpc_request_wrapper_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_schedule_request_closure</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type> <name>hook_res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>evcon</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_status</name></name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hook_res</name> <operator>==</operator> <name>EVRPC_TERMINATE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>evrpc_construct_uri</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uri</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evtimer_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_POST</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>EVRPC_STATUS_ERR_UNSTARTED</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evrpc_request_wrapper_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>evrpc_pause_request</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vbase</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hooks_</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>vbase</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_ctx</name></name> <modifier>*</modifier></type><name>pause</name> <init>= <expr><call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pause</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pause</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>pause_requests</name></name></expr></argument>, <argument><expr><name>pause</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evrpc_resume_request</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vbase</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type> <name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hooks_</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>vbase</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pause_list</name></name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>pause_requests</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_ctx</name></name> <modifier>*</modifier></type><name>pause</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>pause</argument>, <argument>head</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pause</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>pause</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>pause</name><operator>-&gt;</operator><name>cb</name></name>)<argument_list>(<argument><expr><name><name>pause</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>pause</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evrpc_make_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>evtimer_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>evrpc_request_timeout</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>connections</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evrpc_pool_schedule</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type>
<name>evrpc_make_request_ctx</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rpcname</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>req_marshal</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rpl_clear</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rpl_unmarshal</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_status</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>evrpc_request_wrapper</name> <operator>*</operator><operator>)</operator>
<call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evrpc_request_wrapper</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hook_meta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>evcon</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>rpcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cb_arg</name></name> <operator>=</operator> <name>cbarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>request</name></name> <operator>=</operator> <name>request</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reply</name></name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>request_marshal</name></name> <operator>=</operator> <name>req_marshal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reply_clear</name></name> <operator>=</operator> <name>rpl_clear</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reply_unmarshal</name></name> <operator>=</operator> <name>rpl_unmarshal</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ctx</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_reply_done_closure</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_reply_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hook_res</name> <init>= <expr><name>EVRPC_CONTINUE</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evrpc_reply_done_closure</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>EVRPC_CONTINUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>input_hooks</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evrpc_hook_associate_meta_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hook_meta</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>evcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>hook_res</name> <operator>=</operator> <call><name>evrpc_process_hooks</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>input_hooks</name></name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>hook_res</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVRPC_TERMINATE</name></expr>:</case>
<case>case <expr><name>EVRPC_CONTINUE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>EVRPC_PAUSE</name></expr>:</case>






<if_stmt><if>if <condition>(<expr><name>req</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_request_own</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evrpc_pause_request</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>evrpc_reply_done_closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<default>default:</default>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>hook_res</name> <operator>==</operator> <name>EVRPC_TERMINATE</name> <operator>||</operator>
<name>hook_res</name> <operator>==</operator> <name>EVRPC_CONTINUE</name> <operator>||</operator>
<name>hook_res</name> <operator>==</operator> <name>EVRPC_PAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evrpc_reply_done_closure</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hook_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_reply_done_closure</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type> <name>hook_res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_status</name></name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status</name><operator>.</operator><name>http_req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>status</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>EVRPC_STATUS_ERR_TIMEOUT</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hook_res</name> <operator>==</operator> <name>EVRPC_TERMINATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>status</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>EVRPC_STATUS_ERR_HOOKABORTED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>reply_unmarshal</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>status</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>EVRPC_STATUS_ERR_BADPAYLOAD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>reply_clear</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evrpc_request_wrapper_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>req</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>evhttp_request_is_owned</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>evrpc_pool_schedule</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_pool_schedule</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>evcon</name> <operator>=</operator> <call><name>evrpc_pool_find_connection</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evrpc_schedule_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_request_timeout</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>evcon</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>evcon</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_meta_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_meta_list</name></name> <modifier>*</modifier></type><name>meta_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_meta</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>meta_data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><name>meta_data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><name>meta_data</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>evrpc_hook_meta</name></name> <modifier>*</modifier></type>
<name>evrpc_hook_meta_new_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_meta</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evrpc_hook_meta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>meta_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>evcon</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ctx</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_hook_associate_meta_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_hook_meta</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_meta</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>*</operator><name>pctx</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pctx</name> <operator>=</operator> <name>ctx</name> <operator>=</operator> <call><name>evrpc_hook_meta_new_</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>evcon</name></name> <operator>=</operator> <name>evcon</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evrpc_hook_context_free_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_hook_meta</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evrpc_meta_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>meta_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>evrpc_hook_add_meta</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_meta</name></name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_meta</name></name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>store</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>hook_meta</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>store</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>hook_meta</name></name> <operator>=</operator> <call><name>evrpc_hook_meta_new_</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>meta</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evrpc_meta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>meta</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>meta_data</name></name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evrpc_hook_find_meta</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_meta</name></name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>hook_meta</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>meta</argument>, <argument>&amp;req-&gt;hook_meta-&gt;meta_data</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data_size</name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type>
<name>evrpc_hook_get_connection</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>req</name><operator>-&gt;</operator><name>hook_meta</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>req</name><operator>-&gt;</operator><name>hook_meta</name><operator>-&gt;</operator><name>evcon</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evrpc_send_request_generic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_status</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rpcname</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>req_marshal</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rpl_clear</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rpl_unmarshal</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_status</name></name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>evrpc_make_request_ctx</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>,
<argument><expr><name>rpcname</name></expr></argument>, <argument><expr><name>req_marshal</name></expr></argument>, <argument><expr><name>rpl_clear</name></expr></argument>, <argument><expr><name>rpl_unmarshal</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>cb_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>evrpc_make_request</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>EVRPC_STATUS_ERR_UNSTARTED</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>cb</name><operator>)</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>status</name><operator>,</operator> <name>request</name><operator>,</operator> <name>reply</name><operator>,</operator> <name>cb_arg</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>evrpc</name></name> <modifier>*</modifier></type>
<name>evrpc_register_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>req_new</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>req_new_arg</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>req_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>req_unmarshal</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>rpl_new</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rpl_new_arg</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rpl_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rpl_complete</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rpl_marshal</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc</name></name><modifier>*</modifier></type> <name>rpc</name> <init>= <expr><operator>(</operator>struct <name>evrpc</name> <operator>*</operator><operator>)</operator><call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evrpc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rpc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>uri</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rpc</name><operator>-&gt;</operator><name>uri</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>rpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>request_new</name></name> <operator>=</operator> <name>req_new</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>request_new_arg</name></name> <operator>=</operator> <name>req_new_arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>request_free</name></name> <operator>=</operator> <name>req_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>request_unmarshal</name></name> <operator>=</operator> <name>req_unmarshal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>reply_new</name></name> <operator>=</operator> <name>rpl_new</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>reply_new_arg</name></name> <operator>=</operator> <name>rpl_new_arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>reply_free</name></name> <operator>=</operator> <name>rpl_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>reply_complete</name></name> <operator>=</operator> <name>rpl_complete</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>reply_marshal</name></name> <operator>=</operator> <name>rpl_marshal</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>rpc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evrpc_register_generic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>req_new</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>req_new_arg</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>req_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>req_unmarshal</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>rpl_new</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rpl_new_arg</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rpl_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rpl_complete</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rpl_marshal</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc</name></name><modifier>*</modifier></type> <name>rpc</name> <init>=
<expr><call><name>evrpc_register_object</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>req_new</name></expr></argument>, <argument><expr><name>req_new_arg</name></expr></argument>, <argument><expr><name>req_free</name></expr></argument>, <argument><expr><name>req_unmarshal</name></expr></argument>,
<argument><expr><name>rpl_new</name></expr></argument>, <argument><expr><name>rpl_new_arg</name></expr></argument>, <argument><expr><name>rpl_free</name></expr></argument>, <argument><expr><name>rpl_complete</name></expr></argument>, <argument><expr><name>rpl_marshal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rpc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>evrpc_register_rpc</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>rpc</name></expr></argument>,
<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr>struct <name>evrpc_req_generic</name><operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>callback</name></expr></argument>, <argument><expr><name>cbarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type>
<name>evrpc_request_get_pool</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evrpc_request_set_pool</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evrpc_request_set_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_status</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cb_arg</name></name> <operator>=</operator> <name>cb_arg</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
