<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/bufferevent_filter.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STDARG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bufferevent-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_filter_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_filter_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>be_filter_unlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>be_filter_destruct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>be_filter_readcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>be_filter_writecb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>be_filter_eventcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_filter_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>iotype</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_filter_ctrl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_ctrl_op</name></name></type></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bufferevent_filtered_inbuf_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>cbinfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bufferevent_filtered_outbuf_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>bufferevent_filtered</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name></type> <name>bev</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>inbuf_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>outbuf_cb</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>got_eof</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_context</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bufferevent_filter_cb</name></type> <name>process_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufferevent_filter_cb</name></type> <name>process_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bufferevent_ops</name></name></type> <name>bufferevent_ops_filter</name> <init>= <expr><block>{
<expr><literal type="string">"filter"</literal></expr>,
<expr><call><name>evutil_offsetof</name><argument_list>(<argument><expr>struct <name>bufferevent_filtered</name></expr></argument>, <argument><expr><name><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>,
<expr><name>be_filter_enable</name></expr>,
<expr><name>be_filter_disable</name></expr>,
<expr><name>be_filter_unlink</name></expr>,
<expr><name>be_filter_destruct</name></expr>,
<expr><name>bufferevent_generic_adj_timeouts_</name></expr>,
<expr><name>be_filter_flush</name></expr>,
<expr><name>be_filter_ctrl</name></expr>,
}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type>
<name>upcast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bev_f</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>be_ops</name></name> <operator>!=</operator> <operator>&amp;</operator><name>bufferevent_ops_filter</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bev_f</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>bev</name><operator>)</operator> <operator>-</operator>
<call><name>evutil_offsetof</name><argument_list>(<argument><expr>struct <name>bufferevent_filtered</name></expr></argument>, <argument><expr><name><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bev_f</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>be_ops</name></name> <operator>==</operator> <operator>&amp;</operator><name>bufferevent_ops_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bev_f</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>downcast</name><parameter_list>(<parameter><type><name>bev_f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;(bev_f)-&gt;bev.bev)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_underlying_writebuf_full</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>u</name> <init>= <expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>state</name> <operator>==</operator> <name>BEV_NORMAL</name> <operator>&amp;&amp;</operator>
<name><name>u</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>high</name></name> <operator>&amp;&amp;</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>u</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>high</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_readbuf_full</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><call><name>downcast</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>state</name> <operator>==</operator> <name>BEV_NORMAL</name> <operator>&amp;&amp;</operator>
<name><name>bufev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name> <operator>&amp;&amp;</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>enum</name> <name>bufferevent_filter_result</name></name></type>
<name>be_null_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>lim</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>state</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_remove_buffer</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>lim</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BEV_OK</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>BEV_ERROR</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>bufferevent_filter_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_filter_cb</name></type> <name>input_filter</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_filter_cb</name></type> <name>output_filter</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_context</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bufev_f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_options</name> <init>= <expr><name>options</name> <operator>&amp;</operator> <operator>~</operator><name>BEV_OPT_THREADSAFE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>underlying</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_filter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>input_filter</name> <operator>=</operator> <name>be_null_filter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_filter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output_filter</name> <operator>=</operator> <name>be_null_filter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bufev_f</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bufferevent_filtered</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bufev_f</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bufferevent_init_common_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev_f</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name><name>underlying</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bufferevent_ops_filter</name></expr></argument>, <argument><expr><name>tmp_options</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>bufev_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>BEV_OPT_THREADSAFE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_enable_locking_</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev_f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bufev_f</name><operator>-&gt;</operator><name>underlying</name></name> <operator>=</operator> <name>underlying</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufev_f</name><operator>-&gt;</operator><name>process_in</name></name> <operator>=</operator> <name>input_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev_f</name><operator>-&gt;</operator><name>process_out</name></name> <operator>=</operator> <name>output_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev_f</name><operator>-&gt;</operator><name>free_context</name></name> <operator>=</operator> <name>free_context</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev_f</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name><name>bufev_f</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>be_filter_readcb</name></expr></argument>, <argument><expr><name>be_filter_writecb</name></expr></argument>, <argument><expr><name>be_filter_eventcb</name></expr></argument>, <argument><expr><name>bufev_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufev_f</name><operator>-&gt;</operator><name>inbuf_cb</name></name> <operator>=</operator> <call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev_f</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>input</name></expr></argument>,
<argument><expr><name>bufferevent_filtered_inbuf_cb</name></expr></argument>, <argument><expr><name>bufev_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_cb_clear_flags</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev_f</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>input</name></expr></argument>, <argument><expr><name><name>bufev_f</name><operator>-&gt;</operator><name>inbuf_cb</name></name></expr></argument>,
<argument><expr><name>EVBUFFER_CB_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufev_f</name><operator>-&gt;</operator><name>outbuf_cb</name></name> <operator>=</operator> <call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev_f</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>output</name></expr></argument>,
<argument><expr><name>bufferevent_filtered_outbuf_cb</name></expr></argument>, <argument><expr><name>bufev_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_init_generic_timeout_cbs_</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev_f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_incref_</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>, <argument><expr><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_suspend_read_</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_FILT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev_f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_filter_unlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bevf</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>options</name></name> <operator>&amp;</operator> <name>BEV_OPT_CLOSE_ON_FREE</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>refcnt</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"BEV_OPT_CLOSE_ON_FREE set on an "</literal>
<literal type="string">"bufferevent with too few references"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>errorcb</name></name> <operator>==</operator> <name>be_filter_eventcb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_FILT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_filter_destruct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bevf</name><operator>-&gt;</operator><name>free_context</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>bevf</name><operator>-&gt;</operator><name>free_context</name></name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bevf</name><operator>-&gt;</operator><name>inbuf_cb</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_remove_cb_entry</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>inbuf_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bevf</name><operator>-&gt;</operator><name>outbuf_cb</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_remove_cb_entry</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>outbuf_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_filter_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>event</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_READ_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_FILT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_filter_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>event</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_DEL_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>event</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_DEL_GENERIC_READ_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_suspend_read_</name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_FILT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>bufferevent_filter_result</name></name></type>
<name>be_filter_process_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>processed_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>bufferevent_filter_result</name></name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><call><name>downcast</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>BEV_NORMAL</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator> <operator>||</operator>
<call><name>be_readbuf_full</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BEV_OK</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>limit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>BEV_NORMAL</name> <operator>&amp;&amp;</operator> <name><name>bev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>bev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name> <operator>-</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>bevf</name><operator>-&gt;</operator><name>process_in</name></name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>input</name></name></expr></argument>,
<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>BEV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>processed_out</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>res</name> <operator>==</operator> <name>BEV_OK</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>be_readbuf_full</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>processed_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_READ_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>enum</name> <name>bufferevent_filter_result</name></name></type>
<name>be_filter_process_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>processed_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>bufferevent_filter_result</name></name></type> <name>res</name> <init>= <expr><name>BEV_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><call><name>downcast</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>again</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>BEV_NORMAL</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>||</operator>
<call><name>be_underlying_writebuf_full</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BEV_OK</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>evbuffer_cb_clear_flags</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>outbuf_cb</name></name></expr></argument>,
<argument><expr><name>EVBUFFER_CB_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>again</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>limit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>BEV_NORMAL</name> <operator>&amp;&amp;</operator>
<name><name>bevf</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>high</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>bevf</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>high</name></name> <operator>-</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>bevf</name><operator>-&gt;</operator><name>process_out</name></name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>output</name></expr></argument>,
<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>output</name></name></expr></argument>,
<argument><expr><name>limit</name></expr></argument>,
<argument><expr><name>state</name></expr></argument>,
<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>BEV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>processed</name> <operator>=</operator> <operator>*</operator><name>processed_out</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(
<expr><name>res</name> <operator>==</operator> <name>BEV_OK</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator>


<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>be_underlying_writebuf_full</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>,<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>processed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>BEV_OK</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>be_underlying_writebuf_full</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>again</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>again</name></expr>)</condition>;</do>


<expr_stmt><expr><call><name>evbuffer_cb_set_flags</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>,<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>outbuf_cb</name></name></expr></argument>,
<argument><expr><name>EVBUFFER_CB_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>processed_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_filtered_outbuf_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>cbinfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><call><name>downcast</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cbinfo</name><operator>-&gt;</operator><name>n_added</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>processed_any</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>be_filter_process_output</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>, <argument><expr><name>BEV_NORMAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>processed_any</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_filter_read_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>me_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name> <init>= <expr><name>me_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>bufferevent_filter_result</name></name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><call><name>downcast</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>= <expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>processed_any</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bevf</name><operator>-&gt;</operator><name>got_eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>BEV_FINISHED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>BEV_NORMAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>be_filter_process_input</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>processed_any</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>res</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>processed_any</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>underlying</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>be_readbuf_full</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>evbuffer_cb_set_flags</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>inbuf_cb</name></name></expr></argument>,
<argument><expr><name>EVBUFFER_CB_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_filtered_inbuf_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>cbinfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><call><name>downcast</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bevf</name><operator>-&gt;</operator><name>got_eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>BEV_FINISHED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>BEV_NORMAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>be_readbuf_full</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>evbuffer_cb_clear_flags</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>inbuf_cb</name></name></expr></argument>,
<argument><expr><name>EVBUFFER_CB_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>be_filter_read_nolock_</name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>, <argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_filter_readcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>me_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name> <init>= <expr><name>me_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><call><name>downcast</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>be_filter_read_nolock_</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>, <argument><expr><name>me_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_filter_writecb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>me_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name> <init>= <expr><name>me_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><call><name>downcast</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>= <expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>processed_any</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>be_filter_process_output</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>, <argument><expr><name>BEV_NORMAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>processed_any</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_filter_eventcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>me_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name> <init>= <expr><name>me_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><call><name>downcast</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>= <expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_filter_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>iotype</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>processed_any</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iotype</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>be_filter_process_input</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>processed_any</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iotype</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>be_filter_process_output</name><argument_list>(<argument><expr><name>bevf</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>processed_any</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>bufferevent_flush</name><argument_list>(<argument><expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>, <argument><expr><name>iotype</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>processed_any</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_filter_ctrl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_ctrl_op</name></name></type> <name>op</name></decl></parameter>,
<parameter><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_filtered</name></name> <modifier>*</modifier></type><name>bevf</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BEV_CTRL_GET_UNDERLYING</name></expr>:</case>
<expr_stmt><expr><name>bevf</name> <operator>=</operator> <call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>BEV_CTRL_SET_FD</name></expr>:</case>
<expr_stmt><expr><name>bevf</name> <operator>=</operator> <call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name> <operator>&amp;&amp;</operator>
<name><name>bevf</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>be_ops</name></name> <operator>&amp;&amp;</operator>
<name><name>bevf</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>ctrl</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>ctrl</name></name><operator>)</operator><operator>(</operator><name><name>bevf</name><operator>-&gt;</operator><name>underlying</name></name><operator>,</operator> <name>op</name><operator>,</operator> <name>data</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>BEV_CTRL_GET_FD</name></expr>:</case>
<case>case <expr><name>BEV_CTRL_CANCEL_ALL</name></expr>:</case>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
