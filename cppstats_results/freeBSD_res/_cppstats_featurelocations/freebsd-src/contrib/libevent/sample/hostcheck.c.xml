<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/sample/hostcheck.c">















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostcheck.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>



<function><type><specifier>static</specifier> <name>char</name></type> <name>Curl_raw_toupper</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<return>return <expr><literal type="char">'A'</literal></expr>;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<return>return <expr><literal type="char">'B'</literal></expr>;</return>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<return>return <expr><literal type="char">'C'</literal></expr>;</return>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<return>return <expr><literal type="char">'D'</literal></expr>;</return>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<return>return <expr><literal type="char">'E'</literal></expr>;</return>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<return>return <expr><literal type="char">'F'</literal></expr>;</return>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<return>return <expr><literal type="char">'G'</literal></expr>;</return>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<return>return <expr><literal type="char">'H'</literal></expr>;</return>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<return>return <expr><literal type="char">'I'</literal></expr>;</return>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<return>return <expr><literal type="char">'J'</literal></expr>;</return>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<return>return <expr><literal type="char">'K'</literal></expr>;</return>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<return>return <expr><literal type="char">'L'</literal></expr>;</return>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<return>return <expr><literal type="char">'M'</literal></expr>;</return>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<return>return <expr><literal type="char">'N'</literal></expr>;</return>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<return>return <expr><literal type="char">'O'</literal></expr>;</return>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<return>return <expr><literal type="char">'P'</literal></expr>;</return>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<return>return <expr><literal type="char">'Q'</literal></expr>;</return>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<return>return <expr><literal type="char">'R'</literal></expr>;</return>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<return>return <expr><literal type="char">'S'</literal></expr>;</return>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<return>return <expr><literal type="char">'T'</literal></expr>;</return>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<return>return <expr><literal type="char">'U'</literal></expr>;</return>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<return>return <expr><literal type="char">'V'</literal></expr>;</return>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<return>return <expr><literal type="char">'W'</literal></expr>;</return>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<return>return <expr><literal type="char">'X'</literal></expr>;</return>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<return>return <expr><literal type="char">'Y'</literal></expr>;</return>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<return>return <expr><literal type="char">'Z'</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_raw_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while<condition>(<expr><operator>*</operator><name>first</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>second</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>first</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>second</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>



<return>return <expr><operator>(</operator><call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_raw_nequal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>second</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while<condition>(<expr><operator>*</operator><name>first</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>second</name> <operator>&amp;&amp;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>max</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>second</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>hostmatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern_label_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pattern_wildcard</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hostname_label_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wildcard_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>prefixlen</name></decl>, <decl><type ref="prev"/><name>suffixlen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pattern_wildcard</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pattern_wildcard</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><call><name>Curl_raw_equal</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name>CURL_HOST_MATCH</name></expr> </then><else>: <expr><name>CURL_HOST_NOMATCH</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>wildcard_enabled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pattern_label_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pattern_label_end</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pattern_label_end</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>pattern_wildcard</name> <operator>&gt;</operator> <name>pattern_label_end</name> <operator>||</operator>
<call><name>Curl_raw_nequal</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"xn--"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wildcard_enabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>wildcard_enabled</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><call><name>Curl_raw_equal</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name>CURL_HOST_MATCH</name></expr> </then><else>: <expr><name>CURL_HOST_NOMATCH</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hostname_label_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>hostname_label_end</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>!</operator><call><name>Curl_raw_equal</name><argument_list>(<argument><expr><name>pattern_label_end</name></expr></argument>, <argument><expr><name>hostname_label_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURL_HOST_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if<condition>(<expr><name>hostname_label_end</name> <operator>-</operator> <name>hostname</name> <operator>&lt;</operator> <name>pattern_label_end</name> <operator>-</operator> <name>pattern</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURL_HOST_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prefixlen</name> <operator>=</operator> <name>pattern_wildcard</name> <operator>-</operator> <name>pattern</name></expr>;</expr_stmt>
<expr_stmt><expr><name>suffixlen</name> <operator>=</operator> <name>pattern_label_end</name> <operator>-</operator> <operator>(</operator><name>pattern_wildcard</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>Curl_raw_nequal</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>prefixlen</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>Curl_raw_nequal</name><argument_list>(<argument><expr><name>pattern_wildcard</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>hostname_label_end</name> <operator>-</operator> <name>suffixlen</name></expr></argument>,
<argument><expr><name>suffixlen</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name>CURL_HOST_MATCH</name></expr> </then><else>: <expr><name>CURL_HOST_NOMATCH</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_cert_hostcheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match_pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>match_pattern</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>match_pattern</name> <operator>||</operator>
<operator>!</operator><name>hostname</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_raw_equal</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>match_pattern</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>hostmatch</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>,<argument><expr><name>match_pattern</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURL_HOST_MATCH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
