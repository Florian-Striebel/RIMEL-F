<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/sample/openssl_hostname_validation.c">




































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wdeprecated-declarations"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509v3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"openssl_hostname_validation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostcheck.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOSTNAME_MAX_SIZE</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASN1_STRING_get0_data</name></cpp:macro> <cpp:value>ASN1_STRING_data</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><specifier>static</specifier> <name>HostnameValidationResult</name></type> <name>matches_common_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>X509</name> <modifier>*</modifier></type><name>server_cert</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>common_name_loc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_NAME_ENTRY</name> <modifier>*</modifier></type><name>common_name_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASN1_STRING</name> <modifier>*</modifier></type><name>common_name_asn1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>common_name_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>common_name_loc</name> <operator>=</operator> <call><name>X509_NAME_get_index_by_NID</name><argument_list>(<argument><expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><operator>(</operator><name>X509</name> <operator>*</operator><operator>)</operator> <name>server_cert</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NID_commonName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>common_name_loc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Error</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>common_name_entry</name> <operator>=</operator> <call><name>X509_NAME_get_entry</name><argument_list>(<argument><expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><operator>(</operator><name>X509</name> <operator>*</operator><operator>)</operator> <name>server_cert</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>common_name_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>common_name_entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Error</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>common_name_asn1</name> <operator>=</operator> <call><name>X509_NAME_ENTRY_get_data</name><argument_list>(<argument><expr><name>common_name_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>common_name_asn1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Error</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>common_name_str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ASN1_STRING_get0_data</name><argument_list>(<argument><expr><name>common_name_asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>ASN1_STRING_length</name><argument_list>(<argument><expr><name>common_name_asn1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>common_name_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MalformedCertificate</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>Curl_cert_hostcheck</name><argument_list>(<argument><expr><name>common_name_str</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURL_HOST_MATCH</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MatchFound</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>MatchNotFound</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>HostnameValidationResult</name></type> <name>matches_subject_alternative_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>X509</name> <modifier>*</modifier></type><name>server_cert</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HostnameValidationResult</name></type> <name>result</name> <init>= <expr><name>MatchNotFound</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>san_names_nb</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>GENERAL_NAME</name></expr></argument>)</argument_list></call> <operator>*</operator><name>san_names</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>san_names</name> <operator>=</operator> <call><name>X509_get_ext_d2i</name><argument_list>(<argument><expr><operator>(</operator><name>X509</name> <operator>*</operator><operator>)</operator> <name>server_cert</name></expr></argument>, <argument><expr><name>NID_subject_alt_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>san_names</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NoSANPresent</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>san_names_nb</name> <operator>=</operator> <call><name>sk_GENERAL_NAME_num</name><argument_list>(<argument><expr><name>san_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>san_names_nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GENERAL_NAME</name> <modifier>*</modifier></type><name>current_name</name> <init>= <expr><call><name>sk_GENERAL_NAME_value</name><argument_list>(<argument><expr><name>san_names</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GEN_DNS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dns_name</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ASN1_STRING_get0_data</name><argument_list>(<argument><expr><name><name>current_name</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>dNSName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>ASN1_STRING_length</name><argument_list>(<argument><expr><name><name>current_name</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>dNSName</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dns_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>MalformedCertificate</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>Curl_cert_hostcheck</name><argument_list>(<argument><expr><name>dns_name</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>CURL_HOST_MATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>MatchFound</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sk_GENERAL_NAME_pop_free</name><argument_list>(<argument><expr><name>san_names</name></expr></argument>, <argument><expr><name>GENERAL_NAME_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>HostnameValidationResult</name></type> <name>validate_hostname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>X509</name> <modifier>*</modifier></type><name>server_cert</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HostnameValidationResult</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>hostname</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>server_cert</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Error</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>matches_subject_alternative_name</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>server_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NoSANPresent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>matches_common_name</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>server_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
