<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/sample/http-server.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_ISDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISDIR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; S_IFMT) == S_IFDIR)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/http.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/buffer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/keyvalq_struct.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_XOPEN_SOURCE_EXTENDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stat</name></cpp:macro> <cpp:value>_stat</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>fstat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fstat</name></cpp:macro> <cpp:value>_fstat</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>open</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>open</name></cpp:macro> <cpp:value>_open</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>close</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>close</name></cpp:macro> <cpp:value>_close</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_RDONLY</name></cpp:macro> <cpp:value>_O_RDONLY</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name></type> <name><name>uri_root</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>table_entry</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content_type</name></decl>;</decl_stmt>
}</block> <decl><name><name>content_type_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"txt"</literal></expr>, <expr><literal type="string">"text/plain"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"text/plain"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"text/plain"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"html"</literal></expr>, <expr><literal type="string">"text/html"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"htm"</literal></expr>, <expr><literal type="string">"text/htm"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"css"</literal></expr>, <expr><literal type="string">"text/css"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gif"</literal></expr>, <expr><literal type="string">"image/gif"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jpg"</literal></expr>, <expr><literal type="string">"image/jpeg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jpeg"</literal></expr>, <expr><literal type="string">"image/jpeg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"png"</literal></expr>, <expr><literal type="string">"image/png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pdf"</literal></expr>, <expr><literal type="string">"application/pdf"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ps"</literal></expr>, <expr><literal type="string">"application/postscript"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>guess_content_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last_period</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>table_entry</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>
<expr_stmt><expr><name>last_period</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last_period</name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>last_period</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>not_found</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>extension</name> <operator>=</operator> <name>last_period</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ent</name> <operator>=</operator> <operator>&amp;</operator><name><name>content_type_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>ent</name><operator>-&gt;</operator><name>extension</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>ent</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>extension</name></name></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>ent</name><operator>-&gt;</operator><name>content_type</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<label><name>not_found</name>:</label>
<return>return <expr><literal type="string">"application/misc"</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_request_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyval</name></name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>evhttp_request_get_command</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVHTTP_REQ_GET</name></expr>:</case> <expr_stmt><expr><name>cmdtype</name> <operator>=</operator> <literal type="string">"GET"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EVHTTP_REQ_POST</name></expr>:</case> <expr_stmt><expr><name>cmdtype</name> <operator>=</operator> <literal type="string">"POST"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EVHTTP_REQ_HEAD</name></expr>:</case> <expr_stmt><expr><name>cmdtype</name> <operator>=</operator> <literal type="string">"HEAD"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EVHTTP_REQ_PUT</name></expr>:</case> <expr_stmt><expr><name>cmdtype</name> <operator>=</operator> <literal type="string">"PUT"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EVHTTP_REQ_DELETE</name></expr>:</case> <expr_stmt><expr><name>cmdtype</name> <operator>=</operator> <literal type="string">"DELETE"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EVHTTP_REQ_OPTIONS</name></expr>:</case> <expr_stmt><expr><name>cmdtype</name> <operator>=</operator> <literal type="string">"OPTIONS"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EVHTTP_REQ_TRACE</name></expr>:</case> <expr_stmt><expr><name>cmdtype</name> <operator>=</operator> <literal type="string">"TRACE"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EVHTTP_REQ_CONNECT</name></expr>:</case> <expr_stmt><expr><name>cmdtype</name> <operator>=</operator> <literal type="string">"CONNECT"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EVHTTP_REQ_PATCH</name></expr>:</case> <expr_stmt><expr><name>cmdtype</name> <operator>=</operator> <literal type="string">"PATCH"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>cmdtype</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Received a %s request for %s\nHeaders:\n"</literal></expr></argument>,
<argument><expr><name>cmdtype</name></expr></argument>, <argument><expr><call><name>evhttp_request_get_uri</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>headers</name> <operator>=</operator> <call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>header</name> <operator>=</operator> <name><name>headers</name><operator>-&gt;</operator><name>tqh_first</name></name></expr>;</init> <condition><expr><name>header</name></expr>;</condition>
<incr><expr><name>header</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>tqe_next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s: %s\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Input data: &lt;&lt;&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_send_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>send_document_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>docroot</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>evhttp_request_get_uri</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>decoded</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>decoded_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>whole_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_command</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EVHTTP_REQ_GET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dump_request_cb</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Got a GET request for &lt;%s&gt;\n"</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>decoded</name> <operator>=</operator> <call><name>evhttp_uri_parse</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decoded</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"It's not a good URI. Sending BADREQUEST\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_send_error</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_BADREQUEST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>path</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>decoded_path</name> <operator>=</operator> <call><name>evhttp_uridecode</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>decoded_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>decoded_path</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>decoded_path</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>docroot</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>whole_path</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>whole_path</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>docroot</name></expr></argument>, <argument><expr><name>decoded_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>whole_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>evb</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATAA</name></type> <name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dirlen</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>trailing_slash</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trailing_slash</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dirlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>whole_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pattern</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>dirlen</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>whole_path</name></expr></argument>, <argument><expr><name>dirlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>dirlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>dirlen</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>dirlen</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FindFirstFileA</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>d</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>whole_path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb</name></expr></argument>,
<argument><expr><literal type="string">"&lt;!DOCTYPE html&gt;\n"</literal>
<literal type="string">"&lt;html&gt;\n &lt;head&gt;\n"</literal>
<literal type="string">" &lt;meta charset='utf-8'&gt;\n"</literal>
<literal type="string">" &lt;title&gt;%s&lt;/title&gt;\n"</literal>
<literal type="string">" &lt;base href='%s%s'&gt;\n"</literal>
<literal type="string">" &lt;/head&gt;\n"</literal>
<literal type="string">" &lt;body&gt;\n"</literal>
<literal type="string">" &lt;h1&gt;%s&lt;/h1&gt;\n"</literal>
<literal type="string">" &lt;ul&gt;\n"</literal></expr></argument>,
<argument><expr><name>decoded_path</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>,
<argument><expr><name>trailing_slash</name></expr></argument>,
<argument><expr><name>decoded_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>ent</name><operator>.</operator><name>cFileName</name></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><operator>(</operator><name>ent</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb</name></expr></argument>,
<argument><expr><literal type="string">" &lt;li&gt;&lt;a href=\"%s\"&gt;%s&lt;/a&gt;\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></while> <while>while <condition>(<expr><call><name>FindNextFileA</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
evbuffer_add_printf(evb<operator>,</operator> "&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;\n"</do>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><literal type="string">"text/html"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function> <if_stmt><else>else <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>guess_content_type</name><argument_list>(<argument><expr><name>decoded_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>whole_path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fstat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_file</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>evhttp_send_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>evhttp_send_error</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">404</literal></expr></argument>, <argument><expr><literal type="string">"Document was not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>decoded</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>decoded_path</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>decoded_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>whole_path</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>whole_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>evb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}

static <function><type><name>void</name></type>
<name>syntax</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Syntax: http-server &lt;docroot&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>WSADATA</name></type> <name>WSAData</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WSAStartup</name><argument_list>(<argument><expr><literal type="number">0x101</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>WSAData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syntax</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>event_base_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Couldn't create an event_base: exiting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>http</name> <operator>=</operator> <call><name>evhttp_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>http</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"couldn't create evhttp. Exiting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="string">"/dump"</literal></expr></argument>, <argument><expr><name>dump_request_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>evhttp_set_gencb</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>send_document_cb</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>evhttp_bind_socket_with_handle</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"couldn't bind to port %d. Exiting.\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>socklen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>inaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_port</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>evhttp_bound_socket_get_fd</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socklen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"getsockname() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>got_port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name><operator>)</operator><operator>-&gt;</operator><name>sin_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inaddr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ss</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>got_port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name><operator>)</operator><operator>-&gt;</operator><name>sin6_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inaddr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Weird address family %d\n"</literal></expr></argument>,
<argument><expr><name><name>ss</name><operator>.</operator><name>ss_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>evutil_inet_ntop</name><argument_list>(<argument><expr><name><name>ss</name><operator>.</operator><name>ss_family</name></name></expr></argument>, <argument><expr><name>inaddr</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Listening on %s:%d\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>got_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>uri_root</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uri_root</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"http://%s:%d"</literal></expr></argument>,<argument><expr><name>addr</name></expr></argument>,<argument><expr><name>got_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"evutil_inet_ntop failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
