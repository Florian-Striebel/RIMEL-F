<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/sample/http-connect.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/http.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/http_struct.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/buffer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERIFY</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(cond)) { fprintf(stderr, "[error] %s\n", #cond); } } while (0);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_MAX</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<struct>struct <name>connect_base</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>location</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evbuf</name> <operator>=</operator> <call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>connect_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>proxy_req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>URL_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>connect_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>evcon</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>location</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>location</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><name>proxy_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>get_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><operator>!</operator><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>,
<argument><expr><call><name>evhttp_uri_join</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>URL_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>URL_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>host_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>proxy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>connect_base</name></name></type> <name>connect_base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s proxy url\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<expr_stmt><expr><name>proxy</name> <operator>=</operator> <call><name>evhttp_uri_parse</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<block>{<block_content>
<expr_stmt><expr><name>host_port</name> <operator>=</operator> <call><name>evhttp_uri_parse</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_set_scheme</name><argument_list>(<argument><expr><name>host_port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_set_userinfo</name><argument_list>(<argument><expr><name>host_port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_set_path</name><argument_list>(<argument><expr><name>host_port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_set_query</name><argument_list>(<argument><expr><name>host_port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_set_fragment</name><argument_list>(<argument><expr><name>host_port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>host_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>host_port</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<block>{<block_content>
<expr_stmt><expr><name>location</name> <operator>=</operator> <call><name>evhttp_uri_parse</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_set_scheme</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_set_userinfo</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_set_host</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_set_port</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><name>base</name> <operator>=</operator> <call><name>event_base_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>connect_base</name><operator>.</operator><name>evcon</name></name> <operator>=</operator> <name>evcon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>connect_base</name><operator>.</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>connect_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connect_base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Proxy-Connection"</literal></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>URL_MAX</name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>,
<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>host_port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>host_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_CONNECT</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>host_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
