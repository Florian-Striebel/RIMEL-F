<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/evthread.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evthread-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVTHREAD_EXPOSE_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBAL</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBAL</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>event_debug_created_threadable_ctx_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>event_debug_mode_on_</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>GLOBAL</name> <name>int</name></type> <name>evthread_lock_debugging_enabled_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLOBAL</name> <name><name>struct</name> <name>evthread_lock_callbacks</name></name></type> <name>evthread_lock_fns_</name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><name>GLOBAL</name> <name>unsigned</name> <name>long</name></type> (<modifier>*</modifier><name>evthread_id_fn_</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>GLOBAL</name> <name><name>struct</name> <name>evthread_condition_callbacks</name></name></type> <name>evthread_cond_fns_</name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>evthread_lock_callbacks</name></name></type> <name>original_lock_fns_</name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>evthread_condition_callbacks</name></name></type> <name>original_cond_fns_</name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type>
<name>evthread_set_id_callback</name><argument_list>(<argument><expr><name>unsigned</name> <call><call><name>long</name> <argument_list>(<argument><expr><operator>*</operator><name>id_fn</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name>evthread_id_fn_</name> <operator>=</operator> <name>id_fn</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>struct</name> <name>evthread_lock_callbacks</name></name> <modifier>*</modifier></type><name>evthread_get_lock_callbacks</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>evthread_lock_debugging_enabled_</name></expr>
?</condition><then> <expr><operator>&amp;</operator><name>original_lock_fns_</name></expr> </then><else>: <expr><operator>&amp;</operator><name>evthread_lock_fns_</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>struct</name> <name>evthread_condition_callbacks</name></name> <modifier>*</modifier></type><name>evthread_get_condition_callbacks</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>evthread_lock_debugging_enabled_</name></expr>
?</condition><then> <expr><operator>&amp;</operator><name>original_cond_fns_</name></expr> </then><else>: <expr><operator>&amp;</operator><name>evthread_cond_fns_</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>evthreadimpl_disable_lock_debugging_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>evthread_lock_debugging_enabled_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evthread_set_lock_callbacks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evthread_lock_callbacks</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evthread_lock_callbacks</name></name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>evthread_get_lock_callbacks</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>event_debug_mode_on_</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>event_debug_created_threadable_ctx_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"evthread initialization must be called BEFORE anything else!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cbs</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>alloc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"Trying to disable lock functions after "</literal>
<literal type="string">"they have been set up will probaby not work."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>evthread_lock_fns_</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>alloc</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>lock_api_version</name></name> <operator>==</operator> <name><name>cbs</name><operator>-&gt;</operator><name>lock_api_version</name></name> <operator>&amp;&amp;</operator>
<name><name>target</name><operator>-&gt;</operator><name>supported_locktypes</name></name> <operator>==</operator> <name><name>cbs</name><operator>-&gt;</operator><name>supported_locktypes</name></name> <operator>&amp;&amp;</operator>
<name><name>target</name><operator>-&gt;</operator><name>alloc</name></name> <operator>==</operator> <name><name>cbs</name><operator>-&gt;</operator><name>alloc</name></name> <operator>&amp;&amp;</operator>
<name><name>target</name><operator>-&gt;</operator><name>free</name></name> <operator>==</operator> <name><name>cbs</name><operator>-&gt;</operator><name>free</name></name> <operator>&amp;&amp;</operator>
<name><name>target</name><operator>-&gt;</operator><name>lock</name></name> <operator>==</operator> <name><name>cbs</name><operator>-&gt;</operator><name>lock</name></name> <operator>&amp;&amp;</operator>
<name><name>target</name><operator>-&gt;</operator><name>unlock</name></name> <operator>==</operator> <name><name>cbs</name><operator>-&gt;</operator><name>unlock</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"Can't change lock callbacks once they have been "</literal>
<literal type="string">"initialized."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cbs</name><operator>-&gt;</operator><name>alloc</name></name> <operator>&amp;&amp;</operator> <name><name>cbs</name><operator>-&gt;</operator><name>free</name></name> <operator>&amp;&amp;</operator> <name><name>cbs</name><operator>-&gt;</operator><name>lock</name></name> <operator>&amp;&amp;</operator> <name><name>cbs</name><operator>-&gt;</operator><name>unlock</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>cbs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>evthread_lock_fns_</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>event_global_setup_locks_</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evthread_set_condition_callbacks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evthread_condition_callbacks</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evthread_condition_callbacks</name></name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>evthread_get_condition_callbacks</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>event_debug_mode_on_</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>event_debug_created_threadable_ctx_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"evthread initialization must be called BEFORE anything else!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cbs</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>alloc_condition</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"Trying to disable condition functions "</literal>
<literal type="string">"after they have been set up will probaby not "</literal>
<literal type="string">"work."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>evthread_cond_fns_</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>alloc_condition</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>condition_api_version</name></name> <operator>==</operator> <name><name>cbs</name><operator>-&gt;</operator><name>condition_api_version</name></name> <operator>&amp;&amp;</operator>
<name><name>target</name><operator>-&gt;</operator><name>alloc_condition</name></name> <operator>==</operator> <name><name>cbs</name><operator>-&gt;</operator><name>alloc_condition</name></name> <operator>&amp;&amp;</operator>
<name><name>target</name><operator>-&gt;</operator><name>free_condition</name></name> <operator>==</operator> <name><name>cbs</name><operator>-&gt;</operator><name>free_condition</name></name> <operator>&amp;&amp;</operator>
<name><name>target</name><operator>-&gt;</operator><name>signal_condition</name></name> <operator>==</operator> <name><name>cbs</name><operator>-&gt;</operator><name>signal_condition</name></name> <operator>&amp;&amp;</operator>
<name><name>target</name><operator>-&gt;</operator><name>wait_condition</name></name> <operator>==</operator> <name><name>cbs</name><operator>-&gt;</operator><name>wait_condition</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"Can't change condition callbacks once they "</literal>
<literal type="string">"have been initialized."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cbs</name><operator>-&gt;</operator><name>alloc_condition</name></name> <operator>&amp;&amp;</operator> <name><name>cbs</name><operator>-&gt;</operator><name>free_condition</name></name> <operator>&amp;&amp;</operator>
<name><name>cbs</name><operator>-&gt;</operator><name>signal_condition</name></name> <operator>&amp;&amp;</operator> <name><name>cbs</name><operator>-&gt;</operator><name>wait_condition</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>cbs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>evthread_cond_fns_</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>evthread_lock_debugging_enabled_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>evthread_cond_fns_</name><operator>.</operator><name>alloc_condition</name></name> <operator>=</operator> <name><name>cbs</name><operator>-&gt;</operator><name>alloc_condition</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evthread_cond_fns_</name><operator>.</operator><name>free_condition</name></name> <operator>=</operator> <name><name>cbs</name><operator>-&gt;</operator><name>free_condition</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evthread_cond_fns_</name><operator>.</operator><name>signal_condition</name></name> <operator>=</operator> <name><name>cbs</name><operator>-&gt;</operator><name>signal_condition</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_LOCK_SIG</name></cpp:macro> <cpp:value>0xdeb0b10c</cpp:value></cpp:define>

<struct>struct <name>debug_lock</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>signature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>locktype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>held_by</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>debug_lock_alloc</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>locktype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>debug_lock</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>debug_lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>original_lock_fns_</name><operator>.</operator><name>alloc</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <call><name><name>original_lock_fns_</name><operator>.</operator><name>alloc</name></name><argument_list>(
<argument><expr><name>locktype</name><operator>|</operator><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>signature</name></name> <operator>=</operator> <name>DEBUG_LOCK_SIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>locktype</name></name> <operator>=</operator> <name>locktype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>held_by</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>debug_lock_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock_</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>locktype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>debug_lock</name></name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>lock_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>locktype</name> <operator>==</operator> <name><name>lock</name><operator>-&gt;</operator><name>locktype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>DEBUG_LOCK_SIG</name> <operator>==</operator> <name><name>lock</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>original_lock_fns_</name><operator>.</operator><name>free</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>original_lock_fns_</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>,
<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>locktype</name></name><operator>|</operator><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>signature</name></name> <operator>=</operator> <literal type="number">0x12300fda</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evthread_debug_lock_mark_locked</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>debug_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>DEBUG_LOCK_SIG</name> <operator>==</operator> <name><name>lock</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>lock</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>lock</name><operator>-&gt;</operator><name>locktype</name></name> <operator>&amp;</operator> <name>EVTHREAD_LOCKTYPE_RECURSIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>evthread_id_fn_</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>me</name></decl>;</decl_stmt>
<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>evthread_id_fn_</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>held_by</name></name> <operator>==</operator> <name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>held_by</name></name> <operator>=</operator> <name>me</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>debug_lock_lock</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>debug_lock</name></name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>lock_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>locktype</name></name> <operator>&amp;</operator> <name>EVTHREAD_LOCKTYPE_READWRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>EVTHREAD_READ</name><operator>|</operator><name>EVTHREAD_WRITE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>EVTHREAD_READ</name><operator>|</operator><name>EVTHREAD_WRITE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>original_lock_fns_</name><operator>.</operator><name>lock</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>original_lock_fns_</name><operator>.</operator><name>lock</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evthread_debug_lock_mark_locked</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evthread_debug_lock_mark_unlocked</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>debug_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>DEBUG_LOCK_SIG</name> <operator>==</operator> <name><name>lock</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>locktype</name></name> <operator>&amp;</operator> <name>EVTHREAD_LOCKTYPE_READWRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>EVTHREAD_READ</name><operator>|</operator><name>EVTHREAD_WRITE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>EVTHREAD_READ</name><operator>|</operator><name>EVTHREAD_WRITE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>evthread_id_fn_</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>me</name></decl>;</decl_stmt>
<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>evthread_id_fn_</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>held_by</name></name> <operator>==</operator> <name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>held_by</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>lock</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>debug_lock_unlock</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>debug_lock</name></name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>lock_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evthread_debug_lock_mark_unlocked</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>original_lock_fns_</name><operator>.</operator><name>unlock</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>original_lock_fns_</name><operator>.</operator><name>unlock</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>debug_cond_wait</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cond_</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>debug_lock</name></name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>lock_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>DEBUG_LOCK_SIG</name> <operator>==</operator> <name><name>lock</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVLOCK_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>lock_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evthread_debug_lock_mark_unlocked</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>original_cond_fns_</name><operator>.</operator><name>wait_condition</name></name><argument_list>(<argument><expr><name>cond_</name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evthread_debug_lock_mark_locked</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>evthread_enable_lock_debuging</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evthread_enable_lock_debugging</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evthread_enable_lock_debugging</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evthread_lock_callbacks</name></name></type> <name>cbs</name> <init>= <expr><block>{
<expr><name>EVTHREAD_LOCK_API_VERSION</name></expr>,
<expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr>,
<expr><name>debug_lock_alloc</name></expr>,
<expr><name>debug_lock_free</name></expr>,
<expr><name>debug_lock_lock</name></expr>,
<expr><name>debug_lock_unlock</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>evthread_lock_debugging_enabled_</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>original_lock_fns_</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>evthread_lock_fns_</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evthread_lock_callbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>evthread_lock_fns_</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evthread_lock_callbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>original_cond_fns_</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>evthread_cond_fns_</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evthread_condition_callbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evthread_cond_fns_</name><operator>.</operator><name>wait_condition</name></name> <operator>=</operator> <name>debug_cond_wait</name></expr>;</expr_stmt>
<expr_stmt><expr><name>evthread_lock_debugging_enabled_</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>event_global_setup_locks_</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evthread_is_debug_lock_held_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>debug_lock</name></name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>lock_</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>lock</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>evthread_id_fn_</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>me</name> <init>= <expr><call><name>evthread_id_fn_</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>held_by</name></name> <operator>!=</operator> <name>me</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>evthread_debug_get_real_lock_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>debug_lock</name></name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>lock_</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>lock</name><operator>-&gt;</operator><name>lock</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>evthread_setup_global_lock_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock_</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>locktype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable_locks</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enable_locks</name> <operator>&amp;&amp;</operator> <name><name>original_lock_fns_</name><operator>.</operator><name>alloc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>lock_</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>debug_lock_alloc</name><argument_list>(<argument><expr><name>locktype</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>enable_locks</name> <operator>&amp;&amp;</operator> <name><name>original_lock_fns_</name><operator>.</operator><name>alloc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>debug_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>lock_</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>locktype</name> <operator>&amp;</operator> <name>EVTHREAD_LOCKTYPE_RECURSIVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>original_lock_fns_</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>lock_</name></expr></argument>, <argument><expr><name>locktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>debug_lock_alloc</name><argument_list>(<argument><expr><name>locktype</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>debug_lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>original_lock_fns_</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>lock_</name></expr></argument>, <argument><expr><name>locktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>lock_</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>locktype</name></name> <operator>=</operator> <name>locktype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>held_by</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>lock</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>enable_locks</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>evthread_lock_debugging_enabled_</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>lock_</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>evthread_lock_fns_</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name>locktype</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>debug_lock</name></name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><ternary><condition><expr><name>lock_</name></expr> ?</condition><then> <expr><name>lock_</name></expr> </then><else>: <expr><call><name>debug_lock_alloc</name><argument_list>(<argument><expr><name>locktype</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>enable_locks</name> <operator>&amp;&amp;</operator>
<name>evthread_lock_debugging_enabled_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>locktype</name></name> <operator>==</operator> <name>locktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lock</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <call><name><name>original_lock_fns_</name><operator>.</operator><name>alloc</name></name><argument_list>(
<argument><expr><name>locktype</name><operator>|</operator><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lock</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <operator>-</operator><literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>lock</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVTHREAD_EXPOSE_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>unsigned</name> <name>long</name></type>
<name>evthreadimpl_get_id_</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>evthread_id_fn_</name></expr> ?</condition><then> <expr><call><name>evthread_id_fn_</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>evthreadimpl_lock_alloc_</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>locktype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>event_debug_mode_on_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>event_debug_created_threadable_ctx_</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><ternary><condition><expr><name><name>evthread_lock_fns_</name><operator>.</operator><name>alloc</name></name></expr> ?</condition><then>
<expr><call><name><name>evthread_lock_fns_</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name>locktype</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>evthreadimpl_lock_free_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>locktype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>evthread_lock_fns_</name><operator>.</operator><name>free</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>evthread_lock_fns_</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>locktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evthreadimpl_lock_lock_</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>evthread_lock_fns_</name><operator>.</operator><name>lock</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>evthread_lock_fns_</name><operator>.</operator><name>lock</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evthreadimpl_lock_unlock_</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>evthread_lock_fns_</name><operator>.</operator><name>unlock</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>evthread_lock_fns_</name><operator>.</operator><name>unlock</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>evthreadimpl_cond_alloc_</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>condtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>event_debug_mode_on_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>event_debug_created_threadable_ctx_</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><ternary><condition><expr><name><name>evthread_cond_fns_</name><operator>.</operator><name>alloc_condition</name></name></expr> ?</condition><then>
<expr><call><name><name>evthread_cond_fns_</name><operator>.</operator><name>alloc_condition</name></name><argument_list>(<argument><expr><name>condtype</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>evthreadimpl_cond_free_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>evthread_cond_fns_</name><operator>.</operator><name>free_condition</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>evthread_cond_fns_</name><operator>.</operator><name>free_condition</name></name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evthreadimpl_cond_signal_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>broadcast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>evthread_cond_fns_</name><operator>.</operator><name>signal_condition</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>evthread_cond_fns_</name><operator>.</operator><name>signal_condition</name></name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>broadcast</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evthreadimpl_cond_wait_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>evthread_cond_fns_</name><operator>.</operator><name>wait_condition</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>evthread_cond_fns_</name><operator>.</operator><name>wait_condition</name></name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evthreadimpl_is_lock_debugging_enabled_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>evthread_lock_debugging_enabled_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evthreadimpl_locking_enabled_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>evthread_lock_fns_</name><operator>.</operator><name>lock</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
