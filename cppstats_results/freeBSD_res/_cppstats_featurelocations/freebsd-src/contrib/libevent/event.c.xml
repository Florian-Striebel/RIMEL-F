<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/event.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WIN32_LEAN_AND_MEAN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defer-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evthread-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evmap-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iocp-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"changelist-internal.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_NO_CACHE_HASH_VALUES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ht-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_WORKING_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kqueue-internal.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_EVENT_PORTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name></type> <name>evportops</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name></type> <name>selectops</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name></type> <name>pollops</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name></type> <name>epollops</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_WORKING_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name></type> <name>kqops</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_DEVPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name></type> <name>devpollops</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name></type> <name>win32ops</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name> <modifier>*</modifier></type><name><name>eventops</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_EVENT_PORTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>evportops</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_WORKING_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>kqops</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>epollops</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_DEVPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>devpollops</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>pollops</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>selectops</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>win32ops</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_global_current_base_</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>current_base</name></cpp:macro> <cpp:value>event_global_current_base_</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>event_self_cbarg_ptr_</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>event_queue_insert_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>event_queue_insert_active_later</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>event_queue_insert_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>event_queue_insert_inserted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>event_queue_remove_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>event_queue_remove_active_later</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>event_queue_remove_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>event_queue_remove_inserted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>event_queue_make_later_events_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evthread_make_base_notifiable_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>event_del_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocking</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_REINSERT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>event_queue_reinsert_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>was_common</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_common</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_timeout_idx</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>event_haveevents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>event_process_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>timeout_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>timeout_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>event_signal_closure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>event_persist_closure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evthread_notify_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>insert_common_timeout_inorder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>






<struct>struct <name>event_debug_entry</name> <block>{
<macro><name>HT_ENTRY</name><argument_list>(<argument>event_debug_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>node</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>added</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type>
<name>hash_debug_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_debug_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>ev_uintptr_t</name><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>



<return>return <expr><operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>eq_debug_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_debug_entry</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_debug_entry</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>event_debug_mode_on_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>










<decl_stmt><decl><type><name>int</name></type> <name>event_debug_created_threadable_ctx_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>event_debug_mode_too_late</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>event_debug_map_lock_</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><specifier>static</specifier> <macro><name>HT_HEAD</name><argument_list>(<argument>event_debug_map</argument>, <argument>event_debug_entry</argument>)</argument_list></macro> <name>global_debug_map</name> <operator>=</operator>
<call><name>HT_INITIALIZER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>HT_PROTOTYPE</name><argument_list>(<argument>event_debug_map</argument>, <argument>event_debug_entry</argument>, <argument>node</argument>, <argument>hash_debug_entry</argument>,
<argument>eq_debug_entry</argument>)</argument_list></macro>
<macro><name>HT_GENERATE</name><argument_list>(<argument>event_debug_map</argument>, <argument>event_debug_entry</argument>, <argument>node</argument>, <argument>hash_debug_entry</argument>,
<argument>eq_debug_entry</argument>, <argument><literal type="number">0.5</literal></argument>, <argument>mm_malloc</argument>, <argument>mm_realloc</argument>, <argument>mm_free</argument>)</argument_list></macro>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_debug_note_setup_</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (event_debug_mode_on_) { struct event_debug_entry *dent,find; find.ptr = (ev); EVLOCK_LOCK(event_debug_map_lock_, 0); dent = HT_FIND(event_debug_map, &amp;global_debug_map, &amp;find); if (dent) { dent-&gt;added = 0; } else { dent = mm_malloc(sizeof(*dent)); if (!dent) event_err(1, "Out of memory in debugging code"); dent-&gt;ptr = (ev); dent-&gt;added = 0; HT_INSERT(event_debug_map, &amp;global_debug_map, dent); } EVLOCK_UNLOCK(event_debug_map_lock_, 0); } event_debug_mode_too_late = 1; } while (0)</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_debug_note_teardown_</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (event_debug_mode_on_) { struct event_debug_entry *dent,find; find.ptr = (ev); EVLOCK_LOCK(event_debug_map_lock_, 0); dent = HT_REMOVE(event_debug_map, &amp;global_debug_map, &amp;find); if (dent) mm_free(dent); EVLOCK_UNLOCK(event_debug_map_lock_, 0); } event_debug_mode_too_late = 1; } while (0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_debug_note_add_</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (event_debug_mode_on_) { struct event_debug_entry *dent,find; find.ptr = (ev); EVLOCK_LOCK(event_debug_map_lock_, 0); dent = HT_FIND(event_debug_map, &amp;global_debug_map, &amp;find); if (dent) { dent-&gt;added = 1; } else { event_errx(EVENT_ERR_ABORT_, "%s: noting an add on a non-setup event %p" " (events: 0x%x, fd: "EV_SOCK_FMT ", flags: 0x%x)", __func__, (ev), (ev)-&gt;ev_events, EV_SOCK_ARG((ev)-&gt;ev_fd), (ev)-&gt;ev_flags); } EVLOCK_UNLOCK(event_debug_map_lock_, 0); } event_debug_mode_too_late = 1; } while (0)</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_debug_note_del_</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (event_debug_mode_on_) { struct event_debug_entry *dent,find; find.ptr = (ev); EVLOCK_LOCK(event_debug_map_lock_, 0); dent = HT_FIND(event_debug_map, &amp;global_debug_map, &amp;find); if (dent) { dent-&gt;added = 0; } else { event_errx(EVENT_ERR_ABORT_, "%s: noting a del on a non-setup event %p" " (events: 0x%x, fd: "EV_SOCK_FMT ", flags: 0x%x)", __func__, (ev), (ev)-&gt;ev_events, EV_SOCK_ARG((ev)-&gt;ev_fd), (ev)-&gt;ev_flags); } EVLOCK_UNLOCK(event_debug_map_lock_, 0); } event_debug_mode_too_late = 1; } while (0)</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_debug_assert_is_setup_</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (event_debug_mode_on_) { struct event_debug_entry *dent,find; find.ptr = (ev); EVLOCK_LOCK(event_debug_map_lock_, 0); dent = HT_FIND(event_debug_map, &amp;global_debug_map, &amp;find); if (!dent) { event_errx(EVENT_ERR_ABORT_, "%s called on a non-initialized event %p" " (events: 0x%x, fd: "EV_SOCK_FMT", flags: 0x%x)", __func__, (ev), (ev)-&gt;ev_events, EV_SOCK_ARG((ev)-&gt;ev_fd), (ev)-&gt;ev_flags); } EVLOCK_UNLOCK(event_debug_map_lock_, 0); } } while (0)</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_debug_assert_not_added_</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (event_debug_mode_on_) { struct event_debug_entry *dent,find; find.ptr = (ev); EVLOCK_LOCK(event_debug_map_lock_, 0); dent = HT_FIND(event_debug_map, &amp;global_debug_map, &amp;find); if (dent &amp;&amp; dent-&gt;added) { event_errx(EVENT_ERR_ABORT_, "%s called on an already added event %p" " (events: 0x%x, fd: "EV_SOCK_FMT", " "flags: 0x%x)", __func__, (ev), (ev)-&gt;ev_events, EV_SOCK_ARG((ev)-&gt;ev_fd), (ev)-&gt;ev_flags); } EVLOCK_UNLOCK(event_debug_map_lock_, 0); } } while (0)</cpp:value></cpp:define>
















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_debug_note_setup_</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_debug_note_teardown_</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_debug_note_add_</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_debug_note_del_</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_debug_assert_is_setup_</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_debug_assert_not_added_</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_BASE_ASSERT_LOCKED</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVLOCK_ASSERT_LOCKED((base)-&gt;th_base_lock)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCK_SYNC_INTERVAL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>gettime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>tv_cache</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>tv_cache</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evutil_gettime_monotonic_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>monotonic_timer</name></name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>last_updated_clock_diff</name></name> <operator>+</operator> <name>CLOCK_SYNC_INTERVAL</name>
<operator>&lt;</operator> <name><name>tp</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>tv_clock_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>last_updated_clock_diff</name></name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_gettimeofday_cached</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>current_base</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_base</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>tv_cache</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evutil_timeradd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>tv_cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>tv_clock_diff</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>clear_time_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>tv_cache</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>update_time_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>tv_cache</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>base</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVENT_BASE_FLAG_NO_CACHE_TIME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gettime</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>tv_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_update_cache_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>current_base</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_base</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>running_loop</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_time_cache</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type>
<name>event_callback_to_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INIT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>evcb</name></expr></argument>, <argument><expr>struct <name>event</name></expr></argument>, <argument><expr><name>ev_evcallback</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type>
<name>event_to_event_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_evcallback</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type>
<name>event_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>event_base_new_with_config</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: Unable to construct event_base"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>base</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type>
<name>event_base_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>event_config_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cfg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>event_base_new_with_config</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_config_free</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>base</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>event_config_is_avoided_method</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_config_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>entry</argument>, <argument>&amp;cfg-&gt;entries</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>avoid_method</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>avoid_method</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>event_is_method_disabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>environment</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>environment</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"EVENT_NO%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name><name>environment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>environment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>EVUTIL_TOUPPER_</name><argument_list>(<argument><expr><name><name>environment</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<return>return <expr><operator>(</operator><call><name>evutil_getenv_</name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_get_features</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>base</name><operator>-&gt;</operator><name>evsel</name><operator>-&gt;</operator><name>features</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_enable_debug_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>event_debug_mode_on_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s was called twice!"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>event_debug_mode_too_late</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s must be called *before* creating any events "</literal>
<literal type="string">"or event_bases"</literal></expr></argument>,<argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>event_debug_mode_on_</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HT_INIT</name><argument_list>(<argument><expr><name>event_debug_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>global_debug_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_disable_debug_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>event_debug_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>victim</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVLOCK_LOCK</name><argument_list>(<argument><expr><name>event_debug_map_lock_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ent</name> <operator>=</operator> <call><name>HT_START</name><argument_list>(<argument><expr><name>event_debug_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>global_debug_map</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>ent</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>victim</name> <operator>=</operator> <operator>*</operator><name>ent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>HT_NEXT_RMV</name><argument_list>(<argument><expr><name>event_debug_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>global_debug_map</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>victim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>HT_CLEAR</name><argument_list>(<argument><expr><name>event_debug_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>global_debug_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name>event_debug_map_lock_</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>event_debug_mode_on_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type>
<name>event_base_new_with_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>should_check_environment</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>event_debug_mode_too_late</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>base</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>event_base</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>should_check_environment</name> <operator>=</operator>
<operator>!</operator><operator>(</operator><name>cfg</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVENT_BASE_FLAG_IGNORE_ENV</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>precise_time</name> <init>=
<expr><name>cfg</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVENT_BASE_FLAG_PRECISE_TIMER</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>should_check_environment</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>precise_time</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>precise_time</name> <operator>=</operator> <call><name>evutil_getenv_</name><argument_list>(<argument><expr><literal type="string">"EVENT_PRECISE_TIMER"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>EVENT_BASE_FLAG_PRECISE_TIMER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name>precise_time</name></expr> ?</condition><then> <expr><name>EV_MONOT_PRECISE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_configure_monotonic_time_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>monotonic_timer</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gettime</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>min_heap_ctor_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>active_later_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evmap_io_initmap_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evmap_signal_initmap_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sigmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_changelist_init_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>changelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>max_dispatch_time</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>max_dispatch_interval</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>limit_callbacks_after_prio</name></name> <operator>=</operator>
<name><name>cfg</name><operator>-&gt;</operator><name>limit_callbacks_after_prio</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>max_dispatch_time</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>limit_callbacks_after_prio</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>&amp;&amp;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>max_dispatch_callbacks</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>max_dispatch_callbacks</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>max_dispatch_callbacks</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>max_dispatch_callbacks</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>max_dispatch_callbacks</name></name> <operator>==</operator> <name>INT_MAX</name> <operator>&amp;&amp;</operator>
<name><name>base</name><operator>-&gt;</operator><name>max_dispatch_time</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>limit_callbacks_after_prio</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>eventops</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>event_config_is_avoided_method</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>,
<argument><expr><name><name>eventops</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>eventops</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>features</name> <operator>&amp;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>require_features</name></name><operator>)</operator>
<operator>!=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>require_features</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>should_check_environment</name> <operator>&amp;&amp;</operator>
<call><name>event_is_method_disabled</name><argument_list>(<argument><expr><name><name>eventops</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>evsel</name></name> <operator>=</operator> <name><name>eventops</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name> <operator>=</operator> <call><name><name>base</name><operator>-&gt;</operator><name>evsel</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: no event mechanism available"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>evsel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evutil_getenv_</name><argument_list>(<argument><expr><literal type="string">"EVENT_SHOW_METHOD"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_msgx</name><argument_list>(<argument><expr><literal type="string">"libevent using: %s"</literal></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>evsel</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>event_base_priority_init</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>event_debug_created_threadable_ctx_</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>EVTHREAD_LOCKING_ENABLED</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name>cfg</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVENT_BASE_FLAG_NOLOCK</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVTHREAD_ALLOC_LOCK</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_base_lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_ALLOC_COND</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>current_event_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evthread_make_base_notifiable</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: Unable to make base notifiable."</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVENT_BASE_FLAG_STARTUP_IOCP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_start_iocp_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>n_cpus_hint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>base</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_start_iocp_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_cpus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>iocp</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>iocp</name></name> <operator>=</operator> <call><name>event_iocp_port_launch_</name><argument_list>(<argument><expr><name>n_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>iocp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: Couldn't launch IOCP"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_base_stop_iocp_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>iocp</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>event_iocp_shutdown_</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>iocp</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>rv</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>iocp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>event_base_cancel_single_callback_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>run_finalizers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INIT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>event_callback_to_event</name><argument_list>(<argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INTERNAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>EVENT_DEL_EVEN_IF_FINALIZING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_callback_cancel_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>run_finalizers</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_FINALIZING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_closure</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EV_CLOSURE_EVENT_FINALIZE</name></expr>:</case>
<case>case <expr><name>EV_CLOSURE_EVENT_FINALIZE_FREE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>event_callback_to_event</name><argument_list>(<argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>ev_evcallback</name><operator>.</operator><name>evcb_cb_union</name><operator>.</operator><name>evcb_evfinalize</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_closure</name></name> <operator>==</operator> <name>EV_CLOSURE_EVENT_FINALIZE_FREE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>EV_CLOSURE_CB_FINALIZE</name></expr>:</case>
<expr_stmt><expr><call><name><name>evcb</name><operator>-&gt;</operator><name>evcb_cb_union</name><operator>.</operator><name>evcb_cbfinalize</name></name><argument_list>(<argument><expr><name>evcb</name></expr></argument>, <argument><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_base_free_queues_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>run_finalizers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>deleted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>evcb</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>activequeues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>evcb</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>evcb_active_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>deleted</name> <operator>+=</operator> <call><name>event_base_cancel_single_callback_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>run_finalizers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>evcb</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>evcb</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>active_later_queue</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>deleted</name> <operator>+=</operator> <call><name>event_base_cancel_single_callback_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>run_finalizers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>

<return>return <expr><name>deleted</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_base_free_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>run_finalizers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n_deleted</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>current_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>current_base</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: no base to free"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>event_base_stop_iocp_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>th_notify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_CLOSESOCKET</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_CLOSESOCKET</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_unassign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>th_notify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>evmap_delete_all_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ev</name> <operator>=</operator> <call><name>min_heap_top_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n_deleted</name></expr>;</expr_stmt>
</block_content>}</block></while>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>ctl</name> <init>=
<expr><name><name>base</name><operator>-&gt;</operator><name>common_timeout_queues</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_unassign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ev</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>ev</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>ev</name></expr></argument>,
<argument><expr><name><name>ev_timeout_pos</name><operator>.</operator><name>ev_next_with_common_timeout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INTERNAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n_deleted</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>common_timeout_queues</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>common_timeout_queues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>








<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>event_base_free_queues_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>run_finalizers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n_deleted</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n_deleted</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: %d events were still set in base"</literal><operator>,</operator>
<name>__func__</name><operator>,</operator> <name>n_deleted</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>LIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>once_events</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_once</name></name> <modifier>*</modifier></type><name>eonce</name> <init>= <expr><call><name>LIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>once_events</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LIST_REMOVE</name><argument_list>(<argument><expr><name>eonce</name></expr></argument>, <argument><expr><name>next_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>eonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>evsel</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>base</name><operator>-&gt;</operator><name>evsel</name><operator>-&gt;</operator><name>dealloc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>base</name><operator>-&gt;</operator><name>evsel</name><operator>-&gt;</operator><name>dealloc</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>TAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>activequeues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>min_heap_empty_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>min_heap_dtor_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>activequeues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evmap_io_clear_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evmap_signal_clear_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sigmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_changelist_freemem_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>changelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_base_lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_FREE_COND</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>current_event_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>current_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>current_base</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_base_free_nofinalize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_base_free_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_base_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_base_free_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>nil_backend_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fdinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name></type> <name>nil_eventop</name> <init>= <expr><block>{
<expr><literal type="string">"nil"</literal></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>nil_backend_del</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type>
<name>event_reinit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name> <modifier>*</modifier></type><name>evsel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>was_notifiable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>had_signal_added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evsel</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>evsel</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>evsel</name><operator>-&gt;</operator><name>need_reinit</name></name></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>evsel</name></name> <operator>=</operator> <operator>&amp;</operator><name>nil_eventop</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_added</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del_nolock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal</name></name></expr></argument>, <argument><expr><name>EVENT_DEL_AUTOBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_unassign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>had_signal_added</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_added</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_CLOSESOCKET</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_CLOSESOCKET</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>was_notifiable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del_nolock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>th_notify</name></name></expr></argument>, <argument><expr><name>EVENT_DEL_AUTOBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_CLOSESOCKET</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_CLOSESOCKET</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_unassign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>th_notify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>evsel</name></name> <operator>=</operator> <name>evsel</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evsel</name><operator>-&gt;</operator><name>need_reinit</name></name></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>evsel</name><operator>-&gt;</operator><name>dealloc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>base</name><operator>-&gt;</operator><name>evsel</name><operator>-&gt;</operator><name>dealloc</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name> <operator>=</operator> <call><name><name>evsel</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"%s: could not reinitialize event mechanism"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>event_changelist_freemem_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>changelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>evmap_reinit_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evsig_init_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>had_signal_added</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>event_add_nolock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_added</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>was_notifiable</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evthread_make_base_notifiable_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>event_gettime_monotonic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>&amp;&amp;</operator> <name>tv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>evutil_gettime_monotonic_</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>base</name><operator>-&gt;</operator><name>monotonic_timer</name></name><operator>)</operator></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>event_get_supported_methods</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>methods</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>method</name> <operator>=</operator> <operator>&amp;</operator><name><name>eventops</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><operator>*</operator><name>method</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>method</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>eventops</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>eventops</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>methods</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>methods</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>methods</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type>
<name>event_config_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>max_dispatch_interval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>max_dispatch_callbacks</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>limit_callbacks_after_prio</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>cfg</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_config_entry_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>avoid_method</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>avoid_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_config_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_config_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_config_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_config_set_flag</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cfg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flag</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_config_avoid_method</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_config_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>avoid_method</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_config_require_features</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>features</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cfg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>require_features</name></name> <operator>=</operator> <name>features</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_config_set_num_cpus_hint</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cfg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>n_cpus_hint</name></name> <operator>=</operator> <name>cpus</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_config_set_max_dispatch_interval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>max_interval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_callbacks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max_interval</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>max_dispatch_interval</name></name></expr></argument>, <argument><expr><name>max_interval</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>max_dispatch_interval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>max_dispatch_callbacks</name></name> <operator>=</operator>
<ternary><condition><expr><name>max_callbacks</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>max_callbacks</name></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>min_priority</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min_priority</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>limit_callbacks_after_prio</name></name> <operator>=</operator> <name>min_priority</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_priority_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>npriorities</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>event_base_priority_init</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>npriorities</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_priority_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>npriorities</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>N_ACTIVE_CALLBACKS</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>npriorities</name> <operator>&lt;</operator> <literal type="number">1</literal>
<operator>||</operator> <name>npriorities</name> <operator>&gt;=</operator> <name>EVENT_MAX_PRIORITIES</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>npriorities</name> <operator>==</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>activequeues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>activequeues</name></name> <operator>=</operator> <operator>(</operator>struct <name>evcallback_list</name> <operator>*</operator><operator>)</operator>
<call><name>mm_calloc</name><argument_list>(<argument><expr><name>npriorities</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evcallback_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>activequeues</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name> <operator>=</operator> <name>npriorities</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>activequeues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>ok</name>:</label>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_get_npriorities</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>current_base</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_get_num_events</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>EVENT_BASE_COUNT_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>base</name><operator>-&gt;</operator><name>event_count_active</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>EVENT_BASE_COUNT_VIRTUAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>base</name><operator>-&gt;</operator><name>virtual_event_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>EVENT_BASE_COUNT_ADDED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>base</name><operator>-&gt;</operator><name>event_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_get_max_events</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clear</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>EVENT_BASE_COUNT_ACTIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>base</name><operator>-&gt;</operator><name>event_count_active_max</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clear</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_count_active_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>EVENT_BASE_COUNT_VIRTUAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>base</name><operator>-&gt;</operator><name>virtual_event_count_max</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clear</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>virtual_event_count_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>EVENT_BASE_COUNT_ADDED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>base</name><operator>-&gt;</operator><name>event_count_max</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clear</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_count_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>event_haveevents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>base</name><operator>-&gt;</operator><name>virtual_event_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>base</name><operator>-&gt;</operator><name>event_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>event_signal_closure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>ncalls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>should_break</name></decl>;</decl_stmt>


<expr_stmt><expr><name>ncalls</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_ncalls</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ncalls</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_pncalls</name></name> <operator>=</operator> <operator>&amp;</operator><name>ncalls</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ncalls</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ncalls</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_ncalls</name></name> <operator>=</operator> <name>ncalls</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ncalls</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_pncalls</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name>)<argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>should_break</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>event_break</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>should_break</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ncalls</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_pncalls</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MICROSECONDS_MASK</name></cpp:macro> <cpp:value>COMMON_TIMEOUT_MICROSECONDS_MASK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_TIMEOUT_IDX_MASK</name></cpp:macro> <cpp:value>0x0ff00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_TIMEOUT_IDX_SHIFT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_TIMEOUT_MASK</name></cpp:macro> <cpp:value>0xf0000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_TIMEOUT_MAGIC</name></cpp:macro> <cpp:value>0x50000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_TIMEOUT_IDX</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((tv)-&gt;tv_usec &amp; COMMON_TIMEOUT_IDX_MASK)&gt;&gt;COMMON_TIMEOUT_IDX_SHIFT)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>is_common_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&amp;</operator> <name>COMMON_TIMEOUT_MASK</name><operator>)</operator> <operator>!=</operator> <name>COMMON_TIMEOUT_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>COMMON_TIMEOUT_IDX</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>idx</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>is_same_common_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>tv1</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&amp;</operator> <operator>~</operator><name>MICROSECONDS_MASK</name><operator>)</operator> <operator>==</operator>
<operator>(</operator><name><name>tv2</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&amp;</operator> <operator>~</operator><name>MICROSECONDS_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type>
<name>get_common_timeout_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>base</name><operator>-&gt;</operator><name>common_timeout_queues</name><index>[<expr><call><name>COMMON_TIMEOUT_IDX</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static inline int
common_timeout_ok(const struct timeval *tv,
struct event_base *base)
{
const struct timeval *expect =
&amp;get_common_timeout_list(base, tv)-&gt;duration;
return tv-&gt;tv_sec == expect-&gt;tv_sec &amp;&amp;
tv-&gt;tv_usec == expect-&gt;tv_usec;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>common_timeout_schedule</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><name><name>head</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>&amp;=</operator> <name>MICROSECONDS_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_add_nolock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>common_timeout_callback</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>ctl</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gettime</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ev</name> <operator>||</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>||</operator>
<operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name><operator>.</operator><name>tv_usec</name></name><operator>&amp;</operator><name>MICROSECONDS_MASK</name><operator>)</operator> <operator>&gt;</operator> <name><name>now</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>event_del_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>EVENT_DEL_NOBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_active_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>ev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>common_timeout_schedule</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_COMMON_TIMEOUTS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type>
<name>event_base_init_common_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>result</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>new_ctl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_common_timeout</name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>&amp;=</operator> <name>MICROSECONDS_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>%=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>ctl</name> <init>=
<expr><name><name>base</name><operator>-&gt;</operator><name>common_timeout_queues</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>==</operator> <name><name>ctl</name><operator>-&gt;</operator><name>duration</name><operator>.</operator><name>tv_sec</name></name> <operator>&amp;&amp;</operator>
<name><name>duration</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>==</operator>
<operator>(</operator><name><name>ctl</name><operator>-&gt;</operator><name>duration</name><operator>.</operator><name>tv_usec</name></name> <operator>&amp;</operator> <name>MICROSECONDS_MASK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>is_common_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts</name></name> <operator>==</operator> <name>MAX_COMMON_TIMEOUTS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: Too many common timeouts already in use; "</literal>
<literal type="string">"we only support %d per event_base"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name>MAX_COMMON_TIMEOUTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts_allocated</name></name> <operator>==</operator> <name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>:
<expr><name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts</name></name><operator>*</operator><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>newqueues</name> <init>=
<expr><call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>common_timeout_queues</name></name></expr></argument>,
<argument><expr><name>n</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>common_timeout_queue</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newqueues</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: realloc"</literal></expr></argument>,<argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts_allocated</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>common_timeout_queues</name></name> <operator>=</operator> <name>newqueues</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_ctl</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>common_timeout_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_ctl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>,<argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_ctl</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_ctl</name><operator>-&gt;</operator><name>duration</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>duration</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_ctl</name><operator>-&gt;</operator><name>duration</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator>
<name><name>duration</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>|</operator> <name>COMMON_TIMEOUT_MAGIC</name> <operator>|</operator>
<operator>(</operator><name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts</name></name> <operator>&lt;&lt;</operator> <name>COMMON_TIMEOUT_IDX_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evtimer_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_ctl</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
<argument><expr><name>common_timeout_callback</name></expr></argument>, <argument><expr><name>new_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_ctl</name><operator>-&gt;</operator><name>timeout_event</name><operator>.</operator><name>ev_flags</name></name> <operator>|=</operator> <name>EVLIST_INTERNAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_priority_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_ctl</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_ctl</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>common_timeout_queues</name><index>[<expr><name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>new_ctl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>&amp;</operator><name><name>new_ctl</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>is_common_timeout</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>event_persist_closure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evcb_callback</name>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>evcb_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>evcb_res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>evcb_arg</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_io_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>||</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_io_timeout</name><operator>.</operator><name>tv_usec</name></name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>run_at</name></decl>, <decl><type ref="prev"/><name>relative_to</name></decl>, <decl><type ref="prev"/><name>delay</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>usec_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>is_same_common_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_io_timeout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gettime</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_common_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_io_timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>usec_mask</name> <operator>=</operator> <name><name>delay</name><operator>.</operator><name>tv_usec</name></name> <operator>&amp;</operator> <operator>~</operator><name>MICROSECONDS_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>delay</name><operator>.</operator><name>tv_usec</name></name> <operator>&amp;=</operator> <name>MICROSECONDS_MASK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>&amp;</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>relative_to</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>relative_to</name><operator>.</operator><name>tv_usec</name></name> <operator>&amp;=</operator> <name>MICROSECONDS_MASK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>relative_to</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_io_timeout</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>&amp;</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>relative_to</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>relative_to</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>evutil_timeradd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>relative_to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>run_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evutil_timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>run_at</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>evutil_timeradd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>run_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>run_at</name><operator>.</operator><name>tv_usec</name></name> <operator>|=</operator> <name>usec_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_add_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>run_at</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>evcb_callback</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>evcb_fd</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>evcb_res</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>evcb_arg</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_arg</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><name>evcb_callback</name><operator>)</operator><operator>(</operator><name>evcb_fd</name><operator>,</operator> <name>evcb_res</name><operator>,</operator> <name>evcb_arg</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>event_process_active_single_queue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evcallback_list</name></name> <modifier>*</modifier></type><name>activeq</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_to_process</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>endtime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>activeq</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>evcb</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><name>activeq</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>evcb</name></expr>;</condition> <incr><expr><name>evcb</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><name>activeq</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>event_callback_to_event</name><argument_list>(<argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_PERSIST</name> <operator>||</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_FINALIZING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_queue_remove_active</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_del_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>EVENT_DEL_NOBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator>
<literal type="string">"event_process_active: event: %p, %s%s%scall %p"</literal><operator>,</operator>
<name>ev</name><operator>,</operator>
<ternary><condition><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>&amp;</operator> <name>EV_READ</name></expr> ?</condition><then> <expr><literal type="string">"EV_READ "</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>,</operator>
<ternary><condition><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>&amp;</operator> <name>EV_WRITE</name></expr> ?</condition><then> <expr><literal type="string">"EV_WRITE "</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>,</operator>
<ternary><condition><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>&amp;</operator> <name>EV_CLOSED</name></expr> ?</condition><then> <expr><literal type="string">"EV_CLOSED "</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>,</operator>
<name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>event_queue_remove_active</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"event_process_active: event_callback %p, "</literal>
<literal type="string">"closure %d, call %p"</literal><operator>,</operator>
<name>evcb</name><operator>,</operator> <name><name>evcb</name><operator>-&gt;</operator><name>evcb_closure</name></name><operator>,</operator> <name><name>evcb</name><operator>-&gt;</operator><name>evcb_cb_union</name><operator>.</operator><name>evcb_callback</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INTERNAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>current_event</name></name> <operator>=</operator> <name>evcb</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>current_event_waiters</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_closure</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EV_CLOSURE_EVENT_SIGNAL</name></expr>:</case>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>ev</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_signal_closure</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EV_CLOSURE_EVENT_PERSIST</name></expr>:</case>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>ev</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_persist_closure</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EV_CLOSURE_EVENT</name></expr>:</case> <block>{<block_content>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evcb_callback</name>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>ev</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>evcb_callback</name> <operator>=</operator> <operator>*</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evcb_callback</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>EV_CLOSURE_CB_SELF</name></expr>:</case> <block>{<block_content>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evcb_selfcb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_cb_union</name><operator>.</operator><name>evcb_selfcb</name></name></expr></init>;</function_decl>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evcb_selfcb</name><argument_list>(<argument><expr><name>evcb</name></expr></argument>, <argument><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>EV_CLOSURE_EVENT_FINALIZE</name></expr>:</case>
<case>case <expr><name>EV_CLOSURE_EVENT_FINALIZE_FREE</name></expr>:</case> <block>{<block_content>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evcb_evfinalize</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>evcb_closure</name> <init>= <expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_closure</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>ev</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>current_event</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>evcb_evfinalize</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_evcallback</name><operator>.</operator><name>evcb_cb_union</name><operator>.</operator><name>evcb_evfinalize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_FINALIZING</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evcb_evfinalize</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_note_teardown_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evcb_closure</name> <operator>==</operator> <name>EV_CLOSURE_EVENT_FINALIZE_FREE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>EV_CLOSURE_CB_FINALIZE</name></expr>:</case> <block>{<block_content>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evcb_cbfinalize</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_cb_union</name><operator>.</operator><name>evcb_cbfinalize</name></name></expr></init>;</function_decl>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>current_event</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_FINALIZING</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evcb_cbfinalize</name><argument_list>(<argument><expr><name>evcb</name></expr></argument>, <argument><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>current_event</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>current_event_waiters</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>current_event_waiters</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_COND_BROADCAST</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>current_event_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>event_break</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>max_to_process</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>count</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&amp;&amp;</operator> <name>endtime</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>update_time_cache</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gettime</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evutil_timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>count</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>event_continue</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>event_process_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>evcallback_list</name></name> <modifier>*</modifier></type><name>activeq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>endtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxcb</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>max_dispatch_callbacks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>limit_after_prio</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>limit_callbacks_after_prio</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>max_dispatch_time</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_time_cache</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gettime</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timeradd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>max_dispatch_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>endtime</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>endtime</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>activequeues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_running_priority</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>activeq</name> <operator>=</operator> <operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>activequeues</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>limit_after_prio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>event_process_active_single_queue</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>activeq</name></expr></argument>,
<argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>event_process_active_single_queue</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>activeq</name></expr></argument>,
<argument><expr><name>maxcb</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>



</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>done</name>:</label>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_running_priority</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>event_dispatch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>event_loop</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_dispatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>event_base_loop</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>event_base_get_method</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>base</name><operator>-&gt;</operator><name>evsel</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_loopexit_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_gotterm</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_loopexit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>event_once</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>event_loopexit_cb</name></expr></argument>,
<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_loopexit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>event_base_once</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>event_loopexit_cb</name></expr></argument>,
<argument><expr><name>event_base</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_loopbreak</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>event_base_loopbreak</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_loopbreak</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>event_base</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event_base</name><operator>-&gt;</operator><name>event_break</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVBASE_NEED_NOTIFY</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evthread_notify_base</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_loopcontinue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>event_base</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event_base</name><operator>-&gt;</operator><name>event_continue</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVBASE_NEED_NOTIFY</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evthread_notify_base</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_got_break</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>event_base</name><operator>-&gt;</operator><name>event_break</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_got_exit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>event_base</name><operator>-&gt;</operator><name>event_gotterm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>event_loop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>event_base_loop</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_loop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name> <modifier>*</modifier></type><name>evsel</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>evsel</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>done</name></decl>, <decl><type ref="prev"/><name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>running_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: reentrant invocation. Only one event_base_loop"</literal>
<literal type="string">" can run on each event_base at once."</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>running_loop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_time_cache</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_signal_added</name></name> <operator>&amp;&amp;</operator> <name><name>base</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ev_n_signals_added</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evsig_set_base_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_owner_id</name></name> <operator>=</operator> <call><name>EVTHREAD_GET_ID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_gotterm</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>event_break</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_continue</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>n_deferreds_queued</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>event_gotterm</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>event_break</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tv_p</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>N_ACTIVE_CALLBACKS</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EVLOOP_NONBLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>timeout_next</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><literal type="number">0</literal><operator>==</operator><operator>(</operator><name>flags</name><operator>&amp;</operator><name>EVLOOP_NO_EXIT_ON_EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>event_haveevents</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>N_ACTIVE_CALLBACKS</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: no events registered."</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_queue_make_later_events_active</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_time_cache</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>evsel</name><operator>-&gt;</operator><name>dispatch</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>tv_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: dispatch returned unsuccessfully."</literal><operator>,</operator>
<name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_time_cache</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>timeout_process</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>N_ACTIVE_CALLBACKS</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>event_process_active</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EVLOOP_ONCE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>N_ACTIVE_CALLBACKS</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EVLOOP_NONBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: asked to terminate loop."</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>clear_time_cache</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>running_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>retval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_once_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_once</name></name> <modifier>*</modifier></type><name>eonce</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>eonce</name><operator>-&gt;</operator><name>cb</name></name>)<argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name><name>eonce</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name><name>eonce</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_REMOVE</name><argument_list>(<argument><expr><name>eonce</name></expr></argument>, <argument><expr><name>next_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name><name>eonce</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_unassign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eonce</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>eonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>event_once</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>event_base_once</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>event_base_once</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_once</name></name> <modifier>*</modifier></type><name>eonce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>activate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>EV_SIGNAL</name><operator>|</operator><name>EV_PERSIST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>eonce</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>event_once</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eonce</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eonce</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>EV_TIMEOUT</name><operator>|</operator><name>EV_SIGNAL</name><operator>|</operator><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name><operator>|</operator><name>EV_CLOSED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evtimer_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eonce</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>event_once_cb</name></expr></argument>, <argument><expr><name>eonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator> <call><name>evutil_timerisset</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>activate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name><operator>|</operator><name>EV_CLOSED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>events</name> <operator>&amp;=</operator> <name>EV_READ</name><operator>|</operator><name>EV_WRITE</name><operator>|</operator><name>EV_CLOSED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eonce</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>event_once_cb</name></expr></argument>, <argument><expr><name>eonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>eonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>activate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_active_nolock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eonce</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>event_add_nolock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eonce</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>eonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>once_events</name></name></expr></argument>, <argument><expr><name>eonce</name></expr></argument>, <argument><expr><name>next_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>current_base</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <operator>&amp;</operator><name>event_self_cbarg_ptr_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>ev</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>event_debug_assert_not_added_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>=</operator> <name>events</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>=</operator> <name>EVLIST_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_ncalls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_pncalls</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_SIGNAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name><operator>|</operator><name>EV_CLOSED</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: EV_SIGNAL is not compatible with "</literal>
<literal type="string">"EV_READ, EV_WRITE or EV_CLOSED"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_closure</name></name> <operator>=</operator> <name>EV_CLOSURE_EVENT_SIGNAL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_PERSIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_io_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_closure</name></name> <operator>=</operator> <name>EV_CLOSURE_EVENT_PERSIST</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_closure</name></name> <operator>=</operator> <name>EV_CLOSURE_EVENT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>min_heap_elem_init_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_pri</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_debug_note_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>!=</operator> <name>EVLIST_INIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_pri</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>event_assign</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>event_self_cbarg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>event_self_cbarg_ptr_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type>
<name>event_base_get_running_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVBASE_IN_THREAD</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>current_event</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>event_callback_to_event</name><argument_list>(<argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ev</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type>
<name>event_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_assign</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ev</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_note_teardown_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_debug_unassign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug_assert_not_added_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_note_teardown_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVLIST_INIT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_FINALIZE_FREE_</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>event_finalize_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>event_finalize_callback_fn</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>closure</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EVENT_FINALIZE_FREE_</name><operator>)</operator></expr> ?</condition><then>
<expr><name>EV_CLOSURE_EVENT_FINALIZE_FREE</name></expr> </then><else>: <expr><name>EV_CLOSURE_EVENT_FINALIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>event_del_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>EVENT_DEL_NOBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_closure</name></name> <operator>=</operator> <name>closure</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_evcallback</name><operator>.</operator><name>evcb_cb_union</name><operator>.</operator><name>evcb_evfinalize</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_active_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>EV_FINALIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>|=</operator> <name>EVLIST_FINALIZING</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>event_finalize_impl_</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>event_finalize_callback_fn</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_FAILURE_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: event has no event_base set."</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>event_finalize_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_finalize</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>event_finalize_callback_fn</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>event_finalize_impl_</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_free_finalize</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>event_finalize_callback_fn</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>event_finalize_impl_</name><argument_list>(<argument><expr><name>flags</name><operator>|</operator><name>EVENT_FINALIZE_FREE_</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_callback_finalize_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>event_callback_to_event</name><argument_list>(<argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_del_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>EVENT_DEL_NOBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>event_callback_cancel_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_closure</name></name> <operator>=</operator> <name>EV_CLOSURE_CB_FINALIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_cb_union</name><operator>.</operator><name>evcb_cbfinalize</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_callback_activate_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>|=</operator> <name>EVLIST_FINALIZING</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_callback_finalize_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_callback_finalize_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>event_callback_finalize_many_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_cbs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>evcbs</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n_pending</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>current_base</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: %d events finalizing"</literal><operator>,</operator> <name>__func__</name><operator>,</operator> <name>n_cbs</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_cbs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name> <init>= <expr><name><name>evcbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>evcb</name> <operator>==</operator> <name><name>base</name><operator>-&gt;</operator><name>current_event</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_callback_finalize_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n_pending</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>event_callback_cancel_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n_pending</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>event_callback_finalize_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>evcbs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>event_priority_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pri</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pri</name> <operator>&gt;=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_pri</name></name> <operator>=</operator> <name>pri</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>event_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_FAILURE_CHECK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: event has no event_base set."</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INSERTED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name><operator>|</operator><name>EV_CLOSED</name><operator>|</operator><name>EV_SIGNAL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_ACTIVE</name><operator>|</operator><name>EVLIST_ACTIVE_LATER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EV_TIMEOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>event</name> <operator>&amp;=</operator> <operator>(</operator><name>EV_TIMEOUT</name><operator>|</operator><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name><operator>|</operator><name>EV_CLOSED</name><operator>|</operator><name>EV_SIGNAL</name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>event</name> <operator>&amp;</operator> <name>EV_TIMEOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tmp</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>tv_usec</name></name> <operator>&amp;=</operator> <name>MICROSECONDS_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_timeradd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name><operator>-&gt;</operator><name>tv_clock_diff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>event</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_initialized</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_get_assignment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>base_out</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name> <modifier>*</modifier></type><name>fd_out</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>events_out</name></decl></parameter>, <parameter><decl><type><name>event_callback_fn</name> <modifier>*</modifier></type><name>callback_out</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>base_out</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>ev_base</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>fd_out</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>ev_fd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>events_out</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>ev_events</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>callback_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>callback_out</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>ev_callback</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>arg_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>arg_out</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>ev_arg</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>event_get_struct_event_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>event</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><name>evutil_socket_t</name></type>
<name>event_get_fd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type>
<name>event_get_base</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>short</name></type>
<name>event_get_events</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>event_callback_fn</name></type>
<name>event_get_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>event_get_callback_arg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_arg</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_get_priority</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_pri</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_FAILURE_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: event has no event_base set."</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>event_add_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>evthread_notify_base_default</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>EVUTIL_ERR_IS_EAGAIN</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_EVENTFD</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>evthread_notify_base_eventfd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>msg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition>;</do>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>evthread_notify_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>th_notify_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>is_notify_pending</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>is_notify_pending</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name><name>base</name><operator>-&gt;</operator><name>th_notify_fn</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>event_remove_timer_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"event_remove_timer_nolock: event: %p"</literal><operator>,</operator> <name>ev</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_queue_remove_timeout</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_</name><operator>.</operator><name>ev_io</name><operator>.</operator><name>ev_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_remove_timer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_FAILURE_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: event has no event_base set."</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>event_remove_timer_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>event_add_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tv_is_absolute</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>notify</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator>
<literal type="string">"event_add: event: %p (fd "</literal><name>EV_SOCK_FMT</name><literal type="string">"), %s%s%s%scall %p"</literal><operator>,</operator>
<name>ev</name><operator>,</operator>
<call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>)</argument_list></call><operator>,</operator>
<ternary><condition><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_READ</name></expr> ?</condition><then> <expr><literal type="string">"EV_READ "</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>,</operator>
<ternary><condition><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_WRITE</name></expr> ?</condition><then> <expr><literal type="string">"EV_WRITE "</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>,</operator>
<ternary><condition><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_CLOSED</name></expr> ?</condition><then> <expr><literal type="string">"EV_CLOSED "</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>,</operator>
<ternary><condition><expr><name>tv</name></expr> ?</condition><then> <expr><literal type="string">"EV_TIMEOUT "</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>,</operator>
<name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>EVLIST_ALL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_FINALIZING</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_TIMEOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>min_heap_reserve_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>min_heap_size_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>current_event</name></name> <operator>==</operator> <call><name>event_to_event_callback</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_SIGNAL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>EVBASE_IN_THREAD</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>base</name><operator>-&gt;</operator><name>current_event_waiters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_COND_WAIT</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>current_event_cond</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_base_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name><operator>|</operator><name>EV_CLOSED</name><operator>|</operator><name>EV_SIGNAL</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_INSERTED</name><operator>|</operator><name>EVLIST_ACTIVE</name><operator>|</operator><name>EVLIST_ACTIVE_LATER</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name><operator>|</operator><name>EV_CLOSED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evmap_io_add_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_SIGNAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evmap_signal_add_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_queue_insert_inserted</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>notify</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>common_timeout</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_REINSERT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>was_common</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_timeout_idx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_closure</name></name> <operator>==</operator> <name>EV_CLOSURE_EVENT_PERSIST</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>tv_is_absolute</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_io_timeout</name></name> <operator>=</operator> <operator>*</operator><name>tv</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_REINSERT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_queue_remove_timeout</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_ACTIVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>&amp;</operator> <name>EV_TIMEOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_SIGNAL</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_ncalls</name></name> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_pncalls</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_pncalls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_queue_remove_active</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><call><name>event_to_event_callback</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gettime</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>common_timeout</name> <operator>=</operator> <call><name>is_common_timeout</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_REINSERT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>was_common</name> <operator>=</operator> <call><name>is_common_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_timeout_idx</name> <operator>=</operator> <call><name>COMMON_TIMEOUT_IDX</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>tv_is_absolute</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name> <operator>=</operator> <operator>*</operator><name>tv</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>common_timeout</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>tv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>tv_usec</name></name> <operator>&amp;=</operator> <name>MICROSECONDS_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timeradd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>|=</operator>
<operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&amp;</operator> <operator>~</operator><name>MICROSECONDS_MASK</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evutil_timeradd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator>
<literal type="string">"event_add: event %p, timeout in %d seconds %d useconds, call %p"</literal><operator>,</operator>
<name>ev</name><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>,</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_REINSERT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>event_queue_reinsert_timeout</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>was_common</name></expr></argument>, <argument><expr><name>common_timeout</name></expr></argument>, <argument><expr><name>old_timeout_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>event_queue_insert_timeout</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>common_timeout</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>ctl</name> <init>=
<expr><call><name>get_common_timeout_list</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>==</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_timeout_schedule</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>top</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><call><name>min_heap_elt_is_top_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>notify</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>top</name> <operator>=</operator> <call><name>min_heap_top_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>evutil_timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>notify</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>notify</name> <operator>&amp;&amp;</operator> <call><name>EVBASE_NEED_NOTIFY</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evthread_notify_base</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>event_debug_note_add_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>event_del_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocking</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_FAILURE_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: event has no event_base set."</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>event_del_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>event_del_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>EVENT_DEL_AUTOBLOCK</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_del_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>event_del_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>EVENT_DEL_BLOCK</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_del_noblock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>event_del_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>EVENT_DEL_NOBLOCK</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>event_del_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocking</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>notify</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"event_del: %p (fd "</literal><name>EV_SOCK_FMT</name><literal type="string">"), callback %p"</literal><operator>,</operator>
<name>ev</name><operator>,</operator> <call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>)</argument_list></call><operator>,</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blocking</name> <operator>!=</operator> <name>EVENT_DEL_EVEN_IF_FINALIZING</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_FINALIZING</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>blocking</name> <operator>!=</operator> <name>EVENT_DEL_NOBLOCK</name> <operator>&amp;&amp;</operator>
<name><name>base</name><operator>-&gt;</operator><name>current_event</name></name> <operator>==</operator> <call><name>event_to_event_callback</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>EVBASE_IN_THREAD</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>blocking</name> <operator>==</operator> <name>EVENT_DEL_BLOCK</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_FINALIZE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>base</name><operator>-&gt;</operator><name>current_event_waiters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_COND_WAIT</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>current_event_cond</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_base_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>EVLIST_ALL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_SIGNAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_ncalls</name></name> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_pncalls</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_pncalls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_TIMEOUT</name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><call><name>event_queue_remove_timeout</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_queue_remove_active</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><call><name>event_to_event_callback</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_ACTIVE_LATER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_queue_remove_active_later</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><call><name>event_to_event_callback</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INSERTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_queue_remove_inserted</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name><operator>|</operator><name>EV_CLOSED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evmap_io_del_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evmap_signal_del_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>notify</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>notify</name> <operator>&amp;&amp;</operator> <call><name>EVBASE_NEED_NOTIFY</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evthread_notify_base</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>event_debug_note_del_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>ncalls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_FAILURE_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: event has no event_base set."</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_debug_assert_is_setup_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_active_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>ncalls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>event_active_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>ncalls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"event_active: %p (fd "</literal><name>EV_SOCK_FMT</name><literal type="string">"), res %d, callback %p"</literal><operator>,</operator>
<name>ev</name><operator>,</operator> <call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>)</argument_list></call><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name>res</name><operator>,</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_FINALIZING</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_ACTIVE</name><operator>|</operator><name>EVLIST_ACTIVE_LATER</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>EVLIST_ACTIVE</name><operator>|</operator><name>EVLIST_ACTIVE_LATER</name></expr>:</case>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVLIST_ACTIVE</name></expr>:</case>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>|=</operator> <name>res</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>EVLIST_ACTIVE_LATER</name></expr>:</case>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>|=</operator> <name>res</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_pri</name></name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>event_running_priority</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_continue</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_SIGNAL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>current_event</name></name> <operator>==</operator> <call><name>event_to_event_callback</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>EVBASE_IN_THREAD</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>base</name><operator>-&gt;</operator><name>current_event_waiters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_COND_WAIT</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>current_event_cond</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_base_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_ncalls</name></name> <operator>=</operator> <name>ncalls</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_pncalls</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_callback_activate_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><call><name>event_to_event_callback</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_active_later_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_active_later_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_active_later_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_ACTIVE</name><operator>|</operator><name>EVLIST_ACTIVE_LATER</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>|=</operator> <name>res</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_callback_activate_later_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><call><name>event_to_event_callback</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_callback_activate_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>event_callback_activate_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_callback_activate_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_FINALIZING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_ACTIVE</name><operator>|</operator><name>EVLIST_ACTIVE_LATER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<default>default:</default>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>EVLIST_ACTIVE_LATER</name></expr>:</case>
<expr_stmt><expr><call><name>event_queue_remove_active_later</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVLIST_ACTIVE</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>event_queue_insert_active</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVBASE_NEED_NOTIFY</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evthread_notify_base</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_callback_activate_later_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_ACTIVE</name><operator>|</operator><name>EVLIST_ACTIVE_LATER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>event_queue_insert_active_later</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVBASE_NEED_NOTIFY</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evthread_notify_base</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_callback_init_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>evcb_pri</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_callback_cancel_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>event_callback_cancel_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_callback_cancel_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>even_if_finalizing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_FINALIZING</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>even_if_finalizing</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>event_del_nolock_</name><argument_list>(<argument><expr><call><name>event_callback_to_event</name><argument_list>(<argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>even_if_finalizing</name></expr> ?</condition><then> <expr><name>EVENT_DEL_EVEN_IF_FINALIZING</name></expr> </then><else>: <expr><name>EVENT_DEL_AUTOBLOCK</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_ACTIVE</name><operator>|</operator><name>EVLIST_ACTIVE_LATER</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>EVLIST_ACTIVE</name><operator>|</operator><name>EVLIST_ACTIVE_LATER</name></expr>:</case>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVLIST_ACTIVE</name></expr>:</case>

<expr_stmt><expr><call><name>event_queue_remove_active</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>EVLIST_ACTIVE_LATER</name></expr>:</case>
<expr_stmt><expr><call><name>event_queue_remove_active_later</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_deferred_cb_init_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>ev_uint8_t</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><name>deferred_cb_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>evcb_cb_union</name><operator>.</operator><name>evcb_selfcb</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>evcb_arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>evcb_pri</name></name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>evcb_closure</name></name> <operator>=</operator> <name>EV_CLOSURE_CB_SELF</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_deferred_cb_set_priority_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>ev_uint8_t</name></type> <name>priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>evcb_pri</name></name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_deferred_cb_cancel_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>current_base</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>event_callback_cancel_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DEFERREDS_QUEUED</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<function><type><name>int</name></type>
<name>event_deferred_cb_schedule_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>current_base</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>n_deferreds_queued</name></name> <operator>&gt;</operator> <name>MAX_DEFERREDS_QUEUED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>event_callback_activate_later_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>event_callback_activate_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>base</name><operator>-&gt;</operator><name>n_deferreds_queued</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>timeout_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tv_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><operator>*</operator><name>tv_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>min_heap_top_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tv_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gettime</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evutil_timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&lt;=</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"timeout_next: event: %p, in %d seconds, %d useconds"</literal><operator>,</operator> <name>ev</name><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>timeout_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>min_heap_empty_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gettime</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ev</name> <operator>=</operator> <call><name>min_heap_top_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>event_del_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>EVENT_DEL_NOBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"timeout_process: event: %p, call %p"</literal><operator>,</operator>
<name>ev</name><operator>,</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_active_nolock_</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>EVLIST_INTERNAL</name> <operator>&gt;</operator><name>&gt;</name> <literal type="number">4</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Mismatch for value of EVLIST_INTERNAL"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;(b))?(a):(b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EVENT_COUNT</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var = MAX(var, v)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECR_EVENT_COUNT</name><parameter_list>(<parameter><type><name>base</name></type></parameter>,<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((base)-&gt;event_count -= (~((flags) &gt;&gt; 4) &amp; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCR_EVENT_COUNT</name><parameter_list>(<parameter><type><name>base</name></type></parameter>,<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ((base)-&gt;event_count += (~((flags) &gt;&gt; 4) &amp; 1)); MAX_EVENT_COUNT((base)-&gt;event_count_max, (base)-&gt;event_count); } while (0)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_queue_remove_inserted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_FAILURE_CHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INSERTED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: %p(fd "</literal><name>EV_SOCK_FMT</name><literal type="string">") not on queue %x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name>ev</name></expr></argument>, <argument><expr><call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EVLIST_INSERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DECR_EVENT_COUNT</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVLIST_INSERTED</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_queue_remove_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_FAILURE_CHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_ACTIVE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: %p not on queue %x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>EVLIST_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DECR_EVENT_COUNT</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVLIST_ACTIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_count_active</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>activequeues</name><index>[<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_pri</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>evcb_active_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_queue_remove_active_later</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_FAILURE_CHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_ACTIVE_LATER</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: %p not on queue %x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>EVLIST_ACTIVE_LATER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DECR_EVENT_COUNT</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVLIST_ACTIVE_LATER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_count_active</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>active_later_queue</name></name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>evcb_active_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_queue_remove_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_FAILURE_CHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_TIMEOUT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: %p(fd "</literal><name>EV_SOCK_FMT</name><literal type="string">") not on queue %x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name>ev</name></expr></argument>, <argument><expr><call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EVLIST_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DECR_EVENT_COUNT</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVLIST_TIMEOUT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_common_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>ctl</name> <init>=
<expr><call><name>get_common_timeout_list</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>,
<argument><expr><name><name>ev_timeout_pos</name><operator>.</operator><name>ev_next_with_common_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>min_heap_erase_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_REINSERT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_queue_reinsert_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>was_common</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_common</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_timeout_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>ctl</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_TIMEOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_queue_insert_timeout</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>was_common</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>is_common</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>ctl</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>common_timeout_queues</name><index>[<expr><name>old_timeout_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>,
<argument><expr><name><name>ev_timeout_pos</name><operator>.</operator><name>ev_next_with_common_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>get_common_timeout_list</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_common_timeout_inorder</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>ctl</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>common_timeout_queues</name><index>[<expr><name>old_timeout_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>,
<argument><expr><name><name>ev_timeout_pos</name><operator>.</operator><name>ev_next_with_common_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>min_heap_push_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>min_heap_erase_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>get_common_timeout_list</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_common_timeout_inorder</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name>min_heap_adjust_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>insert_common_timeout_inorder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>







<macro><name>TAILQ_FOREACH_REVERSE</name><argument_list>(<argument>e</argument>, <argument>&amp;ctl-&gt;events</argument>,
<argument>event_list</argument>, <argument>ev_timeout_pos.ev_next_with_common_timeout</argument>)</argument_list></macro> <block>{<block_content>




<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(
<argument><expr><call><name>is_same_common_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evutil_timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_INSERT_AFTER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>,
<argument><expr><name><name>ev_timeout_pos</name><operator>.</operator><name>ev_next_with_common_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>TAILQ_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>,
<argument><expr><name><name>ev_timeout_pos</name><operator>.</operator><name>ev_next_with_common_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_queue_insert_inserted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_FAILURE_CHECK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INSERTED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: %p(fd "</literal><name>EV_SOCK_FMT</name><literal type="string">") already inserted"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name>ev</name></expr></argument>, <argument><expr><call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>INCR_EVENT_COUNT</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>|=</operator> <name>EVLIST_INSERTED</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_queue_insert_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <name>EVLIST_ACTIVE</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>INCR_EVENT_COUNT</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>|=</operator> <name>EVLIST_ACTIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_count_active</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAX_EVENT_COUNT</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>event_count_active_max</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>event_count_active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_pri</name></name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>activequeues</name><index>[<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_pri</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>evcb_active_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_queue_insert_active_later</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_ACTIVE_LATER</name><operator>|</operator><name>EVLIST_ACTIVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>INCR_EVENT_COUNT</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>|=</operator> <name>EVLIST_ACTIVE_LATER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_count_active</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAX_EVENT_COUNT</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>event_count_active_max</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>event_count_active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_pri</name></name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>active_later_queue</name></name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>evcb_active_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_queue_insert_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_FAILURE_CHECK</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_TIMEOUT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: %p(fd "</literal><name>EV_SOCK_FMT</name><literal type="string">") already on timeout"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name>ev</name></expr></argument>, <argument><expr><call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>INCR_EVENT_COUNT</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>|=</operator> <name>EVLIST_TIMEOUT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_common_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>ctl</name> <init>=
<expr><call><name>get_common_timeout_list</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>insert_common_timeout_inorder</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>min_heap_push_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_queue_make_later_events_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVENT_BASE_ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>evcb</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>active_later_queue</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>active_later_queue</name></name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>evcb_active_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>=</operator> <operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>EVLIST_ACTIVE_LATER</name><operator>)</operator> <operator>|</operator> <name>EVLIST_ACTIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_pri</name></name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>activequeues</name><index>[<expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_pri</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>evcb</name></expr></argument>, <argument><expr><name>evcb_active_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>n_deferreds_queued</name></name> <operator>+=</operator> <operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_closure</name></name> <operator>==</operator> <name>EV_CLOSURE_CB_SELF</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>event_get_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>EVENT__VERSION</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ev_uint32_t</name></type>
<name>event_get_version_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>EVENT__NUMERIC_VERSION</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>event_get_method</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>current_base</name><operator>-&gt;</operator><name>evsel</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_MM_REPLACEMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mm_malloc_fn_</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mm_realloc_fn_</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>mm_free_fn_</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>event_mm_malloc_</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mm_malloc_fn_</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>mm_malloc_fn_</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>event_mm_calloc_</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mm_malloc_fn_</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><name>count</name> <operator>*</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>EV_SIZE_MAX</name> <operator>/</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_malloc_fn_</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>event_mm_strdup_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mm_malloc_fn_</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ln</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>==</operator> <name>EV_SIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_malloc_fn_</name><argument_list>(<argument><expr><name>ln</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>ln</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>error</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>event_mm_realloc_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mm_realloc_fn_</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>mm_realloc_fn_</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_mm_free_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mm_free_fn_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free_fn_</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_set_mem_functions</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>malloc_fn</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>realloc_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>mm_malloc_fn_</name> <operator>=</operator> <name>malloc_fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm_realloc_fn_</name> <operator>=</operator> <name>realloc_fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm_free_fn_</name> <operator>=</operator> <name>free_fn</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_EVENTFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>evthread_notify_drain_eventfd</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_sock_warn</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Error reading from eventfd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>is_notify_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evthread_notify_drain_default</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><call><name>recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>is_notify_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evthread_make_base_notifiable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evthread_make_base_notifiable_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evthread_make_base_notifiable_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>notify</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_WORKING_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>evsel</name></name> <operator>==</operator> <operator>&amp;</operator><name>kqops</name> <operator>&amp;&amp;</operator> <call><name>event_kq_add_notify_event_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fn</name></name> <operator>=</operator> <name>event_kq_notify_base_</name></expr>;</expr_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_EVENTFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>evutil_eventfd_</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>EVUTIL_EFD_CLOEXEC</name><operator>|</operator><name>EVUTIL_EFD_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>notify</name> <operator>=</operator> <name>evthread_notify_base_eventfd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>evthread_notify_drain_eventfd</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><call><name>evutil_make_internal_pipe_</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>notify</name> <operator>=</operator> <name>evthread_notify_base_default</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>evthread_notify_drain_default</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fn</name></name> <operator>=</operator> <name>notify</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>th_notify</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>EV_READ</name><operator>|</operator><name>EV_PERSIST</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify</name><operator>.</operator><name>ev_flags</name></name> <operator>|=</operator> <name>EVLIST_INTERNAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_priority_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>th_notify</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>event_add_nolock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>th_notify</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_foreach_event_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>event_base_foreach_event_cb</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>evmap_foreach_event_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>timeheap</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>u</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>timeheap</name><operator>.</operator><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INSERTED</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>ctl</name> <init>=
<expr><name><name>base</name><operator>-&gt;</operator><name>common_timeout_queues</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ev</argument>, <argument>&amp;ctl-&gt;events</argument>,
<argument>ev_timeout_pos.ev_next_with_common_timeout</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_INSERTED</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl>;</decl_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>evcb</argument>, <argument>&amp;base-&gt;activequeues[i]</argument>, <argument>evcb_active_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_INIT</name><operator>|</operator><name>EVLIST_INSERTED</name><operator>|</operator><name>EVLIST_TIMEOUT</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>EVLIST_INIT</name></expr>)</condition> <block>{<block_content>



<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>event_callback_to_event</name><argument_list>(<argument><expr><name>evcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>dump_inserted_event_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gloss</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_SIGNAL</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"sig"</literal></expr> </then><else>: <expr><literal type="string">"fd "</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_INSERTED</name><operator>|</operator><name>EVLIST_TIMEOUT</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" %p [%s "</literal><name>EV_SOCK_FMT</name><literal type="string">"]%s%s%s%s%s%s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>e</name></expr></argument>, <argument><expr><name>gloss</name></expr></argument>, <argument><expr><call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_events</name></name><operator>&amp;</operator><name>EV_READ</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" Read"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_events</name></name><operator>&amp;</operator><name>EV_WRITE</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" Write"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_events</name></name><operator>&amp;</operator><name>EV_CLOSED</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" EOF"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_events</name></name><operator>&amp;</operator><name>EV_SIGNAL</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" Signal"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_events</name></name><operator>&amp;</operator><name>EV_PERSIST</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" Persist"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_flags</name></name><operator>&amp;</operator><name>EVLIST_INTERNAL</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" Internal"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>ev_timeout</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>ev_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>&amp;</operator> <name>MICROSECONDS_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timeradd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>tv_clock_diff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" Timeout=%ld.%06d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>&amp;</operator> <name>MICROSECONDS_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>dump_active_event_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gloss</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_SIGNAL</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"sig"</literal></expr> </then><else>: <expr><literal type="string">"fd "</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_ACTIVE</name><operator>|</operator><name>EVLIST_ACTIVE_LATER</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" %p [%s "</literal><name>EV_SOCK_FMT</name><literal type="string">", priority=%d]%s%s%s%s%s active%s%s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>e</name></expr></argument>, <argument><expr><name>gloss</name></expr></argument>, <argument><expr><call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>ev_pri</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_res</name></name><operator>&amp;</operator><name>EV_READ</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" Read"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_res</name></name><operator>&amp;</operator><name>EV_WRITE</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" Write"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_res</name></name><operator>&amp;</operator><name>EV_CLOSED</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" EOF"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_res</name></name><operator>&amp;</operator><name>EV_SIGNAL</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" Signal"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_res</name></name><operator>&amp;</operator><name>EV_TIMEOUT</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" Timeout"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_flags</name></name><operator>&amp;</operator><name>EVLIST_INTERNAL</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" [Internal]"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_flags</name></name><operator>&amp;</operator><name>EVLIST_ACTIVE_LATER</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">" [NextTime]"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_base_foreach_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>event_base_foreach_event_cb</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>fn</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>base</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>event_base_foreach_event_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>event_base_dump_events</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Inserted events:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_foreach_event_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>dump_inserted_event_fn</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Active events:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_foreach_event_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>dump_active_event_fn</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_base_active_by_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evmap_io_active_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name><operator>|</operator><name>EV_CLOSED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_base_active_by_signal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evmap_signal_active_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>event_base_add_virtual_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>virtual_event_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAX_EVENT_COUNT</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>virtual_event_count_max</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>virtual_event_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_base_del_virtual_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>virtual_event_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>virtual_event_count</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>virtual_event_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>EVBASE_NEED_NOTIFY</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evthread_notify_base</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_free_debug_globals_locks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>event_debug_map_lock_</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name>event_debug_map_lock_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>event_debug_map_lock_</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evthreadimpl_disable_lock_debugging_</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_free_debug_globals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_free_debug_globals_locks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_free_evsig_globals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evsig_free_globals_</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_free_evutil_globals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evutil_free_globals_</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_free_globals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_free_debug_globals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_free_evsig_globals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_free_evutil_globals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>libevent_global_shutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_disable_debug_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_free_globals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>event_global_setup_locks_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>enable_locks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>EVTHREAD_SETUP_GLOBAL_LOCK</name><argument_list>(<argument><expr><name>event_debug_map_lock_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>evsig_global_setup_locks_</name><argument_list>(<argument><expr><name>enable_locks</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evutil_global_setup_locks_</name><argument_list>(<argument><expr><name>enable_locks</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evutil_secure_rng_global_setup_locks_</name><argument_list>(<argument><expr><name>enable_locks</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>event_base_assert_ok_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_assert_ok_nolock_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>event_base_assert_ok_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>evmap_check_integrity_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>base</name><operator>-&gt;</operator><name>timeheap</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_ev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>timeheap</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ev</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>timeheap</name><operator>.</operator><name>p</name><index>[<expr><name>parent</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>evutil_timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><operator>&lt;=</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>n_common_timeouts</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>common_timeout_list</name></name> <modifier>*</modifier></type><name>ctl</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>common_timeout_queues</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>last</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT_TAILQ_OK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name><name>ev_timeout_pos</name><operator>.</operator><name>ev_next_with_common_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ev</argument>, <argument>&amp;ctl-&gt;events</argument>, <argument>ev_timeout_pos.ev_next_with_common_timeout</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>evutil_timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>last</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>, <argument><expr><operator>&lt;=</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;</operator> <name>EVLIST_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>is_common_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>,<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>COMMON_TIMEOUT_IDX</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_timeout</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>ev</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></for>


<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>nactivequeues</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT_TAILQ_OK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>activequeues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>event_callback</name></expr></argument>, <argument><expr><name>evcb_active_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>evcb</argument>, <argument>&amp;base-&gt;activequeues[i]</argument>, <argument>evcb_active_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_ACTIVE</name><operator>|</operator><name>EVLIST_ACTIVE_LATER</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>EVLIST_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>evcb</name><operator>-&gt;</operator><name>evcb_pri</name></name> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></for>

<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl>;</decl_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>evcb</argument>, <argument>&amp;base-&gt;active_later_queue</argument>, <argument>evcb_active_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>evcb</name><operator>-&gt;</operator><name>evcb_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVLIST_ACTIVE</name><operator>|</operator><name>EVLIST_ACTIVE_LATER</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>EVLIST_ACTIVE_LATER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <name><name>base</name><operator>-&gt;</operator><name>event_count_active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
