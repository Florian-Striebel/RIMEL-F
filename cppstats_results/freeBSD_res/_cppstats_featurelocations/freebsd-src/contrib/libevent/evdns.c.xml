<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/evdns.c">

















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_FORTIFY_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FORTIFY_SOURCE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_IE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_IE</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/dns.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/dns_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/dns_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defer-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strlcpy-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ipv6-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evthread-internal.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iphlpapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_IN6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in6.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVDNS_LOG_DEBUG</name></cpp:macro> <cpp:value>EVENT_LOG_DEBUG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVDNS_LOG_WARN</name></cpp:macro> <cpp:value>EVENT_LOG_WARN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVDNS_LOG_MSG</name></cpp:macro> <cpp:value>EVENT_LOG_MSG</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HOST_NAME_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_NAME_MAX</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;(b)?(a):(b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_VALID_REQUEST</name><parameter_list>(<parameter><type><name>req</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_ASSERT((req)-&gt;handle &amp;&amp; (req)-&gt;handle-&gt;current_req == (req))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u64</name></cpp:macro> <cpp:value>ev_uint64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u32</name></cpp:macro> <cpp:value>ev_uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u16</name></cpp:macro> <cpp:value>ev_uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u8</name></cpp:macro> <cpp:value>ev_uint8_t</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_V4_ADDRS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_V6_ADDRS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_A</name></cpp:macro> <cpp:value>EVDNS_TYPE_A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_CNAME</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_PTR</name></cpp:macro> <cpp:value>EVDNS_TYPE_PTR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_SOA</name></cpp:macro> <cpp:value>EVDNS_TYPE_SOA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_AAAA</name></cpp:macro> <cpp:value>EVDNS_TYPE_AAAA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_INET</name></cpp:macro> <cpp:value>EVDNS_CLASS_INET</cpp:value></cpp:define>





<struct>struct <name>evdns_request</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>current_req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pending_cb</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>search_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>search_state</name></name> <modifier>*</modifier></type><name>search_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>search_origname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>search_flags</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>request</name> <block>{
<decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name>request_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>request_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reissue_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tx_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user_pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evdns_callback_type</name></type> <name>user_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>timeout_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u16</name></type> <name>trans_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>request_appended</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>transmit_me</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>put_cname_in_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>reply</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>have_answer</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>u32</name></type> <name>addrcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name><name>addresses</name><index>[<expr><name>MAX_V4_ADDRS</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>a</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>u32</name></type> <name>addrcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name><name>addresses</name><index>[<expr><name>MAX_V6_ADDRS</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>aaaa</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>HOST_NAME_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>ptr</name></decl>;</struct>
}</block> <decl><name>data</name></decl>;</union>
}</block>;</struct>

<struct>struct <name>nameserver</name> <block>{
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>socket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>addrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failed_times</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timedout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>timeout_event</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>probe_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>choked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>write_waiting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>requests_inflight</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>evdns_server_port</name> <block>{
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>socket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>choked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>closing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evdns_request_callback_fn_type</name></type> <name>user_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>pending_replies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_base</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>


<struct>struct <name>server_reply_item</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>server_reply_item</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>ttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>is_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>datalen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>server_request</name> <block>{



<decl_stmt><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>next_pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>prev_pending</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u16</name></type> <name>trans_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>addrlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_answer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_authority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_additional</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>server_reply_item</name></name> <modifier>*</modifier></type><name>answer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>server_reply_item</name></name> <modifier>*</modifier></type><name>authority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>server_reply_item</name></name> <modifier>*</modifier></type><name>additional</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>response_len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_request</name></name></type> <name>base</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>evdns_base</name> <block>{



<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>req_heads</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req_waiting_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>server_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_req_heads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>global_good_nameservers</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>global_requests_inflight</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>global_requests_waiting</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>global_max_requests_inflight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>global_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>global_max_reissues</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>global_max_retransmits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>global_max_nameserver_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>global_randomize_case</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>global_nameserver_probe_initial_timeout</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>global_outgoing_address</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>global_outgoing_addrlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>global_getaddrinfo_allow_skew</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>getaddrinfo_ipv4_timeouts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>getaddrinfo_ipv6_timeouts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>getaddrinfo_ipv4_answered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>getaddrinfo_ipv6_answered</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>search_state</name></name> <modifier>*</modifier></type><name>global_search_state</name></decl>;</decl_stmt>

<macro><name>TAILQ_HEAD</name><argument_list>(<argument>hosts_list</argument>, <argument>hosts_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>hostsdb</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>disable_when_inactive</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>hosts_entry</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>hosts_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>next</name></expr>;</expr_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sin6</name></decl>;</decl_stmt>
}</block> <decl><name>addr</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>addrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>current_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type>
<name>evdns_get_global_base</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>current_base</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_SERVER_REQUEST</name><parameter_list>(<parameter><type><name>base_ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((struct server_request*) (((char*)(base_ptr) - evutil_offsetof(struct server_request, base))))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_HEAD</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((base)-&gt;req_heads[id % (base)-&gt;n_req_heads])</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>nameserver_pick</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evdns_request_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evdns_request_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nameserver_ready_callback</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evdns_transmit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evdns_request_transmit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nameserver_send_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>ns</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>search_request_finished</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><parameter><decl><type><specifier>const</specifier></type></decl></parameter></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>search_try_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>search_request_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>evdns_callback_type</name></type> <name>user_callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evdns_requests_pump_waiting_queue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>u16</name></type> <name>transaction_id_pick</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>request_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>evdns_callback_type</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>request_submit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>req</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>server_request_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>server_request_free_answers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>server_port_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>server_port_ready_callback</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evdns_base_resolv_conf_parse_impl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>evdns_base_set_option_impl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evdns_base_free_and_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fail_requests</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evdns_request_timeout_callback</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>strtoint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVDNS_LOCK</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVDNS_UNLOCK</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_LOCKED</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVDNS_LOCK</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVLOCK_LOCK((base)-&gt;lock, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVDNS_UNLOCK</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVLOCK_UNLOCK((base)-&gt;lock, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_LOCKED</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVLOCK_ASSERT_LOCKED((base)-&gt;lock)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>evdns_debug_log_fn_type</name></type> <name>evdns_log_fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>evdns_set_log_fn</name><parameter_list>(<parameter><decl><type><name>evdns_debug_log_fn_type</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>evdns_log_fn</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVDNS_LOG_CHECK</name></cpp:macro> <cpp:value>__attribute__ ((format(printf, 2, 3)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVDNS_LOG_CHECK</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>evdns_log_</name><argument_list>(<argument><expr><name>int</name> <name>severity</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>EVDNS_LOG_CHECK</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>evdns_log_</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evdns_log_fn</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_warn</name> <init>= <expr><operator>(</operator><name>severity</name> <operator>==</operator> <name>EVDNS_LOG_WARN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_log_fn</name><argument_list>(<argument><expr><name>is_warn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>event_logv_</name><argument_list>(<argument><expr><name>severity</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log</name></cpp:macro> <cpp:value>evdns_log_</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type>
<name>request_find_from_trans_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>u16</name></type> <name>trans_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>REQ_HEAD</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>trans_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>started_at</name> <init>= <expr><name>req</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name> <operator>==</operator> <name>trans_id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>req</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>req</name> <operator>!=</operator> <name>started_at</name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>nameserver_prod_callback</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>ns</name> <init>= <expr><operator>(</operator>struct <name>nameserver</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>events</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nameserver_send_probe</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>nameserver_probe_failed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>ns</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>evtimer_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ns</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PROBE_TIMEOUT</name></cpp:macro> <cpp:value>3600</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUT_BACKOFF_FACTOR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>global_nameserver_probe_initial_timeout</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>ns</name><operator>-&gt;</operator><name>failed_times</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator> <name>MAX_PROBE_TIMEOUT</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>*=</operator> <name>TIMEOUT_BACKOFF_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>*=</operator> <name>TIMEOUT_BACKOFF_FACTOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>%=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <name>MAX_PROBE_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>MAX_PROBE_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>failed_times</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evtimer_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>,
<argument><expr><literal type="string">"Error from libevent when adding timer event for %s"</literal></expr></argument>,
<argument><expr><call><name>evutil_format_sockaddr_port_</name><argument_list>(
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>request_swap_ns</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ns</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>ns</name></name> <operator>!=</operator> <name>ns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>requests_inflight</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>requests_inflight</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>requests_inflight</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>nameserver_failed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>ns</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>started_at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ns</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_MSG</name></expr></argument>, <argument><expr><literal type="string">"Nameserver %s has failed: %s"</literal></expr></argument>,
<argument><expr><call><name>evutil_format_sockaddr_port_</name><argument_list>(
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_good_nameservers</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>global_good_nameservers</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>global_good_nameservers</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_MSG</name></expr></argument>, <argument><expr><literal type="string">"All nameservers have failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>failed_times</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evtimer_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>global_nameserver_probe_initial_timeout</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>,
<argument><expr><literal type="string">"Error from libevent when adding timer event for %s"</literal></expr></argument>,
<argument><expr><call><name>evutil_format_sockaddr_port_</name><argument_list>(
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>global_good_nameservers</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>n_req_heads</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>req</name> <operator>=</operator> <name>started_at</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>req_heads</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>tx_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>ns</name></name> <operator>==</operator> <name>ns</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>request_swap_ns</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>nameserver_pick</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>req</name> <operator>!=</operator> <name>started_at</name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nameserver_up</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ns</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_MSG</name></expr></argument>, <argument><expr><literal type="string">"Nameserver %s is back up"</literal></expr></argument>,
<argument><expr><call><name>evutil_format_sockaddr_port_</name><argument_list>(
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evtimer_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ns</name><operator>-&gt;</operator><name>probe_request</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_cancel_request</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>probe_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>probe_request</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>failed_times</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>timedout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>global_good_nameservers</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>request_trans_id_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u16</name></type> <name>trans_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name> <operator>=</operator> <name>trans_id</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>request</name></name><operator>)</operator> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>trans_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>request_finished</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>free_handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>was_inflight</name> <init>= <expr><operator>(</operator><name>head</name> <operator>!=</operator> <operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_VALID_REQUEST</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>head</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_request_remove</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Removing timeout for request %p"</literal></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>was_inflight</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evtimer_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_requests_inflight</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>requests_inflight</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_requests_waiting</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>event_debug_unassign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name> <operator>&amp;&amp;</operator>
<name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>requests_inflight</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>req</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>disable_when_inactive</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evtimer_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>request_appended</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>handle</name><operator>-&gt;</operator><name>current_req</name></name> <operator>==</operator> <name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>free_handle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>search_request_finished</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>handle</name><operator>-&gt;</operator><name>current_req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>req</name><operator>-&gt;</operator><name>handle</name><operator>-&gt;</operator><name>pending_cb</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>handle</name><operator>-&gt;</operator><name>current_req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_requests_pump_waiting_queue</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>request_reissue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>last_ns</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_VALID_REQUEST</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>request_swap_ns</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>nameserver_pick</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name> <operator>==</operator> <name>last_ns</name></expr>)</condition> <block>{<block_content>



<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>reissue_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>tx_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>transmit_me</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>evdns_requests_pump_waiting_queue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>global_requests_inflight</name></name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>global_max_requests_inflight</name></name> <operator>&amp;&amp;</operator>
<name><name>base</name><operator>-&gt;</operator><name>global_requests_waiting</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name> <operator>=</operator> <call><name>nameserver_pick</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>requests_inflight</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_request_remove</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_requests_waiting</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_requests_inflight</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>request_trans_id_set</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>transaction_id_pick</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_request_insert</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>REQ_HEAD</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_request_transmit</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_transmit</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<struct>struct <name>deferred_reply_callback</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name></type> <name>deferred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name>request_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name>have_reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>ttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evdns_callback_type</name></type> <name>user_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reply</name></name></type> <name>reply</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>reply_run_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>deferred_reply_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>struct <name>deferred_reply_callback</name></expr></argument>, <argument><expr><name>deferred</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>request_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TYPE_A</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>have_reply</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>cb</name><operator>-&gt;</operator><name>user_callback</name></name><argument_list>(<argument><expr><name>DNS_ERR_NONE</name></expr></argument>, <argument><expr><name>DNS_IPv4_A</name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>a</name><operator>.</operator><name>addrcount</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>a</name><operator>.</operator><name>addresses</name></name></expr></argument>,
<argument><expr><name>user_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>cb</name><operator>-&gt;</operator><name>user_callback</name></name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>user_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_PTR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>have_reply</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>cb</name><operator>-&gt;</operator><name>user_callback</name></name><argument_list>(<argument><expr><name>DNS_ERR_NONE</name></expr></argument>, <argument><expr><name>DNS_PTR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>user_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>cb</name><operator>-&gt;</operator><name>user_callback</name></name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>user_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_AAAA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>have_reply</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>cb</name><operator>-&gt;</operator><name>user_callback</name></name><argument_list>(<argument><expr><name>DNS_ERR_NONE</name></expr></argument>, <argument><expr><name>DNS_IPv6_AAAA</name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>aaaa</name><operator>.</operator><name>addrcount</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>aaaa</name><operator>.</operator><name>addresses</name></name></expr></argument>,
<argument><expr><name>user_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>cb</name><operator>-&gt;</operator><name>user_callback</name></name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>user_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>handle</name></name> <operator>&amp;&amp;</operator> <name><name>cb</name><operator>-&gt;</operator><name>handle</name><operator>-&gt;</operator><name>pending_cb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>reply_schedule_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>reply</name></name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>deferred_reply_callback</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: Couldn't allocate space for deferred callback."</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>request_type</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>request_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>user_callback</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>user_callback</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reply</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>have_reply</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>handle</name><operator>-&gt;</operator><name>pending_cb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_deferred_cb_init_</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>,
<argument><expr><call><name>event_get_priority</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reply_run_callback</name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>user_pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_deferred_cb_schedule_</name><argument_list>(
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>reply_handle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>u16</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>reply</name></name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>error_codes</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>DNS_ERR_FORMAT</name></expr>, <expr><name>DNS_ERR_SERVERFAILED</name></expr>, <expr><name>DNS_ERR_NOTEXIST</name></expr>,
<expr><name>DNS_ERR_NOTIMPL</name></expr>, <expr><name>DNS_ERR_REFUSED</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_VALID_REQUEST</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x020f</literal> <operator>||</operator> <operator>!</operator><name>reply</name> <operator>||</operator> <operator>!</operator><name><name>reply</name><operator>-&gt;</operator><name>have_answer</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x0200</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>DNS_ERR_TRUNCATED</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x000f</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u16</name></type> <name>error_code</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x000f</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error_code</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>DNS_ERR_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name><name>error_codes</name><index>[<expr><name>error_code</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reply</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>reply</name><operator>-&gt;</operator><name>have_answer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>DNS_ERR_NODATA</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>DNS_ERR_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DNS_ERR_NOTIMPL</name></expr>:</case>
<case>case <expr><name>DNS_ERR_REFUSED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>reissue_count</name></name> <operator>&lt;</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>global_max_reissues</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Bad response %d (%s)"</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>evdns_err_to_string</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nameserver_failed</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>request_reissue</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DNS_ERR_SERVERFAILED</name></expr>:</case>





<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Got a SERVERFAILED from nameserver"</literal>
<literal type="string">"at %s; will allow the request to time out."</literal></expr></argument>,
<argument><expr><call><name>evutil_format_sockaddr_port_</name><argument_list>(
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_request_timeout_callback</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>probe_request</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>probe_request</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nameserver_up</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>handle</name><operator>-&gt;</operator><name>search_state</name></name> <operator>&amp;&amp;</operator>
<name><name>req</name><operator>-&gt;</operator><name>request_type</name></name> <operator>!=</operator> <name>TYPE_PTR</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>search_try_next</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>reply_schedule_callback</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>request_finished</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>REQ_HEAD</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>reply_schedule_callback</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>probe_request</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>probe_request</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>nameserver_up</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>request_finished</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>REQ_HEAD</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>name_parse</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name_out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name_out_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>name_end</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>*</operator><name>idx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ptr_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (j + 4 &gt; length) goto err; memcpy(&amp;t32_, packet + j, 4); j += 4; x = ntohl(t32_); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (j + 2 &gt; length) goto err; memcpy(&amp;t_, packet + j, 2); j += 2; x = ntohs(t_); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (j &gt;= length) goto err; x = packet[j++]; } while (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>name_out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>end</name> <init>= <expr><name>name_out</name> <operator>+</operator> <name>name_out_len</name></expr></init></decl>;</decl_stmt>







<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name>label_len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET8</name><argument_list>(<argument><expr><name>label_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>label_len</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>label_len</name> <operator>&amp;</operator> <literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name>ptr_low</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET8</name><argument_list>(<argument><expr><name>ptr_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name_end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>name_end</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>label_len</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>ptr_low</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>j</name> <operator>&gt;=</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name>ptr_count</name> <operator>&gt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>label_len</name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>name_out</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>+</operator> <name>label_len</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <name>label_len</name> <operator>&gt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>packet</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>label_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name>label_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>label_len</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name_end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>name_end</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>err</name>:</label>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>reply_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>t_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>t32_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cmp_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u16</name></type> <name>trans_id</name></decl>, <decl><type ref="prev"/><name>questions</name></decl>, <decl><type ref="prev"/><name>answers</name></decl>, <decl><type ref="prev"/><name>authority</name></decl>, <decl><type ref="prev"/><name>additional</name></decl>, <decl><type ref="prev"/><name>datalength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>ttl</name></decl>, <decl><type ref="prev"/><name>ttl_r</name> <init>= <expr><literal type="number">0xffffffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reply</name></name></type> <name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>trans_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>questions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>answers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>authority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>additional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>authority</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>additional</name></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>request_find_from_trans_id</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>trans_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name> <operator>==</operator> <name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x020f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x020f</literal><operator>)</operator> <operator>!=</operator> <name>DNS_ERR_NOTEXIST</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_NAME</name></cpp:macro> <cpp:value>do { tmp_name[0] = '\0'; if (name_parse(packet, length, &amp;j, tmp_name, sizeof(tmp_name))&lt;0) goto err; } while (0)</cpp:value></cpp:define>






<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>request_type</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>questions</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>



<expr_stmt><expr><name><name>tmp_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>name_parse</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><name>tmp_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>name_parse</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>request_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>,
<argument><expr><name>cmp_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmp_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>global_randomize_case</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tmp_name</name></expr></argument>, <argument><expr><name>cmp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name_matches</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>tmp_name</name></expr></argument>, <argument><expr><name>cmp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name_matches</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_matches</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>answers</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u16</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>class</name></decl>;</decl_stmt>

<expr_stmt><expr><name>SKIP_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET32</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>datalength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_A</name> <operator>&amp;&amp;</operator> <name>class</name> <operator>==</operator> <name>CLASS_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>addrcount</name></decl>, <decl><type ref="prev"/><name>addrtocopy</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>request_type</name></name> <operator>!=</operator> <name>TYPE_A</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>datalength</name></expr>;</expr_stmt> <continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>datalength</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>addrcount</name> <operator>=</operator> <name>datalength</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addrtocopy</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>MAX_V4_ADDRS</name> <operator>-</operator> <name><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>a</name><operator>.</operator><name>addrcount</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>addrcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ttl_r</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>ttl_r</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>addrtocopy</name> <operator>&gt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>a</name><operator>.</operator><name>addresses</name><index>[<expr><name><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>a</name><operator>.</operator><name>addrcount</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>packet</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><name>addrtocopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>addrtocopy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>a</name><operator>.</operator><name>addrcount</name></name> <operator>+=</operator> <name>addrtocopy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>have_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>a</name><operator>.</operator><name>addrcount</name></name> <operator>==</operator> <name>MAX_V4_ADDRS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_PTR</name> <operator>&amp;&amp;</operator> <name>class</name> <operator>==</operator> <name>CLASS_INET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>request_type</name></name> <operator>!=</operator> <name>TYPE_PTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>datalength</name></expr>;</expr_stmt> <continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>name_parse</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><name><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name><operator>.</operator><name>name</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ttl_r</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>ttl_r</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>have_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_CNAME</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cname</name><index>[<expr><name>HOST_NAME_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>put_cname_in_ptr</name></name> <operator>||</operator> <operator>*</operator><name><name>req</name><operator>-&gt;</operator><name>put_cname_in_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>datalength</name></expr>;</expr_stmt> <continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>name_parse</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><name>cname</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>req</name><operator>-&gt;</operator><name>put_cname_in_ptr</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_AAAA</name> <operator>&amp;&amp;</operator> <name>class</name> <operator>==</operator> <name>CLASS_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>addrcount</name></decl>, <decl><type ref="prev"/><name>addrtocopy</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>request_type</name></name> <operator>!=</operator> <name>TYPE_AAAA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>datalength</name></expr>;</expr_stmt> <continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>datalength</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>addrcount</name> <operator>=</operator> <name>datalength</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addrtocopy</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>MAX_V6_ADDRS</name> <operator>-</operator> <name><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>aaaa</name><operator>.</operator><name>addrcount</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>addrcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ttl_r</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>ttl_r</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>addrtocopy</name> <operator>&gt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>aaaa</name><operator>.</operator><name>addresses</name><index>[<expr><name><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>aaaa</name><operator>.</operator><name>addrcount</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>packet</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>addrtocopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>aaaa</name><operator>.</operator><name>addrcount</name></name> <operator>+=</operator> <name>addrtocopy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">16</literal><operator>*</operator><name>addrtocopy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>have_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>.</operator><name>data</name><operator>.</operator><name>aaaa</name><operator>.</operator><name>addrcount</name></name> <operator>==</operator> <name>MAX_V6_ADDRS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>datalength</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>reply</name><operator>.</operator><name>have_answer</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>authority</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u16</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>class</name></decl>;</decl_stmt>
<expr_stmt><expr><name>SKIP_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET32</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>datalength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_SOA</name> <operator>&amp;&amp;</operator> <name>class</name> <operator>==</operator> <name>CLASS_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>serial</name></decl>, <decl><type ref="prev"/><name>refresh</name></decl>, <decl><type ref="prev"/><name>retry</name></decl>, <decl><type ref="prev"/><name>expire</name></decl>, <decl><type ref="prev"/><name>minimum</name></decl>;</decl_stmt>
<expr_stmt><expr><name>SKIP_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SKIP_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET32</name><argument_list>(<argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET32</name><argument_list>(<argument><expr><name>refresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET32</name><argument_list>(<argument><expr><name>retry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET32</name><argument_list>(<argument><expr><name>expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET32</name><argument_list>(<argument><expr><name>minimum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>expire</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>retry</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>refresh</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>serial</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttl_r</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>ttl_r</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ttl_r</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>ttl_r</name></expr></argument>, <argument><expr><name>minimum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>datalength</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ttl_r</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ttl_r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>reply_handle</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>ttl_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>err</name>:</label>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reply_handle</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>request_parse</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>ev_socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>t_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>trans_id</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>questions</name></decl>, <decl><type ref="prev"/><name>answers</name></decl>, <decl><type ref="prev"/><name>authority</name></decl>, <decl><type ref="prev"/><name>additional</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>server_req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>trans_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>questions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>answers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>authority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>additional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>answers</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>additional</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>authority</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <literal type="number">0x0110</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>server_req</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>server_request</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>server_req</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>server_req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>server_request</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server_req</name><operator>-&gt;</operator><name>trans_id</name></name> <operator>=</operator> <name>trans_id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server_req</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_req</name><operator>-&gt;</operator><name>addrlen</name></name> <operator>=</operator> <name>addrlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server_req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nquestions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>questions</name></name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evdns_server_question</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>questions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server_req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>questions</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>questions</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u16</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_question</name></name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>namelen</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>name_parse</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><name>tmp_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET16</name><argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>tmp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evdns_server_question</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>dns_question_class</name></name> <operator>=</operator> <name>class</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>tmp_name</name></expr></argument>, <argument><expr><name>namelen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>questions</name><index>[<expr><name><name>server_req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nquestions</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name><name>server_req</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>refcnt</name></name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x7800</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_server_request_respond</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server_req</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator></expr></argument>, <argument><expr><name>DNS_ERR_NOTIMPL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>port</name><operator>-&gt;</operator><name>user_callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server_req</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>err</name>:</label>
<if_stmt><if>if <condition>(<expr><name>server_req</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server_req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>questions</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>server_req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nquestions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>server_req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>questions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>server_req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>questions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>server_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SKIP_NAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET32</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET16</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET8</name></cpp:undef>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>evdns_set_transaction_id_fn</name><parameter_list>(<parameter><function_decl><type><name>ev_uint16_t</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evdns_set_random_bytes_fn</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>u16</name></type>
<name>transaction_id_pick</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u16</name></type> <name>trans_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_secure_rng_get_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trans_id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>trans_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trans_id</name> <operator>==</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>request_find_from_trans_id</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>trans_id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>trans_id</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type>
<name>nameserver_pick</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>started_at</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>picked</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>global_good_nameservers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>picked</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<return>return <expr><name>picked</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name> <operator>==</operator> <name>started_at</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>global_good_nameservers</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>picked</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<return>return <expr><name>picked</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>nameserver_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>addrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name><name>packet</name><index>[<expr><literal type="number">1500</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name> <init>= <expr><call><name>recvfrom</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>packet</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>evutil_socket_geterror</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>nameserver_failed</name><argument_list>(<argument><expr><name>ns</name></expr></argument>,
<argument><expr><call><name>evutil_socket_error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evutil_sockaddr_cmp</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>, <argument><expr><literal type="string">"Address mismatch on received "</literal>
<literal type="string">"DNS packet. Apparent source was %s"</literal></expr></argument>,
<argument><expr><call><name>evutil_format_sockaddr_port_</name><argument_list>(
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>,
<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>timedout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reply_parse</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>server_port_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name><name>packet</name><index>[<expr><literal type="number">1500</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>addrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>addrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>packet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>evutil_socket_geterror</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>,
<argument><expr><literal type="string">"Error %s (%d) while reading request."</literal></expr></argument>,
<argument><expr><call><name>evutil_socket_error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>request_parse</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>server_port_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>port</name><operator>-&gt;</operator><name>pending_replies</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>req</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sendto</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>response_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ev_socklen_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>evutil_socket_geterror</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>, <argument><expr><literal type="string">"Error %s (%d) while writing response to port; dropping"</literal></expr></argument>, <argument><expr><call><name>evutil_socket_error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>req</name> <operator>!=</operator> <name><name>port</name><operator>-&gt;</operator><name>pending_replies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>port</name><operator>-&gt;</operator><name>pending_replies</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>,
<argument><expr><name><name>port</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>,
<argument><expr><name>server_port_ready_callback</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>, <argument><expr><literal type="string">"Error from libevent when adding event for DNS server."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>nameserver_write_waiting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>ns</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>waiting</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ns</name><operator>-&gt;</operator><name>write_waiting</name></name> <operator>==</operator> <name>waiting</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>write_waiting</name></name> <operator>=</operator> <name>waiting</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>,
<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>waiting</name></expr> ?</condition><then> <expr><name>EV_WRITE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>,
<argument><expr><name>nameserver_ready_callback</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>, <argument><expr><literal type="string">"Error from libevent when adding event for %s"</literal></expr></argument>,
<argument><expr><call><name>evutil_format_sockaddr_port_</name><argument_list>(
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>nameserver_ready_callback</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><operator>(</operator>struct <name>nameserver</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>choked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evdns_transmit</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nameserver_write_waiting</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nameserver_read</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>server_port_ready_callback</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name> <init>= <expr><operator>(</operator>struct <name>evdns_server_port</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>choked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>server_port_flush</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>server_port_read</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LABELS</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<struct>struct <name>dnslabel_entry</name> <block>{ <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>off_t</name></type> <name>pos</name></decl>;</decl_stmt> }</block>;</struct>
<struct>struct <name>dnslabel_table</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n_labels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dnslabel_entry</name></name></type> <name><name>labels</name><index>[<expr><name>MAX_LABELS</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dnslabel_table_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dnslabel_table</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>n_labels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dnslabel_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dnslabel_table</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>n_labels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>labels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>n_labels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>dnslabel_table_get_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dnslabel_table</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>n_labels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>labels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>table</name><operator>-&gt;</operator><name>labels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>dnslabel_table_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dnslabel_table</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>n_labels</name></name> <operator>==</operator> <name>MAX_LABELS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>n_labels</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>labels</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>labels</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>off_t</name></type>
<name>dnsname_to_labels</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>j</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dnslabel_table</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>name</name> <operator>+</operator> <name>name_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>t_</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (j + 2 &gt; (off_t)buf_len) goto overflow; t_ = htons(x); memcpy(buf + j, &amp;t_, 2); j += 2; } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (j + 4 &gt; (off_t)buf_len) goto overflow; t32_ = htonl(x); memcpy(buf + j, &amp;t32_, 4); j += 4; } while (0)</cpp:value></cpp:define>







<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>start</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>table</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ref</name> <operator>=</operator> <call><name>dnslabel_table_get_pos</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name>ref</name> <operator>|</operator> <literal type="number">0xc000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>label_len</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>label_len</name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>j</name><operator>+</operator><name>label_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>buf_len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>table</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dnslabel_table_add</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ev_uint8_t</name><operator>)</operator><name>label_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>label_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>label_len</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>label_len</name> <init>= <expr><name>name</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>label_len</name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>j</name><operator>+</operator><name>label_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>buf_len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>table</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dnslabel_table_add</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ev_uint8_t</name><operator>)</operator><name>label_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>label_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>label_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>j</name> <operator>||</operator> <name><name>buf</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>j</name></expr>;</return>
<label><name>overflow</name>:</label>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>evdns_request_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">96</literal> <operator>+</operator>
<name>name_len</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator>
<literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_request_data_build</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>u16</name></type> <name>trans_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u16</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u16</name></type> <name>class</name></decl></parameter>,
<parameter><decl><type><name>u8</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>t_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name>trans_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><literal type="number">0x0100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>dnsname_to_labels</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>j</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>j</name></expr>;</return>
<label><name>overflow</name>:</label>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type>
<name>evdns_add_server_port_with_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>socket</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>evdns_request_callback_fn_type</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>port</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evdns_server_port</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evdns_server_port</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <name>socket</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>choked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>closing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>user_callback</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>pending_replies</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>event_base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>,
<argument><expr><name><name>port</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>,
<argument><expr><name>server_port_ready_callback</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVTHREAD_ALLOC_LOCK</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>port</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type>
<name>evdns_add_server_port</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>socket</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>evdns_request_callback_fn_type</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evdns_add_server_port_with_base</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>socket</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>evdns_close_server_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>port</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>server_port_free</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>closing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_server_request_add_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>TO_SERVER_REQUEST</name><argument_list>(<argument><expr><name>req_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>server_reply_item</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>itemp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>countp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>response</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>section</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVDNS_ANSWER_SECTION</name></expr>:</case>
<expr_stmt><expr><name>itemp</name> <operator>=</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>answer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>countp</name> <operator>=</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>n_answer</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVDNS_AUTHORITY_SECTION</name></expr>:</case>
<expr_stmt><expr><name>itemp</name> <operator>=</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>authority</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>countp</name> <operator>=</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>n_authority</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EVDNS_ADDITIONAL_SECTION</name></expr>:</case>
<expr_stmt><expr><name>itemp</name> <operator>=</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>additional</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>countp</name> <operator>=</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>n_additional</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></switch>
<while>while <condition>(<expr><operator>*</operator><name>itemp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>itemp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>itemp</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>server_reply_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>dns_question_class</name></name> <operator>=</operator> <name>class</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>is_name</name></name> <operator>=</operator> <name>is_name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>datalen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>is_name</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>datalen</name></name> <operator>=</operator> <operator>(</operator><name>u16</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>datalen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>datalen</name></name> <operator>=</operator> <name>datalen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>itemp</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>countp</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_server_request_add_a_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evdns_server_request_add_reply</name><argument_list>(
<argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVDNS_ANSWER_SECTION</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>TYPE_A</name></expr></argument>, <argument><expr><name>CLASS_INET</name></expr></argument>,
<argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>n</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_server_request_add_aaaa_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evdns_server_request_add_reply</name><argument_list>(
<argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVDNS_ANSWER_SECTION</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>TYPE_AAAA</name></expr></argument>, <argument><expr><name>CLASS_INET</name></expr></argument>,
<argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>n</name><operator>*</operator><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_server_request_add_ptr_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>inaddr_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>in</name> <operator>&amp;&amp;</operator> <name>inaddr_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>in</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>inaddr_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d.in-addr.arpa"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">8</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inaddr_name</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>evdns_server_request_add_reply</name><argument_list>(
<argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVDNS_ANSWER_SECTION</name></expr></argument>, <argument><expr><name>inaddr_name</name></expr></argument>, <argument><expr><name>TYPE_PTR</name></expr></argument>, <argument><expr><name>CLASS_INET</name></expr></argument>,
<argument><expr><name>ttl</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_server_request_add_cname_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evdns_server_request_add_reply</name><argument_list>(
<argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVDNS_ANSWER_SECTION</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>TYPE_CNAME</name></expr></argument>, <argument><expr><name>CLASS_INET</name></expr></argument>,
<argument><expr><name>ttl</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>evdns_server_request_set_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>exreq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>TO_SERVER_REQUEST</name><argument_list>(<argument><expr><name>exreq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>EVDNS_FLAGS_AA</name><operator>|</operator><name>EVDNS_FLAGS_RD</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_server_request_format_response</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1500</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buf_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>t_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>t32_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dnslabel_table</name></name></type> <name>table</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>err</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>err</name></expr></argument> &gt;</argument_list></name> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x8000</literal> <operator>|</operator> <name>err</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dnslabel_table_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nquestions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>n_answer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>n_authority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>n_additional</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nquestions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>questions</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>dnsname_to_labels</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dnslabel_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>j</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>questions</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>questions</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>dns_question_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>server_reply_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>answer</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>authority</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>additional</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>dnsname_to_labels</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>overflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>dns_question_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND32</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>is_name</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>len_idx</name> <init>= <expr><name>j</name></expr></init></decl>, <decl><type ref="prev"/><name>name_start</name></decl>;</decl_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name_start</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>dnsname_to_labels</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>overflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_</name> <operator>=</operator> <call><name>htons</name><argument_list>( <argument><expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name>j</name><operator>-</operator><name>name_start</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>len_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>APPEND16</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>datalen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name><operator>+</operator><name><name>item</name><operator>-&gt;</operator><name>datalen</name></name> <operator>&gt;</operator> <operator>(</operator><name>off_t</name><operator>)</operator><name>buf_len</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>overflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>j</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>datalen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name><name>item</name><operator>-&gt;</operator><name>datalen</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>
<label><name>overflow</name>:</label>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>response_len</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>response_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>server_request_free_answers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dnslabel_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>response_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>server_request_free_answers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dnslabel_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_server_request_respond</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>TO_SERVER_REQUEST</name><argument_list>(<argument><expr><name>req_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>port</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>response</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>evdns_server_request_format_response</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>response_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ev_socklen_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sock_err</name> <init>= <expr><call><name>evutil_socket_geterror</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>sock_err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>pending_replies</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>prev_pending</name></name> <operator>=</operator> <name><name>port</name><operator>-&gt;</operator><name>pending_replies</name><operator>-&gt;</operator><name>prev_pending</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>next_pending</name></name> <operator>=</operator> <name><name>port</name><operator>-&gt;</operator><name>pending_replies</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>prev_pending</name><operator>-&gt;</operator><name>next_pending</name></name> <operator>=</operator>
<name><name>req</name><operator>-&gt;</operator><name>next_pending</name><operator>-&gt;</operator><name>prev_pending</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>prev_pending</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>next_pending</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>pending_replies</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>choked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>port</name><operator>-&gt;</operator><name>closing</name></name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><name>EV_READ</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>EV_WRITE</name> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>, <argument><expr><name>server_port_ready_callback</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>, <argument><expr><literal type="string">"Error from libevent when adding event for DNS server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>pending_replies</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>server_port_flush</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>server_request_free_answers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>server_reply_item</name></name> <modifier>*</modifier></type><name>victim</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>answer</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>authority</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>additional</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>victim</name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>victim</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>victim</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>victim</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>victim</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>victim</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>victim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>victim</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>server_request_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rc</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>lock</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>questions</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nquestions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>questions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>questions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>port</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lock</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>port</name><operator>-&gt;</operator><name>pending_replies</name></name> <operator>==</operator> <name>req</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>next_pending</name></name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>next_pending</name></name> <operator>!=</operator> <name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>port</name><operator>-&gt;</operator><name>pending_replies</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>next_pending</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>port</name><operator>-&gt;</operator><name>pending_replies</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>--</operator><name><name>req</name><operator>-&gt;</operator><name>port</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>response</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>server_request_free_answers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>next_pending</name></name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>next_pending</name></name> <operator>!=</operator> <name>req</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>next_pending</name><operator>-&gt;</operator><name>prev_pending</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>prev_pending</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>prev_pending</name><operator>-&gt;</operator><name>next_pending</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>next_pending</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>server_port_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>server_port_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>port</name><operator>-&gt;</operator><name>refcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>port</name><operator>-&gt;</operator><name>pending_replies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>socket</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_unassign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_server_request_drop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>TO_SERVER_REQUEST</name><argument_list>(<argument><expr><name>req_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>server_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_server_request_get_requesting_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req_</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addr_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>server_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>TO_SERVER_REQUEST</name><argument_list>(<argument><expr><name>req_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr_len</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>addrlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>req</name><operator>-&gt;</operator><name>addrlen</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APPEND16</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APPEND32</name></cpp:undef>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>evdns_request_timeout_callback</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>req</name> <init>= <expr><operator>(</operator>struct <name>request</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>events</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Request %p timed out"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>tx_count</name></name> <operator>&gt;=</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>global_max_retransmits</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Giving up on request %p; tx_count==%d"</literal></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>tx_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reply_schedule_callback</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DNS_ERR_TIMEOUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>request_finished</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>REQ_HEAD</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nameserver_failed</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><literal type="string">"request timed out."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Retransmitting request %p; tx_count==%d"</literal></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>tx_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>evtimer_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>request_swap_ns</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>nameserver_pick</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_request_transmit</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>timedout</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>timedout</name></name> <operator>&gt;</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>global_max_nameserver_timeout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>timedout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nameserver_failed</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>, <argument><expr><literal type="string">"request timed out."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_request_transmit_to</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_VALID_REQUEST</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>requests_inflight</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>req</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>disable_when_inactive</name></name> <operator>&amp;&amp;</operator>
<call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>request_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>evutil_socket_geterror</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>nameserver_failed</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>, <argument><expr><call><name>evutil_socket_error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>request_len</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_request_transmit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_VALID_REQUEST</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>transmit_me</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name> <operator>!=</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr>)</condition>
<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>choked</name></name></expr>)</condition> <block>{<block_content>


<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_request_transmit_to</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>choked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nameserver_write_waiting</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<default>default:</default>

<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Setting timeout for request %p, sent to nameserver %p"</literal></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtimer_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>global_timeout</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>,
<argument><expr><literal type="string">"Error from libevent when adding timer for request %p"</literal></expr></argument>,
<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>tx_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>transmit_me</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>retcode</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nameserver_probe_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addresses</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>ns</name> <init>= <expr><operator>(</operator>struct <name>nameserver</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ttl</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>addresses</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DNS_ERR_CANCEL</name></expr>)</condition> <block>{<block_content>



<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>probe_request</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DNS_ERR_NONE</name> <operator>||</operator> <name>result</name> <operator>==</operator> <name>DNS_ERR_NOTEXIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nameserver_up</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>nameserver_probe_failed</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nameserver_send_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>ns</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Sending probe to %s"</literal></expr></argument>,
<argument><expr><call><name>evutil_format_sockaddr_port_</name><argument_list>(
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>request_new</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>TYPE_A</name></expr></argument>, <argument><expr><literal type="string">"google.com"</literal></expr></argument>, <argument><expr><name>DNS_QUERY_NO_SEARCH</name></expr></argument>, <argument><expr><name>nameserver_probe_callback</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>probe_request</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>request_trans_id_set</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>transaction_id_pick</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>request_submit</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_transmit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>did_try_to_transmit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>n_req_heads</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>req_heads</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>started_at</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>req_heads</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>req</name> <init>= <expr><name>started_at</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>transmit_me</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>did_try_to_transmit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_request_transmit</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>req</name> <operator>!=</operator> <name>started_at</name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>did_try_to_transmit</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_base_count_nameservers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>server</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>server</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>server</name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>server</name> <operator>!=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>)</condition>;</do>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_count_nameservers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evdns_base_count_nameservers</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_base_clear_nameservers_and_suspend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>server</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>started_at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>server</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>started_at</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>server</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>server</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtimer_initialized</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>evtimer_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>probe_request</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_cancel_request</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>probe_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>probe_request</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>socket</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>started_at</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>server</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_good_nameservers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>n_req_heads</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>req_started_at</name></decl>;</decl_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <name>req_started_at</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>req_heads</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>req</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>tx_count</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>reissue_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>evtimer_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>transmit_me</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_requests_waiting</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_request_insert</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>req_started_at</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>req_heads</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_requests_inflight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_clear_nameservers_and_suspend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evdns_base_clear_nameservers_and_suspend</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>evdns_base_resume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_requests_pump_waiting_queue</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_resume</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>evdns_base_resume</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_nameserver_add_impl_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrlen</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type>const <name>started_at</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>server</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evutil_sockaddr_cmp</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>server</name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>server</name> <operator>!=</operator> <name>started_at</name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addrlen</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Addrlen %d too long."</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ns</name> <operator>=</operator> <operator>(</operator>struct <name>nameserver</name> <operator>*</operator><operator>)</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>nameserver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ns</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>nameserver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evtimer_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>, <argument><expr><name>nameserver_prod_callback</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <call><name>evutil_socket_</name><argument_list>(<argument><expr><name><name>address</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>,
<argument><expr><name>SOCK_DGRAM</name><operator>|</operator><name>EVUTIL_SOCK_NONBLOCK</name><operator>|</operator><name>EVUTIL_SOCK_CLOEXEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ns</name><operator>-&gt;</operator><name>socket</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <goto>goto <name>out1</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>global_outgoing_addrlen</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>evutil_sockaddr_is_loopback_</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>global_outgoing_address</name></name></expr></argument>,
<argument><expr><name><name>base</name><operator>-&gt;</operator><name>global_outgoing_addrlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>,<argument><expr><literal type="string">"Couldn't bind to outgoing address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>out2</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>addrlen</name></name> <operator>=</operator> <name>addrlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>,
<argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>, <argument><expr><name>nameserver_ready_callback</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>disable_when_inactive</name></name> <operator>&amp;&amp;</operator> <call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>out2</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Added nameserver %s as %p"</literal></expr></argument>,
<argument><expr><call><name>evutil_format_sockaddr_port_</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ns</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_good_nameservers</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>out2</name>:</label>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out1</name>:</label>
<expr_stmt><expr><call><name>event_debug_unassign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ns</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>, <argument><expr><literal type="string">"Unable to add nameserver %s: error %d"</literal></expr></argument>,
<argument><expr><call><name>evutil_format_sockaddr_port_</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_base_nameserver_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evdns_nameserver_add_impl_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_nameserver_add</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>current_base</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>evdns_base_nameserver_add</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sockaddr_setport</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_port</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_port</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ev_uint16_t</name></type>
<name>sockaddr_getport</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_port</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_port</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_base_nameserver_ip_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip_as_string</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evutil_parse_sockaddr_port</name><argument_list>(<argument><expr><name>ip_as_string</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse nameserver address %s"</literal></expr></argument>,
<argument><expr><name>ip_as_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ss</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sockaddr_getport</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sockaddr_setport</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evdns_nameserver_add_impl_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_nameserver_ip_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip_as_string</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>current_base</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>ip_as_string</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_base_nameserver_sockaddr_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>ev_socklen_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evdns_nameserver_add_impl_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_base_get_nameserver_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>ev_socklen_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>server</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name> <operator>&amp;&amp;</operator> <name>server</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>server</name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>server</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>addrlen</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>server</name><operator>-&gt;</operator><name>addrlen</name></name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>server</name><operator>-&gt;</operator><name>addrlen</name></name></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>evdns_request_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_VALID_REQUEST</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
{
struct request *ptr;
int found = 0;
EVUTIL_ASSERT(*head != NULL);

ptr = *head;
do {
if (ptr == req) {
found = 1;
break;
}
ptr = ptr-&gt;next;
} while (ptr != *head);
EVUTIL_ASSERT(found);

EVUTIL_ASSERT(req-&gt;next);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>req</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>head</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>head</name> <operator>==</operator> <name>req</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>head</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>evdns_request_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_VALID_REQUEST</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>head</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>head</name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>head</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>head</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>head</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>string_num_dots</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type>
<name>request_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>evdns_callback_type</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>issuing_now</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name><name>base</name><operator>-&gt;</operator><name>global_requests_inflight</name></name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>global_max_requests_inflight</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>request_max_len</name> <init>= <expr><call><name>evdns_request_len</name><argument_list>(<argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u16</name></type> <name>trans_id</name> <init>= <expr><ternary><condition><expr><name>issuing_now</name></expr> ?</condition><then> <expr><call><name>transaction_id_pick</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0xffff</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>req</name> <init>=
<expr><call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>request</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>request_max_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>request</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evtimer_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>, <argument><expr><name>evdns_request_timeout_callback</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>global_randomize_case</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>randbits</name><index>[<expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></sizeof><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_secure_rng_get_bytes</name><argument_list>(<argument><expr><name>randbits</name></expr></argument>, <argument><expr><operator>(</operator><name>name_len</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>name_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ISALPHA_</name><argument_list>(<argument><expr><name><name>namebuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>randbits</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>namebuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>namebuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>namebuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>request</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator> <name>req</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>request</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>request_appended</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>evdns_request_data_build</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>trans_id</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name>CLASS_INET</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>request_max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>request_len</name></name> <operator>=</operator> <name>rlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name> <operator>=</operator> <name>trans_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>tx_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>request_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>user_pointer</name></name> <operator>=</operator> <name>user_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>user_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name> <operator>=</operator> <ternary><condition><expr><name>issuing_now</name></expr> ?</condition><then> <expr><call><name>nameserver_pick</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>current_req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>req</name></expr>;</return>
<label><name>err1</name>:</label>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>request_submit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_VALID_REQUEST</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>evdns_request_insert</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>REQ_HEAD</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_requests_inflight</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>requests_inflight</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_request_transmit</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evdns_request_insert</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_requests_waiting</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>evdns_cancel_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>handle</name><operator>-&gt;</operator><name>current_req</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>current_req</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>pending_cb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>current_req</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT_VALID_REQUEST</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reply_schedule_callback</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DNS_ERR_CANCEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>ns</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>request_finished</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>REQ_HEAD</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>request_finished</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type>
<name>evdns_base_resolve_ipv4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>evdns_callback_type</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Resolve requested for %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DNS_QUERY_NO_SEARCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>req</name> <operator>=</operator>
<call><name>request_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>TYPE_A</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>request_submit</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>search_request_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>TYPE_A</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>current_req</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>handle</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>evdns_resolve_ipv4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>evdns_callback_type</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type>
<name>evdns_base_resolve_ipv6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>evdns_callback_type</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Resolve requested for %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DNS_QUERY_NO_SEARCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>request_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>TYPE_AAAA</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>request_submit</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>search_request_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>TYPE_AAAA</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>current_req</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>handle</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>evdns_resolve_ipv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>evdns_callback_type</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>evdns_base_resolve_ipv6</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type>
<name>evdns_base_resolve_reverse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>evdns_callback_type</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d.in-addr.arpa"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">8</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Resolve requested for %s (reverse)"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>request_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>TYPE_PTR</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>request_submit</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>current_req</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>handle</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>evdns_resolve_reverse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>evdns_callback_type</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>evdns_base_resolve_reverse</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type>
<name>evdns_base_resolve_reverse_ipv6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>evdns_callback_type</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">73</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">15</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name>byte</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="string">"0123456789abcdef"</literal><index>[<expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="string">"0123456789abcdef"</literal><index>[<expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>cp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"ip6.arpa"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>buf</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="string">"ip6.arpa"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"ip6.arpa"</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Resolve requested for %s (reverse)"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>request_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>TYPE_PTR</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>request_submit</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>current_req</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>handle</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>evdns_resolve_reverse_ipv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>evdns_callback_type</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>evdns_base_resolve_reverse_ipv6</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>














<struct>struct <name>search_domain</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>search_domain</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>search_state</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ndots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_domains</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>search_domain</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>search_state_decref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>search_state</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>refcount</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>search_domain</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dom</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>dom</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>dom</name></expr>;</condition> <incr><expr><name>dom</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>dom</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>dom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>search_state</name></name> <modifier>*</modifier></type>
<name>search_state_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>search_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator>struct <name>search_state</name> <operator>*</operator><operator>)</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>search_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>search_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ndots</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>search_postfix_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>search_state_decref</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name> <operator>=</operator> <call><name>search_state_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>evdns_base_search_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>search_postfix_clear</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evdns_search_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_base_search_clear</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>search_postfix_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>domain_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>search_domain</name></name> <modifier>*</modifier></type><name>sdomain</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>domain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>domain</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>domain_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name> <operator>=</operator> <call><name>search_state_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name><operator>-&gt;</operator><name>num_domains</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sdomain</name> <operator>=</operator> <operator>(</operator>struct <name>search_domain</name> <operator>*</operator><operator>)</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>search_domain</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>domain_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdomain</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator> <name>sdomain</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>search_domain</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>domain_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sdomain</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>global_search_state</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sdomain</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>domain_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>sdomain</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>search_reverse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>search_domain</name></name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>global_search_state</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>evdns_base_search_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>search_postfix_add</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>evdns_search_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_base_search_add</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>evdns_base_search_ndots_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ndots</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name> <operator>=</operator> <call><name>search_state_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name><operator>-&gt;</operator><name>ndots</name></name> <operator>=</operator> <name>ndots</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>evdns_search_ndots_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ndots</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_base_search_ndots_set</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>ndots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>search_set_from_hostname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>HOST_NAME_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>domainname</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>search_postfix_clear</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gethostname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>domainname</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>domainname</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>search_postfix_add</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>domainname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>search_make_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>search_state</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>base_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>base_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>base_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>need_to_append_dot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>search_domain</name></name> <modifier>*</modifier></type><name>dom</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base_len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>need_to_append_dot</name> <operator>=</operator> <ternary><condition><expr><name><name>base_name</name><index>[<expr><name>base_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dom</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>dom</name></expr>;</condition> <incr><expr><name>dom</name> <operator>=</operator> <name><name>dom</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier><specifier>const</specifier></type> <name>postfix</name> <init>= <expr><operator>(</operator><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator> <name>dom</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>search_domain</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>postfix_len</name> <init>= <expr><name><name>dom</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>newname</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>base_len</name> <operator>+</operator> <name>need_to_append_dot</name> <operator>+</operator> <name>postfix_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newname</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newname</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>base_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_to_append_dot</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>newname</name><index>[<expr><name>base_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newname</name> <operator>+</operator> <name>base_len</name> <operator>+</operator> <name>need_to_append_dot</name></expr></argument>, <argument><expr><name>postfix</name></expr></argument>, <argument><expr><name>postfix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newname</name><index>[<expr><name>base_len</name> <operator>+</operator> <name>need_to_append_dot</name> <operator>+</operator> <name>postfix_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>newname</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type>
<name>search_request_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>handle</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>evdns_callback_type</name></type> <name>user_callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>TYPE_A</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TYPE_AAAA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>current_req</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_QUERY_NO_SEARCH</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name> <operator>&amp;&amp;</operator>
<name><name>base</name><operator>-&gt;</operator><name>global_search_state</name><operator>-&gt;</operator><name>num_domains</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>string_num_dots</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>base</name><operator>-&gt;</operator><name>global_search_state</name><operator>-&gt;</operator><name>ndots</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>request_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>user_callback</name></expr></argument>, <argument><expr><name>user_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>search_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>new_name</name> <init>= <expr><call><name>search_make_new</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_name</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>request_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>user_callback</name></expr></argument>, <argument><expr><name>user_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>search_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>search_origname</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>search_origname</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>search_origname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>search_state</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>search_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>request_submit</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>req</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>req</name> <init>= <expr><call><name>request_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>user_callback</name></expr></argument>, <argument><expr><name>user_arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>request_submit</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>req</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>search_try_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>current_req</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>newreq</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>search_state</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_name</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>search_index</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>search_index</name></name> <operator>&gt;=</operator> <name><name>handle</name><operator>-&gt;</operator><name>search_state</name><operator>-&gt;</operator><name>num_domains</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>string_num_dots</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>search_origname</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>handle</name><operator>-&gt;</operator><name>search_state</name><operator>-&gt;</operator><name>ndots</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newreq</name> <operator>=</operator> <call><name>request_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>request_type</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>search_origname</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>search_flags</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>user_callback</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>user_pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Search: trying raw query %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>search_origname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newreq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>search_request_finished</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>submit_next</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_name</name> <operator>=</operator> <call><name>search_make_new</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>search_state</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>search_index</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>search_origname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_name</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Search: now trying %s (%d)"</literal></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>search_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newreq</name> <operator>=</operator> <call><name>request_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>request_type</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>search_flags</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>user_callback</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>user_pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newreq</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<goto>goto <name>submit_next</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>submit_next</name>:</label>
<expr_stmt><expr><call><name>request_finished</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>REQ_HEAD</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>current_req</name></name> <operator>=</operator> <name>newreq</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newreq</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>request_submit</name><argument_list>(<argument><expr><name>newreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>search_request_finished</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>current_req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>search_state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>search_state_decref</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>search_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>search_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>search_origname</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>search_origname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>search_origname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>evdns_resolv_set_defaults</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_SEARCH</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>search_set_from_hostname</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_NAMESERVERS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>base</name></expr></argument>,<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STRTOK_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>strtok_r</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>cp</name> <operator>=</operator> <ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><operator>*</operator><name>state</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>delim</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>cp</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>start</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
<return>return <expr><name>start</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>strtoint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endptr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_strtotimeval</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endptr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>d</name><operator>)</operator><operator>*</operator><literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>strtoint_clipped</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>strtoint</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>r</name><operator>&lt;</operator><name>min</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>min</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>r</name><operator>&gt;</operator><name>max</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>max</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_base_set_max_requests_inflight</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxinflight</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_n_heads</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>n_req_heads</name></name></expr></init></decl>, <decl><type ref="prev"/><name>n_heads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>old_heads</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>req_heads</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>new_heads</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>maxinflight</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxinflight</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n_heads</name> <operator>=</operator> <operator>(</operator><name>maxinflight</name><operator>+</operator><literal type="number">4</literal><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>n_heads</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_heads</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><name>n_heads</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>request</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_heads</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>old_heads</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>old_n_heads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name><name>old_heads</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>old_heads</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_request_remove</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>old_heads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_request_insert</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_heads</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>trans_id</name></name> <operator>%</operator> <name>n_heads</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>old_heads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>req_heads</name></name> <operator>=</operator> <name>new_heads</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>n_req_heads</name></name> <operator>=</operator> <name>n_heads</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_max_requests_inflight</name></name> <operator>=</operator> <name>maxinflight</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>evdns_base_set_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evdns_base_set_option_impl</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>DNS_OPTIONS_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>str_matches_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optionname</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>size_t</name></type> <name>optlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>optionname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <name>optlen</name> <operator>||</operator> <name>slen</name> <operator>==</operator> <name>optlen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>optionname</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>slen</name> <operator>&gt;</operator> <name>optlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>optionname</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_base_set_option_impl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>str_matches_option</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"ndots:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ndots</name> <init>= <expr><call><name>strtoint</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ndots</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_SEARCH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Setting ndots to %d"</literal></expr></argument>, <argument><expr><name>ndots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name> <operator>=</operator> <call><name>search_state_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name><operator>-&gt;</operator><name>ndots</name></name> <operator>=</operator> <name>ndots</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>str_matches_option</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"timeout:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evdns_strtotimeval</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_MISC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Setting timeout to %s"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>global_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>str_matches_option</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo-allow-skew:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evdns_strtotimeval</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_MISC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Setting getaddrinfo-allow-skew to %s"</literal></expr></argument>,
<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>global_getaddrinfo_allow_skew</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>str_matches_option</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"max-timeouts:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxtimeout</name> <init>= <expr><call><name>strtoint_clipped</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>maxtimeout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_MISC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Setting maximum allowed timeouts to %d"</literal></expr></argument>,
<argument><expr><name>maxtimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_max_nameserver_timeout</name></name> <operator>=</operator> <name>maxtimeout</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>str_matches_option</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"max-inflight:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxinflight</name> <init>= <expr><call><name>strtoint_clipped</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">65000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>maxinflight</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_MISC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Setting maximum inflight requests to %d"</literal></expr></argument>,
<argument><expr><name>maxinflight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_set_max_requests_inflight</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>maxinflight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>str_matches_option</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"attempts:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retries</name> <init>= <expr><call><name>strtoint</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retries</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>retries</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retries</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_MISC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Setting retries to %d"</literal></expr></argument>, <argument><expr><name>retries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_max_retransmits</name></name> <operator>=</operator> <name>retries</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>str_matches_option</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"randomize-case:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>randcase</name> <init>= <expr><call><name>strtoint</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_MISC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_randomize_case</name></name> <operator>=</operator> <name>randcase</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>str_matches_option</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"bind-to:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>global_outgoing_address</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_NAMESERVERS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evutil_parse_sockaddr_port</name><argument_list>(<argument><expr><name>val</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>global_outgoing_address</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_outgoing_addrlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>str_matches_option</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"initial-probe-timeout:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evdns_strtotimeval</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <literal type="number">3600</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">3600</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_MISC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Setting initial probe timeout to %s"</literal></expr></argument>,
<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>global_nameserver_probe_initial_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_set_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>current_base</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>resolv_conf_parse_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strtok_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>delims</name> <init>= <expr><literal type="string">" \t"</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_TOKEN</name></cpp:macro> <cpp:value>strtok_r(NULL, delims, &amp;strtok_state)</cpp:value></cpp:define>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>first_token</name> <init>= <expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>delims</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_token</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>first_token</name></expr></argument>, <argument><expr><literal type="string">"nameserver"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_NAMESERVERS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>nameserver</name> <init>= <expr><name>NEXT_TOKEN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nameserver</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>nameserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>first_token</name></expr></argument>, <argument><expr><literal type="string">"domain"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_SEARCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>domain</name> <init>= <expr><name>NEXT_TOKEN</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>domain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>search_postfix_clear</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>search_postfix_add</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>first_token</name></expr></argument>, <argument><expr><literal type="string">"search"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_SEARCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>search_postfix_clear</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>domain</name> <operator>=</operator> <name>NEXT_TOKEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>search_postfix_add</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>search_reverse</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>first_token</name></expr></argument>, <argument><expr><literal type="string">"options"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>option</name> <operator>=</operator> <name>NEXT_TOKEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evdns_base_set_option_impl</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><name>val</name><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NEXT_TOKEN</name></cpp:undef>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>evdns_base_resolv_conf_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evdns_base_resolv_conf_parse_impl</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evdns_get_default_hosts_filename</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>





<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>hostfile</name><index>[]</index></name> <init>= <expr><literal type="string">"\\drivers\\etc\\hosts"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len_out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>SHGetSpecialFolderPathA</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>CSIDL_SYSTEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len_out</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>hostfile</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>path_out</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>len_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>path_out</name></expr></argument>, <argument><expr><name>len_out</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>hostfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>path_out</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"/etc/hosts"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_base_resolv_conf_parse_impl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resolv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Parsing resolv.conf file %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_HOSTSFILE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><call><name>evdns_get_default_hosts_filename</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evdns_base_load_hosts</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fname</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>evutil_read_file_</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resolv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evdns_resolv_set_defaults</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>resolv</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>newline</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>resolv_conf_parse_line</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>newline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resolv_conf_parse_line</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>newline</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_NAMESERVERS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DNS_OPTION_SEARCH</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name> <operator>||</operator> <name><name>base</name><operator>-&gt;</operator><name>global_search_state</name><operator>-&gt;</operator><name>num_domains</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>search_set_from_hostname</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>resolv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_resolv_conf_parse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>current_base</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>evdns_base_resolv_conf_parse</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_nameserver_ip_add_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ips</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>ips</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>ips</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>ips</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>ips</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>ips</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>ips</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>ips</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>ips</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>*</operator><name>ips</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator>
<operator>*</operator><name>ips</name><operator>==</operator><literal type="char">'['</literal> <operator>||</operator> <operator>*</operator><name>ips</name><operator>==</operator><literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>ips</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>ips</name><operator>-</operator><name>addr</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ips</name><operator>-</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ips</name><operator>-</operator><name>addr</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>DWORD</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>GetNetworkParams_fn_t</name>)<parameter_list>(<parameter><decl><type><name>FIXED_INFO</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_nameservers_with_getnetworkparams</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>FIXED_INFO</name> <modifier>*</modifier></type><name>fixed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>handle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>FIXED_INFO</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>added_any</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IP_ADDR_STRING</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetNetworkParams_fn_t</name></type> <name>fn</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>handle</name> <operator>=</operator> <call><name>evutil_load_windows_system_library_</name><argument_list>(
<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"iphlpapi.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>, <argument><expr><literal type="string">"Could not open iphlpapi.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fn</name> <operator>=</operator> <operator>(</operator><name>GetNetworkParams_fn_t</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"GetNetworkParams"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>, <argument><expr><literal type="string">"Could not get address of function."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <goto>goto <name>done</name>;</goto> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fixed</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><name>fixed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ERROR_SUCCESS</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <name>ERROR_BUFFER_OVERFLOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <goto>goto <name>done</name>;</goto> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fixed</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><name>fixed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"fn() failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>fixed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added_any</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>fixed</name><operator>-&gt;</operator><name>DnsServerList</name></name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_nameserver_ip_add_line</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>IpAddress</name><operator>.</operator><name>String</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Could not add nameserver %s to list,error: %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>ns</name><operator>-&gt;</operator><name>IpAddress</name><operator>.</operator><name>String</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>added_any</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Successfully added %s as nameserver"</literal></expr></argument>,<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>IpAddress</name><operator>.</operator><name>String</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ns</name> <operator>=</operator> <name><name>ns</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>added_any</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"No nameservers added."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>config_nameserver_from_reg_key</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>HKEY</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>subkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bufsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>subkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufsz</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ERROR_MORE_DATA</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>bufsz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>subkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufsz</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>ERROR_SUCCESS</name> <operator>&amp;&amp;</operator> <name>bufsz</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>evdns_nameserver_ip_add_line</name><argument_list>(<argument><expr><name>base</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVICES_KEY</name></cpp:macro> <cpp:value>TEXT("System\\CurrentControlSet\\Services\\")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN_NS_9X_KEY</name></cpp:macro> <cpp:value>SERVICES_KEY TEXT("VxD\\MSTCP")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN_NS_NT_KEY</name></cpp:macro> <cpp:value>SERVICES_KEY TEXT("Tcpip\\Parameters")</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_nameservers_from_registry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRY</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!found &amp;&amp; config_nameserver_from_reg_key(base,k,TEXT(name)) == 0) { log(EVDNS_LOG_DEBUG,"Found nameservers in %s/%s",#k,name); found = 1; } else if (!found) { log(EVDNS_LOG_DEBUG,"Didn't find nameservers in %s/%s", #k,#name); }</cpp:value></cpp:define>








<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>GetVersion</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HKEY</name></type> <name>nt_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>interfaces_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>WIN_NS_NT_KEY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nt_key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Couldn't open nt key, %d"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>nt_key</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Interfaces"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>KEY_QUERY_VALUE</name><operator>|</operator><name>KEY_ENUMERATE_SUB_KEYS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>interfaces_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Couldn't open interfaces key, %d"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TRY</name><argument_list>(<argument><expr><name>nt_key</name></expr></argument>, <argument><expr><literal type="string">"NameServer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY</name><argument_list>(<argument><expr><name>nt_key</name></expr></argument>, <argument><expr><literal type="string">"DhcpNameServer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY</name><argument_list>(<argument><expr><name>interfaces_key</name></expr></argument>, <argument><expr><literal type="string">"NameServer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY</name><argument_list>(<argument><expr><name>interfaces_key</name></expr></argument>, <argument><expr><literal type="string">"DhcpNameServer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>interfaces_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>nt_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>HKEY</name></type> <name>win_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>WIN_NS_9X_KEY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Couldn't open registry key, %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TRY</name><argument_list>(<argument><expr><name>win_key</name></expr></argument>, <argument><expr><literal type="string">"NameServer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>win_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>,<argument><expr><literal type="string">"Didn't find any nameservers."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>found</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TRY</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_base_config_windows_nameservers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>current_base</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>evdns_get_default_hosts_filename</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Loading hosts entries from %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_load_hosts</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fname</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>load_nameservers_with_getnetworkparams</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>load_nameservers_from_registry</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_config_windows_nameservers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_base</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>current_base</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>evdns_base_config_windows_nameservers</name><argument_list>(<argument><expr><name>current_base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type>
<name>evdns_base_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evutil_secure_rng_init</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>, <argument><expr><literal type="string">"Unable to seed random number generator; "</literal>
<literal type="string">"DNS can't run."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>evutil_set_evdns_getaddrinfo_fn_</name><argument_list>(<argument><expr><name>evdns_getaddrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_set_evdns_getaddrinfo_cancel_fn_</name><argument_list>(<argument><expr><name>evdns_getaddrinfo_cancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evdns_base</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evdns_base</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVTHREAD_ALLOC_LOCK</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>req_heads</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_base_set_max_requests_inflight</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>event_base</name></name> <operator>=</operator> <name>event_base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_good_nameservers</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>global_requests_inflight</name></name> <operator>=</operator>
<name><name>base</name><operator>-&gt;</operator><name>global_requests_waiting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_max_reissues</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_max_retransmits</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_max_nameserver_timeout</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_randomize_case</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_getaddrinfo_allow_skew</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_getaddrinfo_allow_skew</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_nameserver_probe_initial_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_nameserver_probe_initial_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>hostsdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVDNS_BASE_ALL_FLAGS</name></cpp:macro> <cpp:value>(0x8001)</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>EVDNS_BASE_ALL_FLAGS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>EVDNS_BASE_INITIALIZE_NAMESERVERS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>,
<argument><expr><literal type="string">"Unrecognized flag passed to evdns_base_new(). Assuming "</literal>
<literal type="string">"you meant EVDNS_BASE_INITIALIZE_NAMESERVERS."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EVDNS_BASE_ALL_FLAGS</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EVDNS_BASE_INITIALIZE_NAMESERVERS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_base_config_windows_nameservers</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_base_resolv_conf_parse</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>DNS_OPTIONS_ALL</name></expr></argument>, <argument><expr><literal type="string">"/etc/resolv.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_base_free_and_unlock</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EVDNS_BASE_DISABLE_WHEN_INACTIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>disable_when_inactive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>base</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>evdns_base_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evdns_err_to_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DNS_ERR_NONE</name></expr>:</case> <return>return <expr><literal type="string">"no error"</literal></expr>;</return>
<case>case <expr><name>DNS_ERR_FORMAT</name></expr>:</case> <return>return <expr><literal type="string">"misformatted query"</literal></expr>;</return>
<case>case <expr><name>DNS_ERR_SERVERFAILED</name></expr>:</case> <return>return <expr><literal type="string">"server failed"</literal></expr>;</return>
<case>case <expr><name>DNS_ERR_NOTEXIST</name></expr>:</case> <return>return <expr><literal type="string">"name does not exist"</literal></expr>;</return>
<case>case <expr><name>DNS_ERR_NOTIMPL</name></expr>:</case> <return>return <expr><literal type="string">"query not implemented"</literal></expr>;</return>
<case>case <expr><name>DNS_ERR_REFUSED</name></expr>:</case> <return>return <expr><literal type="string">"refused"</literal></expr>;</return>

<case>case <expr><name>DNS_ERR_TRUNCATED</name></expr>:</case> <return>return <expr><literal type="string">"reply truncated or ill-formed"</literal></expr>;</return>
<case>case <expr><name>DNS_ERR_UNKNOWN</name></expr>:</case> <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
<case>case <expr><name>DNS_ERR_TIMEOUT</name></expr>:</case> <return>return <expr><literal type="string">"request timed out"</literal></expr>;</return>
<case>case <expr><name>DNS_ERR_SHUTDOWN</name></expr>:</case> <return>return <expr><literal type="string">"dns subsystem shut down"</literal></expr>;</return>
<case>case <expr><name>DNS_ERR_CANCEL</name></expr>:</case> <return>return <expr><literal type="string">"dns request canceled"</literal></expr>;</return>
<case>case <expr><name>DNS_ERR_NODATA</name></expr>:</case> <return>return <expr><literal type="string">"no records in the reply"</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="string">"[Unknown error code]"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evdns_nameserver_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>socket</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_debug_unassign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>probe_request</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_cancel_request</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>probe_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>probe_request</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_debug_unassign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>timeout_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evdns_base_free_and_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fail_requests</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nameserver</name></name> <modifier>*</modifier></type><name>server</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>server_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>search_domain</name></name> <modifier>*</modifier></type><name>dom</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dom_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>n_req_heads</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>req_heads</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fail_requests</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reply_schedule_callback</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>req_heads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DNS_ERR_SHUTDOWN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>request_finished</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>req_heads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>REQ_HEAD</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>req_heads</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>trans_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<while>while <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fail_requests</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reply_schedule_callback</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DNS_ERR_SHUTDOWN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>request_finished</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>req_waiting_head</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_requests_inflight</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>global_requests_waiting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>server</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>;</init> <condition><expr><name>server</name></expr>;</condition> <incr><expr><name>server</name> <operator>=</operator> <name>server_next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>server_next</name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>probe_request</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_nameserver_free</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>server_next</name> <operator>==</operator> <name><name>base</name><operator>-&gt;</operator><name>server_head</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>server_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_good_nameservers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>dom</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>global_search_state</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>dom</name></expr>;</condition> <incr><expr><name>dom</name> <operator>=</operator> <name>dom_next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dom_next</name> <operator>=</operator> <name><name>dom</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>dom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>global_search_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hosts_entry</name></name> <modifier>*</modifier></type><name>victim</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>victim</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>hostsdb</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>hostsdb</name></name></expr></argument>, <argument><expr><name>victim</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>victim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>req_heads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evdns_base_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fail_requests</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_free_and_unlock</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>fail_requests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evdns_base_clear_host_addresses</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hosts_entry</name></name> <modifier>*</modifier></type><name>victim</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>victim</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>hostsdb</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>hostsdb</name></name></expr></argument>, <argument><expr><name>victim</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>victim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evdns_shutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fail_requests</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>current_base</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>current_base</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>current_base</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>fail_requests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>evdns_log_fn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_base_parse_hosts_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strtok_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>delims</name> <init>= <expr><literal type="string">" \t"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>addr</name> <init>= <expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>delims</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>socklen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_TOKEN</name></cpp:macro> <cpp:value>strtok_r(NULL, delims, &amp;strtok_state)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name> <operator>||</operator> <operator>*</operator><name>addr</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evutil_parse_sockaddr_port</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socklen</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>socklen</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sockaddr_getport</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>hostname</name> <operator>=</operator> <name>NEXT_TOKEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hosts_entry</name></name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>hash</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hosts_entry</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>he</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>socklen</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>he</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>he</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>he</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>namelen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>he</name><operator>-&gt;</operator><name>addrlen</name></name> <operator>=</operator> <name>socklen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>hostsdb</name></name></expr></argument>, <argument><expr><name>he</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hash</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NEXT_TOKEN</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_base_load_hosts_impl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hosts_fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_LOCKED</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hosts_fname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>err</name> <operator>=</operator> <call><name>evutil_read_file_</name><argument_list>(<argument><expr><name>hosts_fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1 localhost"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_parse_hosts_line</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"::1 localhost"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_parse_hosts_line</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>eol</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>eol</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_parse_hosts_line</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>eol</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evdns_base_parse_hosts_line</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evdns_base_load_hosts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hosts_fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>current_base</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evdns_base_load_hosts_impl</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>hosts_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<struct>struct <name>getaddrinfo_subrequest</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>evdns_getaddrinfo_request</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>evdns_base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>evdns_getaddrinfo_cb</name></type> <name>user_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>getaddrinfo_subrequest</name></name></type> <name>ipv4_request</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>getaddrinfo_subrequest</name></name></type> <name>ipv6_request</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cname_result</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>pending_result</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>timeout</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>pending_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>user_canceled</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>request_done</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_err_to_getaddrinfo_err</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e1</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>==</operator> <name>DNS_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>e1</name> <operator>==</operator> <name>DNS_ERR_NOTEXIST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EVUTIL_EAI_NONAME</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>EVUTIL_EAI_FAIL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>getaddrinfo_merge_err</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e2</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>e2</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>e1</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_getaddrinfo_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cname_result</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cname_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_cname_to_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cname_result</name></name> <operator>&amp;&amp;</operator> <name>ai</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>cname_result</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cname_result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>evdns_getaddrinfo_timeout_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v4_timedout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v6_timedout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>ipv4_request</name><operator>.</operator><name>r</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>evdns_cancel_request</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>ipv4_request</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v4_timedout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name><operator>-&gt;</operator><name>getaddrinfo_ipv4_timeouts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>ipv6_request</name><operator>.</operator><name>r</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>evdns_cancel_request</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>ipv6_request</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v6_timedout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name><operator>-&gt;</operator><name>getaddrinfo_ipv6_timeouts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>v4_timedout</name> <operator>||</operator> <operator>!</operator><name>v6_timedout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_cname_to_reply</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>user_cb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>pending_error</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>EVUTIL_EAI_AGAIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>user_cb</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>user_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v4_timedout</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>v6_timedout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_getaddrinfo_request</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_getaddrinfo_set_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>evdns_base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>evdns_base</name><operator>-&gt;</operator><name>global_getaddrinfo_allow_skew</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>evdns_result_is_answer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>result</name> <operator>!=</operator> <name>DNS_ERR_NOTIMPL</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>DNS_ERR_REFUSED</name> <operator>&amp;&amp;</operator>
<name>result</name> <operator>!=</operator> <name>DNS_ERR_SERVERFAILED</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>DNS_ERR_CANCEL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evdns_getaddrinfo_gotresolve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addresses</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>getaddrinfo_subrequest</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>getaddrinfo_subrequest</name></name> <modifier>*</modifier></type><name>other_req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sin6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>socklen</name></decl>, <decl><type ref="prev"/><name>addrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addrp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>user_canceled</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DNS_IPv4_A</name> <operator>||</operator> <name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DNS_IPv6_AAAA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DNS_IPv4_A</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr>struct <name>evdns_getaddrinfo_request</name></expr></argument>, <argument><expr><name>ipv4_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>other_req</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>ipv6_request</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr>struct <name>evdns_getaddrinfo_request</name></expr></argument>, <argument><expr><name>ipv6_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>other_req</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>ipv4_request</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DNS_ERR_SHUTDOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evdns_result_is_answer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DNS_IPv4_A</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name><operator>-&gt;</operator><name>getaddrinfo_ipv4_answered</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name><operator>-&gt;</operator><name>getaddrinfo_ipv6_answered</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>user_canceled</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>user_canceled</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>other_req</name><operator>-&gt;</operator><name>r</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>request_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>user_canceled</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>user_canceled</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DNS_ERR_CANCEL</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>user_canceled</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>other_req</name><operator>-&gt;</operator><name>r</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_getaddrinfo_request</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>user_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>free_getaddrinfo_request</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DNS_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>EVUTIL_EAI_NODATA</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>evdns_err_to_getaddrinfo_err</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>other_req</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DNS_ERR_SHUTDOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_getaddrinfo_set_timeout</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pending_error</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>user_canceled</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>user_cb</name></name><argument_list>(<argument><expr><name>EVUTIL_EAI_CANCEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>add_cname_to_reply</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>user_cb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>pending_error</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>getaddrinfo_merge_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pending_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>user_cb</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free_getaddrinfo_request</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>user_canceled</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>other_req</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition> <block>{<block_content>



<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>user_cb</name></name><argument_list>(<argument><expr><name>EVUTIL_EAI_CANCEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_getaddrinfo_request</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>DNS_IPv4_A</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>DNS_IPv6_AAAA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>DNS_IPv4_A</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>socklen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>addrlen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addrp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sin</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>socklen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>addrlen</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addrp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sin6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>addrp</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>addresses</name><operator>)</operator><operator>+</operator><name>i</name><operator>*</operator><name>addrlen</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>evutil_new_addrinfo_</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>hints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ai</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>other_req</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_cancel_request</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>other_req</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>user_cb</name></name><argument_list>(<argument><expr><name>EVUTIL_EAI_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>other_req</name><operator>-&gt;</operator><name>r</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_getaddrinfo_request</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evutil_addrinfo_append_</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>other_req</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>evdns_getaddrinfo_set_timeout</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DNS_IPv4_A</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evutil_addrinfo_append_</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evutil_addrinfo_append_</name><argument_list>(
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pending_result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>add_cname_to_reply</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>user_cb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free_getaddrinfo_request</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>hosts_entry</name></name> <modifier>*</modifier></type>
<name>find_hosts_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>hosts_entry</name></name> <modifier>*</modifier></type><name>find_after</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hosts_entry</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>find_after</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>find_after</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>hostsdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>e</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evdns_getaddrinfo_fromhosts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hosts_entry</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <call><name>find_hosts_entry</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>e</name></expr>;</condition>
<incr><expr><name>e</name> <operator>=</operator> <call><name>find_hosts_entry</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai_new</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>n_found</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <name>f</name> <operator>==</operator> <name>PF_INET6</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <name>f</name> <operator>==</operator> <name>PF_INET</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ai_new</name> <operator>=</operator> <call><name>evutil_new_addrinfo_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>addrlen</name></name></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ai_new</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sockaddr_setport</name><argument_list>(<argument><expr><name><name>ai_new</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>evutil_addrinfo_append_</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><name>ai_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>n_found</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ai</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type>
<name>evdns_getaddrinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>hints_in</name></decl></parameter>,
<parameter><decl><type><name>evdns_getaddrinfo_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>want_cname</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dns_base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dns_base</name> <operator>=</operator> <name>current_base</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dns_base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_WARN</name></expr></argument>,
<argument><expr><literal type="string">"Call to getaddrinfo_async with no "</literal>
<literal type="string">"evdns_base configured."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>EVUTIL_EAI_FAIL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hints_in</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hints_in</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>EVUTIL_AI_NUMERICHOST</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><name>hints_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hints_in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>hints_in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>evutil_adjust_hints_for_addrconfig_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>evutil_getaddrinfo_common_</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>EVUTIL_EAI_NEED_RESOLVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evdns_getaddrinfo_fromhosts</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evdns_getaddrinfo_request</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>EVUTIL_EAI_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>hints</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>hints</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <operator>(</operator><name>ev_uint16_t</name><operator>)</operator><name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ipv4_request</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>DNS_IPv4_A</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ipv6_request</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>DNS_IPv6_AAAA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>user_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name> <operator>=</operator> <name>dns_base</name></expr>;</expr_stmt>

<expr_stmt><expr><name>want_cname</name> <operator>=</operator> <operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>EVUTIL_AI_CANONNAME</name><operator>)</operator></expr>;</expr_stmt>














<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>!=</operator> <name>PF_INET6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Sending request for %s on ipv4 as %p"</literal></expr></argument>,
<argument><expr><name>nodename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>ipv4_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ipv4_request</name><operator>.</operator><name>r</name></name> <operator>=</operator> <call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>,
<argument><expr><name>nodename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>evdns_getaddrinfo_gotresolve</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>ipv4_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>want_cname</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>ipv4_request</name><operator>.</operator><name>r</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ipv4_request</name><operator>.</operator><name>r</name><operator>-&gt;</operator><name>current_req</name><operator>-&gt;</operator><name>put_cname_in_ptr</name></name> <operator>=</operator>
<operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cname_result</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>!=</operator> <name>PF_INET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>EVDNS_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Sending request for %s on ipv6 as %p"</literal></expr></argument>,
<argument><expr><name>nodename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>ipv6_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ipv6_request</name><operator>.</operator><name>r</name></name> <operator>=</operator> <call><name>evdns_base_resolve_ipv6</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>,
<argument><expr><name>nodename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>evdns_getaddrinfo_gotresolve</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>ipv6_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>want_cname</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>ipv6_request</name><operator>.</operator><name>r</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ipv6_request</name><operator>.</operator><name>r</name><operator>-&gt;</operator><name>current_req</name><operator>-&gt;</operator><name>put_cname_in_ptr</name></name> <operator>=</operator>
<operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cname_result</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evtimer_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><name><name>dns_base</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>,
<argument><expr><name>evdns_getaddrinfo_timeout_cb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>ipv4_request</name><operator>.</operator><name>r</name></name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>ipv6_request</name><operator>.</operator><name>r</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>EVUTIL_EAI_FAIL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evdns_getaddrinfo_cancel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_LOCK</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>request_done</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>user_canceled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>ipv4_request</name><operator>.</operator><name>r</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_cancel_request</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>ipv4_request</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>ipv6_request</name><operator>.</operator><name>r</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_cancel_request</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>ipv6_request</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVDNS_UNLOCK</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>evdns_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
