<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/evutil.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WIN32_LEAN_AND_MEAN</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tchar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_WIN32_WINNT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iphlpapi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_IN6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in6.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_TCP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_IFADDRS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ifaddrs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evthread-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strlcpy-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ipv6-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_NO_CACHE_HASH_VALUES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ht-internal.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>open</name></cpp:macro> <cpp:value>_open</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read</name></cpp:macro> <cpp:value>_read</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>close</name></cpp:macro> <cpp:value>_close</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>fstat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fstat</name></cpp:macro> <cpp:value>_fstati64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stat</name></cpp:macro> <cpp:value>_stati64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mode_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>evutil_open_closeonexec_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name><operator>|</operator><name>O_CLOEXEC</name></expr></argument>, <argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>fd</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type>
<name>evutil_read_file_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>content_out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len_out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_binary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>read_so_far</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><name>O_RDONLY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>content_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>len_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>content_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len_out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_binary</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>O_BINARY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>evutil_open_closeonexec_</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&gt;</operator> <name>EV_SSIZE_MAX</name><operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mem</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>read_so_far</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_TO_READ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt; INT_MAX) ? INT_MAX : ((int)(x))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_TO_READ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mem</name><operator>+</operator><name>read_so_far</name></expr></argument>, <argument><expr><call><name>N_TO_READ</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>-</operator> <name>read_so_far</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>read_so_far</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read_so_far</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>read_so_far</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mem</name><index>[<expr><name>read_so_far</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>len_out</name> <operator>=</operator> <name>read_so_far</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>content_out</name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_socketpair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name><name>fd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>socketpair</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>evutil_ersatz_socketpair_</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_ersatz_socketpair_</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>,
<parameter><decl><type><name>evutil_socket_t</name></type> <name><name>fd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>WSA##e</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>e</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>listener</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>connector</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>acceptor</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>listen_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>connect_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_errno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>family_test</name></decl>;</decl_stmt>

<expr_stmt><expr><name>family_test</name> <operator>=</operator> <name>family</name> <operator>!=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>family_test</name> <operator>=</operator> <name>family_test</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>family</name> <operator>!=</operator> <name>AF_UNIX</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>||</operator> <name>family_test</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_SET_SOCKET_ERROR</name><argument_list>(<argument><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAFNOSUPPORT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_SET_SOCKET_ERROR</name><argument_list>(<argument><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>listener</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>listener</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>listen_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>listen_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listen_addr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listen_addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>INADDR_LOOPBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listen_addr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>listen_addr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>listen_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>tidy_up_and_fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>tidy_up_and_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>connector</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>connector</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>tidy_up_and_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connect_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>connect_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>connect_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>connect_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>tidy_up_and_fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>connect_addr</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>abort_tidy_up_and_fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>connector</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>connect_addr</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>connect_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>tidy_up_and_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>listen_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>acceptor</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>listen_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acceptor</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>tidy_up_and_fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>listen_addr</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>abort_tidy_up_and_fail</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>connector</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>connect_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>tidy_up_and_fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>connect_addr</name></expr></argument>)</argument_list></sizeof>
<operator>||</operator> <name><name>listen_addr</name><operator>.</operator><name>sin_family</name></name> <operator>!=</operator> <name><name>connect_addr</name><operator>.</operator><name>sin_family</name></name>
<operator>||</operator> <name><name>listen_addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>connect_addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name>
<operator>||</operator> <name><name>listen_addr</name><operator>.</operator><name>sin_port</name></name> <operator>!=</operator> <name><name>connect_addr</name><operator>.</operator><name>sin_port</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>abort_tidy_up_and_fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>connector</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>acceptor</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>abort_tidy_up_and_fail</name>:</label>
<expr_stmt><expr><name>saved_errno</name> <operator>=</operator> <call><name>ERR</name><argument_list>(<argument><expr><name>ECONNABORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>tidy_up_and_fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>saved_errno</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>saved_errno</name> <operator>=</operator> <call><name>EVUTIL_SOCKET_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>connector</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>connector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>acceptor</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>acceptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVUTIL_SET_SOCKET_ERROR</name><argument_list>(<argument><expr><name>saved_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ERR</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_make_socket_nonblocking</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>nonblocking</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nonblocking</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_sock_warn</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"fcntl(%d, F_GETFL)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"fcntl(%d, F_GETFL)"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_NONBLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"fcntl(%d, F_SETFL)"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>evutil_fast_socket_nonblocking</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>evutil_make_socket_nonblocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"fcntl(%d, F_SETFL)"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_make_listen_socket_reuseable</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_REUSEADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<return>return <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>one</name></expr></argument>,
<argument><expr><operator>(</operator><name>ev_socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_make_listen_socket_reuseable_port</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__linux__</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SO_REUSEPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<return>return <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEPORT</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>one</name></expr></argument>,
<argument><expr><operator>(</operator><name>ev_socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_make_tcp_listen_socket_deferred</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_TCP_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>TCP_DEFER_ACCEPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<return>return <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_DEFER_ACCEPT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>,
<argument><expr><operator>(</operator><name>ev_socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_make_socket_closeonexec</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SETFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"fcntl(%d, F_GETFD)"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FD_CLOEXEC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>FD_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"fcntl(%d, F_SETFD)"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>evutil_fast_socket_closeonexec</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SETFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"fcntl(%d, F_SETFD)"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_closesocket</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ev_int64_t</name></type>
<name>evutil_strtoll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STRTOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>ev_int64_t</name><operator>)</operator><call><name>strtoll</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>EVENT__SIZEOF_LONG</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>
<return>return <expr><operator>(</operator><name>ev_int64_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1300</literal></expr></cpp:elif>


<decl_stmt><decl><type><name>ev_int64_t</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>!=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>ev_int64_t</name><operator>)</operator> <call><name>_atoi64</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>endptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><operator>(</operator><name>ev_int64_t</name><operator>)</operator> <call><name>_strtoi64</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__SIZEOF_LONG_LONG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>EVENT__SIZEOF_LONG_LONG</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>!=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>base</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ru</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%llx"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ru</name> <operator>&gt;</operator> <name>EV_INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>ru</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>EVUTIL_ISSPACE_</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>EVUTIL_ISDIGIT_</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><call><name>EVUTIL_ISXDIGIT_</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>endptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"I don't know how to parse 64-bit integers."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>evutil_socket_geterror</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>optval</name></decl>, <decl><type ref="prev"/><name>optvallen</name><init>=<expr><sizeof>sizeof<argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>WSAEWOULDBLOCK</name> <operator>&amp;&amp;</operator> <name>sock</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>optval</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>optvallen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>optval</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>optval</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><name>int</name></type>
<name>evutil_socket_connect_</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name> <modifier>*</modifier></type><name>fd_ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socklen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>made_fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd_ptr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>fd_ptr</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>made_fd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evutil_make_socket_nonblocking</name><argument_list>(<argument><expr><operator>*</operator><name>fd_ptr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><operator>*</operator><name>fd_ptr</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>evutil_socket_geterror</name><argument_list>(<argument><expr><operator>*</operator><name>fd_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ERR_CONNECT_RETRIABLE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ERR_CONNECT_REFUSED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<label><name>err</name>:</label>
<if_stmt><if>if <condition>(<expr><name>made_fd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><operator>*</operator><name>fd_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fd_ptr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>evutil_socket_finished_connecting_</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>elen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ERR_CONNECT_RETRIABLE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVUTIL_SET_SOCKET_ERROR</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>EVUTIL_AI_PASSIVE</name><operator>|</operator><name>EVUTIL_AI_CANONNAME</name><operator>|</operator><name>EVUTIL_AI_NUMERICHOST</name><operator>|</operator> <name>EVUTIL_AI_NUMERICSERV</name><operator>|</operator><name>EVUTIL_AI_V4MAPPED</name><operator>|</operator><name>EVUTIL_AI_ALL</name><operator>|</operator> <name>EVUTIL_AI_ADDRCONFIG</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>EVUTIL_AI_PASSIVE</name><operator>^</operator><name>EVUTIL_AI_CANONNAME</name><operator>^</operator><name>EVUTIL_AI_NUMERICHOST</name><operator>^</operator> <name>EVUTIL_AI_NUMERICSERV</name><operator>^</operator><name>EVUTIL_AI_V4MAPPED</name><operator>^</operator><name>EVUTIL_AI_ALL</name><operator>^</operator> <name>EVUTIL_AI_ADDRCONFIG</name><operator>)</operator></expr></cpp:if>





<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Some of our EVUTIL_AI_* flags seem to overlap with system AI_* flags"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>have_checked_interfaces</name></decl>, <decl><type ref="prev"/><name>had_ipv4_address</name></decl>, <decl><type ref="prev"/><name>had_ipv6_address</name></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVUTIL_V4ADDR_IS_LOCALHOST</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((addr)&gt;&gt;24) == 127)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVUTIL_V4ADDR_IS_CLASSD</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((addr)&gt;&gt;24) &amp; 0xf0) == 0xe0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evutil_found_ifaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ZEROES</name><index>[]</index></name> <init>= <expr><literal type="string">"\x00\x00\x00\x00\x00\x00\x00\x00"</literal>
<literal type="string">"\x00\x00\x00\x00\x00\x00\x00\x00"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>addr</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>EVUTIL_V4ADDR_IS_LOCALHOST</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>EVUTIL_V4ADDR_IS_CLASSD</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Detected an IPv4 interface"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>had_ipv4_address</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sin6</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>addr</name> <init>=
<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>sin6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ZEROES</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfe</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xfc</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfe</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfe</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>


</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Detected an IPv6 interface"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>had_ipv6_address</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>ULONG</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>GetAdaptersAddresses_fn_t</name>)<parameter_list>(
<parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>PIP_ADAPTER_ADDRESSES</name></type></decl></parameter>, <parameter><decl><type><name>PULONG</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evutil_check_ifaddrs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETIFADDRS</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifa</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifa</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"Unable to call getifaddrs()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ifa</name></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>ifa_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>evutil_found_ifaddr</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>freeifaddrs</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>




<decl_stmt><decl><type><name>HMODULE</name></type> <name>lib</name> <init>= <expr><call><name>evutil_load_windows_system_library_</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"ihplapi.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetAdaptersAddresses_fn_t</name></type> <name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IP_ADAPTER_ADDRESSES</name> <modifier>*</modifier></type><name>addresses</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(GAA_FLAG_SKIP_ANYCAST | GAA_FLAG_SKIP_MULTICAST | GAA_FLAG_SKIP_DNS_SERVER)</cpp:value></cpp:define>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lib</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fn</name> <operator>=</operator> <operator>(</operator><name>GetAdaptersAddresses_fn_t</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"GetAdaptersAddresses"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">15</literal><operator>*</operator><literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addresses</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addresses</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><name>FLAGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>ERROR_BUFFER_OVERFLOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addresses</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addresses</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><name>FLAGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NO_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>address</name> <operator>=</operator> <name>addresses</name></expr>;</init> <condition><expr><name>address</name></expr>;</condition> <incr><expr><name>address</name> <operator>=</operator> <name><name>address</name><operator>-&gt;</operator><name>Next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>IP_ADAPTER_UNICAST_ADDRESS</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <name><name>address</name><operator>-&gt;</operator><name>FirstUnicastAddress</name></name></expr>;</init> <condition><expr><name>a</name></expr>;</condition> <incr><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>Address</name><operator>.</operator><name>lpSockaddr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_found_ifaddr</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>lib</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addresses</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>evutil_check_interfaces</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force_recheck</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>, <decl><type ref="prev"/><name>sin_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sin6</name></decl>, <decl><type ref="prev"/><name>sin6_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>sin_out_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin_out</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>sin6_out_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6_out</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>have_checked_interfaces</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force_recheck</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evutil_check_ifaddrs</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><literal type="string">"18.244.0.188"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><literal type="string">"2001:4860:b002::68"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin_out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin6_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6_out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sin_out_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evutil_found_ifaddr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>sin_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin6</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin6_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sin6_out_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evutil_found_ifaddr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>sin6_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVUTIL_AI_LIBEVENT_ALLOCATED</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>






<function><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type>
<name>evutil_new_addrinfo_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>ev_socklen_t</name></type> <name>socklen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>r1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>evutil_new_addrinfo_</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>evutil_new_addrinfo_</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<return>return <expr><name>r1</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>evutil_addrinfo</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>socklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>res</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>evutil_addrinfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>=</operator> <name>socklen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>=</operator> <name>EVUTIL_AI_LIBEVENT_ALLOCATED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type>
<name>evutil_addrinfo_append_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>first</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>append</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><name>first</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ai</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>append</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>append</name></expr>;</expr_stmt>

<return>return <expr><name>first</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_numeric_servname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>servname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">65535</literal> <operator>&amp;&amp;</operator> <name><name>servname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>endptr</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>endptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>n</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>evutil_parse_servname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>protocol</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>parse_numeric_servname</name><argument_list>(<argument><expr><name>servname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETSERVBYNAME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>EVUTIL_AI_NUMERICSERV</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>servent</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><call><name>getservbyname</name><argument_list>(<argument><expr><name>servname</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ent</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>s_port</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evutil_unparse_protoname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>proto</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>proto</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><name>NULL</name></expr>;</return>
<case>case <expr><name>IPPROTO_TCP</name></expr>:</case>
<return>return <expr><literal type="string">"tcp"</literal></expr>;</return>
<case>case <expr><name>IPPROTO_UDP</name></expr>:</case>
<return>return <expr><literal type="string">"udp"</literal></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_SCTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>IPPROTO_SCTP</name></expr>:</case>
<return>return <expr><literal type="string">"sctp"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETPROTOBYNUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>protoent</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><call><name>getprotobynumber</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>ent</name><operator>-&gt;</operator><name>p_name</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evutil_getaddrinfo_infer_protocols</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>&amp;&amp;</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>==</operator> <name>SOCK_DGRAM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>==</operator> <name>SOCK_STREAM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>&amp;&amp;</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>==</operator> <name>IPPROTO_UDP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>==</operator> <name>IPPROTO_TCP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_SCTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>==</operator> <name>IPPROTO_SCTP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AF_UNSPEC</name> <operator>!=</operator> <name>PF_UNSPEC</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"I cannot build on a system where AF_UNSPEC != PF_UNSPEC"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<function><type><name>int</name></type>
<name>evutil_getaddrinfo_common_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>portnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nodename</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>servname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EVUTIL_EAI_NONAME</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name>PF_UNSPEC</name> <operator>&amp;&amp;</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name>PF_INET</name> <operator>&amp;&amp;</operator>
<name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name>PF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EVUTIL_EAI_FAMILY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_getaddrinfo_infer_protocols</name><argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>pname</name> <operator>=</operator> <call><name>evutil_unparse_protoname</name><argument_list>(<argument><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>servname</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>evutil_parse_servname</name><argument_list>(<argument><expr><name>servname</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EVUTIL_EAI_NONAME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>nodename</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>res4</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res6</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name>PF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sin6</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>EVUTIL_AI_PASSIVE</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>res6</name> <operator>=</operator> <call><name>evutil_new_addrinfo_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin6</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res6</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EVUTIL_EAI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name>PF_INET6</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>EVUTIL_AI_PASSIVE</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x7f000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>res4</name> <operator>=</operator> <call><name>evutil_new_addrinfo_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res4</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>res6</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>res6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>EVUTIL_EAI_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>evutil_addrinfo_append_</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>PF_INET6</name> <operator>||</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>PF_UNSPEC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sin6</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal><operator>==</operator><call><name>evutil_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>evutil_new_addrinfo_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin6</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EVUTIL_EAI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>PF_INET</name> <operator>||</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>PF_UNSPEC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal><operator>==</operator><call><name>evutil_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>evutil_new_addrinfo_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EVUTIL_EAI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>EVUTIL_AI_NUMERICHOST</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>EVUTIL_EAI_NONAME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>portnum</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<return>return <expr><name>EVUTIL_EAI_NEED_RESOLVE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_NATIVE_GETADDRINFO</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NATIVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>ALL_NONNATIVE_AI_FLAGS</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AI_PASSIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>EVUTIL_AI_PASSIVE</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AI_CANONNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>EVUTIL_AI_CANONNAME</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>EVUTIL_AI_NUMERICHOST</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>EVUTIL_AI_NUMERICSERV</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AI_ADDRCONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>EVUTIL_AI_ADDRCONFIG</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AI_ALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>EVUTIL_AI_ALL</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AI_V4MAPPED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>EVUTIL_AI_V4MAPPED</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>EVUTIL_AI_LIBEVENT_ALLOCATED</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>ALL_NATIVE_AI_FLAGS</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_PASSIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>AI_PASSIVE</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_CANONNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>AI_CANONNAME</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>AI_NUMERICHOST</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>AI_NUMERICSERV</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_ADDRCONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>AI_ADDRCONFIG</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_ALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>AI_ALL</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_V4MAPPED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>AI_V4MAPPED</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NATIVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type>
<name>addrinfo_from_hostent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sin6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>socklen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>res</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addrp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>h_addrtype</name></name> <operator>==</operator> <name>PF_INET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>socklen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>addrp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sin</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>h_length</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sin</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"Weird h_length from gethostbyname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>h_addrtype</name></name> <operator>==</operator> <name>PF_INET6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>socklen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>addrp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sin6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>h_length</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sin6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"Weird h_length from gethostbyname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ent</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>addrp</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>h_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>evutil_new_addrinfo_</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ai</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evutil_addrinfo_append_</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>EVUTIL_AI_CANONNAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>h_name</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type>
<name>evutil_adjust_hints_for_addrconfig_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>EVUTIL_AI_ADDRCONFIG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name>PF_UNSPEC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_checked_interfaces</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_check_interfaces</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>had_ipv4_address</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>had_ipv6_address</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>had_ipv4_address</name> <operator>&amp;&amp;</operator> <name>had_ipv6_address</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET6</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NATIVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>need_numeric_port_hack_</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>need_socktype_protocol_hack_</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tested_for_getaddrinfo_hacks</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




















<function><type><specifier>static</specifier> <name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai_find_protocol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>ai</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ai</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_for_getaddrinfo_hacks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai2</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai3</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>AI_NUMERICHOST</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>AI_NUMERICSERV</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>, <argument><expr><literal type="string">"80"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>, <argument><expr><literal type="string">"80"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_numeric_port_hack_</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ai_find_protocol</name><argument_list>(<argument><expr><name>ai2</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ai_find_protocol</name><argument_list>(<argument><expr><name>ai3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_socktype_protocol_hack_</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ai</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ai2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>ai2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ai3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>ai3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tested_for_getaddrinfo_hacks</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>need_numeric_port_hack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tested_for_getaddrinfo_hacks</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_for_getaddrinfo_hacks</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>need_numeric_port_hack_</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>need_socktype_protocol_hack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tested_for_getaddrinfo_hacks</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_for_getaddrinfo_hacks</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>need_socktype_protocol_hack_</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>apply_numeric_port_hack</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>ai</name></expr>;</condition> <incr><expr><name>ai</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ai</name><operator>)</operator><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>ai</name><operator>)</operator><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sa</name> <operator>&amp;&amp;</operator> <name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sa</name> <operator>&amp;&amp;</operator> <name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sin6</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>victim</name> <init>= <expr><operator>*</operator><name>ai</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>ai</name> <operator>=</operator> <name><name>victim</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>victim</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>victim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>apply_socktype_protocol_hack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai_new</name></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>ai</name></expr>;</condition> <incr><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_getaddrinfo_infer_protocols</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>||</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ai_new</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ai_new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ai_new</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ai_new</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ai_new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai_new</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai_new</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai_new</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>ai_new</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>evutil_getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>hints_in</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NATIVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>portnum</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>need_np_hack</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hints_in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>hints_in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AI_ADDRCONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>==</operator> <name>PF_UNSPEC</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>EVUTIL_AI_ADDRCONFIG</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_adjust_hints_for_addrconfig_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>EVUTIL_AI_NUMERICSERV</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>servname</name> <operator>&amp;&amp;</operator> <call><name>parse_numeric_servname</name><argument_list>(<argument><expr><name>servname</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EVUTIL_EAI_NONAME</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_port</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>evutil_getaddrinfo_common_</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>,<argument><expr><name>servname</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>,
<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name>err</name> <operator>==</operator> <name>EVUTIL_EAI_MEMORY</name> <operator>||</operator>
<name>err</name> <operator>==</operator> <name>EVUTIL_EAI_NONAME</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>


</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>need_np_hack</name> <operator>=</operator> <call><name>need_numeric_port_hack</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>servname</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>portnum</name><operator>=</operator><call><name>parse_numeric_servname</name><argument_list>(<argument><expr><name>servname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_np_hack</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nodename</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>evutil_getaddrinfo_common_</name><argument_list>(
<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>servname</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>servname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>need_socktype_protocol_hack</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_getaddrinfo_infer_protocols</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>ALL_NONNATIVE_AI_FLAGS</name> <operator>&amp;</operator> <name>ALL_NATIVE_AI_FLAGS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALL_NONNATIVE_AI_FLAGS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_np_hack</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_numeric_port_hack</name><argument_list>(<argument><expr><name>portnum</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>need_socktype_protocol_hack</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>apply_socktype_protocol_hack</name><argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>EVUTIL_EAI_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>port</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hints_in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>hints_in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>evutil_adjust_hints_for_addrconfig_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>evutil_getaddrinfo_common_</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>EVUTIL_EAI_NEED_RESOLVE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETHOSTBYNAME_R_6_ARG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name></type> <name>hostent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>gethostbyname_r</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hostent</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ent</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETHOSTBYNAME_R_5_ARG</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name></type> <name>hostent</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>gethostbyname_r</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hostent</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETHOSTBYNAME_R_3_ARG</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent_data</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name></type> <name>hostent</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>gethostbyname_r</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hostent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>hostent</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>h_errno</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TRY_AGAIN</name></expr>:</case>
<return>return <expr><name>EVUTIL_EAI_AGAIN</name></expr>;</return>
<case>case <expr><name>NO_RECOVERY</name></expr>:</case>
<default>default:</default>
<return>return <expr><name>EVUTIL_EAI_FAIL</name></expr>;</return>
<case>case <expr><name>HOST_NOT_FOUND</name></expr>:</case>
<return>return <expr><name>EVUTIL_EAI_NONAME</name></expr>;</return>
<case>case <expr><name>NO_ADDRESS</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NO_DATA</name> <operator>!=</operator> <name>NO_ADDRESS</name></expr></cpp:if>
<case>case <expr><name>NO_DATA</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>EVUTIL_EAI_NODATA</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>h_addrtype</name></name> <operator>!=</operator> <name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>&amp;&amp;</operator>
<name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>!=</operator> <name>PF_UNSPEC</name></expr>)</condition> <block>{<block_content>



<return>return <expr><name>EVUTIL_EAI_NONAME</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>h_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EVUTIL_EAI_NODATA</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>h_addrtype</name></name> <operator>!=</operator> <name>PF_INET</name> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>h_addrtype</name></name> <operator>!=</operator> <name>PF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EVUTIL_EAI_FAMILY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>addrinfo_from_hostent</name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>*</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EVUTIL_EAI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evutil_freeaddrinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>EVUTIL_AI_LIBEVENT_ALLOCATED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><name>ai</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>evdns_getaddrinfo_fn</name></type> <name>evdns_getaddrinfo_impl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>evdns_getaddrinfo_cancel_fn</name></type> <name>evdns_getaddrinfo_cancel_impl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>evutil_set_evdns_getaddrinfo_fn_</name><parameter_list>(<parameter><decl><type><name>evdns_getaddrinfo_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evdns_getaddrinfo_impl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>evdns_getaddrinfo_impl</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>evutil_set_evdns_getaddrinfo_cancel_fn_</name><parameter_list>(<parameter><decl><type><name>evdns_getaddrinfo_cancel_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evdns_getaddrinfo_cancel_impl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>evdns_getaddrinfo_cancel_impl</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>evutil_getaddrinfo_async_</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>hints_in</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dns_base</name> <operator>&amp;&amp;</operator> <name>evdns_getaddrinfo_impl</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>evdns_getaddrinfo_impl</name><argument_list>(
<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><name>hints_in</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><name>hints_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>evutil_getaddrinfo_cancel_async_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>evdns_getaddrinfo_cancel_impl</name> <operator>&amp;&amp;</operator> <name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_getaddrinfo_cancel_impl</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evutil_gai_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVUTIL_EAI_CANCEL</name></expr>:</case>
<return>return <expr><literal type="string">"Request canceled"</literal></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><literal type="string">"No error"</literal></expr>;</return>

<case>case <expr><name>EVUTIL_EAI_ADDRFAMILY</name></expr>:</case>
<return>return <expr><literal type="string">"address family for nodename not supported"</literal></expr>;</return>
<case>case <expr><name>EVUTIL_EAI_AGAIN</name></expr>:</case>
<return>return <expr><literal type="string">"temporary failure in name resolution"</literal></expr>;</return>
<case>case <expr><name>EVUTIL_EAI_BADFLAGS</name></expr>:</case>
<return>return <expr><literal type="string">"invalid value for ai_flags"</literal></expr>;</return>
<case>case <expr><name>EVUTIL_EAI_FAIL</name></expr>:</case>
<return>return <expr><literal type="string">"non-recoverable failure in name resolution"</literal></expr>;</return>
<case>case <expr><name>EVUTIL_EAI_FAMILY</name></expr>:</case>
<return>return <expr><literal type="string">"ai_family not supported"</literal></expr>;</return>
<case>case <expr><name>EVUTIL_EAI_MEMORY</name></expr>:</case>
<return>return <expr><literal type="string">"memory allocation failure"</literal></expr>;</return>
<case>case <expr><name>EVUTIL_EAI_NODATA</name></expr>:</case>
<return>return <expr><literal type="string">"no address associated with nodename"</literal></expr>;</return>
<case>case <expr><name>EVUTIL_EAI_NONAME</name></expr>:</case>
<return>return <expr><literal type="string">"nodename nor servname provided, or not known"</literal></expr>;</return>
<case>case <expr><name>EVUTIL_EAI_SERVICE</name></expr>:</case>
<return>return <expr><literal type="string">"servname not supported for ai_socktype"</literal></expr>;</return>
<case>case <expr><name>EVUTIL_EAI_SOCKTYPE</name></expr>:</case>
<return>return <expr><literal type="string">"ai_socktype not supported"</literal></expr>;</return>
<case>case <expr><name>EVUTIL_EAI_SYSTEM</name></expr>:</case>
<return>return <expr><literal type="string">"system error"</literal></expr>;</return>
<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NATIVE_GETADDRINFO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>gai_strerrorA</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NATIVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="string">"Unknown error code"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chomp</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>











<struct>struct <name>cached_sock_errs_entry</name> <block>{
<macro><name>HT_ENTRY</name><argument_list>(<argument>cached_sock_errs_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>node</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type>
<name>hash_cached_sock_errs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cached_sock_errs_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>h</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>*=</operator> <literal type="number">0x85ebca6b</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>*=</operator> <literal type="number">0xc2b2ae35</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>eq_cached_sock_errs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cached_sock_errs_entry</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cached_sock_errs_entry</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>windows_socket_errors_lock_</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><specifier>static</specifier> <macro><name>HT_HEAD</name><argument_list>(<argument>cached_sock_errs_map</argument>, <argument>cached_sock_errs_entry</argument>)</argument_list></macro>
<name>windows_socket_errors</name> <operator>=</operator> <call><name>HT_INITIALIZER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HT_PROTOTYPE</name><argument_list>(<argument><expr><name>cached_sock_errs_map</name></expr></argument>,
<argument><expr><name>cached_sock_errs_entry</name></expr></argument>,
<argument><expr><name>node</name></expr></argument>,
<argument><expr><name>hash_cached_sock_errs</name></expr></argument>,
<argument><expr><name>eq_cached_sock_errs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HT_GENERATE</name><argument_list>(<argument><expr><name>cached_sock_errs_map</name></expr></argument>,
<argument><expr><name>cached_sock_errs_entry</name></expr></argument>,
<argument><expr><name>node</name></expr></argument>,
<argument><expr><name>hash_cached_sock_errs</name></expr></argument>,
<argument><expr><name>eq_cached_sock_errs</name></expr></argument>,
<argument><expr><literal type="number">0.5</literal></expr></argument>,
<argument><expr><name>mm_malloc</name></expr></argument>,
<argument><expr><name>mm_realloc</name></expr></argument>,
<argument><expr><name>mm_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evutil_socket_error_to_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cached_sock_errs_entry</name></name> <modifier>*</modifier></type><name>errs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newerr</name></decl>, <decl><type ref="prev"/><name>find</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVLOCK_LOCK</name><argument_list>(<argument><expr><name>windows_socket_errors_lock_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>find</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>errcode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errs</name> <operator>=</operator> <call><name>HT_FIND</name><argument_list>(<argument><expr><name>cached_sock_errs_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>windows_socket_errors</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>errs</name><operator>-&gt;</operator><name>msg</name></name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>FormatMessageA</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>
<name>FORMAT_MESSAGE_IGNORE_INSERTS</name> <operator>|</operator>
<name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>errcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>chomp</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>LocalAlloc</name><argument_list>(<argument><expr><name>LMEM_FIXED</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"LocalAlloc failed during Winsock error"</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"winsock error 0x%08x"</literal></expr></argument>, <argument><expr><name>errcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>newerr</name> <operator>=</operator> <operator>(</operator>struct <name>cached_sock_errs_entry</name> <operator>*</operator><operator>)</operator>
<call><name>mm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>cached_sock_errs_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newerr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"malloc failed during Winsock error"</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>newerr</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>errcode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newerr</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HT_INSERT</name><argument_list>(<argument><expr><name>cached_sock_errs_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>windows_socket_errors</name></expr></argument>, <argument><expr><name>newerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name>windows_socket_errors_lock_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>msg</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>evutil_global_setup_locks_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>enable_locks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVTHREAD_SETUP_GLOBAL_LOCK</name><argument_list>(<argument><expr><name>windows_socket_errors_lock_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evutil_free_sock_err_globals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cached_sock_errs_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>errs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tofree</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>errs</name> <operator>=</operator> <call><name>HT_START</name><argument_list>(<argument><expr><name>cached_sock_errs_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>windows_socket_errors</name></expr></argument>)</argument_list></call></expr>
;</init> <condition><expr><name>errs</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>tofree</name> <operator>=</operator> <operator>*</operator><name>errs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errs</name> <operator>=</operator> <call><name>HT_NEXT_RMV</name><argument_list>(<argument><expr><name>cached_sock_errs_map</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>windows_socket_errors</name></expr></argument>,
<argument><expr><name>errs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name><name>tofree</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>HT_CLEAR</name><argument_list>(<argument><expr><name>cached_sock_errs_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>windows_socket_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>windows_socket_errors_lock_</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name>windows_socket_errors_lock_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>windows_socket_errors_lock_</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>evutil_global_setup_locks_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>enable_locks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evutil_free_sock_err_globals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>evutil_snprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_vsnprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buflen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_vscprintf</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sgi</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_xpg5_vsnprintf</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator> <name>__restrict</name></expr></argument>,
<argument><expr><name>__SGI_LIBC_NAMESPACE_QUALIFIER</name> <name>size_t</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <name>__restrict</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_xpg5_vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_INTERNAL_NTOP</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_INTERNAL_PTON</name></cpp:macro></cpp:define>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evutil_inet_ntop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_INET_NTOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_INTERNAL_NTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type> <name>a</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ev_uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ev_uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ev_uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">8</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ev_uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>r</name><operator>&gt;=</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>dst</name></expr>;</return></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>longestGapLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>longestGapPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>,
<decl><type ref="prev"/><name>curGapPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>curGapLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name><name>words</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>ev_uint16_t</name><operator>)</operator><name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>words</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>words</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>words</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>words</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>words</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>words</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>words</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xffff</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>words</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"::%d.%d.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"::%x:%d.%d.%d.%d"</literal></expr></argument>, <argument><expr><name><name>words</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curGapPos</name> <operator>=</operator> <name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curGapLen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>curGapLen</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>curGapLen</name> <operator>&gt;</operator> <name>longestGapLen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>longestGapPos</name> <operator>=</operator> <name>curGapPos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>longestGapLen</name> <operator>=</operator> <name>curGapLen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>longestGapLen</name><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>longestGapPos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>longestGapPos</name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><operator>(</operator><name>cp</name><operator>-</operator><name>buf</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_inet_pton</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_INET_PTON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_INTERNAL_PTON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>more</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"%u.%u.%u.%u%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>more</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>a</name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name><name>words</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gapPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>setWords</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dot</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eow</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>==</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>dot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eow</name> <operator>=</operator> <name>src</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>byte1</name></decl>,<decl><type ref="prev"/><name>byte2</name></decl>,<decl><type ref="prev"/><name>byte3</name></decl>,<decl><type ref="prev"/><name>byte4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>more</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>eow</name> <operator>=</operator> <name>dot</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>eow</name> <operator>&gt;=</operator> <name>src</name> <operator>&amp;&amp;</operator> <call><name>EVUTIL_ISDIGIT_</name><argument_list>(<argument><expr><operator>*</operator><name>eow</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>--</operator><name>eow</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><operator>++</operator><name>eow</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>eow</name></expr></argument>, <argument><expr><literal type="string">"%u.%u.%u.%u%c"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>byte1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>byte2</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>byte3</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>byte4</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>more</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>byte1</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator>
<name>byte2</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator>
<name>byte3</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator>
<name>byte4</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>words</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte1</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>byte2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>words</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte3</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>byte4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>setWords</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>eow</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ISXDIGIT_</name><argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>r</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>+</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>r</name></expr></argument>&gt;</argument_list></name><literal type="number">65536</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ev_uint16_t</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>setWords</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>!=</operator> <name>eow</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>gapPos</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gapPos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name>gapPos</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gapPos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>setWords</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>||</operator>
<operator>(</operator><name>setWords</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>gapPos</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>setWords</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>gapPos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gapPos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nToMove</name> <init>= <expr><name>setWords</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>dot</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>-</operator> <name>gapPos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gapLen</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>setWords</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nToMove</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>words</name><index>[<expr><name>gapPos</name><operator>+</operator><name>gapLen</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>words</name><index>[<expr><name>gapPos</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ev_uint16_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nToMove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>words</name><index>[<expr><name>gapPos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ev_uint16_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>gapLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_parse_sockaddr_port</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip_as_string</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addr_part</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>port_part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_ipv6</name></decl>;</decl_stmt>








<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ip_as_string</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ip_as_string</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ip_as_string</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator> <name>cp</name><operator>-</operator><operator>(</operator><name>ip_as_string</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ip_as_string</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addr_part</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port_part</name> <operator>=</operator> <name>cp</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>port_part</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>is_ipv6</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cp</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_ipv6</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addr_part</name> <operator>=</operator> <name>ip_as_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name>port_part</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_ipv6</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>-</operator> <name>ip_as_string</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ip_as_string</name></expr></argument>, <argument><expr><name>cp</name><operator>-</operator><name>ip_as_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>cp</name><operator>-</operator><name>ip_as_string</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addr_part</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>port_part</name> <operator>=</operator> <name>cp</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>addr_part</name> <operator>=</operator> <name>ip_as_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name>port_part</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_ipv6</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>port_part</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>port_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>port</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr_part</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_ipv6</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sin6</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STRUCT_SOCKADDR_IN6_SIN6_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>evutil_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>addr_part</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <operator>*</operator><name>outlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>*</operator><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sin6</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>evutil_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>addr_part</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <operator>*</operator><name>outlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>*</operator><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evutil_format_sockaddr_port_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evutil_inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sin6</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evutil_inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"[%s]:%d"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"&lt;addr with socktype %d&gt;"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evutil_sockaddr_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>include_port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>r</name> <operator>=</operator> <operator>(</operator><name><name>sa1</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>-</operator> <name><name>sa2</name><operator>-&gt;</operator><name>sa_family</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sa1</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sin2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sin1</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sin2</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sin1</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>&lt;</operator> <name><name>sin2</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sin1</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;</operator> <name><name>sin2</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>include_port</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>sin1</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>sin2</name><operator>-&gt;</operator><name>sin_port</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>sa1</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sin1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sin2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sin1</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sin2</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>sin1</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><name><name>sin2</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>include_port</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>sin1</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>sin2</name><operator>-&gt;</operator><name>sin6_port</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ev_uint32_t</name></type> <name><name>EVUTIL_ISALPHA_TABLE</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffe</literal></expr>, <expr><literal type="number">0x7fffffe</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ev_uint32_t</name></type> <name><name>EVUTIL_ISALNUM_TABLE</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x3ff0000</literal></expr>, <expr><literal type="number">0x7fffffe</literal></expr>, <expr><literal type="number">0x7fffffe</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ev_uint32_t</name></type> <name><name>EVUTIL_ISSPACE_TABLE</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x3e00</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ev_uint32_t</name></type> <name><name>EVUTIL_ISXDIGIT_TABLE</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x3ff0000</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ev_uint32_t</name></type> <name><name>EVUTIL_ISDIGIT_TABLE</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x3ff0000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ev_uint32_t</name></type> <name><name>EVUTIL_ISPRINT_TABLE</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ev_uint32_t</name></type> <name><name>EVUTIL_ISUPPER_TABLE</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffe</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ev_uint32_t</name></type> <name><name>EVUTIL_ISLOWER_TABLE</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffe</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>EVUTIL_TOUPPER_TABLE</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,
<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,
<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">37</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">39</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">41</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">43</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">45</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">47</literal></expr>,
<expr><literal type="number">48</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">50</literal></expr>,<expr><literal type="number">51</literal></expr>,<expr><literal type="number">52</literal></expr>,<expr><literal type="number">53</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">55</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">59</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">61</literal></expr>,<expr><literal type="number">62</literal></expr>,<expr><literal type="number">63</literal></expr>,
<expr><literal type="number">64</literal></expr>,<expr><literal type="number">65</literal></expr>,<expr><literal type="number">66</literal></expr>,<expr><literal type="number">67</literal></expr>,<expr><literal type="number">68</literal></expr>,<expr><literal type="number">69</literal></expr>,<expr><literal type="number">70</literal></expr>,<expr><literal type="number">71</literal></expr>,<expr><literal type="number">72</literal></expr>,<expr><literal type="number">73</literal></expr>,<expr><literal type="number">74</literal></expr>,<expr><literal type="number">75</literal></expr>,<expr><literal type="number">76</literal></expr>,<expr><literal type="number">77</literal></expr>,<expr><literal type="number">78</literal></expr>,<expr><literal type="number">79</literal></expr>,
<expr><literal type="number">80</literal></expr>,<expr><literal type="number">81</literal></expr>,<expr><literal type="number">82</literal></expr>,<expr><literal type="number">83</literal></expr>,<expr><literal type="number">84</literal></expr>,<expr><literal type="number">85</literal></expr>,<expr><literal type="number">86</literal></expr>,<expr><literal type="number">87</literal></expr>,<expr><literal type="number">88</literal></expr>,<expr><literal type="number">89</literal></expr>,<expr><literal type="number">90</literal></expr>,<expr><literal type="number">91</literal></expr>,<expr><literal type="number">92</literal></expr>,<expr><literal type="number">93</literal></expr>,<expr><literal type="number">94</literal></expr>,<expr><literal type="number">95</literal></expr>,
<expr><literal type="number">96</literal></expr>,<expr><literal type="number">65</literal></expr>,<expr><literal type="number">66</literal></expr>,<expr><literal type="number">67</literal></expr>,<expr><literal type="number">68</literal></expr>,<expr><literal type="number">69</literal></expr>,<expr><literal type="number">70</literal></expr>,<expr><literal type="number">71</literal></expr>,<expr><literal type="number">72</literal></expr>,<expr><literal type="number">73</literal></expr>,<expr><literal type="number">74</literal></expr>,<expr><literal type="number">75</literal></expr>,<expr><literal type="number">76</literal></expr>,<expr><literal type="number">77</literal></expr>,<expr><literal type="number">78</literal></expr>,<expr><literal type="number">79</literal></expr>,
<expr><literal type="number">80</literal></expr>,<expr><literal type="number">81</literal></expr>,<expr><literal type="number">82</literal></expr>,<expr><literal type="number">83</literal></expr>,<expr><literal type="number">84</literal></expr>,<expr><literal type="number">85</literal></expr>,<expr><literal type="number">86</literal></expr>,<expr><literal type="number">87</literal></expr>,<expr><literal type="number">88</literal></expr>,<expr><literal type="number">89</literal></expr>,<expr><literal type="number">90</literal></expr>,<expr><literal type="number">123</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">125</literal></expr>,<expr><literal type="number">126</literal></expr>,<expr><literal type="number">127</literal></expr>,
<expr><literal type="number">128</literal></expr>,<expr><literal type="number">129</literal></expr>,<expr><literal type="number">130</literal></expr>,<expr><literal type="number">131</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">133</literal></expr>,<expr><literal type="number">134</literal></expr>,<expr><literal type="number">135</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">137</literal></expr>,<expr><literal type="number">138</literal></expr>,<expr><literal type="number">139</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">141</literal></expr>,<expr><literal type="number">142</literal></expr>,<expr><literal type="number">143</literal></expr>,
<expr><literal type="number">144</literal></expr>,<expr><literal type="number">145</literal></expr>,<expr><literal type="number">146</literal></expr>,<expr><literal type="number">147</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">149</literal></expr>,<expr><literal type="number">150</literal></expr>,<expr><literal type="number">151</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">153</literal></expr>,<expr><literal type="number">154</literal></expr>,<expr><literal type="number">155</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">157</literal></expr>,<expr><literal type="number">158</literal></expr>,<expr><literal type="number">159</literal></expr>,
<expr><literal type="number">160</literal></expr>,<expr><literal type="number">161</literal></expr>,<expr><literal type="number">162</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">165</literal></expr>,<expr><literal type="number">166</literal></expr>,<expr><literal type="number">167</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">169</literal></expr>,<expr><literal type="number">170</literal></expr>,<expr><literal type="number">171</literal></expr>,<expr><literal type="number">172</literal></expr>,<expr><literal type="number">173</literal></expr>,<expr><literal type="number">174</literal></expr>,<expr><literal type="number">175</literal></expr>,
<expr><literal type="number">176</literal></expr>,<expr><literal type="number">177</literal></expr>,<expr><literal type="number">178</literal></expr>,<expr><literal type="number">179</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">181</literal></expr>,<expr><literal type="number">182</literal></expr>,<expr><literal type="number">183</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">185</literal></expr>,<expr><literal type="number">186</literal></expr>,<expr><literal type="number">187</literal></expr>,<expr><literal type="number">188</literal></expr>,<expr><literal type="number">189</literal></expr>,<expr><literal type="number">190</literal></expr>,<expr><literal type="number">191</literal></expr>,
<expr><literal type="number">192</literal></expr>,<expr><literal type="number">193</literal></expr>,<expr><literal type="number">194</literal></expr>,<expr><literal type="number">195</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">197</literal></expr>,<expr><literal type="number">198</literal></expr>,<expr><literal type="number">199</literal></expr>,<expr><literal type="number">200</literal></expr>,<expr><literal type="number">201</literal></expr>,<expr><literal type="number">202</literal></expr>,<expr><literal type="number">203</literal></expr>,<expr><literal type="number">204</literal></expr>,<expr><literal type="number">205</literal></expr>,<expr><literal type="number">206</literal></expr>,<expr><literal type="number">207</literal></expr>,
<expr><literal type="number">208</literal></expr>,<expr><literal type="number">209</literal></expr>,<expr><literal type="number">210</literal></expr>,<expr><literal type="number">211</literal></expr>,<expr><literal type="number">212</literal></expr>,<expr><literal type="number">213</literal></expr>,<expr><literal type="number">214</literal></expr>,<expr><literal type="number">215</literal></expr>,<expr><literal type="number">216</literal></expr>,<expr><literal type="number">217</literal></expr>,<expr><literal type="number">218</literal></expr>,<expr><literal type="number">219</literal></expr>,<expr><literal type="number">220</literal></expr>,<expr><literal type="number">221</literal></expr>,<expr><literal type="number">222</literal></expr>,<expr><literal type="number">223</literal></expr>,
<expr><literal type="number">224</literal></expr>,<expr><literal type="number">225</literal></expr>,<expr><literal type="number">226</literal></expr>,<expr><literal type="number">227</literal></expr>,<expr><literal type="number">228</literal></expr>,<expr><literal type="number">229</literal></expr>,<expr><literal type="number">230</literal></expr>,<expr><literal type="number">231</literal></expr>,<expr><literal type="number">232</literal></expr>,<expr><literal type="number">233</literal></expr>,<expr><literal type="number">234</literal></expr>,<expr><literal type="number">235</literal></expr>,<expr><literal type="number">236</literal></expr>,<expr><literal type="number">237</literal></expr>,<expr><literal type="number">238</literal></expr>,<expr><literal type="number">239</literal></expr>,
<expr><literal type="number">240</literal></expr>,<expr><literal type="number">241</literal></expr>,<expr><literal type="number">242</literal></expr>,<expr><literal type="number">243</literal></expr>,<expr><literal type="number">244</literal></expr>,<expr><literal type="number">245</literal></expr>,<expr><literal type="number">246</literal></expr>,<expr><literal type="number">247</literal></expr>,<expr><literal type="number">248</literal></expr>,<expr><literal type="number">249</literal></expr>,<expr><literal type="number">250</literal></expr>,<expr><literal type="number">251</literal></expr>,<expr><literal type="number">252</literal></expr>,<expr><literal type="number">253</literal></expr>,<expr><literal type="number">254</literal></expr>,<expr><literal type="number">255</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>EVUTIL_TOLOWER_TABLE</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,
<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,
<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">37</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">39</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">41</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">43</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">45</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">47</literal></expr>,
<expr><literal type="number">48</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">50</literal></expr>,<expr><literal type="number">51</literal></expr>,<expr><literal type="number">52</literal></expr>,<expr><literal type="number">53</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">55</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">59</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">61</literal></expr>,<expr><literal type="number">62</literal></expr>,<expr><literal type="number">63</literal></expr>,
<expr><literal type="number">64</literal></expr>,<expr><literal type="number">97</literal></expr>,<expr><literal type="number">98</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">102</literal></expr>,<expr><literal type="number">103</literal></expr>,<expr><literal type="number">104</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">106</literal></expr>,<expr><literal type="number">107</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">109</literal></expr>,<expr><literal type="number">110</literal></expr>,<expr><literal type="number">111</literal></expr>,
<expr><literal type="number">112</literal></expr>,<expr><literal type="number">113</literal></expr>,<expr><literal type="number">114</literal></expr>,<expr><literal type="number">115</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">117</literal></expr>,<expr><literal type="number">118</literal></expr>,<expr><literal type="number">119</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">121</literal></expr>,<expr><literal type="number">122</literal></expr>,<expr><literal type="number">91</literal></expr>,<expr><literal type="number">92</literal></expr>,<expr><literal type="number">93</literal></expr>,<expr><literal type="number">94</literal></expr>,<expr><literal type="number">95</literal></expr>,
<expr><literal type="number">96</literal></expr>,<expr><literal type="number">97</literal></expr>,<expr><literal type="number">98</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">102</literal></expr>,<expr><literal type="number">103</literal></expr>,<expr><literal type="number">104</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">106</literal></expr>,<expr><literal type="number">107</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">109</literal></expr>,<expr><literal type="number">110</literal></expr>,<expr><literal type="number">111</literal></expr>,
<expr><literal type="number">112</literal></expr>,<expr><literal type="number">113</literal></expr>,<expr><literal type="number">114</literal></expr>,<expr><literal type="number">115</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">117</literal></expr>,<expr><literal type="number">118</literal></expr>,<expr><literal type="number">119</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">121</literal></expr>,<expr><literal type="number">122</literal></expr>,<expr><literal type="number">123</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">125</literal></expr>,<expr><literal type="number">126</literal></expr>,<expr><literal type="number">127</literal></expr>,
<expr><literal type="number">128</literal></expr>,<expr><literal type="number">129</literal></expr>,<expr><literal type="number">130</literal></expr>,<expr><literal type="number">131</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">133</literal></expr>,<expr><literal type="number">134</literal></expr>,<expr><literal type="number">135</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">137</literal></expr>,<expr><literal type="number">138</literal></expr>,<expr><literal type="number">139</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">141</literal></expr>,<expr><literal type="number">142</literal></expr>,<expr><literal type="number">143</literal></expr>,
<expr><literal type="number">144</literal></expr>,<expr><literal type="number">145</literal></expr>,<expr><literal type="number">146</literal></expr>,<expr><literal type="number">147</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">149</literal></expr>,<expr><literal type="number">150</literal></expr>,<expr><literal type="number">151</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">153</literal></expr>,<expr><literal type="number">154</literal></expr>,<expr><literal type="number">155</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">157</literal></expr>,<expr><literal type="number">158</literal></expr>,<expr><literal type="number">159</literal></expr>,
<expr><literal type="number">160</literal></expr>,<expr><literal type="number">161</literal></expr>,<expr><literal type="number">162</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">165</literal></expr>,<expr><literal type="number">166</literal></expr>,<expr><literal type="number">167</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">169</literal></expr>,<expr><literal type="number">170</literal></expr>,<expr><literal type="number">171</literal></expr>,<expr><literal type="number">172</literal></expr>,<expr><literal type="number">173</literal></expr>,<expr><literal type="number">174</literal></expr>,<expr><literal type="number">175</literal></expr>,
<expr><literal type="number">176</literal></expr>,<expr><literal type="number">177</literal></expr>,<expr><literal type="number">178</literal></expr>,<expr><literal type="number">179</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">181</literal></expr>,<expr><literal type="number">182</literal></expr>,<expr><literal type="number">183</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">185</literal></expr>,<expr><literal type="number">186</literal></expr>,<expr><literal type="number">187</literal></expr>,<expr><literal type="number">188</literal></expr>,<expr><literal type="number">189</literal></expr>,<expr><literal type="number">190</literal></expr>,<expr><literal type="number">191</literal></expr>,
<expr><literal type="number">192</literal></expr>,<expr><literal type="number">193</literal></expr>,<expr><literal type="number">194</literal></expr>,<expr><literal type="number">195</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">197</literal></expr>,<expr><literal type="number">198</literal></expr>,<expr><literal type="number">199</literal></expr>,<expr><literal type="number">200</literal></expr>,<expr><literal type="number">201</literal></expr>,<expr><literal type="number">202</literal></expr>,<expr><literal type="number">203</literal></expr>,<expr><literal type="number">204</literal></expr>,<expr><literal type="number">205</literal></expr>,<expr><literal type="number">206</literal></expr>,<expr><literal type="number">207</literal></expr>,
<expr><literal type="number">208</literal></expr>,<expr><literal type="number">209</literal></expr>,<expr><literal type="number">210</literal></expr>,<expr><literal type="number">211</literal></expr>,<expr><literal type="number">212</literal></expr>,<expr><literal type="number">213</literal></expr>,<expr><literal type="number">214</literal></expr>,<expr><literal type="number">215</literal></expr>,<expr><literal type="number">216</literal></expr>,<expr><literal type="number">217</literal></expr>,<expr><literal type="number">218</literal></expr>,<expr><literal type="number">219</literal></expr>,<expr><literal type="number">220</literal></expr>,<expr><literal type="number">221</literal></expr>,<expr><literal type="number">222</literal></expr>,<expr><literal type="number">223</literal></expr>,
<expr><literal type="number">224</literal></expr>,<expr><literal type="number">225</literal></expr>,<expr><literal type="number">226</literal></expr>,<expr><literal type="number">227</literal></expr>,<expr><literal type="number">228</literal></expr>,<expr><literal type="number">229</literal></expr>,<expr><literal type="number">230</literal></expr>,<expr><literal type="number">231</literal></expr>,<expr><literal type="number">232</literal></expr>,<expr><literal type="number">233</literal></expr>,<expr><literal type="number">234</literal></expr>,<expr><literal type="number">235</literal></expr>,<expr><literal type="number">236</literal></expr>,<expr><literal type="number">237</literal></expr>,<expr><literal type="number">238</literal></expr>,<expr><literal type="number">239</literal></expr>,
<expr><literal type="number">240</literal></expr>,<expr><literal type="number">241</literal></expr>,<expr><literal type="number">242</literal></expr>,<expr><literal type="number">243</literal></expr>,<expr><literal type="number">244</literal></expr>,<expr><literal type="number">245</literal></expr>,<expr><literal type="number">246</literal></expr>,<expr><literal type="number">247</literal></expr>,<expr><literal type="number">248</literal></expr>,<expr><literal type="number">249</literal></expr>,<expr><literal type="number">250</literal></expr>,<expr><literal type="number">251</literal></expr>,<expr><literal type="number">252</literal></expr>,<expr><literal type="number">253</literal></expr>,<expr><literal type="number">254</literal></expr>,<expr><literal type="number">255</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPL_CTYPE_FN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int EVUTIL_##name##_(char c) { ev_uint8_t u = c; return !!(EVUTIL_##name##_TABLE[(u &gt;&gt; 5) &amp; 7] &amp; (1 &lt;&lt; (u &amp; 31))); }</cpp:value></cpp:define>




<macro><name>IMPL_CTYPE_FN</name><argument_list>(<argument>ISALPHA</argument>)</argument_list></macro>
<macro><name>IMPL_CTYPE_FN</name><argument_list>(<argument>ISALNUM</argument>)</argument_list></macro>
<macro><name>IMPL_CTYPE_FN</name><argument_list>(<argument>ISSPACE</argument>)</argument_list></macro>
<macro><name>IMPL_CTYPE_FN</name><argument_list>(<argument>ISDIGIT</argument>)</argument_list></macro>
<macro><name>IMPL_CTYPE_FN</name><argument_list>(<argument>ISXDIGIT</argument>)</argument_list></macro>
<macro><name>IMPL_CTYPE_FN</name><argument_list>(<argument>ISPRINT</argument>)</argument_list></macro>
<macro><name>IMPL_CTYPE_FN</name><argument_list>(<argument>ISLOWER</argument>)</argument_list></macro>
<macro><name>IMPL_CTYPE_FN</name><argument_list>(<argument>ISUPPER</argument>)</argument_list></macro>

<function><type><name>char</name></type> <name>EVUTIL_TOLOWER_</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>char</name><operator>)</operator><name><name>EVUTIL_TOLOWER_TABLE</name><index>[<expr><operator>(</operator><name>ev_uint8_t</name><operator>)</operator><name>c</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>char</name></type> <name>EVUTIL_TOUPPER_</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>char</name><operator>)</operator><name><name>EVUTIL_TOUPPER_TABLE</name><index>[<expr><operator>(</operator><name>ev_uint8_t</name><operator>)</operator><name>c</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>evutil_ascii_strcasecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>EVUTIL_TOLOWER_</name><argument_list>(<argument><expr><operator>*</operator><name>s1</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>EVUTIL_TOLOWER_</name><argument_list>(<argument><expr><operator>*</operator><name>s2</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&lt;</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&gt;</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>evutil_ascii_strncasecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>EVUTIL_TOLOWER_</name><argument_list>(<argument><expr><operator>*</operator><name>s1</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>EVUTIL_TOLOWER_</name><argument_list>(<argument><expr><operator>*</operator><name>s2</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&lt;</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&gt;</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evutil_rtrim_lws_</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>cp</name> <operator>==</operator> <name>str</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>cp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>cp</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>evutil_issetugid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_ISSETUGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>issetugid</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETEUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>getuid</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>geteuid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_GETEGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>getgid</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>getegid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>evutil_getenv_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_issetugid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>getenv</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ev_uint32_t</name></type>
<name>evutil_weakrand_seed_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_weakrand_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>seed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <operator>(</operator><name>ev_uint32_t</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <operator>(</operator><name>ev_uint32_t</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>seed</name> <operator>+=</operator> <operator>(</operator><name>ev_uint32_t</name><operator>)</operator> <call><name>_getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>seed</name> <operator>+=</operator> <operator>(</operator><name>ev_uint32_t</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
<return>return <expr><name>seed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ev_int32_t</name></type>
<name>evutil_weakrand_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_weakrand_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>seed</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1103515245</literal> <operator>+</operator> <literal type="number">12345</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ev_int32_t</name><operator>)</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>seed</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ev_int32_t</name></type>
<name>evutil_weakrand_range_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_weakrand_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ev_int32_t</name></type> <name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_int32_t</name></type> <name>divisor</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>





<expr_stmt><expr><name>divisor</name> <operator>=</operator> <name>EVUTIL_WEAKRAND_MAX</name> <operator>/</operator> <name>top</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>evutil_weakrand_</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>divisor</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>result</name> <operator>&gt;=</operator> <name>top</name></expr>)</condition>;</do>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<expr_stmt><expr><call><call><name>void</name> <argument_list>* <argument><expr><operator>(</operator><operator>*</operator><specifier>volatile</specifier> <name>evutil_memset_volatile_</name><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>size_t</name><operator>)</operator> <operator>=</operator> <name>memset</name></expr></argument>;

<argument><expr><name>void</name>
<macro><name>evutil_memclear_</name><argument_list>(<argument>void *mem</argument>, <argument>size_t len</argument>)</argument_list></macro>
<block>{
<expr><call><name>evutil_memset_volatile_</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>int</name>
<macro><name>evutil_sockaddr_is_loopback_</name><argument_list>(<argument>const struct sockaddr *addr</argument>)</argument_list></macro>
<block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <name><name>LOOPBACK_S6</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator>
<literal type="string">"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1"</literal></expr>;
<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier><name>sin</name></type> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7f000000</literal></expr>;</return>
<expr_stmt/>}</block_content> else if (addr-&gt;sa_family == AF_INET6</block></if></if_stmt>) <block>{
struct <expr><name>sockaddr_in6</name> <operator>*</operator><name>sin6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>addr</name></expr>;
<return>return <expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><name>LOOPBACK_S6</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></block></expr></argument>
<return>return <expr><literal type="number">0</literal></expr>;</return></argument_list></call></call></expr></expr_stmt>
}

int
<macro><name>evutil_hex_char_to_int_</name><argument_list>(<argument>char c</argument>)</argument_list></macro>
<block>{<block_content>
<switch>switch<condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="char">'1'</literal></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'2'</literal></expr>:</case> <return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><literal type="char">'3'</literal></expr>:</case> <return>return <expr><literal type="number">3</literal></expr>;</return>
<case>case <expr><literal type="char">'4'</literal></expr>:</case> <return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <return>return <expr><literal type="number">5</literal></expr>;</return>
<case>case <expr><literal type="char">'6'</literal></expr>:</case> <return>return <expr><literal type="number">6</literal></expr>;</return>
<case>case <expr><literal type="char">'7'</literal></expr>:</case> <return>return <expr><literal type="number">7</literal></expr>;</return>
<case>case <expr><literal type="char">'8'</literal></expr>:</case> <return>return <expr><literal type="number">8</literal></expr>;</return>
<case>case <expr><literal type="char">'9'</literal></expr>:</case> <return>return <expr><literal type="number">9</literal></expr>;</return>
<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'a'</literal></expr>:</case> <return>return <expr><literal type="number">10</literal></expr>;</return>
<case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <return>return <expr><literal type="number">11</literal></expr>;</return>
<case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <return>return <expr><literal type="number">12</literal></expr>;</return>
<case>case <expr><literal type="char">'D'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case> <return>return <expr><literal type="number">13</literal></expr>;</return>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case> <return>return <expr><literal type="number">14</literal></expr>;</return>
<case>case <expr><literal type="char">'F'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case> <return>return <expr><literal type="number">15</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>HMODULE</name></type>
<name>evutil_load_windows_system_library_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>library_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>GetSystemDirectory</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>+</operator> <call><name>_tcslen</name><argument_list>(<argument><expr><name>library_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>MAX_PATH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_tcscat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_tcscat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>library_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>LoadLibrary</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><name>evutil_socket_t</name></type>
<name>evutil_socket_</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOCK_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SOCK_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>SOCK_NONBLOCK</name><operator>|</operator><name>SOCK_CLOEXEC</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET_TYPE_MASK</name></cpp:macro> <cpp:value>(~(EVUTIL_SOCK_NONBLOCK|EVUTIL_SOCK_CLOEXEC))</cpp:value></cpp:define>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>type</name> <operator>&amp;</operator> <name>SOCKET_TYPE_MASK</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>EVUTIL_SOCK_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_fast_socket_nonblocking</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>EVUTIL_SOCK_CLOEXEC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_fast_socket_closeonexec</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>evutil_socket_t</name></type>
<name>evutil_accept4_</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>ev_socklen_t</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>result</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_ACCEPT4</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SOCK_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SOCK_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>accept4</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <name>EINVAL</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOSYS</name><operator>)</operator></expr>)</condition> <block>{<block_content>





<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EVUTIL_SOCK_CLOEXEC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_fast_socket_closeonexec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EVUTIL_SOCK_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_fast_socket_nonblocking</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>evutil_make_internal_pipe_</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name><name>fd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_PIPE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>pipe2</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name><operator>|</operator><name>O_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_PIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_fast_socket_nonblocking</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>evutil_fast_socket_nonblocking</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>evutil_fast_socket_closeonexec</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>evutil_fast_socket_closeonexec</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: pipe"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_SOCKETPAIR_AF</name></cpp:macro> <cpp:value>AF_INET</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_SOCKETPAIR_AF</name></cpp:macro> <cpp:value>AF_UNIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>evutil_socketpair</name><argument_list>(<argument><expr><name>LOCAL_SOCKETPAIR_AF</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_fast_socket_nonblocking</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>evutil_fast_socket_nonblocking</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>evutil_fast_socket_closeonexec</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>evutil_fast_socket_closeonexec</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>evutil_socket_t</name></type>
<name>evutil_eventfd_</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>initval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_EVENTFD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_EVENTFD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EFD_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EFD_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>eventfd</name><argument_list>(<argument><expr><name>initval</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>flags</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>eventfd</name><argument_list>(<argument><expr><name>initval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EVUTIL_EFD_CLOEXEC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_fast_socket_closeonexec</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EVUTIL_EFD_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_fast_socket_nonblocking</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evutil_free_globals_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evutil_free_secure_rng_globals_</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_free_sock_err_globals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
