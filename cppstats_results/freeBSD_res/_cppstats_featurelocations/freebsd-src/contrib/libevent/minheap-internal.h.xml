<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/minheap-internal.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MINHEAP_INTERNAL_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINHEAP_INTERNAL_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>min_heap</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>, <name>a</name>;</decl_stmt>
}</block></struct></type> <name>min_heap_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>min_heap_ctor_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>min_heap_dtor_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>min_heap_elem_init_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>min_heap_elt_is_top_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>min_heap_empty_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>min_heap_size_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>min_heap_top_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>min_heap_reserve_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>min_heap_push_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>min_heap_pop_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>min_heap_adjust_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>min_heap_erase_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>min_heap_shift_up_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>hole_index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>min_heap_shift_up_unconditional_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>hole_index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>min_heap_shift_down_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>hole_index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min_heap_elem_greater</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(evutil_timercmp(&amp;(a)-&gt;ev_timeout, &amp;(b)-&gt;ev_timeout, &gt;))</cpp:value></cpp:define>


<function><type><name>void</name></type> <name>min_heap_ctor_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>min_heap_dtor_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>min_heap_elem_init_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>int</name></type> <name>min_heap_empty_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0u</literal> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>unsigned</name></type> <name>min_heap_size_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>min_heap_top_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr> ?</condition><then> <expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>min_heap_push_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>min_heap_reserve_</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>min_heap_shift_up_</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>min_heap_pop_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name> <init>= <expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>min_heap_shift_down_</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0u</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><operator>--</operator><name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>min_heap_elt_is_top_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>min_heap_erase_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><operator>--</operator><name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>min_heap_elem_greater</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>parent</name></expr>]</index></name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>min_heap_shift_up_unconditional_</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>min_heap_shift_down_</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>min_heap_adjust_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>min_heap_push_</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>min_heap_elem_greater</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>parent</name></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>min_heap_shift_up_unconditional_</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>min_heap_shift_down_</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>min_heap_reserve_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>a</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>a</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>a</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>a</name></name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>event</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>min_heap_shift_up_unconditional_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>hole_index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name>hole_index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>hole_index</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>parent</name></expr>]</index></name><operator>)</operator><operator>-&gt;</operator><name><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>=</operator> <name>hole_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hole_index</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <operator>(</operator><name>hole_index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>hole_index</name> <operator>&amp;&amp;</operator> <call><name>min_heap_elem_greater</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>parent</name></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>hole_index</name></expr>]</index></name> <operator>=</operator> <name>e</name><operator>)</operator><operator>-&gt;</operator><name><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>=</operator> <name>hole_index</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>min_heap_shift_up_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>hole_index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name>hole_index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>hole_index</name> <operator>&amp;&amp;</operator> <call><name>min_heap_elem_greater</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>parent</name></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>hole_index</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>parent</name></expr>]</index></name><operator>)</operator><operator>-&gt;</operator><name><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>=</operator> <name>hole_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hole_index</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <operator>(</operator><name>hole_index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>hole_index</name></expr>]</index></name> <operator>=</operator> <name>e</name><operator>)</operator><operator>-&gt;</operator><name><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>=</operator> <name>hole_index</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>min_heap_shift_down_</name><parameter_list>(<parameter><decl><type><name>min_heap_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>hole_index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>min_child</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>hole_index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>min_child</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>min_child</name> <operator>-=</operator> <name>min_child</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>n</name></name> <operator>||</operator> <call><name>min_heap_elem_greater</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>min_child</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>min_child</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>min_heap_elem_greater</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>min_child</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>hole_index</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>min_child</name></expr>]</index></name><operator>)</operator><operator>-&gt;</operator><name><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>=</operator> <name>hole_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hole_index</name> <operator>=</operator> <name>min_child</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min_child</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>hole_index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>hole_index</name></expr>]</index></name> <operator>=</operator> <name>e</name><operator>)</operator><operator>-&gt;</operator><name><name>ev_timeout_pos</name><operator>.</operator><name>min_heap_idx</name></name> <operator>=</operator> <name>hole_index</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
