<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/iocp-internal.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IOCP_INTERNAL_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCP_INTERNAL_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>event_overlapped</name>;</struct_decl>
<struct_decl>struct <name>event_iocp_port</name>;</struct_decl>
<struct_decl>struct <name>evbuffer</name>;</struct_decl>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>iocp_callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uintptr_t</name></type></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>success</name></decl></parameter>)</parameter_list>;</function_decl></typedef>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>








<struct>struct <name>event_overlapped</name> <block>{
<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>overlapped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iocp_callback</name></type> <name>cb</name></decl>;</decl_stmt>
}</block>;</struct>



<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>AcceptExPtr</name>)<parameter_list>(<parameter><decl><type><name>SOCKET</name></type></decl></parameter>, <parameter><decl><type><name>SOCKET</name></type></decl></parameter>, <parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>LPDWORD</name></type></decl></parameter>, <parameter><decl><type><name>LPOVERLAPPED</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>ConnectExPtr</name>)<parameter_list>(<parameter><decl><type><name>SOCKET</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>LPDWORD</name></type></decl></parameter>, <parameter><decl><type><name>LPOVERLAPPED</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>GetAcceptExSockaddrsPtr</name>)<parameter_list>(<parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>LPSOCKADDR</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>LPINT</name></type></decl></parameter>, <parameter><decl><type><name>LPSOCKADDR</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>LPINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




<struct>struct <name>win32_extension_fns</name> <block>{
<decl_stmt><decl><type><name>AcceptExPtr</name></type> <name>AcceptEx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConnectExPtr</name></type> <name>ConnectEx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetAcceptExSockaddrsPtr</name></type> <name>GetAcceptExSockaddrs</name></decl>;</decl_stmt>
}</block>;</struct>





<struct>struct <name>event_iocp_port</name> <block>{

<decl_stmt><decl><type><name>HANDLE</name></type> <name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>n_threads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>shutdown</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>long</name></type> <name>ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>n_live_threads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>shutdownSemaphore</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>win32_extension_fns</name></name> <modifier>*</modifier></type><name>event_get_win32_extension_fns_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<struct>struct <name>event_overlapped</name> <block>{
<decl_stmt><decl><type><name>iocp_callback</name></type> <name>cb</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function_decl><type><name>void</name></type> <name>event_overlapped_init_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>iocp_callback</name></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuffer_overlapped_new_</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>evutil_socket_t</name></type> <name>evbuffer_overlapped_get_fd_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>evbuffer_overlapped_set_fd_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> <name>evbuffer_launch_read_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>ol</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> <name>evbuffer_launch_write_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>ol</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>evbuffer_commit_read_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evbuffer_commit_write_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>event_iocp_port_launch_</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n_cpus</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>event_iocp_port_associate_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>ev_uintptr_t</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>event_iocp_shutdown_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>waitMsec</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>event_iocp_activate_overlapped_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><name>ev_uintptr_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type> <name>n_bytes</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>event_base</name>;</struct_decl>

<function_decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>event_base_get_iocp_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>event_base_start_iocp_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_cpus</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>event_base_stop_iocp_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufferevent_async_new_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>bufferevent_async_set_connected_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bufferevent_async_can_connect_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bufferevent_async_connect_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socklen</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
