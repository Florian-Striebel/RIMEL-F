<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/include/event2/bufferevent_struct.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT2_BUFFEREVENT_STRUCT_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT2_BUFFEREVENT_STRUCT_H_INCLUDED_</name></cpp:macro></cpp:define>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event-config.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event_struct.h&gt;</cpp:file></cpp:include>

<struct>struct <name>event_watermark</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>high</name></decl>;</decl_stmt>
}</block>;</struct>









<struct>struct <name>bufferevent</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>ev_base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bufferevent_ops</name></name> <modifier>*</modifier></type><name>be_ops</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>ev_read</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>ev_write</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>event_watermark</name></name></type> <name>wm_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_watermark</name></name></type> <name>wm_write</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufferevent_data_cb</name></type> <name>readcb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bufferevent_data_cb</name></type> <name>writecb</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bufferevent_event_cb</name></type> <name>errorcb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout_write</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>short</name></type> <name>enabled</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
