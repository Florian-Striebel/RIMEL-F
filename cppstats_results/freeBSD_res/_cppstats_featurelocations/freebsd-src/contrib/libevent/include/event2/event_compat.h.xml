<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/include/event2/event_compat.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT2_EVENT_COMPAT_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT2_EVENT_COMPAT_H_INCLUDED_</name></cpp:macro></cpp:define>















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/visibility.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event-config.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/util.h&gt;</cpp:file></cpp:include>














<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_dispatch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_loop</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_loopexit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_loopbreak</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_once</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter> , <parameter><decl><type><name>short</name></type></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event_get_method</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_priority_init</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evtimer_set</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_set((ev), -1, 0, (cb), (arg))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evsignal_set</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_set((ev), (x), EV_SIGNAL|EV_PERSIST, (cb), (arg))</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timeout_add</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_add((ev), (tv))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timeout_set</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_set((ev), -1, 0, (cb), (arg))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timeout_del</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_del(ev)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timeout_pending</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_pending((ev), EV_TIMEOUT, (tv))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timeout_initialized</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_initialized(ev)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signal_add</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_add((ev), (tv))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signal_set</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_set((ev), (x), EV_SIGNAL|EV_PERSIST, (cb), (arg))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signal_del</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_del(ev)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signal_pending</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_pending((ev), EV_SIGNAL, (tv))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signal_initialized</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_initialized(ev)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_FD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_FD</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)event_get_fd(ev))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_SIGNAL</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_get_signal(ev)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
