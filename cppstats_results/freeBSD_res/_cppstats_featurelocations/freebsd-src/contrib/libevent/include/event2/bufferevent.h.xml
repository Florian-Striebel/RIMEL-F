<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/include/event2/bufferevent.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT2_BUFFEREVENT_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT2_BUFFEREVENT_H_INCLUDED_</name></cpp:macro></cpp:define>
















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/visibility.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event-config.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/util.h&gt;</cpp:file></cpp:include>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_EVENT_READING</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_EVENT_WRITING</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_EVENT_EOF</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_EVENT_ERROR</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_EVENT_TIMEOUT</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_EVENT_CONNECTED</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>







<struct>struct <name>bufferevent</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_IN_DOXYGEN_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</struct>
<struct_decl>struct <name>event_base</name>;</struct_decl>
<struct_decl>struct <name>evbuffer</name>;</struct_decl>
<struct_decl>struct <name>sockaddr</name>;</struct_decl>














<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>bufferevent_data_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>bufferevent_event_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<enum>enum <name>bufferevent_options</name> <block>{


<decl><name>BEV_OPT_CLOSE_ON_FREE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>,



<decl><name>BEV_OPT_THREADSAFE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,


<decl><name>BEV_OPT_DEFER_CALLBACKS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>,





<decl><name>BEV_OPT_UNLOCK_CALLBACKS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>














<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufferevent_socket_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_socket_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>evdns_base</name>;</struct_decl>


























<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_socket_connect_hostname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_socket_get_dns_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_base_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>bufferevent_get_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_priority_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pri</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_get_priority</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>bufferevent_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>bufferevent_setcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_data_cb</name></type> <name>readcb</name></decl></parameter>, <parameter><decl><type><name>bufferevent_data_cb</name></type> <name>writecb</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_event_cb</name></type> <name>eventcb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>bufferevent_getcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_data_cb</name> <modifier>*</modifier></type><name>readcb_ptr</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_data_cb</name> <modifier>*</modifier></type><name>writecb_ptr</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_event_cb</name> <modifier>*</modifier></type><name>eventcb_ptr</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>cbarg_ptr</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_setfd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>evutil_socket_t</name></type> <name>bufferevent_getfd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufferevent_get_underlying</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_write_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>size_t</name></type> <name>bufferevent_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_read_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>bufferevent_get_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>bufferevent_get_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>short</name></type> <name>bufferevent_get_enabled</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>



























<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_set_timeouts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout_read</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout_write</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>bufferevent_setwatermark</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>lowmark</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>highmark</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_getwatermark</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lowmark</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>highmark</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>bufferevent_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>bufferevent_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>bufferevent_incref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_decref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>





<enum>enum <name>bufferevent_flush_mode</name> <block>{

<decl><name>BEV_NORMAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>BEV_FLUSH</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>BEV_FINISHED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>









<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>iotype</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>





<enum>enum <name>bufferevent_trigger_options</name> <block>{

<decl><name>BEV_TRIG_IGNORE_WATERMARKS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr></init></decl>,


<decl><name>BEV_TRIG_DEFER_CALLBACKS</name> <init>= <expr><name>BEV_OPT_DEFER_CALLBACKS</name></expr></init></decl>



}</block>;</enum>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>bufferevent_trigger</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>iotype</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>bufferevent_trigger_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>









<enum>enum <name>bufferevent_filter_result</name> <block>{

<decl><name>BEV_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>BEV_NEED_MORE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,



<decl><name>BEV_ERROR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>



















<typedef>typedef <function_decl><type><name><name>enum</name> <name>bufferevent_filter_result</name></name></type> (<modifier>*</modifier><name>bufferevent_filter_cb</name>)<parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>dst_limit</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>














<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>bufferevent_filter_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_filter_cb</name></type> <name>input_filter</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_filter_cb</name></type> <name>output_filter</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_context</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_pair_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name><name>pair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufferevent_pair_get_partner</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>





<struct_decl>struct <name>ev_token_bucket_cfg</name>;</struct_decl>





<struct_decl>struct <name>bufferevent_rate_limit_group</name>;</struct_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_RATE_LIMIT_MAX</name></cpp:macro> <cpp:value>EV_SSIZE_MAX</cpp:value></cpp:define>

















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>ev_token_bucket_cfg_new</name><parameter_list>(
<parameter><decl><type><name>size_t</name></type> <name>read_rate</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>read_burst</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>write_rate</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>write_burst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tick_len</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>ev_token_bucket_cfg_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_set_rate_limit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>bufferevent_rate_limit_group_new</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_rate_limit_group_set_cfg</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_rate_limit_group_set_min_share</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>bufferevent_rate_limit_group_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_add_to_rate_limit_group</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_remove_from_rate_limit_group</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_set_max_single_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_set_max_single_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>ev_ssize_t</name></type> <name>bufferevent_get_max_single_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>ev_ssize_t</name></type> <name>bufferevent_get_max_single_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>ev_ssize_t</name></type> <name>bufferevent_get_read_limit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>ev_ssize_t</name></type> <name>bufferevent_get_write_limit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>ev_ssize_t</name></type> <name>bufferevent_get_max_to_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>ev_ssize_t</name></type> <name>bufferevent_get_max_to_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>EVENT2_EXPORT_SYMBOL</name>
<specifier>const</specifier> struct <name>ev_token_bucket_cfg</name> <operator>*</operator><call><name>bufferevent_get_token_bucket_cfg</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>bufferevent</name> <operator>*</operator> <name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>ev_ssize_t</name></type> <name>bufferevent_rate_limit_group_get_read_limit</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>ev_ssize_t</name></type> <name>bufferevent_rate_limit_group_get_write_limit</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_decrement_read_limit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>decr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_decrement_write_limit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>decr</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_rate_limit_group_decrement_read</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_rate_limit_group_decrement_write</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>bufferevent_rate_limit_group_get_totals</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
<parameter><decl><type><name>ev_uint64_t</name> <modifier>*</modifier></type><name>total_read_out</name></decl></parameter>, <parameter><decl><type><name>ev_uint64_t</name> <modifier>*</modifier></type><name>total_written_out</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type>
<name>bufferevent_rate_limit_group_reset_totals</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>grp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
