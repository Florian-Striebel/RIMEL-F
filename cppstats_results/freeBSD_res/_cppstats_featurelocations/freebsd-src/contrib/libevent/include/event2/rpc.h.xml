<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/include/event2/rpc.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT2_RPC_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT2_RPC_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTAG_HAS</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((msg)-&gt;member##_set == 1)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT2_RPC_COMPAT_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTAG_ASSIGN</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>member</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(msg)-&gt;base-&gt;member##_assign)((msg), (value))</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTAG_ASSIGN_WITH_LEN</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>member</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(msg)-&gt;base-&gt;member##_assign)((msg), (value), (len))</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTAG_GET</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>member</name></type></parameter>, <parameter><type><name>pvalue</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(msg)-&gt;base-&gt;member##_get)((msg), (pvalue))</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTAG_GET_WITH_LEN</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>member</name></type></parameter>, <parameter><type><name>pvalue</name></type></parameter>, <parameter><type><name>plen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(msg)-&gt;base-&gt;member##_get)((msg), (pvalue), (plen))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTAG_ARRAY_ADD_VALUE</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>member</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(msg)-&gt;base-&gt;member##_add)((msg), (value))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTAG_ARRAY_ADD</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(msg)-&gt;base-&gt;member##_add)(msg)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTAG_ARRAY_GET</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>member</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>, <parameter><type><name>pvalue</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(msg)-&gt;base-&gt;member##_get)((msg), (offset), (pvalue))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTAG_ARRAY_LEN</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((msg)-&gt;member##_length)</cpp:value></cpp:define>


<struct_decl>struct <name>evbuffer</name>;</struct_decl>
<struct_decl>struct <name>event_base</name>;</struct_decl>
<struct_decl>struct <name>evrpc_req_generic</name>;</struct_decl>
<struct_decl>struct <name>evrpc_request_wrapper</name>;</struct_decl>
<struct_decl>struct <name>evrpc</name>;</struct_decl>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVRPC_STRUCT</name><parameter_list>(<parameter><type><name>rpcname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct evrpc_req__##rpcname</cpp:value></cpp:define>

<struct_decl>struct <name>evhttp_request</name>;</struct_decl>
<struct_decl>struct <name>evrpc_status</name>;</struct_decl>
<struct_decl>struct <name>evrpc_hook_meta</name>;</struct_decl>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVRPC_HEADER</name><parameter_list>(<parameter><type><name>rpcname</name></type></parameter>, <parameter><type><name>reqstruct</name></type></parameter>, <parameter><type><name>rplystruct</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVRPC_STRUCT(rpcname) { struct evrpc_hook_meta *hook_meta; struct reqstruct* request; struct rplystruct* reply; struct evrpc* rpc; struct evhttp_request* http_req; struct evbuffer* rpc_data; }; int evrpc_send_request_##rpcname(struct evrpc_pool *, struct reqstruct *, struct rplystruct *, void (*)(struct evrpc_status *, struct reqstruct *, struct rplystruct *, void *cbarg), void *);</cpp:value></cpp:define>














<struct_decl>struct <name>evrpc_pool</name>;</struct_decl>


<function_decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>evrpc_make_request_ctx</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rpcname</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>req_marshal</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rpl_clear</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rpl_unmarshal</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_status</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>)</parameter_list>;</function_decl>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVRPC_MAKE_CTX</name><parameter_list>(<parameter><type><name>rpcname</name></type></parameter>, <parameter><type><name>reqstruct</name></type></parameter>, <parameter><type><name>rplystruct</name></type></parameter>, <parameter><type><name>pool</name></type></parameter>, <parameter><type><name>request</name></type></parameter>, <parameter><type><name>reply</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>cbarg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>evrpc_make_request_ctx(pool, request, reply, #rpcname, (void (*)(struct evbuffer *, void *))reqstruct##_marshal, (void (*)(void *))rplystruct##_clear, (int (*)(void *, struct evbuffer *))rplystruct##_unmarshal, (void (*)(struct evrpc_status *, void *, void *, void *))cb, cbarg)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVRPC_GENERATE</name><parameter_list>(<parameter><type><name>rpcname</name></type></parameter>, <parameter><type><name>reqstruct</name></type></parameter>, <parameter><type><name>rplystruct</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int evrpc_send_request_##rpcname(struct evrpc_pool *pool, struct reqstruct *request, struct rplystruct *reply, void (*cb)(struct evrpc_status *, struct reqstruct *, struct rplystruct *, void *cbarg), void *cbarg) { return evrpc_send_request_generic(pool, request, reply, (void (*)(struct evrpc_status *, void *, void *, void *))cb, cbarg, #rpcname, (void (*)(struct evbuffer *, void *))reqstruct##_marshal, (void (*)(void *))rplystruct##_clear, (int (*)(void *, struct evbuffer *))rplystruct##_unmarshal); }</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVRPC_REQUEST_HTTP</name><parameter_list>(<parameter><type><name>rpc_req</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rpc_req)-&gt;http_req</cpp:value></cpp:define>


<function_decl><type><name>void</name></type> <name>evrpc_request_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name> <modifier>*</modifier></type><name>evrpc_get_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>evrpc_get_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVRPC_REQUEST_DONE</name><parameter_list>(<parameter><type><name>rpc_req</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { struct evrpc_req_generic *req_ = (struct evrpc_req_generic *)(rpc_req); evrpc_request_done(req_); } while (0)</cpp:value></cpp:define>





<struct_decl>struct <name>evrpc_base</name>;</struct_decl>
<struct_decl>struct <name>evhttp</name>;</struct_decl>









<function_decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>evrpc_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>evrpc_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVRPC_REGISTER</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>request</name></type></parameter>, <parameter><type><name>reply</name></type></parameter>, <parameter><type><name>callback</name></type></parameter>, <parameter><type><name>cbarg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>evrpc_register_generic(base, #name, (void (*)(struct evrpc_req_generic *, void *))callback, cbarg, (void *(*)(void *))request##_new, NULL, (void (*)(void *))request##_free, (int (*)(void *, struct evbuffer *))request##_unmarshal, (void *(*)(void *))reply##_new, NULL, (void (*)(void *))reply##_free, (int (*)(void *))reply##_complete, (void (*)(struct evbuffer *, void *))reply##_marshal)</cpp:value></cpp:define>

















<function_decl><type><name>int</name></type> <name>evrpc_register_rpc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evrpc</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVRPC_UNREGISTER</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>evrpc_unregister_rpc((base), #name)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>evrpc_unregister_rpc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>





<struct_decl>struct <name>evhttp_connection</name>;</struct_decl>
<struct_decl>struct <name>evrpc_status</name>;</struct_decl>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVRPC_MAKE_REQUEST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>pool</name></type></parameter>, <parameter><type><name>request</name></type></parameter>, <parameter><type><name>reply</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>cbarg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>evrpc_send_request_##name((pool), (request), (reply), (cb), (cbarg))</cpp:value></cpp:define>













<function_decl><type><name>int</name></type> <name>evrpc_make_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>evrpc_pool_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>evrpc_pool_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>evrpc_pool_add_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>evrpc_pool_remove_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>void</name></type> <name>evrpc_pool_set_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout_in_secs</name></decl></parameter>)</parameter_list>;</function_decl>






<enum>enum <name>EVRPC_HOOK_TYPE</name> <block>{
<decl><name>EVRPC_INPUT</name></decl>,
<decl><name>EVRPC_OUTPUT</name></decl>
}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT</name></cpp:macro> <cpp:value>EVRPC_INPUT</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT</name></cpp:macro> <cpp:value>EVRPC_OUTPUT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<enum>enum <name>EVRPC_HOOK_RESULT</name> <block>{
<decl><name>EVRPC_TERMINATE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>EVRPC_CONTINUE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>EVRPC_PAUSE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

















<function_decl><type><name>void</name> <modifier>*</modifier></type><name>evrpc_add_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vbase</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_TYPE</name></name></type> <name>hook_type</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> <name>evrpc_remove_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vbase</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_TYPE</name></name></type> <name>hook_type</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type>
<name>evrpc_resume_request</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vbase</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type> <name>res</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>evrpc_hook_add_meta</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>int</name></type> <name>evrpc_hook_find_meta</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_size</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evrpc_hook_get_connection</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>evrpc_send_request_generic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_status</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rpcname</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>req_marshal</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rpl_clear</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rpl_unmarshal</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type>
<name>evrpc_register_generic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>req_new</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>req_new_arg</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>req_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>req_unmarshal</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>rpl_new</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rpl_new_arg</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rpl_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rpl_complete</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rpl_marshal</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>evrpc_pool</name></name><modifier>*</modifier></type> <name>evrpc_request_get_pool</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evrpc_request_set_pool</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evrpc_request_set_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_status</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
