<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/include/event2/event.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT2_EVENT_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT2_EVENT_H_INCLUDED_</name></cpp:macro></cpp:define>




























































































































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/visibility.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event-config.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/util.h&gt;</cpp:file></cpp:include>














<struct>struct <name>event_base</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_IN_DOXYGEN_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</struct>






















































<struct>struct <name>event</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_IN_DOXYGEN_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</struct>














<struct>struct <name>event_config</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_IN_DOXYGEN_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</struct>





















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_enable_debug_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_debug_unassign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_base_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_reinit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_dispatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event_base_get_method</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>event_get_supported_methods</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_gettime_monotonic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>;</function_decl>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_BASE_COUNT_ACTIVE</name></cpp:macro> <cpp:value>1U</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_BASE_COUNT_VIRTUAL</name></cpp:macro> <cpp:value>2U</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_BASE_COUNT_ADDED</name></cpp:macro> <cpp:value>4U</cpp:value></cpp:define>




















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_get_num_events</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_get_max_events</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>event_config_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_config_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_config_avoid_method</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>)</parameter_list>;</function_decl>










<enum>enum <name>event_method_feature</name> <block>{

<decl><name>EV_FEATURE_ET</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,




<decl><name>EV_FEATURE_O1</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,


<decl><name>EV_FEATURE_FDS</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,






<decl><name>EV_FEATURE_EARLY_CLOSE</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>
}</block>;</enum>









<enum>enum <name>event_base_config_flag</name> <block>{






<decl><name>EVENT_BASE_FLAG_NOLOCK</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,


<decl><name>EVENT_BASE_FLAG_IGNORE_ENV</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,






<decl><name>EVENT_BASE_FLAG_STARTUP_IOCP</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,



<decl><name>EVENT_BASE_FLAG_NO_CACHE_TIME</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,















<decl><name>EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,






<decl><name>EVENT_BASE_FLAG_PRECISE_TIMER</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>
}</block>;</enum>








<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_get_features</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>























<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_config_require_features</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>feature</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_config_set_flag</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_config_set_num_cpus_hint</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpus</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_config_set_max_dispatch_interval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>max_interval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_callbacks</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>min_priority</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_base_new_with_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_base_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_base_free_nofinalize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_LOG_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_LOG_MSG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_LOG_WARN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_LOG_ERR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_EVENT_LOG_DEBUG</name></cpp:macro> <cpp:value>EVENT_LOG_DEBUG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_EVENT_LOG_MSG</name></cpp:macro> <cpp:value>EVENT_LOG_MSG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_EVENT_LOG_WARN</name></cpp:macro> <cpp:value>EVENT_LOG_WARN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_EVENT_LOG_ERR</name></cpp:macro> <cpp:value>EVENT_LOG_ERR</cpp:value></cpp:define>






<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>event_log_cb</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_set_log_callback</name><parameter_list>(<parameter><decl><type><name>event_log_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>






<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>event_fatal_cb</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>;</function_decl></typedef>













<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_set_fatal_callback</name><parameter_list>(<parameter><decl><type><name>event_fatal_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_DBG_ALL</name></cpp:macro> <cpp:value>0xffffffffu</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_DBG_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_enable_debug_logging</name><parameter_list>(<parameter><decl><type><name>ev_uint32_t</name></type> <name>which</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOOP_ONCE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOOP_NONBLOCK</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOOP_NO_EXIT_ON_EMPTY</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>




















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_loop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_loopexit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_loopbreak</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_loopcontinue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_got_exit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_got_break</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_TIMEOUT</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_READ</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_WRITE</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_SIGNAL</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_PERSIST</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_ET</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_FINALIZE</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_CLOSED</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evtimer_assign</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_assign((ev), (b), -1, 0, (cb), (arg))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evtimer_new</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_new((b), -1, 0, (cb), (arg))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evtimer_add</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_add((ev), (tv))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evtimer_del</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_del(ev)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evtimer_pending</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_pending((ev), EV_TIMEOUT, (tv))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evtimer_initialized</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_initialized(ev)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evsignal_add</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_add((ev), (tv))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evsignal_assign</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_assign((ev), (b), (x), EV_SIGNAL|EV_PERSIST, cb, (arg))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evsignal_new</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_new((b), (x), EV_SIGNAL|EV_PERSIST, (cb), (arg))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evsignal_del</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_del(ev)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evsignal_pending</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>, <parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_pending((ev), EV_SIGNAL, (tv))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evsignal_initialized</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_initialized(ev)</cpp:value></cpp:define>













<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>event_callback_fn</name>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>























<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name> <modifier>*</modifier></type><name>event_self_cbarg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

















































<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>event_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>event_callback_fn</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








































<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>event_callback_fn</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>event_finalize_callback_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


































<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_finalize</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>event_finalize_callback_fn</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_free_finalize</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>event_finalize_callback_fn</name></type></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_once</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>event_callback_fn</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_remove_timer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_del_noblock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_del_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>ncalls</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>event_base_get_running_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_initialized</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>event_get_signal</name><parameter_list>(<parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)event_get_fd(ev))</cpp:value></cpp:define>





<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>evutil_socket_t</name></type> <name>event_get_fd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>event_get_base</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>short</name></type> <name>event_get_events</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>event_callback_fn</name></type> <name>event_get_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name> <modifier>*</modifier></type><name>event_get_callback_arg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_get_priority</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_get_assignment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>base_out</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name> <modifier>*</modifier></type><name>fd_out</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>events_out</name></decl></parameter>,
<parameter><decl><type><name>event_callback_fn</name> <modifier>*</modifier></type><name>callback_out</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg_out</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>size_t</name></type> <name>event_get_struct_event_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event_get_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>ev_uint32_t</name></type> <name>event_get_version_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBEVENT_VERSION</name></cpp:macro> <cpp:value>EVENT__VERSION</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBEVENT_VERSION_NUMBER</name></cpp:macro> <cpp:value>EVENT__NUMERIC_VERSION</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_MAX_PRIORITIES</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>



























<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_priority_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_get_npriorities</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>eb</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_priority_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>




















<expr_stmt><expr><name>EVENT2_EXPORT_SYMBOL</name>
<specifier>const</specifier> struct <name>timeval</name> <operator>*</operator><call><name>event_base_init_common_timeout</name><argument_list>(<argument><expr>struct <name>event_base</name> <operator>*</operator><name>base</name></expr></argument>,
<argument><expr><specifier>const</specifier> struct <name>timeval</name> <operator>*</operator><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_MM_REPLACEMENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT_IN_DOXYGEN_</name></expr></argument>)</argument_list></call></expr></cpp:if>






















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_set_mem_functions</name><parameter_list>(
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>malloc_fn</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>realloc_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_base_dump_events</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_base_active_by_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>event_base_active_by_signal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>event_base_foreach_event_cb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


























<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_foreach_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>event_base_foreach_event_cb</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_gettimeofday_cached</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>event_base_update_cache_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>libevent_global_shutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
