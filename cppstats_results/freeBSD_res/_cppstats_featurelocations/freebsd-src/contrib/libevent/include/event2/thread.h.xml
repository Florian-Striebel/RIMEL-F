<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/include/event2/thread.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT2_THREAD_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT2_THREAD_H_INCLUDED_</name></cpp:macro></cpp:define>





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/visibility.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event-config.h&gt;</cpp:file></cpp:include>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_WRITE</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_READ</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_TRY</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT_IN_DOXYGEN_</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_LOCK_API_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_LOCKTYPE_READWRITE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>






<struct>struct <name>evthread_lock_callbacks</name> <block>{


<decl_stmt><decl><type><name>int</name></type> <name>lock_api_version</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>unsigned</name></type> <name>supported_locktypes</name></decl>;</decl_stmt>


<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>alloc</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>locktype</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>locktype</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>lock</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>unlock</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>









<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>evthread_set_lock_callbacks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evthread_lock_callbacks</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_CONDITION_API_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<struct_decl>struct <name>timeval</name>;</struct_decl>





<struct>struct <name>evthread_condition_callbacks</name> <block>{


<decl_stmt><decl><type><name>int</name></type> <name>condition_api_version</name></decl>;</decl_stmt>




<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>alloc_condition</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>condtype</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_condition</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>signal_condition</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>broadcast</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>wait_condition</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>









<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>evthread_set_condition_callbacks</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evthread_condition_callbacks</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>evthread_set_id_callback</name><argument_list>(
<argument><expr><name>unsigned</name> <call><call><name>long</name> <argument_list>(<argument><expr><operator>*</operator><name>id_fn</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT_IN_DOXYGEN_</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>evthread_use_windows_threads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_USE_WINDOWS_THREADS_IMPLEMENTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_PTHREADS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT_IN_DOXYGEN_</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>evthread_use_pthreads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_USE_PTHREADS_IMPLEMENTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>evthread_enable_lock_debugging</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>evthread_enable_lock_debuging</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>event_base</name>;</struct_decl>








<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>evthread_make_base_notifiable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
