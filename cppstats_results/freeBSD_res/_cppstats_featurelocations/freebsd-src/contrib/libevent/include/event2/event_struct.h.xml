<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/include/event2/event_struct.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT2_EVENT_STRUCT_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT2_EVENT_STRUCT_H_INCLUDED_</name></cpp:macro></cpp:define>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event-config.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/util.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/keyvalq_struct.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLIST_TIMEOUT</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLIST_INSERTED</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLIST_SIGNAL</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLIST_ACTIVE</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLIST_INTERNAL</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLIST_ACTIVE_LATER</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLIST_FINALIZING</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLIST_INIT</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLIST_ALL</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TAILQ_ENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_DEFINED_TQENTRY_</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_ENTRY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { struct type *tqe_next; struct type **tqe_prev; }</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TAILQ_HEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_DEFINED_TQHEAD_</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_HEAD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct name { struct type *tqh_first; struct type **tqh_last; }</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIST_ENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_DEFINED_LISTENTRY_</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_ENTRY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { struct type *le_next; struct type **le_prev; }</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIST_HEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_DEFINED_LISTHEAD_</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_HEAD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct name { struct type *lh_first; }</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>event</name>;</struct_decl>

<struct>struct <name>event_callback</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>event_callback</argument>)</argument_list></macro> <expr_stmt><expr><name>evcb_active_next</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>evcb_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>evcb_pri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>evcb_closure</name></decl>;</decl_stmt>

<union>union <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evcb_callback</name>)<parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evcb_selfcb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evcb_evfinalize</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evcb_cbfinalize</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name>evcb_cb_union</name></decl>;</union>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>evcb_arg</name></decl>;</decl_stmt>
}</block>;</struct>

<struct_decl>struct <name>event_base</name>;</struct_decl>
<struct>struct <name>event</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name></type> <name>ev_evcallback</name></decl>;</decl_stmt>


<union>union <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>event</argument>)</argument_list></macro> <expr_stmt><expr><name>ev_next_with_common_timeout</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_heap_idx</name></decl>;</decl_stmt>
}</block> <decl><name>ev_timeout_pos</name></decl>;</union>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>ev_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>ev_base</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{
<macro><name>LIST_ENTRY</name> <argument_list>(<argument>event</argument>)</argument_list></macro> <expr_stmt><expr><name>ev_io_next</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>ev_timeout</name></decl>;</decl_stmt>
}</block> <decl><name>ev_io</name></decl>;</struct>


<struct>struct <block>{
<macro><name>LIST_ENTRY</name> <argument_list>(<argument>event</argument>)</argument_list></macro> <expr_stmt><expr><name>ev_signal_next</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>ev_ncalls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>ev_pncalls</name></decl>;</decl_stmt>
}</block> <decl><name>ev_signal</name></decl>;</struct>
}</block> <decl><name>ev_</name></decl>;</union>

<decl_stmt><decl><type><name>short</name></type> <name>ev_events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>ev_res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>ev_timeout</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TAILQ_HEAD</name> <argument_list>(<argument><expr><name>event_list</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_DEFINED_TQENTRY_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TAILQ_ENTRY</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_DEFINED_TQHEAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TAILQ_HEAD</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LIST_HEAD</name> <argument_list>(<argument><expr><name>event_dlist</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_DEFINED_LISTENTRY_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LIST_ENTRY</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_DEFINED_LISTHEAD_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LIST_HEAD</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
