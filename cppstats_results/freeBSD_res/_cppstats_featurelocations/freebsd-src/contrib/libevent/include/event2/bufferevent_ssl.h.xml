<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/include/event2/bufferevent_ssl.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT2_BUFFEREVENT_SSL_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT2_BUFFEREVENT_SSL_H_INCLUDED_</name></cpp:macro></cpp:define>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/visibility.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event-config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/bufferevent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/util.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct_decl>struct <name>ssl_st</name>;</struct_decl>





<enum>enum <name>bufferevent_ssl_state</name> <block>{
<decl><name>BUFFEREVENT_SSL_OPEN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>BUFFEREVENT_SSL_CONNECTING</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>BUFFEREVENT_SSL_ACCEPTING</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT_IN_DOXYGEN_</name></expr></argument>)</argument_list></call></expr></cpp:if>











<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>bufferevent_openssl_filter_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ssl_st</name></name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_ssl_state</name></name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>bufferevent_openssl_socket_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ssl_st</name></name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_ssl_state</name></name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_openssl_get_allow_dirty_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>bufferevent_openssl_set_allow_dirty_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>allow_dirty_shutdown</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>ssl_st</name></name> <modifier>*</modifier></type>
<name>bufferevent_openssl_get_ssl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>bufferevent_ssl_renegotiate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>unsigned</name> <name>long</name></type> <name>bufferevent_get_openssl_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
