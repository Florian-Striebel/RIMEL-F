<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/include/event2/listener.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT2_LISTENER_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT2_LISTENER_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/visibility.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>sockaddr</name>;</struct_decl>
<struct_decl>struct <name>evconnlistener</name>;</struct_decl>










<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evconnlistener_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socklen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>







<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evconnlistener_errorcb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEV_OPT_LEAVE_SOCKETS_BLOCKING</name></cpp:macro> <cpp:value>(1u&lt;&lt;0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEV_OPT_CLOSE_ON_FREE</name></cpp:macro> <cpp:value>(1u&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEV_OPT_CLOSE_ON_EXEC</name></cpp:macro> <cpp:value>(1u&lt;&lt;2)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEV_OPT_REUSEABLE</name></cpp:macro> <cpp:value>(1u&lt;&lt;3)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEV_OPT_THREADSAFE</name></cpp:macro> <cpp:value>(1u&lt;&lt;4)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEV_OPT_DISABLED</name></cpp:macro> <cpp:value>(1u&lt;&lt;5)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEV_OPT_DEFERRED_ACCEPT</name></cpp:macro> <cpp:value>(1u&lt;&lt;6)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEV_OPT_REUSEABLE_PORT</name></cpp:macro> <cpp:value>(1u&lt;&lt;7)</cpp:value></cpp:define>


















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>evconnlistener_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>evconnlistener_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>,
<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>evconnlistener_new_bind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>evconnlistener_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socklen</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>evconnlistener_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>lev</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>evconnlistener_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>lev</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>int</name></type> <name>evconnlistener_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>lev</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>evconnlistener_get_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>lev</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>evutil_socket_t</name></type> <name>evconnlistener_get_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>lev</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>evconnlistener_set_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>lev</name></decl></parameter>,
<parameter><decl><type><name>evconnlistener_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>EVENT2_EXPORT_SYMBOL</name>
<name>void</name></type> <name>evconnlistener_set_error_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>lev</name></decl></parameter>,
<parameter><decl><type><name>evconnlistener_errorcb</name></type> <name>errorcb</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
