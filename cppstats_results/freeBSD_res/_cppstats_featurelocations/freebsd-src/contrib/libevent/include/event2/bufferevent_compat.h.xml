<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/include/event2/bufferevent_compat.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT2_BUFFEREVENT_COMPAT_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT2_BUFFEREVENT_COMPAT_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evbuffercb</name></cpp:macro> <cpp:value>bufferevent_data_cb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>everrorcb</name></cpp:macro> <cpp:value>bufferevent_event_cb</cpp:value></cpp:define>










































<function_decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufferevent_new</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>evbuffercb</name></type> <name>readcb</name></decl></parameter>, <parameter><decl><type><name>evbuffercb</name></type> <name>writecb</name></decl></parameter>, <parameter><decl><type><name>everrorcb</name></type> <name>errorcb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>bufferevent_settimeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>timeout_read</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout_write</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_READ</name></cpp:macro> <cpp:value>BEV_EVENT_READING</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_WRITE</name></cpp:macro> <cpp:value>BEV_EVENT_WRITING</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_EOF</name></cpp:macro> <cpp:value>BEV_EVENT_EOF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_ERROR</name></cpp:macro> <cpp:value>BEV_EVENT_ERROR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_TIMEOUT</name></cpp:macro> <cpp:value>BEV_EVENT_TIMEOUT</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_INPUT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bufferevent_get_input(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_OUTPUT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bufferevent_get_output(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
