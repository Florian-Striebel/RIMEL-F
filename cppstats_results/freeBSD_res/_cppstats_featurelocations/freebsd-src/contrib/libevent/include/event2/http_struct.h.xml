<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/include/event2/http_struct.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT2_HTTP_STRUCT_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT2_HTTP_STRUCT_H_INCLUDED_</name></cpp:macro></cpp:define>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event-config.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/util.h&gt;</cpp:file></cpp:include>






<struct>struct <name>evhttp_request</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TAILQ_ENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>evhttp_request</argument>)</argument_list></macro> <expr_stmt><expr><name>next</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>tqe_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tqe_prev</name></decl>;</decl_stmt>
}</block> <decl><name>next</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVHTTP_REQ_OWN_CONNECTION</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVHTTP_PROXY_REQUEST</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVHTTP_USER_OWNED</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVHTTP_REQ_DEFER_FREE</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVHTTP_REQ_NEEDS_FREE</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>input_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyvalq</name></name> <modifier>*</modifier></type><name>output_headers</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>remote_host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>remote_port</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>evhttp_request_kind</name></name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>evhttp_cmd_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>headers_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>body_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri_elems</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>response_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>response_code_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>input_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_int64_t</name></type> <name>ntoread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>chunked</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>userdone</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>output_buffer</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl>;</decl_stmt>






<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>chunk_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>header_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>error_cb</name>)<parameter_list>(<parameter><decl><type><name><name>enum</name> <name>evhttp_request_error</name></name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_complete_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>on_complete_cb_arg</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
