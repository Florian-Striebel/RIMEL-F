<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/event_iocp.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0403</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mswsock.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iocp-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evthread-internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFICATION_KEY</name></cpp:macro> <cpp:value>((ULONG_PTR)-1)</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>event_overlapped_init_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>iocp_callback</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>event_overlapped</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_entry</name><parameter_list>(<parameter><decl><type><name>OVERLAPPED</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>ULONG_PTR</name></type> <name>completion_key</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>nBytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>eo</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr>struct <name>event_overlapped</name></expr></argument>, <argument><expr><name>overlapped</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>eo</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>eo</name></expr></argument>, <argument><expr><name>completion_key</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>loop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>port_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name>port_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ms</name> <init>= <expr><name><name>port</name><operator>-&gt;</operator><name>ms</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>p</name> <init>= <expr><name><name>port</name><operator>-&gt;</operator><name>port</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ms</name> <operator>=</operator> <name>INFINITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OVERLAPPED</name> <modifier>*</modifier></type><name>overlapped</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG_PTR</name></type> <name>key</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bytes</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><call><name>GetQueuedCompletionStatus</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>overlapped</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>shutdown</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>port</name><operator>-&gt;</operator><name>n_live_threads</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ReleaseSemaphore</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>shutdownSemaphore</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NOTIFICATION_KEY</name> <operator>&amp;&amp;</operator> <name>overlapped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_entry</name><argument_list>(<argument><expr><name>overlapped</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>overlapped</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"GetQueuedCompletionStatus exited with no event."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>port</name><operator>-&gt;</operator><name>n_live_threads</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ReleaseSemaphore</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>shutdownSemaphore</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_iocp_port_associate_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>ev_uintptr_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateIoCompletionPort</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>fd</name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>n_threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>get_extension_function</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>which_fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bytes</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WSAIoctl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SIO_GET_EXTENSION_FUNCTION_POINTER</name></expr></argument>,
<argument><expr><operator>(</operator><name>GUID</name><operator>*</operator><operator>)</operator><name>which_fn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>which_fn</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WSAID_ACCEPTEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSAID_ACCEPTEX</name></cpp:macro> <cpp:value>{0xb5367df1,0xcbac,0x11cf,{0x95,0xca,0x00,0x80,0x5f,0x48,0xa1,0x92}}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WSAID_CONNECTEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSAID_CONNECTEX</name></cpp:macro> <cpp:value>{0x25a207b9,0xddf3,0x4660,{0x8e,0xe9,0x76,0xe5,0x8c,0x74,0x06,0x3e}}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WSAID_GETACCEPTEXSOCKADDRS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSAID_GETACCEPTEXSOCKADDRS</name></cpp:macro> <cpp:value>{0xb5367df2,0xcbac,0x11cf,{0x95,0xca,0x00,0x80,0x5f,0x48,0xa1,0x92}}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>extension_fns_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_extension_functions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>win32_extension_fns</name></name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>acceptex</name> <init>= <expr><name>WSAID_ACCEPTEX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>connectex</name> <init>= <expr><name>WSAID_CONNECTEX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>getacceptexsockaddrs</name> <init>= <expr><name>WSAID_GETACCEPTEXSOCKADDRS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name> <init>= <expr><call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>AcceptEx</name></name> <operator>=</operator> <call><name>get_extension_function</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acceptex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ConnectEx</name></name> <operator>=</operator> <call><name>get_extension_function</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connectex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>GetAcceptExSockaddrs</name></name> <operator>=</operator> <call><name>get_extension_function</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>getacceptexsockaddrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>extension_fns_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>win32_extension_fns</name></name></type> <name>the_extension_fns</name></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>win32_extension_fns</name></name> <modifier>*</modifier></type>
<name>event_get_win32_extension_fns_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>the_extension_fns</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_CPUS_DEFAULT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type>
<name>event_iocp_port_launch_</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n_cpus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extension_fns_initialized</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_extension_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_extension_fns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>port</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>event_iocp_port</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n_cpus</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n_cpus</name> <operator>=</operator> <name>N_CPUS_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>n_threads</name></name> <operator>=</operator> <name>n_cpus</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>threads</name></name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>n_threads</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>port</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>CreateIoCompletionPort</name><argument_list>(<argument><expr><name>INVALID_HANDLE_VALUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>n_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>ms</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>port</name><operator>-&gt;</operator><name>port</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>shutdownSemaphore</name></name> <operator>=</operator> <call><name>CreateSemaphore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>port</name><operator>-&gt;</operator><name>shutdownSemaphore</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>port</name><operator>-&gt;</operator><name>n_threads</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ev_uintptr_t</name></type> <name>th</name> <init>= <expr><call><name>_beginthread</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <operator>(</operator><name>ev_uintptr_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><name>th</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>port</name><operator>-&gt;</operator><name>n_live_threads</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>InitializeCriticalSectionAndSpinCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>port</name></expr>;</return>
<label><name>err</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>port</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>shutdownSemaphore</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>shutdownSemaphore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_iocp_port_unlock_and_free_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>shutdownSemaphore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>event_iocp_notify_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>ok</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>port</name><operator>-&gt;</operator><name>n_threads</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PostQueuedCompletionStatus</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NOTIFICATION_KEY</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><ternary><condition><expr><name>ok</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_iocp_shutdown_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>waitMsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>ms</name> <init>= <expr><name>INFINITE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>shutdown</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_iocp_notify_all</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>waitMsec</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ms</name> <operator>=</operator> <name>waitMsec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>shutdownSemaphore</name></name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>port</name><operator>-&gt;</operator><name>n_live_threads</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_iocp_port_unlock_and_free_</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>event_iocp_activate_overlapped_</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><name>ev_uintptr_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PostQueuedCompletionStatus</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>r</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type>
<name>event_base_get_iocp_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>base</name><operator>-&gt;</operator><name>iocp</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
