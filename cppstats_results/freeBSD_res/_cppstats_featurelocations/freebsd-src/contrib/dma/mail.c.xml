<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dma/mail.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dma.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LINE_RFC822</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>bounce</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>qitem</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>queue</name></name></type> <name>bounceq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>sender</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"can not bounce a bounce message, discarding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EX_SOFTWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bounceq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bounceq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bounceq</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bounceq</name><operator>.</operator><name>sender</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_recp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bounceq</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>, <argument><expr><name>EXPAND_WILDCARD</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>newspoolf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bounceq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"delivery failed, bouncing as %s"</literal></expr></argument>, <argument><expr><name><name>bounceq</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setlogident</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>bounceq</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>bounceq</name><operator>.</operator><name>mailf</name></name></expr></argument>,
<argument><expr><literal type="string">"Received: from MAILER-DAEMON\n"</literal>
<literal type="string">"\tid %s\n"</literal>
<literal type="string">"\tby %s (%s on %s);\n"</literal>
<literal type="string">"\t%s\n"</literal>
<literal type="string">"X-Original-To: &lt;%s&gt;\n"</literal>
<literal type="string">"From: MAILER-DAEMON &lt;&gt;\n"</literal>
<literal type="string">"To: %s\n"</literal>
<literal type="string">"Subject: Mail delivery failed\n"</literal>
<literal type="string">"Message-Id: &lt;%s@%s&gt;\n"</literal>
<literal type="string">"Date: %s\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"This is the %s at %s.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"There was an error delivering your mail to &lt;%s&gt;.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"%s\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"%s\n"</literal>
<literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>bounceq</name><operator>.</operator><name>id</name></name></expr></argument>,
<argument><expr><call><name>hostname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>, <argument><expr><call><name>systemhostname</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>rfc822date</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,
<argument><expr><name><name>it</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>,
<argument><expr><name><name>bounceq</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>hostname</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>rfc822date</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>VERSION</name></expr></argument>, <argument><expr><call><name>hostname</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,
<argument><expr><name>reason</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>config</name><operator>.</operator><name>features</name></name> <operator>&amp;</operator> <name>FULLBOUNCE</name></expr> ?</condition><then>
<expr><literal type="string">"Original message follows."</literal></expr> </then><else>:
<expr><literal type="string">"Message headers follow."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>mailf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>features</name></name> <operator>&amp;</operator> <name>FULLBOUNCE</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>mailf</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>bounceq</name><operator>.</operator><name>mailf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>mailf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>mailf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bounceq</name><operator>.</operator><name>mailf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>linkspool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bounceq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>delqueue</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bounceq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_CRIT</name></expr></argument>, <argument><expr><literal type="string">"error creating bounce: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delqueue</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EX_IOERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>parse_state</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>START</name></decl>,
<decl><name>MAIN</name></decl>,
<decl><name>EOL</name></decl>,
<decl><name>QUIT</name></decl>
}</block> <decl><name>state</name></decl>;</enum>
<decl_stmt><decl><type><name>int</name></type> <name>comment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>brackets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>esc</name></decl>;</decl_stmt>
}</block>;</struct>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_addrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_state</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<label><name>again</name>:</label>
<switch>switch <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NONE</name></expr>:</case>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>START</name></expr>:</case>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MAIN</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MAIN</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>EOL</name></expr>:</case>
<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MAIN</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>QUIT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>newaddr</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>QUIT</name></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>esc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>esc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<goto>goto <name>err</name>;</goto>

<default>default:</default>
<goto>goto <name>copy</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>copy</name>;</goto>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>esc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>copy</name>;</goto>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<goto>goto <name>eol</name>;</goto>

<default>default:</default>
<goto>goto <name>copy</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'('</literal></expr>:</case>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>comment</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">')'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>comment</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></else></if_stmt>
<goto>goto <name>skip</name>;</goto>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>copy</name>;</goto>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>esc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>copy</name>;</goto>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<goto>goto <name>eol</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>

<goto>goto <name>skip</name>;</goto>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>brackets</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps</name><operator>-&gt;</operator><name>brackets</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>brackets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>newaddr</name>;</goto>

<case>case <expr><literal type="char">':'</literal></expr>:</case>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>

<case>case <expr><literal type="char">','</literal></expr>:</case>
<case>case <expr><literal type="char">';'</literal></expr>:</case>








<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>newaddr</name>;</goto>

<default>default:</default>
<goto>goto <name>copy</name>;</goto>
</block_content>}</block></switch>

<label><name>copy</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>

<label><name>skip</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<label><name>eol</name>:</label>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>EOL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>err</name>:</label>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>QUIT</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<label><name>newaddr</name>:</label>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errlog</name><argument_list>(<argument><expr><name>EX_SOFTWARE</name></expr></argument>, <argument><expr><literal type="string">"strdup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>add_recp</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>EXPAND_WILDCARD</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errlogx</name><argument_list>(<argument><expr><name>EX_DATAERR</name></expr></argument>, <argument><expr><literal type="string">"invalid recipient `%s'"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>again</name>;</goto>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>writeline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>linelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>linelen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>linelen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linelen</name> <operator>&gt;</operator> <name>MAX_LINE_RFC822</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>MAX_LINE_RFC822</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>mailf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>linelen</name> <operator>&lt;=</operator> <name>MAX_LINE_RFC822</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>mailf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>MAX_LINE_RFC822</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>linelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>readmail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recp_from_header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>parse_state</name></name></type> <name>parse_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>linelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>linecap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>newline</name><index>[<expr><name>MAX_LINE_RFC822</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>had_headers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>had_from</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>had_messagid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>had_date</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>had_first_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>had_last_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nocopy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>parse_state</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>mailf</name></name></expr></argument>,
<argument><expr><literal type="string">"Received: from %s (uid %d)\n"</literal>
<literal type="string">"\t(envelope-from %s)\n"</literal>
<literal type="string">"\tid %s\n"</literal>
<literal type="string">"\tby %s (%s on %s);\n"</literal>
<literal type="string">"\t%s\n"</literal></expr></argument>,
<argument><expr><name>username</name></expr></argument>, <argument><expr><name>useruid</name></expr></argument>,
<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>,
<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><call><name>hostname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>, <argument><expr><call><name>systemhostname</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>rfc822date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>error</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newline</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>linelen</name> <operator>=</operator> <call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linecap</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>had_last_line</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errlogx</name><argument_list>(<argument><expr><name>EX_DATAERR</name></expr></argument>, <argument><expr><literal type="string">"bad mail input format:"</literal>
<literal type="string">" from %s (uid %d) (envelope-from %s)"</literal></expr></argument>,
<argument><expr><name>username</name></expr></argument>, <argument><expr><name>useruid</name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>linelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linelen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>line</name><index>[<expr><name>linelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>line</name><index>[<expr><name>linelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>linelen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>had_last_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>had_first_line</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>strprefixcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"From "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strprefixcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"&gt;From "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>had_first_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>had_headers</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>linelen</name> <operator>&gt;</operator> <name>MAX_LINE_RFC822</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>errlogx</name><argument_list>(<argument><expr><name>EX_DATAERR</name></expr></argument>, <argument><expr><literal type="string">"bad mail input format:"</literal>
<literal type="string">" from %s (uid %d) (envelope-from %s)"</literal></expr></argument>,
<argument><expr><name>username</name></expr></argument>, <argument><expr><name>useruid</name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nocopy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strprefixcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"Date:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>had_date</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strprefixcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"Message-Id:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>had_messagid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strprefixcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"From:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>had_from</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strprefixcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"Bcc:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nocopy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parse_state</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_addrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>errlogx</name><argument_list>(<argument><expr><name>EX_DATAERR</name></expr></argument>, <argument><expr><literal type="string">"invalid address in header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>recp_from_header</name> <operator>&amp;&amp;</operator> <operator>(</operator>
<call><name>strprefixcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"To:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strprefixcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"Cc:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strprefixcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"Bcc:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parse_state</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>START</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_addrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>errlogx</name><argument_list>(<argument><expr><name>EX_DATAERR</name></expr></argument>, <argument><expr><literal type="string">"invalid address in header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>had_headers</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>had_headers</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>had_date</name> <operator>||</operator> <operator>!</operator><name>had_messagid</name> <operator>||</operator> <operator>!</operator><name>had_from</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>had_date</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>had_date</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>newline</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newline</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Date: %s\n"</literal></expr></argument>, <argument><expr><call><name>rfc822date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>had_messagid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>had_messagid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>newline</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newline</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Message-Id: &lt;%"</literal><name>PRIxMAX</name><literal type="string">".%s.%"</literal><name>PRIxMAX</name><literal type="string">"@%s&gt;\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><call><name>random</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>hostname</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>had_from</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>had_from</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>newline</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newline</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"From: &lt;%s&gt;\n"</literal></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>newline</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>newline</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>mailf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>newline</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newline</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nodot</name> <operator>&amp;&amp;</operator> <name>linelen</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nocopy</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>newline</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>newline</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>newline</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>mailf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>writeline</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>linelen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
