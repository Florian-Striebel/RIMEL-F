<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dma/dns.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/nameser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;resolv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dma.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sort_pref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mx_hostentry</name></name> <modifier>*</modifier></type><name>ha</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>


<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ha</name><operator>-&gt;</operator><name>pref</name></name> <operator>-</operator> <name><name>hb</name><operator>-&gt;</operator><name>pref</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>v</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator> <operator>(</operator><name><name>ha</name><operator>-&gt;</operator><name>ai</name><operator>.</operator><name>ai_family</name></name> <operator>-</operator> <name><name>hb</name><operator>-&gt;</operator><name>ai</name><operator>.</operator><name>ai_family</name></name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>v</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_host</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mx_hostentry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>he</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>servname</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mx_hostentry</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>count_inc</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>servname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>servname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res0</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
<case>case <expr><name>EAI_AGAIN</name></expr>:</case>
<case>case <expr><name>EAI_NONAME</name></expr>:</case>











<goto>goto <name>out</name>;</goto>
<default>default:</default>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>res</name> <operator>=</operator> <name>res0</name></expr>;</init> <condition><expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>res</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ps</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <call><name>roundup</name><argument_list>(<argument><expr><operator>*</operator><name>ps</name></expr></argument>, <argument><expr><name>count_inc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>newsz</name> <init>= <expr><call><name>roundup</name><argument_list>(<argument><expr><operator>*</operator><name>ps</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>count_inc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>he</name> <operator>=</operator> <call><name>reallocf</name><argument_list>(<argument><expr><operator>*</operator><name>he</name></expr></argument>, <argument><expr><name>newsz</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>he</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>he</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>*</operator><name>he</name><operator>)</operator><index>[<expr><operator>*</operator><name>ps</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pref</name></name> <operator>=</operator> <name>pref</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ai</name></name> <operator>=</operator> <operator>*</operator><name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ai</name><operator>.</operator><name>ai_addr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>sa</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai</name><operator>.</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>sa</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai</name><operator>.</operator><name>ai_addrlen</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ps</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>res0</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dns_get_mx_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mx_hostentry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>he</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>no_mx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>outname</name><index>[<expr><name>MAXDNAME</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ns_msg</name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ns_rr</name></type> <name>rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>searchhost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mx_hostentry</name></name> <modifier>*</modifier></type><name>hosts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nhosts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>anssz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cname_recurse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_mx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>res_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>searchhost</name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cname_recurse</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>anssz</name> <operator>=</operator> <literal type="number">65536</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>anssz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_mx</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<label><name>repeat</name>:</label>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>res_search</name><argument_list>(<argument><expr><name>searchhost</name></expr></argument>, <argument><expr><name>ns_c_in</name></expr></argument>, <argument><expr><name>ns_t_mx</name></expr></argument>, <argument><expr><name>ans</name></expr></argument>, <argument><expr><name>anssz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>h_errno</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NO_DATA</name></expr>:</case>




<goto>goto <name>out</name>;</goto>
<case>case <expr><name>TRY_AGAIN</name></expr>:</case>

<goto>goto <name>transerr</name>;</goto>
<case>case <expr><name>NO_RECOVERY</name></expr>:</case>
<case>case <expr><name>HOST_NOT_FOUND</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ns_initparse</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>anssz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>transerr</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>ns_msg_getflag</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ns_f_rcode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ns_r_noerror</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>ns_r_nxdomain</name></expr>:</case>
<goto>goto <name>err</name>;</goto>
<default>default:</default>
<goto>goto <name>transerr</name>;</goto>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ns_msg_count</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ns_s_an</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ns_parserr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>ns_s_an</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>transerr</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>ns_rr_rdata</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>ns_rr_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ns_t_mx</name></expr>:</case>
<expr_stmt><expr><name>have_mx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pref</name> <operator>=</operator> <call><name>ns_get16</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ns_name_uncompress</name><argument_list>(<argument><expr><call><name>ns_msg_base</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ns_msg_end</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>outname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>outname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>transerr</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add_host</name><argument_list>(<argument><expr><name>pref</name></expr></argument>, <argument><expr><name>outname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hosts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nhosts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ns_t_cname</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ns_name_uncompress</name><argument_list>(<argument><expr><call><name>ns_msg_base</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ns_msg_end</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>outname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>outname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>transerr</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>cname_recurse</name><operator>++</operator> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>searchhost</name> <operator>=</operator> <name>outname</name></expr>;</expr_stmt>
<goto>goto <name>repeat</name>;</goto>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<label><name>out</name>:</label>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<label><name>transerr</name>:</label>
<if_stmt><if>if <condition>(<expr><name>nhosts</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<label><name>err</name>:</label>
<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_mx</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add_host</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hosts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nhosts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nhosts</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nhosts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>hosts</name></expr></argument>, <argument><expr><name>nhosts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hosts</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sort_pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>hosts</name><index>[<expr><name>nhosts</name></expr>]</index></name><operator>.</operator><name>host</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hosts</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hosts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hosts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>he</name> <operator>=</operator> <name>hosts</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TESTING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mx_hostentry</name></name> <modifier>*</modifier></type><name>he</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>dns_get_mx_list</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>he</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>he</name></expr>;</init> <condition><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>host</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\t%s\t%s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pref</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
