<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/encoder/cbor/enc_cbor.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_buf.h"</cpp:file></cpp:include>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>cbor_memdump</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<enum>enum <block>{ <decl><name>MAX_PER_LINE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl> }</block>;</enum>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[ <expr><literal type="number">80</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>text</name><index>[ <expr><literal type="number">80</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static const int ends[ MAX_PER_LINE ] = { 2, 5, 8, 11, 15, 18, 21, 24,
29, 32, 35, 38, 42, 45, 48, 51 };
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%*s[%s] @ %p (%lx/%lu)\n"</literal></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>,
<argument><expr><name>title</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PER_LINE</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tp</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>data</name> <operator>&gt;=</operator> <literal type="char">' '</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><name>data</name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%*s%-54s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_MAJOR_MASK</name></cpp:macro> <cpp:value>0xE0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_MINOR_MASK</name></cpp:macro> <cpp:value>0x1F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_MAJOR_SHIFT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_MAJOR</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_x) &amp; CBOR_MAJOR_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_MAJOR_VAL</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_x) &lt;&lt; CBOR_MAJOR_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_MINOR_VAL</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_x) &amp; CBOR_MINOR_MASK)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_UNSIGNED</name></cpp:macro> <cpp:value>CBOR_MAJOR_VAL(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_NEGATIVE</name></cpp:macro> <cpp:value>CBOR_MAJOR_VAL(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_BYTES</name></cpp:macro> <cpp:value>CBOR_MAJOR_VAL(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_STRING</name></cpp:macro> <cpp:value>CBOR_MAJOR_VAL(3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_ARRAY</name></cpp:macro> <cpp:value>CBOR_MAJOR_VAL(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_MAP</name></cpp:macro> <cpp:value>CBOR_MAJOR_VAL(5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_SEMANTIC</name></cpp:macro> <cpp:value>CBOR_MAJOR_VAL(6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_SPECIAL</name></cpp:macro> <cpp:value>CBOR_MAJOR_VAL(7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_ULIMIT</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_NLIMIT</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_BREAK</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_INDEF</name></cpp:macro> <cpp:value>0x1F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_FALSE</name></cpp:macro> <cpp:value>0xF4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_TRUE</name></cpp:macro> <cpp:value>0xF5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_NULL</name></cpp:macro> <cpp:value>0xF6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_UNDEF</name></cpp:macro> <cpp:value>0xF7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_LEN8</name></cpp:macro> <cpp:value>0x18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_LEN16</name></cpp:macro> <cpp:value>0x19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_LEN32</name></cpp:macro> <cpp:value>0x1a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_LEN64</name></cpp:macro> <cpp:value>0x1b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_LEN128</name></cpp:macro> <cpp:value>0x1c</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>cbor_private_s</name> <block>{
<decl_stmt><decl><type><name>xo_buffer_t</name></type> <name>c_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>c_indent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>c_open_leaf_list</name></decl>;</decl_stmt>
}</block></struct></type> <name>cbor_private_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cbor_encode_uint</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>minor</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>minor</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>|=</operator> <name>CBOR_LEN64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>minor</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>|=</operator> <name>CBOR_LEN32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>minor</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>|=</operator> <name>CBOR_LEN16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>minor</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>|=</operator> <name>CBOR_LEN8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>|=</operator> <name>minor</name> <operator>&amp;</operator> <name>CBOR_MINOR_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>=</operator> <name>minor</name> <operator>&gt;&gt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cbor_append</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>cbor_private_t</name> <modifier>*</modifier></type><name>cbor</name></decl></parameter>, <parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>minor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>minor</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>offset</name> <init>= <expr><call><name>xo_buf_offset</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name>major</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_encode_uint</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><name>CBOR_ULIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_get_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>XOF_PRETTY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_memdump</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"append"</literal></expr></argument>, <argument><expr><call><name>xo_buf_data</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_indent</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cbor_create</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cbor_private_t</name> <modifier>*</modifier></type><name>cbor</name> <init>= <expr><call><name>xo_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cbor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cbor</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>cbor</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cbor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cbor</name><operator>-&gt;</operator><name>c_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_set_private</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cbor</name><operator>-&gt;</operator><name>c_data</name></name></expr></argument>, <argument><expr><name>CBOR_MAP</name> <operator>|</operator> <name>CBOR_INDEF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cbor_content</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>cbor_private_t</name> <modifier>*</modifier></type><name>cbor</name></decl></parameter>, <parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>offset</name> <init>= <expr><call><name>xo_buf_offset</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>xo_streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cbor</name><operator>-&gt;</operator><name>c_data</name></name></expr></argument>, <argument><expr><name>CBOR_TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cbor</name><operator>-&gt;</operator><name>c_data</name></name></expr></argument>, <argument><expr><name>CBOR_FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>negative</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ival</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ival</name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ival</name> <operator>==</operator> <name>ULLONG_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_STRING</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <ternary><condition><expr><name>negative</name></expr> ?</condition><then> <expr><name>CBOR_NEGATIVE</name></expr> </then><else>: <expr><name>CBOR_UNSIGNED</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ival</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cbor_encode_uint</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>ival</name></expr></argument>, <argument><expr><ternary><condition><expr><name>negative</name></expr> ?</condition><then> <expr><name>CBOR_NLIMIT</name></expr> </then><else>: <expr><name>CBOR_ULIMIT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_get_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>XOF_PRETTY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_memdump</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"content"</literal></expr></argument>, <argument><expr><call><name>xo_buf_data</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_indent</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cbor_handler</name> <parameter_list>(<parameter><decl><type><name>XO_ENCODER_HANDLER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_private_t</name> <modifier>*</modifier></type><name>cbor</name> <init>= <expr><name>private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><ternary><condition><expr><name>cbor</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>cbor</name><operator>-&gt;</operator><name>c_data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_get_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>XOF_PRETTY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*sop %s: [%s] [%s]\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>cbor</name></expr> ?</condition><then> <expr><name><name>cbor</name><operator>-&gt;</operator><name>c_indent</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><call><name>xo_encoder_op_name</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>cbor</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>XO_OP_CREATE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_OP_CREATE</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>cbor_create</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_OPEN_CONTAINER</name></expr>:</case>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_STRING</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_MAP</name> <operator>|</operator> <name>CBOR_INDEF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_indent</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_CLOSE_CONTAINER</name></expr>:</case>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_BREAK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_indent</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_OPEN_LIST</name></expr>:</case>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_STRING</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_ARRAY</name> <operator>|</operator> <name>CBOR_INDEF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_indent</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_CLOSE_LIST</name></expr>:</case>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_BREAK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_indent</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_OPEN_LEAF_LIST</name></expr>:</case>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_STRING</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_ARRAY</name> <operator>|</operator> <name>CBOR_INDEF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_indent</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_open_leaf_list</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_CLOSE_LEAF_LIST</name></expr>:</case>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_BREAK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_indent</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_open_leaf_list</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_OPEN_INSTANCE</name></expr>:</case>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_MAP</name> <operator>|</operator> <name>CBOR_INDEF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_indent</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_CLOSE_INSTANCE</name></expr>:</case>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_BREAK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_indent</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_STRING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cbor</name><operator>-&gt;</operator><name>c_open_leaf_list</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_STRING</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_STRING</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_CONTENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cbor</name><operator>-&gt;</operator><name>c_open_leaf_list</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_STRING</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<expr_stmt><expr><call><name>cbor_content</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_FINISH</name></expr>:</case>
<expr_stmt><expr><call><name>cbor_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>CBOR_BREAK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbor</name><operator>-&gt;</operator><name>c_indent</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_FLUSH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>xo_get_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>XOF_PRETTY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_memdump</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"cbor"</literal></expr></argument>,
<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>,
<argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>XO_OP_DESTROY</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>XO_OP_ATTRIBUTE</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>XO_OP_VERSION</name></expr>:</case>
<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>xo_encoder_library_init</name> <parameter_list>(<parameter><decl><type><name>XO_ENCODER_INIT_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>xei_handler</name></name> <operator>=</operator> <name>cbor_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>xei_version</name></name> <operator>=</operator> <name>XO_ENCODER_VERSION</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
