<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/libxo/xo_buf.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XO_BUF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_BUF_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_BUFSIZ</name></cpp:macro> <cpp:value>(8*1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_BUF_HIGH_WATER</name></cpp:macro> <cpp:value>(XO_BUFSIZ - 512)</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>xo_buffer_s</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xb_bufp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xb_curp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xb_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_buffer_t</name>;</typedef>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_buf_init</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>=</operator> <name>XO_BUFSIZ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>=</operator> <call><name>xo_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_buf_reset</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>xo_buf_left</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>-</operator> <operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>xo_buf_is_empty</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>==</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type>
<name>xo_buf_offset</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>xbp</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_buf_data</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xbp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_buf_cur</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xbp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_buf_cleanup</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xbp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>xo_buf_has_room</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>ssize_t</name></type> <name>sz</name> <init>= <expr><operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name>sz</name> <operator>+</operator> <name>XO_BUFSIZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>XO_BUFSIZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><call><name>xo_realloc</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name>bp</name> <operator>+</operator> <operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_buf_append</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_buf_append_str</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
