<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/libxo/xo.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_XO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUDE_XO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__dead2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORETURN</name></cpp:macro> <cpp:value>__dead2</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORETURN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_PRINTFLIKE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__printflike</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__printflike</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>, <parameter><type><name>_y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__format__ (__printf__, _x, _y)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTFLIKE</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>, <parameter><type><name>_y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__printflike(_x, _y)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTFLIKE</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>, <parameter><type><name>_y</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>xo_style_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_STYLE_TEXT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_STYLE_XML</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_STYLE_JSON</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_STYLE_HTML</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_STYLE_SDPARAMS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_STYLE_ENCODER</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>


<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>xo_xof_flags_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_BIT</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((xo_xof_flags_t) 1 &lt;&lt; (_n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_CLOSE_FP</name></cpp:macro> <cpp:value>XOF_BIT(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_PRETTY</name></cpp:macro> <cpp:value>XOF_BIT(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_LOG_SYSLOG</name></cpp:macro> <cpp:value>XOF_BIT(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_RESV3</name></cpp:macro> <cpp:value>XOF_BIT(3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_WARN</name></cpp:macro> <cpp:value>XOF_BIT(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_XPATH</name></cpp:macro> <cpp:value>XOF_BIT(5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_INFO</name></cpp:macro> <cpp:value>XOF_BIT(6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_WARN_XML</name></cpp:macro> <cpp:value>XOF_BIT(7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_NO_ENV</name></cpp:macro> <cpp:value>XOF_BIT(8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_NO_VA_ARG</name></cpp:macro> <cpp:value>XOF_BIT(9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_DTRT</name></cpp:macro> <cpp:value>XOF_BIT(10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_KEYS</name></cpp:macro> <cpp:value>XOF_BIT(11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_IGNORE_CLOSE</name></cpp:macro> <cpp:value>XOF_BIT(12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_NOT_FIRST</name></cpp:macro> <cpp:value>XOF_BIT(13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_NO_LOCALE</name></cpp:macro> <cpp:value>XOF_BIT(14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_RESV15</name></cpp:macro> <cpp:value>XOF_BIT(15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_NO_TOP</name></cpp:macro> <cpp:value>XOF_BIT(16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_RESV17</name></cpp:macro> <cpp:value>XOF_BIT(17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_UNITS</name></cpp:macro> <cpp:value>XOF_BIT(18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_RESV19</name></cpp:macro> <cpp:value>XOF_BIT(19)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_UNDERSCORES</name></cpp:macro> <cpp:value>XOF_BIT(20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_COLUMNS</name></cpp:macro> <cpp:value>XOF_BIT(21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_FLUSH</name></cpp:macro> <cpp:value>XOF_BIT(22)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_FLUSH_LINE</name></cpp:macro> <cpp:value>XOF_BIT(23)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_NO_CLOSE</name></cpp:macro> <cpp:value>XOF_BIT(24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_COLOR_ALLOWED</name></cpp:macro> <cpp:value>XOF_BIT(25)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_COLOR</name></cpp:macro> <cpp:value>XOF_BIT(26)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_NO_HUMANIZE</name></cpp:macro> <cpp:value>XOF_BIT(27)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_LOG_GETTEXT</name></cpp:macro> <cpp:value>XOF_BIT(28)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_UTF8</name></cpp:macro> <cpp:value>XOF_BIT(29)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_RETAIN_ALL</name></cpp:macro> <cpp:value>XOF_BIT(30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_RETAIN_NONE</name></cpp:macro> <cpp:value>XOF_BIT(31)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_COLOR_MAP</name></cpp:macro> <cpp:value>XOF_BIT(32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_CONTINUATION</name></cpp:macro> <cpp:value>XOF_BIT(33)</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name></type> <name>xo_emit_flags_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOEF_RETAIN</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>





<typedef>typedef <type><struct>struct <name>xo_info_s</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xi_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xi_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xi_help</name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_info_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_INFO_NULL</name></cpp:macro> <cpp:value>NULL, NULL, NULL</cpp:value></cpp:define>

<struct_decl>struct <name>xo_handle_s</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>xo_handle_s</name></name></type> <name>xo_handle_t</name>;</typedef>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XO_USE_INT_RETURN_CODES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>xo_ssize_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>ssize_t</name></type> <name>xo_ssize_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>xo_ssize_t</name></type> (<modifier>*</modifier><name>xo_write_func_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xo_close_func_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xo_flush_func_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xo_realloc_func_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xo_free_func_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>






<typedef>typedef <function_decl><type><name>xo_ssize_t</name></type> (<modifier>*</modifier><name>xo_formatter_t</name>)<parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>xo_ssize_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xo_checkpointer_t</name>)<parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>xo_handle_t</name> <modifier>*</modifier></type>
<name>xo_create</name> <parameter_list>(<parameter><decl><type><name>xo_style_t</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_handle_t</name> <modifier>*</modifier></type>
<name>xo_create_to_file</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>xo_style_t</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_destroy</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_set_writer</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>xo_write_func_t</name></type> <name>write_func</name></decl></parameter>,
<parameter><decl><type><name>xo_close_func_t</name></type> <name>close_func</name></decl></parameter>, <parameter><decl><type><name>xo_flush_func_t</name></type> <name>flush_func</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_set_allocator</name> <parameter_list>(<parameter><decl><type><name>xo_realloc_func_t</name></type> <name>realloc_func</name></decl></parameter>, <parameter><decl><type><name>xo_free_func_t</name></type> <name>free_func</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_set_style</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_style_t</name></type> <name>style</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_style_t</name></type>
<name>xo_get_style</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type>
<name>xo_set_style_name</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>style</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type>
<name>xo_set_options</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_xof_flags_t</name></type>
<name>xo_get_flags</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_set_flags</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_clear_flags</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type>
<name>xo_set_file_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type>
<name>xo_set_file</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_set_info</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_info_t</name> <modifier>*</modifier></type><name>infop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_set_formatter</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_formatter_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>xo_checkpointer_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_set_depth</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_emit_hv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_emit_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_emit</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_emit_hvf</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_emit_flags_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_emit_hf</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_emit_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_emit_f</name> <parameter_list>(<parameter><decl><type><name>xo_emit_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>xo_ssize_t</name></type>
<name>xo_emit_hvp</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_emit_hv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>xo_ssize_t</name></type>
<name>xo_emit_hp</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xo_ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>xo_emit_hv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>xo_ssize_t</name></type>
<name>xo_emit_p</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xo_ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>xo_emit_hv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>xo_ssize_t</name></type>
<name>xo_emit_hvfp</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_emit_flags_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_emit_hvf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>xo_ssize_t</name></type>
<name>xo_emit_hfp</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_emit_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xo_ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>xo_emit_hvf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>xo_ssize_t</name></type>
<name>xo_emit_fp</name> <parameter_list>(<parameter><decl><type><name>xo_emit_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xo_ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>xo_emit_hvf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_container_hf</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_container_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_container</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_container_hd</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_container_d</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_container_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_container</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_container_hd</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_container_d</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_list_hf</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_list_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_list</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_list_hd</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_list_d</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_list_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_list</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_list_hd</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_list_d</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_instance_hf</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_instance_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_instance</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_instance_hd</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_instance_d</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_instance_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_instance</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_instance_hd</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_instance_d</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_marker_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_open_marker</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_marker_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_close_marker</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_attr_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_attr_hv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_attr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_error_hv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_error_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_errorn_hv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_newline</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_errorn_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_errorn</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_flush_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_flush</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_finish_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_finish</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_finish_atexit</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_set_leading_xpath</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_warn_hc</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>3<operator>,</operator> 4</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type>
<name>xo_warn_c</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type>
<name>xo_warn</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type>
<name>xo_warnx</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>void</name></type>
<name>xo_err</name> <argument_list>(<argument><expr><name>int</name> <name>eval</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>NORETURN</name> <name>PRINTFLIKE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type>
<name>xo_errx</name> <argument_list>(<argument><expr><name>int</name> <name>eval</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>NORETURN</name> <name>PRINTFLIKE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type>
<name>xo_errc</name> <argument_list>(<argument><expr><name>int</name> <name>eval</name></expr></argument>, <argument><expr><name>int</name> <name>code</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>NORETURN</name> <name>PRINTFLIKE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type>
<name>xo_message_hcv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>3<operator>,</operator> 0</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type>
<name>xo_message_hc</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>3<operator>,</operator> 4</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type>
<name>xo_message_c</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type>
<name>xo_message_e</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type>
<name>xo_message</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type>
<name>xo_emit_warn_hcv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>as_warning</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_emit_warn_hc</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_emit_warn_c</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_emit_warn</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_emit_warnx</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type>
<name>xo_emit_err</name> <argument_list>(<argument><expr><name>int</name> <name>eval</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>NORETURN</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type>
<name>xo_emit_errx</name> <argument_list>(<argument><expr><name>int</name> <name>eval</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>NORETURN</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type>
<name>xo_emit_errc</name> <argument_list>(<argument><expr><name>int</name> <name>eval</name></expr></argument>, <argument><expr><name>int</name> <name>code</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>NORETURN</name></decl>;</decl_stmt>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_emit_warn_hcvp</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>as_warning</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>as_warning</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_emit_warn_hcp</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_emit_warn_cp</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_emit_warn_p</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_emit_warnx_p</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>NORETURN</name></type> <name>PRINTFLIKE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list>
static <namespace><specifier>inline</specifier> void
<name>xo_emit_err_p</name> (<name>int</name> <name>eval</name><operator>,</operator> const <name>char</name> <modifier>*</modifier><name>fmt</name><operator>,</operator> ...</namespace></decl>)
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl_stmt>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_emit_errx_p</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>eval</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>PRINTFLIKE</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_emit_errc_p</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>eval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type>
<name>xo_emit_err_v</name> <argument_list>(<argument><expr><name>int</name> <name>eval</name></expr></argument>, <argument><expr><name>int</name> <name>code</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><name>va_list</name> <name>vap</name></expr></argument>)</argument_list> <name>NORETURN</name> <name>PRINTFLIKE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type>
<name>xo_no_setlocale</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>int</name></type>
<name>xo_parse_args</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_HAS_LIBXO</name></cpp:macro> <cpp:value>121</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>xo_version</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>xo_version_extra</name><index>[]</index></name></decl>;</decl_stmt>










<function_decl><type><name>void</name></type>
<name>xo_dump_stack</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type>
<name>xo_set_program</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type>
<name>xo_set_version</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type>
<name>xo_set_version_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_open_log</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ident</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logopt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>facility</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_close_log</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type>
<name>xo_set_logmask</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>maskpri</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_set_unit_test_mode</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_syslog</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_vsyslog</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xo_syslog_open_t</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xo_syslog_send_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>full_msg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v0_hdr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text_only</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xo_syslog_close_t</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>void</name></type>
<name>xo_set_syslog_handler</name> <parameter_list>(<parameter><decl><type><name>xo_syslog_open_t</name></type> <name>open_func</name></decl></parameter>, <parameter><decl><type><name>xo_syslog_send_t</name></type> <name>send_func</name></decl></parameter>,
<parameter><decl><type><name>xo_syslog_close_t</name></type> <name>close_func</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_set_syslog_enterprise_id</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>eid</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xo_simplify_field_func_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>char</name> <modifier>*</modifier></type>
<name>xo_simplify_format</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>with_numbers</name></decl></parameter>,
<parameter><decl><type><name>xo_simplify_field_func_t</name></type> <name>field_cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_emit_field_hv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rolmod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contents</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>efmt</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_emit_field_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rolmod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contents</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>efmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_ssize_t</name></type>
<name>xo_emit_field</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rolmod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contents</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>efmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_retain_clear_all</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_retain_clear</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
