<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/libxo/xo_syslog.c">







































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syslog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;paths.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_buf.h"</cpp:file></cpp:include>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_SYSLOG_ENTERPRISE_ID</name></cpp:macro> <cpp:value>"kern.syslog.enterprise_id"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_DEFAULT_EID</name></cpp:macro> <cpp:value>2238</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__macosx__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_DEFAULT_EID</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_DEFAULT_EID</name></cpp:macro> <cpp:value>32473</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HOST_NAME_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SC_HOST_NAME_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_NAME_MAX</name></cpp:macro> <cpp:value>_SC_HOST_NAME_MAX</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_NAME_MAX</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNUSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name></cpp:macro> <cpp:value>__attribute__ ((__unused__))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xo_logfile</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xo_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xo_opened</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xo_logstat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xo_logtag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xo_logfacility</name> <init>= <expr><name>LOG_USER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xo_logmask</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name> <name>xo_syslog_mutex</name></type> <name>UNUSED</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xo_unit_test</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_VOID</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int really_ignored = _x; if (really_ignored) { }} while (0)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DECL___ISTHREADED</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>HAVE_DECL___ISTHREADED</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__isthreaded</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_LOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { if (__isthreaded) pthread_mutex_lock(&amp;xo_syslog_mutex); } while(0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_UNLOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { if (__isthreaded) pthread_mutex_unlock(&amp;xo_syslog_mutex); } while(0)</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xo_disconnect_log</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xo_connect_log</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xo_open_log_unlocked</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <block>{
<decl><name>NOCONN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CONNDEF</name></decl>,
<decl><name>CONNPRIV</name></decl>,
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>xo_syslog_open_t</name></type> <name>xo_syslog_open</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>xo_syslog_send_t</name></type> <name>xo_syslog_send</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>xo_syslog_close_t</name></type> <name>xo_syslog_close</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>xo_syslog_enterprise_id</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>






<function><type><name>void</name></type>
<name>xo_set_syslog_enterprise_id</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>eid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>xo_syslog_enterprise_id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xo_syslog_enterprise_id</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>eid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_send_syslog</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>full_msg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>v0_hdr</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text_only</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xo_syslog_send</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_syslog_send</name><argument_list>(<argument><expr><name>full_msg</name></expr></argument>, <argument><expr><name>v0_hdr</name></expr></argument>, <argument><expr><name>text_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>full_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>full_msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>v0_hdr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>iov</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>newline</name><index>[]</index></name> <init>= <expr><literal type="string">"\n"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>iov_base</name></name> <operator>=</operator> <name>v0_hdr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>v0_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>iov_base</name></name> <operator>=</operator> <name>text_only</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>iov_base</name></name> <operator>=</operator> <name>newline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REAL_VOID</name><argument_list>(<argument><expr><call><name>writev</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xo_opened</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_open_log_unlocked</name><argument_list>(<argument><expr><name>xo_logtag</name></expr></argument>, <argument><expr><name>xo_logstat</name> <operator>|</operator> <name>LOG_NDELAY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_connect_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


















<if_stmt><if>if <condition>(<expr><call><name>send</name><argument_list>(<argument><expr><name>xo_logfile</name></expr></argument>, <argument><expr><name>full_msg</name></expr></argument>, <argument><expr><name>full_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOBUFS</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>xo_disconnect_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_connect_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>send</name><argument_list>(<argument><expr><name>xo_logfile</name></expr></argument>, <argument><expr><name>full_msg</name></expr></argument>, <argument><expr><name>full_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>




</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOBUFS</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>xo_status</name> <operator>==</operator> <name>CONNPRIV</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>send</name><argument_list>(<argument><expr><name>xo_logfile</name></expr></argument>, <argument><expr><name>full_msg</name></expr></argument>, <argument><expr><name>full_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return;</return>
</block_content>}</block></else></if_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>O_WRONLY</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_CLOEXEC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>xo_logstat</name> <operator>&amp;</operator> <name>LOG_CONS</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>_PATH_CONSOLE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>iov</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>crnl</name><index>[]</index></name> <init>= <expr><literal type="string">"\r\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>full_msg</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>iov_base</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>=</operator> <name>full_len</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>full_msg</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>iov_base</name></name> <operator>=</operator> <name>crnl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REAL_VOID</name><argument_list>(<argument><expr><call><name>writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_disconnect_log</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xo_syslog_close</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_syslog_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>xo_logfile</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>xo_logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xo_logfile</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>xo_status</name> <operator>=</operator> <name>NOCONN</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_connect_log</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xo_syslog_open</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_syslog_open</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>saddr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xo_logfile</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>SOCK_DGRAM</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOCK_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SOCK_CLOEXEC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>xo_logfile</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>xo_logfile</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>xo_status</name> <operator>==</operator> <name>NOCONN</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SUN_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sun_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_PATH_LOG_PRIV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strncpy</name><argument_list>(<argument><expr><name><name>saddr</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>_PATH_LOG_PRIV</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>saddr</name><operator>.</operator><name>sun_path</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>xo_logfile</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xo_status</name> <operator>=</operator> <name>CONNPRIV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_PATH_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>xo_status</name> <operator>==</operator> <name>NOCONN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strncpy</name><argument_list>(<argument><expr><name><name>saddr</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>_PATH_LOG</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>saddr</name><operator>.</operator><name>sun_path</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>xo_logfile</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>saddr</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xo_status</name> <operator>=</operator> <name>CONNDEF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_PATH_OLDLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>xo_status</name> <operator>==</operator> <name>NOCONN</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strncpy</name><argument_list>(<argument><expr><name><name>saddr</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>_PATH_OLDLOG</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>saddr</name><operator>.</operator><name>sun_path</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>xo_logfile</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>saddr</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xo_status</name> <operator>=</operator> <name>CONNDEF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>xo_status</name> <operator>==</operator> <name>NOCONN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>xo_logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xo_logfile</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_open_log_unlocked</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ident</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logstat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logfac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ident</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xo_logtag</name> <operator>=</operator> <name>ident</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>xo_logstat</name> <operator>=</operator> <name>logstat</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>logfac</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>logfac</name> <operator>&amp;</operator><operator>~</operator> <name>LOG_FACMASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xo_logfacility</name> <operator>=</operator> <name>logfac</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xo_logstat</name> <operator>&amp;</operator> <name>LOG_NDELAY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_connect_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xo_opened</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_open_log</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ident</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logstat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logfac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_log_unlocked</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><name>logstat</name></expr></argument>, <argument><expr><name>logfac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>xo_close_log</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xo_logfile</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>xo_logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xo_logfile</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>xo_logtag</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xo_status</name> <operator>=</operator> <name>NOCONN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>xo_set_logmask</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>pmask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>omask</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>omask</name> <operator>=</operator> <name>xo_logmask</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pmask</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xo_logmask</name> <operator>=</operator> <name>pmask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>omask</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_set_syslog_handler</name> <parameter_list>(<parameter><decl><type><name>xo_syslog_open_t</name></type> <name>open_func</name></decl></parameter>,
<parameter><decl><type><name>xo_syslog_send_t</name></type> <name>send_func</name></decl></parameter>,
<parameter><decl><type><name>xo_syslog_close_t</name></type> <name>close_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xo_syslog_open</name> <operator>=</operator> <name>open_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xo_syslog_send</name> <operator>=</operator> <name>send_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xo_syslog_close</name> <operator>=</operator> <name>close_func</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_snprintf</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>outsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>&amp;&amp;</operator> <name>outsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outsize</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <ternary><condition><expr><name>retval</name> <operator>&gt;</operator> <name>outsize</name></expr> ?</condition><then> <expr><name>outsize</name></expr> </then><else>: <expr><name>retval</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xo_ssize_t</name></type>
<name>xo_syslog_handle_write</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><call><name>xo_buf_left</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>left</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>left</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_syslog_handle_close</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>opaque</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_syslog_handle_flush</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>opaque</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_set_unit_test_mode</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xo_unit_test</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_vsyslog</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>pri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>saved_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>start_of_msg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v0_hdr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name></type> <name>xb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>my_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>log_offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>my_pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>my_pid</name> <operator>=</operator> <ternary><condition><expr><name>xo_unit_test</name></expr> ?</condition><then> <expr><literal type="number">222</literal></expr> </then><else>: <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pri</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>LOG_PRIMASK</name><operator>|</operator><name>LOG_FACMASK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name> <operator>|</operator> <name>LOG_CONS</name> <operator>|</operator> <name>LOG_PERROR</name> <operator>|</operator> <name>LOG_PID</name></expr></argument>,
<argument><expr><literal type="string">"syslog-unknown-priority"</literal></expr></argument>,
<argument><expr><literal type="string">"syslog: unknown facility/priority: %#x"</literal></expr></argument>, <argument><expr><name>pri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pri</name> <operator>&amp;=</operator> <name>LOG_PRIMASK</name><operator>|</operator><name>LOG_FACMASK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>LOG_MASK</name><argument_list>(<argument><expr><call><name>LOG_PRI</name><argument_list>(<argument><expr><name>pri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>xo_logmask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pri</name> <operator>&amp;</operator> <name>LOG_FACMASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pri</name> <operator>|=</operator> <name>xo_logfacility</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_bufp</name></name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name> <init>= <expr><call><name>xo_create</name><argument_list>(<argument><expr><name>XO_STYLE_SDPARAMS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>xop</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPROGNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>xo_logtag</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xo_logtag</name> <operator>=</operator> <call><name>getprogname</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>xo_set_writer</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>, <argument><expr><name>xo_syslog_handle_write</name></expr></argument>, <argument><expr><name>xo_syslog_handle_close</name></expr></argument>,
<argument><expr><name>xo_syslog_handle_flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>xo_unit_test</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1435085229</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">123456</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xo_logstat</name> <operator>&amp;</operator> <name>LOG_PERROR</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>v0_hdr</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>v0_hdr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>v0_hdr</name> <operator>+</operator> <literal type="number">2048</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xo_logtag</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>+=</operator> <call><name>xo_snprintf</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>tp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>xo_logtag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>xo_logstat</name> <operator>&amp;</operator> <name>LOG_PID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>+=</operator> <call><name>xo_snprintf</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>tp</name></expr></argument>, <argument><expr><literal type="string">"[%d]"</literal></expr></argument>, <argument><expr><name>my_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>xo_logtag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>+=</operator> <call><name>xo_snprintf</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>tp</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>log_offset</name> <operator>=</operator> <name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xb</name><operator>.</operator><name>xb_bufp</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>+=</operator> <call><name>xo_snprintf</name><argument_list>(<argument><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><call><name>xo_buf_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"&lt;%d&gt;1 "</literal></expr></argument>, <argument><expr><name>pri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>+=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><call><name>xo_buf_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%FT%T"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>+=</operator> <call><name>xo_snprintf</name><argument_list>(<argument><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><call><name>xo_buf_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">".%03.3u"</literal></expr></argument>, <argument><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>+=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><call><name>xo_buf_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%z "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>HOST_NAME_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xo_unit_test</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="string">"worker-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>gethostname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>+=</operator> <call><name>xo_snprintf</name><argument_list>(<argument><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><call><name>xo_buf_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>hostname</name></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>+=</operator> <call><name>xo_snprintf</name><argument_list>(<argument><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><call><name>xo_buf_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>xo_logtag</name></expr> ?</condition><then/><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>+=</operator> <call><name>xo_snprintf</name><argument_list>(<argument><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><call><name>xo_buf_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>my_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><name>buf</name></type> <name>UNUSED</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eid</name> <init>= <expr><name>xo_syslog_enterprise_id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>at_sign</name> <init>= <expr><literal type="string">"@"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>eid</name> <operator>=</operator> <name>at_sign</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>eid</name> <operator>=</operator> <name>at_sign</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>eid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYSCTLBYNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><name>XO_SYSLOG_ENTERPRISE_ID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><name>XO_SYSLOG_ENTERPRISE_ID</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eid</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>eid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xo_set_syslog_enterprise_id</name><argument_list>(<argument><expr><name>XO_DEFAULT_EID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eid</name> <operator>=</operator> <name>xo_syslog_enterprise_id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>+=</operator> <call><name>xo_snprintf</name><argument_list>(<argument><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><call><name>xo_buf_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s [%s%s%s "</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>at_sign</name></expr></argument>, <argument><expr><name>eid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_hv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_flush_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>xb</name><operator>.</operator><name>xb_curp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>+=</operator> <call><name>xo_snprintf</name><argument_list>(<argument><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><call><name>xo_buf_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"] "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>+=</operator> <call><name>xo_snprintf</name><argument_list>(<argument><expr><name><name>xb</name><operator>.</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><call><name>xo_buf_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%c%c%c"</literal></expr></argument>, <argument><expr><literal type="number">0xEF</literal></expr></argument>, <argument><expr><literal type="number">0xBB</literal></expr></argument>, <argument><expr><literal type="number">0xBF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>xo_logstat</name> <operator>&amp;</operator> <name>LOG_PERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start_of_msg</name> <operator>=</operator> <name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xb</name><operator>.</operator><name>xb_bufp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_STYLE_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_hv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_flush_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>xb</name><operator>.</operator><name>xb_curp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name><name>xb</name><operator>.</operator><name>xb_curp</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_get_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>XOF_LOG_SYSLOG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"xo: syslog: %s\n"</literal></expr></argument>, <argument><expr><name><name>xb</name><operator>.</operator><name>xb_bufp</name></name> <operator>+</operator> <name>log_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_send_syslog</name><argument_list>(<argument><expr><name><name>xb</name><operator>.</operator><name>xb_bufp</name></name></expr></argument>, <argument><expr><name>v0_hdr</name></expr></argument>, <argument><expr><name><name>xb</name><operator>.</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start_of_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_destroy</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>xo_syslog</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>pri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_vsyslog</name><argument_list>(<argument><expr><name>pri</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
