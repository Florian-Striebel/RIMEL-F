<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/libxo/xo_encoder.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_encoder.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLFCN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLFUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlfunc</name><parameter_list>(<parameter><type><name>_p</name></type></parameter>, <parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlsym(_p, _n)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlopen</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>, <parameter><type><name>_f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlsym</name><parameter_list>(<parameter><type><name>_p</name></type></parameter>, <parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlfunc</name><parameter_list>(<parameter><type><name>_p</name></type></parameter>, <parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xo_encoder_setup</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><struct>struct <name>xo_string_node_s</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>xo_string_node_s</argument>)</argument_list></macro> <expr_stmt><expr><name>xs_link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>xs_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_string_node_t</name>;</typedef>

<typedef>typedef <macro><name>TAILQ_HEAD</name><argument_list>(<argument>xo_string_list_s</argument>, <argument>xo_string_node_s</argument>)</argument_list></macro> <expr_stmt><expr><name>xo_string_list_t</name></expr>;</expr_stmt></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_string_list_init</name> <parameter_list>(<parameter><decl><type><name>xo_string_list_t</name> <modifier>*</modifier></type><name>listp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>listp</name><operator>-&gt;</operator><name>tqh_last</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>xo_string_node_t</name> <modifier>*</modifier></type>
<name>xo_string_add</name> <parameter_list>(<parameter><decl><type><name>xo_string_list_t</name> <modifier>*</modifier></type><name>listp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>listp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_string_list_init</name><argument_list>(<argument><expr><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_string_node_t</name> <modifier>*</modifier></type><name>xsp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xsp</name> <operator>=</operator> <call><name>xo_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xsp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xsp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_data</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_data</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><name>listp</name></expr></argument>, <argument><expr><name>xsp</name></expr></argument>, <argument><expr><name>xs_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>xsp</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_STRING_LIST_FOREACH</name><parameter_list>(<parameter><type><name>_xsp</name></type></parameter>, <parameter><type><name>_listp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xo_string_list_init(_listp); TAILQ_FOREACH(_xsp, _listp, xs_link)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_string_list_clean</name> <parameter_list>(<parameter><decl><type><name>xo_string_list_t</name> <modifier>*</modifier></type><name>listp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_string_node_t</name> <modifier>*</modifier></type><name>xsp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_string_list_init</name><argument_list>(<argument><expr><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>xsp</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><name>listp</name></expr></argument>, <argument><expr><name>xsp</name></expr></argument>, <argument><expr><name>xs_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name>xsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>xo_string_list_t</name></type> <name>xo_encoder_path</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>xo_encoder_path_add</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xo_encoder_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_string_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xo_encoder_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<typedef>typedef <type><struct>struct <name>xo_encoder_node_s</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>xo_encoder_node_s</argument>)</argument_list></macro> <expr_stmt><expr><name>xe_link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xe_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_encoder_func_t</name></type> <name>xe_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>xe_dlhandle</name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_encoder_node_t</name>;</typedef>

<typedef>typedef <macro><name>TAILQ_HEAD</name><argument_list>(<argument>xo_encoder_list_s</argument>, <argument>xo_encoder_node_s</argument>)</argument_list></macro> <expr_stmt><expr><name>xo_encoder_list_t</name></expr>;</expr_stmt></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_ENCODER_LIST_FOREACH</name><parameter_list>(<parameter><type><name>_xep</name></type></parameter>, <parameter><type><name>_listp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xo_encoder_list_init(_listp); TAILQ_FOREACH(_xep, _listp, xe_link)</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <name>xo_encoder_list_t</name></type> <name>xo_encoders</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_encoder_list_init</name> <parameter_list>(<parameter><decl><type><name>xo_encoder_list_t</name> <modifier>*</modifier></type><name>listp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>listp</name><operator>-&gt;</operator><name>tqh_last</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xo_encoder_node_t</name> <modifier>*</modifier></type>
<name>xo_encoder_list_add</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xo_encoder_node_t</name> <modifier>*</modifier></type><name>xep</name> <init>= <expr><call><name>xo_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>xep</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>xep</name><operator>-&gt;</operator><name>xe_name</name></name> <operator>=</operator> <call><name>xo_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xep</name><operator>-&gt;</operator><name>xe_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name>xep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xep</name><operator>-&gt;</operator><name>xe_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xo_encoders</name></expr></argument>, <argument><expr><name>xep</name></expr></argument>, <argument><expr><name>xe_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>xep</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_encoders_clean</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_encoder_node_t</name> <modifier>*</modifier></type><name>xep</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_encoder_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>xep</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xo_encoders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xo_encoders</name></expr></argument>, <argument><expr><name>xep</name></expr></argument>, <argument><expr><name>xe_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xep</name><operator>-&gt;</operator><name>xe_dlhandle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>xep</name><operator>-&gt;</operator><name>xe_dlhandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name>xep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_string_list_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xo_encoder_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_encoder_setup</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initted</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>initted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_string_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xo_encoder_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_encoder_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xo_encoders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_encoder_path_add</name><argument_list>(<argument><expr><name>XO_ENCODERDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xo_encoder_node_t</name> <modifier>*</modifier></type>
<name>xo_encoder_find</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_encoder_node_t</name> <modifier>*</modifier></type><name>xep</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_encoder_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xo_encoders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>XO_ENCODER_LIST_FOREACH</name><argument_list>(<argument>xep</argument>, <argument>&amp;xo_encoders</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>xep</name><operator>-&gt;</operator><name>xe_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>xep</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xo_encoder_node_t</name> <modifier>*</modifier></type>
<name>xo_encoder_discover</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dlp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_string_node_t</name> <modifier>*</modifier></type><name>xsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_encoder_node_t</name> <modifier>*</modifier></type><name>xep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>XO_STRING_LIST_FOREACH</name><argument_list>(<argument>xsp</argument>, <argument>&amp;xo_encoder_path</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>fmt</name><index>[]</index></name> <init>= <expr><literal type="string">"%s/%s.enc"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dlp</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>RTLD_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dlp</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>dlp</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>xo_encoder_init_func_t</name></type> <name>func</name></decl>;</decl_stmt>

<expr_stmt><expr><name>func</name> <operator>=</operator> <operator>(</operator><name>xo_encoder_init_func_t</name><operator>)</operator> <call><name>dlfunc</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>XO_ENCODER_INIT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xo_encoder_init_args_t</name></type> <name>xei</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xei</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xei</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xei</name><operator>.</operator><name>xei_version</name></name> <operator>=</operator> <name>XO_ENCODER_VERSION</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xei</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>xei</name><operator>.</operator><name>xei_handler</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xep</name> <operator>=</operator> <call><name>xo_encoder_list_add</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xep</name><operator>-&gt;</operator><name>xe_handler</name></name> <operator>=</operator> <name><name>xei</name><operator>.</operator><name>xei_handler</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xep</name><operator>-&gt;</operator><name>xe_dlhandle</name></name> <operator>=</operator> <name>dlp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>xep</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_encoder_register</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>xo_encoder_func_t</name></type> <name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xo_encoder_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xo_encoder_node_t</name> <modifier>*</modifier></type><name>xep</name> <init>= <expr><call><name>xo_encoder_find</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xep</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xep</name> <operator>=</operator> <call><name>xo_encoder_list_add</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xep</name><operator>-&gt;</operator><name>xe_handler</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_encoder_unregister</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xo_encoder_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xo_encoder_node_t</name> <modifier>*</modifier></type><name>xep</name> <init>= <expr><call><name>xo_encoder_find</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>xep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xo_encoders</name></expr></argument>, <argument><expr><name>xep</name></expr></argument>, <argument><expr><name>xe_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name>xep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>xo_encoder_init</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xo_encoder_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>opts_char</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>col_opts</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>plus_opts</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>col_opts</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>plus_opts</name></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator><name>plus_opts</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>col_opts</name></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator><name>plus_opts</name> <operator>&lt;</operator> <name>col_opts</name><operator>)</operator></expr> ?</condition><then> <expr><name>plus_opts</name></expr> </then><else>: <expr><name>col_opts</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opts</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opts_char</name> <operator>=</operator> <operator>*</operator><name>opts</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opts_copy</name> <init>= <expr><name>copy</name> <operator>+</operator> <operator>(</operator><name>opts</name> <operator>-</operator> <name>name</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>opts_copy</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>opts</name> <operator>=</operator> <name>opts_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"invalid encoder name: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>






<decl_stmt><decl><type><name>xo_encoder_node_t</name> <modifier>*</modifier></type><name>xep</name> <init>= <expr><call><name>xo_encoder_find</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>xep</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xep</name> <operator>=</operator> <call><name>xo_encoder_discover</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xep</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"encoder not founde: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_set_encoder</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xep</name><operator>-&gt;</operator><name>xe_handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_CREATE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>opts</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xo_encoder_op_t</name></type> <name>op</name></decl>;</decl_stmt>


<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>opts_char</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>XO_OP_OPTIONS_PLUS</name></expr> </then><else>: <expr><name>XO_OP_OPTIONS</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>xo_handle_t</name> <modifier>*</modifier></type>
<name>xo_encoder_create</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_create</name><argument_list>(<argument><expr><name>XO_STYLE_ENCODER</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xop</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_encoder_init</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_destroy</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>xop</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>xo_encoder_handle</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_encoder_op_t</name></type> <name>op</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name> <init>= <expr><call><name>xo_get_private</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_encoder_func_t</name></type> <name>func</name> <init>= <expr><call><name>xo_get_encoder</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>func</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>private</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_encoder_op_name</name> <parameter_list>(<parameter><decl><type><name>xo_encoder_op_t</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"unknown"</literal></expr>,
<expr><literal type="string">"create"</literal></expr>,
<expr><literal type="string">"open_container"</literal></expr>,
<expr><literal type="string">"close_container"</literal></expr>,
<expr><literal type="string">"open_list"</literal></expr>,
<expr><literal type="string">"close_list"</literal></expr>,
<expr><literal type="string">"open_leaf_list"</literal></expr>,
<expr><literal type="string">"close_leaf_list"</literal></expr>,
<expr><literal type="string">"open_instance"</literal></expr>,
<expr><literal type="string">"close_instance"</literal></expr>,
<expr><literal type="string">"string"</literal></expr>,
<expr><literal type="string">"content"</literal></expr>,
<expr><literal type="string">"finish"</literal></expr>,
<expr><literal type="string">"flush"</literal></expr>,
<expr><literal type="string">"destroy"</literal></expr>,
<expr><literal type="string">"attr"</literal></expr>,
<expr><literal type="string">"version"</literal></expr>,
<expr><literal type="string">"options"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>names</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
