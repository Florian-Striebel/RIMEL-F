<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/libxo/libxo.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_explicit.h"</cpp:file></cpp:include>























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBXO_WCWIDTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_wcwidth.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xo_wcwidth</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wcwidth(_x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDIO_EXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio_ext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HUMANIZE_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libutil.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xo_humanize_number</name></cpp:macro> <cpp:value>humanize_number</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_humanize.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libintl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_LOCAL_before</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_LOCAL_after</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_LOCAL_declspec</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_THREAD_LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_LOCAL</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_x</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_THREAD_LOCAL</name> <operator>==</operator> <name>THREAD_LOCAL_before</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_LOCAL</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__thread _x</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_THREAD_LOCAL</name> <operator>==</operator> <name>THREAD_LOCAL_after</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_LOCAL</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_x __thread</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_THREAD_LOCAL</name> <operator>==</operator> <name>THREAD_LOCAL_declspec</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_LOCAL</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(_x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> unknown thread-local setting</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>xo_version</name><index>[]</index></name> <init>= <expr><name>LIBXO_VERSION</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>xo_version_extra</name><index>[]</index></name> <init>= <expr><name>LIBXO_VERSION_EXTRA</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>xo_default_format</name><index>[]</index></name> <init>= <expr><literal type="string">"%s"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNUSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name></cpp:macro> <cpp:value>__attribute__ ((__unused__))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_INDENT_BY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_DEPTH</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_MAX_ANCHOR_WIDTH</name></cpp:macro> <cpp:value>(8*1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_FAILURE_NAME</name></cpp:macro> <cpp:value>"failure"</cpp:value></cpp:define>


<typedef>typedef <type><name>unsigned</name></type> <name>xo_xsf_flags_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_NOT_FIRST</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_LIST</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_INSTANCE</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_DTRT</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_CONTENT</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_EMIT</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_EMIT_KEY</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_EMIT_LEAF_LIST</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_MARKER_FLAGS</name></cpp:macro> <cpp:value>(XSF_NOT_FIRST | XSF_CONTENT | XSF_EMIT | XSF_EMIT_KEY | XSF_EMIT_LEAF_LIST )</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSS_TRANSITION</name><parameter_list>(<parameter><type><name>_old</name></type></parameter>, <parameter><type><name>_new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_old) &lt;&lt; 8 | (_new))</cpp:value></cpp:define>






<typedef>typedef <type><struct>struct <name>xo_stack_s</name> <block>{
<decl_stmt><decl><type><name>xo_xsf_flags_t</name></type> <name>xs_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_state_t</name></type> <name>xs_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xs_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xs_keys</name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_stack_t</name>;</typedef>






<typedef>typedef <type><name>uint8_t</name></type> <name>xo_color_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_COL_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_COL_BLACK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_COL_RED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_COL_GREEN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_COL_YELLOW</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_COL_BLUE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_COL_MAGENTA</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_COL_CYAN</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_COL_WHITE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_NUM_COLORS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_EFF_RESET</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_EFF_NORMAL</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_EFF_BOLD</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_EFF_UNDERLINE</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_EFF_INVERSE</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_EFF_CLEAR_BITS</name></cpp:macro> <cpp:value>XO_EFF_RESET</cpp:value></cpp:define>

<typedef>typedef <type><name>uint8_t</name></type> <name>xo_effect_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>xo_colors_s</name> <block>{
<decl_stmt><decl><type><name>xo_effect_t</name></type> <name>xoc_effects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_color_t</name></type> <name>xoc_col_fg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_color_t</name></type> <name>xoc_col_bg</name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_colors_t</name>;</typedef>






<struct>struct <name>xo_handle_s</name> <block>{
<decl_stmt><decl><type><name>xo_xof_flags_t</name></type> <name>xo_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_xof_flags_t</name></type> <name>xo_iflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_style_t</name></type> <name>xo_style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>xo_indent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>xo_indent_by</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_write_func_t</name></type> <name>xo_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_close_func_t</name></type> <name>xo_close</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_flush_func_t</name></type> <name>xo_flush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_formatter_t</name></type> <name>xo_formatter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_checkpointer_t</name></type> <name>xo_checkpointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>xo_opaque</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name></type> <name>xo_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name></type> <name>xo_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name></type> <name>xo_attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name></type> <name>xo_predicate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xo_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xo_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xo_stack_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_info_t</name> <modifier>*</modifier></type><name>xo_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xo_info_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>xo_vap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xo_leading_xpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>xo_mbstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xo_anchor_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xo_anchor_columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xo_anchor_min_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xo_units_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xo_columns</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBXO_TEXT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>xo_color_t</name></type> <name><name>xo_color_map_fg</name><index>[<expr><name>XO_NUM_COLORS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_color_t</name></type> <name><name>xo_color_map_bg</name><index>[<expr><name>XO_NUM_COLORS</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>xo_colors_t</name></type> <name>xo_colors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name></type> <name>xo_color_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xo_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xo_errno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xo_gt_domain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_encoder_func_t</name></type> <name>xo_encoder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>xo_private</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_BIT_ISSET</name><parameter_list>(<parameter><type><name>_flag</name></type></parameter>, <parameter><type><name>_bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((_flag) &amp; (_bit)) ? 1 : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_BIT_SET</name><parameter_list>(<parameter><type><name>_flag</name></type></parameter>, <parameter><type><name>_bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (_flag) |= (_bit); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_BIT_CLEAR</name><parameter_list>(<parameter><type><name>_flag</name></type></parameter>, <parameter><type><name>_bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (_flag) &amp;= ~(_bit); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_ISSET</name><parameter_list>(<parameter><type><name>_xop</name></type></parameter>, <parameter><type><name>_bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XOF_BIT_ISSET(_xop-&gt;xo_flags, _bit)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_SET</name><parameter_list>(<parameter><type><name>_xop</name></type></parameter>, <parameter><type><name>_bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XOF_BIT_SET(_xop-&gt;xo_flags, _bit)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOF_CLEAR</name><parameter_list>(<parameter><type><name>_xop</name></type></parameter>, <parameter><type><name>_bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XOF_BIT_CLEAR(_xop-&gt;xo_flags, _bit)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOIF_ISSET</name><parameter_list>(<parameter><type><name>_xop</name></type></parameter>, <parameter><type><name>_bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XOF_BIT_ISSET(_xop-&gt;xo_iflags, _bit)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOIF_SET</name><parameter_list>(<parameter><type><name>_xop</name></type></parameter>, <parameter><type><name>_bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XOF_BIT_SET(_xop-&gt;xo_iflags, _bit)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOIF_CLEAR</name><parameter_list>(<parameter><type><name>_xop</name></type></parameter>, <parameter><type><name>_bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XOF_BIT_CLEAR(_xop-&gt;xo_iflags, _bit)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOIF_REORDER</name></cpp:macro> <cpp:value>XOF_BIT(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOIF_DIV_OPEN</name></cpp:macro> <cpp:value>XOF_BIT(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOIF_TOP_EMITTED</name></cpp:macro> <cpp:value>XOF_BIT(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOIF_ANCHOR</name></cpp:macro> <cpp:value>XOF_BIT(3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOIF_UNITS_PENDING</name></cpp:macro> <cpp:value>XOF_BIT(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOIF_INIT_IN_PROGRESS</name></cpp:macro> <cpp:value>XOF_BIT(5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOIF_MADE_OUTPUT</name></cpp:macro> <cpp:value>XOF_BIT(6)</cpp:value></cpp:define>


































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XF_WIDTH_MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XF_WIDTH_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XF_WIDTH_MAX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XF_WIDTH_NUM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XF_ENC_WIDE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XF_ENC_UTF8</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XF_ENC_LOCALE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>xo_format_s</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>xf_fc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>xf_enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>xf_skip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>xf_lflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>xf_hflag</name></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>xf_jflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>xf_tflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>xf_zflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>xf_qflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>xf_seen_minus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xf_leading_zero</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xf_dots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>xf_width</name><index>[<expr><name>XF_WIDTH_NUM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xf_stars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>xf_star</name><index>[<expr><name>XF_WIDTH_NUM</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_format_t</name>;</typedef>










<typedef>typedef <type><struct>struct <name>xo_field_info_s</name> <block>{
<decl_stmt><decl><type><name>xo_xff_flags_t</name></type> <name>xfi_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xfi_ftype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xfi_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xfi_content</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xfi_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xfi_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xfi_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xfi_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xfi_clen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xfi_flen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xfi_elen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xfi_fnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xfi_renum</name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_field_info_t</name>;</typedef>








<expr_stmt><expr><specifier>static</specifier> <macro><name>THREAD_LOCAL</name><argument_list>(<argument>xo_handle_t</argument>)</argument_list></macro> <name>xo_default_handle</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <macro><name>THREAD_LOCAL</name><argument_list>(<argument>int</argument>)</argument_list></macro> <name>xo_default_inited</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xo_locale_inited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xo_program</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>xo_realloc_func_t</name></type> <name>xo_realloc</name> <init>= <expr><name>realloc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_free_func_t</name></type> <name>xo_free</name> <init>= <expr><name>free</name></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_transition</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>xo_state_t</name></type> <name>new_state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>xo_set_options_simple</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>xo_color_find</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>xo_buf_append_div</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>vlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>flen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>elen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>xo_anchor_clear</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>;</function_decl>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>xo_style_t</name></type>
<name>xo_style</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBXO_TEXT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>XO_STYLE_TEXT</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>xop</name><operator>-&gt;</operator><name>xo_style</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>xo_text_only</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBXO_TEXT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>TRUE</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>FALSE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>xo_ssize_t</name></type>
<name>xo_write_to_file</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator> <name>opaque</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_close_file</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator> <name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_flush_file</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator> <name>opaque</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_NUMBUFS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_SMBUFSZ</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_printable</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><specifier>static</specifier> <macro><name>THREAD_LOCAL</name><argument_list>(<argument>char</argument>)</argument_list></macro> <name><name>bufset</name><index>[<expr><name>XO_NUMBUFS</name></expr>]</index><index>[<expr><name>XO_SMBUFSZ</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <macro><name>THREAD_LOCAL</name><argument_list>(<argument>int</argument>)</argument_list></macro> <name>bufnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>bufnum</name> <operator>==</operator> <name>XO_NUMBUFS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bufnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>bufset</name><index>[<expr><name>bufnum</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>res</name></expr><operator>,</operator> <expr><name>ep</name> <operator>=</operator> <name>res</name> <operator>+</operator> <name>XO_SMBUFSZ</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>str</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr><operator>,</operator> <expr><name>str</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_depth_check</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_stack_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>depth</name> <operator>+=</operator> <name>XO_DEPTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xsp</name> <operator>=</operator> <call><name>xo_realloc</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"xo_depth_check: out of memory (%d)"</literal></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name>depth</name> <operator>-</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_stack_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>xsp</name> <operator>+</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_stack_size</name></name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack_size</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name></name> <operator>=</operator> <name>xsp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_no_setlocale</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xo_locale_inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_xml_leader_len</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>xo_ssize_t</name></type> <name>nlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>isalpha</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"invalid XML tag name: '%.*s'"</literal></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"_"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_xml_leader</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_xml_leader_len</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_is_line_buffered</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE___FLBF</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>__flbf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_init_handle</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_opaque</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_write</name></name> <operator>=</operator> <name>xo_write_to_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_flush</name></name> <operator>=</operator> <name>xo_flush_file</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_is_line_buffered</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_FLUSH_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xo_locale_inited</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xo_locale_inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LC_ALL"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LC_CTYPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <literal type="string">"C"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>xo_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_INIT_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>XOIF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_INIT_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_indent_by</name></name> <operator>=</operator> <name>XO_INDENT_BY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_depth_check</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XOIF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_INIT_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_default_init</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name> <init>= <expr><operator>&amp;</operator><name>xo_default_handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_init_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_LIBXO_OPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_ENV</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LIBXO_OPTIONS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>env</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_options_simple</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>xo_default_inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>xo_handle_t</name> <modifier>*</modifier></type>
<name>xo_default</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xop</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xo_default_inited</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_default_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <operator>&amp;</operator><name>xo_default_handle</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>xop</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_indent</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_indent</name></name> <operator>*</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_indent_by</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_TOP_EMITTED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>+=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_indent_by</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>rc</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_buf_indent</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>indent</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>indent</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>xo_xml_amp</name><index>[]</index></name> <init>= <expr><literal type="string">"&amp;amp;"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>xo_xml_lt</name><index>[]</index></name> <init>= <expr><literal type="string">"&amp;lt;"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>xo_xml_gt</name><index>[]</index></name> <init>= <expr><literal type="string">"&amp;gt;"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>xo_xml_quot</name><index>[]</index></name> <init>= <expr><literal type="string">"&amp;quot;"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_escape_xml</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>XOF_BIT_ISSET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>XFF_ATTR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr><operator>,</operator> <expr><name>ep</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>len</name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delta</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xo_xml_lt</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delta</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xo_xml_gt</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delta</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xo_xml_amp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delta</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xo_xml_quot</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>ep</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>xo_xml_lt</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>xo_xml_gt</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>xo_xml_amp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>xo_xml_quot</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>-=</operator> <name>slen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>cp</name> <operator>&gt;</operator> <name>ep</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>!=</operator> <name>ip</name></expr>)</condition>;</do>

<return>return <expr><name>len</name> <operator>+</operator> <name>delta</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_escape_json</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name> <name>flags</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr><operator>,</operator> <expr><name>ep</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>len</name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delta</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delta</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>ep</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ip</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ip</name><operator>--</operator> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ip</name><operator>--</operator> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>cp</name> <operator>&gt;</operator> <name>ep</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>!=</operator> <name>ip</name></expr>)</condition>;</do>

<return>return <expr><name>len</name> <operator>+</operator> <name>delta</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_escape_sdparams</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name> <name>flags</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr><operator>,</operator> <expr><name>ep</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>len</name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delta</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>ep</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ip</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>cp</name> <operator>&gt;</operator> <name>ep</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>!=</operator> <name>ip</name></expr>)</condition>;</do>

<return>return <expr><name>len</name> <operator>+</operator> <name>delta</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_buf_escape</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>xo_escape_xml</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>xo_escape_json</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>xo_escape_sdparams</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_write</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>!=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_anchor_clear</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_write</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>xop</name><operator>-&gt;</operator><name>xo_write</name></name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_opaque</name></name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>XOIF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_UNITS_PENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_vsnprintf</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>va_local</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>left</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>-</operator> <operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_formatter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>xop</name><operator>-&gt;</operator><name>xo_formatter</name></name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <name>left</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>-</operator> <operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_formatter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>xop</name><operator>-&gt;</operator><name>xo_formatter</name></name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_printf_v</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>left</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>-</operator> <operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>va_local</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <name>left</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>-</operator> <operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_printf</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf_v</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>xo_utf8_data_bits</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x07</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>xo_utf8_len_bits</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xf0</literal></expr> }</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_is_utf8</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type>
<name>xo_utf8_to_wc_len</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bval</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>*</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bval</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>bval</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>bval</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>bval</name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_buf_utf8_len</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>bufsiz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>xo_utf8_to_wc_len</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"invalid UTF-8 data: %02hhx"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>bufsiz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"invalid UTF-8 data (short): %02hhx (%d/%d)"</literal></expr></argument>,
<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>)</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"invalid UTF-8 data (byte %d): %x"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>wchar_t</name></type>
<name>xo_utf8_char</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>wc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>*</operator><name>cp</name> <operator>&amp;</operator> <name><name>xo_utf8_data_bits</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>wc</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wc</name> <operator>|=</operator> <name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>wchar_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>wc</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_utf8_emit_len</name> <parameter_list>(<parameter><decl><type><name>wchar_t</name></type> <name>wc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wc</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <name>wc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>wc</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <name>wc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>wc</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <name>wc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>wc</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <name>wc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_utf8_emit_char</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name></type> <name>wc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>wc</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>wc</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wc</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <name><name>xo_utf8_data_bits</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name><name>xo_utf8_len_bits</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_buf_append_locale_from_utf8</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ibuf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>ilen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>wc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>






<expr_stmt><expr><name>wc</name> <operator>=</operator> <call><name>xo_utf8_char</name><argument_list>(<argument><expr><name>ibuf</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>==</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"invalid UTF-8 byte sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_LOCALE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>ibuf</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>ilen</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>MB_LEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_mbstate</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_mbstate</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>wcrtomb</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>wc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_mbstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"could not convert wide char: %lx"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>xo_wcwidth</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_buf_append_locale</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>cp</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name> <init>= <expr><name>cp</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>save_off</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_is_utf8</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cols</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>cp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>cp</name> <operator>-</operator> <name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>xo_buf_utf8_len</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>save_off</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cols</name> <operator>+=</operator> <call><name>xo_buf_append_locale_from_utf8</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name>slen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLUMNS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ep</name> <operator>-</operator> <name>sp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_data_append</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_data_escape</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xo_buf_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBXO_NO_RETAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>xo_retain_clear_all</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_retain_clear</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>fmt</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_retain_add</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>fmt</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier><name>fields</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>num_fields</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_retain_find</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>fmt</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier><modifier>*</modifier><name>valp</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier><name>nump</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>












<typedef>typedef <type><struct>struct <name>xo_retain_entry_s</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>xo_retain_entry_s</name></name> <modifier>*</modifier></type><name>xre_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>xre_hits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xre_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xre_num_fields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xre_fields</name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_retain_entry_t</name>;</typedef>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XO_RETAIN_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_RETAIN_SIZE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETAIN_HASH_SIZE</name></cpp:macro> <cpp:value>(1&lt;&lt;XO_RETAIN_SIZE)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>xo_retain_s</name> <block>{
<decl_stmt><decl><type><name>xo_retain_entry_t</name> <modifier>*</modifier></type><name><name>xr_bucket</name><index>[<expr><name>RETAIN_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_retain_t</name>;</typedef>

<expr_stmt><expr><specifier>static</specifier> <macro><name>THREAD_LOCAL</name><argument_list>(<argument>xo_retain_t</argument>)</argument_list></macro> <name>xo_retain</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <macro><name>THREAD_LOCAL</name><argument_list>(<argument>unsigned</argument>)</argument_list></macro> <name>xo_retain_count</name></expr>;</expr_stmt>














<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>xo_retain_hash</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>uintptr_t</name></type> <name>iptr</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <name>fmt</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>iptr</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>^</operator> <literal type="number">61</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name> <operator>+</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name> <operator>^</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name> <operator>*</operator> <literal type="number">0x3a8f05c5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name> <operator>^</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>&amp;=</operator> <name>RETAIN_HASH_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>xo_retain_clear_all</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_retain_entry_t</name> <modifier>*</modifier></type><name>xrep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RETAIN_HASH_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>xrep</name> <operator>=</operator> <name><name>xo_retain</name><operator>.</operator><name>xr_bucket</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>xrep</name></expr>;</condition> <incr><expr><name>xrep</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>xrep</name><operator>-&gt;</operator><name>xre_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name>xrep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>xo_retain</name><operator>.</operator><name>xr_bucket</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>xo_retain_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>xo_retain_clear</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_retain_entry_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xrepp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>hash</name> <init>= <expr><call><name>xo_retain_hash</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xrepp</name> <operator>=</operator> <operator>&amp;</operator><name><name>xo_retain</name><operator>.</operator><name>xr_bucket</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</init> <condition><expr><operator>*</operator><name>xrepp</name></expr>;</condition>
<incr><expr><name>xrepp</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>xrepp</name><operator>)</operator><operator>-&gt;</operator><name>xre_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>xrepp</name><operator>)</operator><operator>-&gt;</operator><name>xre_format</name></name> <operator>==</operator> <name>fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>xrepp</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>xrepp</name><operator>)</operator><operator>-&gt;</operator><name>xre_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xo_retain_count</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_retain_find</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>valp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nump</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xo_retain_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>hash</name> <init>= <expr><call><name>xo_retain_hash</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_retain_entry_t</name> <modifier>*</modifier></type><name>xrep</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xrep</name> <operator>=</operator> <name><name>xo_retain</name><operator>.</operator><name>xr_bucket</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</init> <condition><expr><name>xrep</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>xrep</name> <operator>=</operator> <name><name>xrep</name><operator>-&gt;</operator><name>xre_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xrep</name><operator>-&gt;</operator><name>xre_format</name></name> <operator>==</operator> <name>fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <name><name>xrep</name><operator>-&gt;</operator><name>xre_fields</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nump</name> <operator>=</operator> <name><name>xrep</name><operator>-&gt;</operator><name>xre_num_fields</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xrep</name><operator>-&gt;</operator><name>xre_hits</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_retain_add</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num_fields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>hash</name> <init>= <expr><call><name>xo_retain_hash</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_retain_entry_t</name> <modifier>*</modifier></type><name>xrep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xrep</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>num_fields</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fields</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xrep</name> <operator>=</operator> <call><name>xo_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xrep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xfip</name> <operator>=</operator> <operator>(</operator><name>xo_field_info_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>xrep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>xfip</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>num_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fields</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>xrep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xrep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xrep</name><operator>-&gt;</operator><name>xre_format</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xrep</name><operator>-&gt;</operator><name>xre_fields</name></name> <operator>=</operator> <name>xfip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xrep</name><operator>-&gt;</operator><name>xre_num_fields</name></name> <operator>=</operator> <name>num_fields</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>xrep</name><operator>-&gt;</operator><name>xre_next</name></name> <operator>=</operator> <name><name>xo_retain</name><operator>.</operator><name>xr_bucket</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xo_retain</name><operator>.</operator><name>xr_bucket</name><index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <name>xrep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xo_retain_count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_warn_hcv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check_warn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>check_warn</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_WARN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>plen</name> <init>= <expr><ternary><condition><expr><name>xo_program</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>xo_program</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newfmt</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>plen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newfmt</name></expr></argument>, <argument><expr><name>xo_program</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newfmt</name><index>[<expr><name>plen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newfmt</name><index>[<expr><name>plen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newfmt</name> <operator>+</operator> <name>plen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newfmt</name><index>[<expr><name>len</name> <operator>+</operator> <name>plen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_WARN_XML</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>err_open</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;error&gt;"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>err_close</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;/error&gt;"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>msg_open</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;message&gt;"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>msg_close</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;/message&gt;"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>err_open</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>err_open</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>msg_open</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_open</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va_local</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>left</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>-</operator> <operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>newfmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <name>left</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>-</operator> <operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_escape_xml</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>msg_close</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_close</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>err_close</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>err_close</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>xo_write</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>newfmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_warn_hc</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_warn_hcv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_warn_c</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_warn</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_warnx</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_err</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>eval</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_errx</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>eval</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_errc</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>eval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>xo_message_hcv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>msg_open</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;message&gt;"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>msg_close</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;/message&gt;"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>va_local</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_nl</name> <init>= <expr><operator>(</operator><name><name>fmt</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<expr_stmt><expr><name>xbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_indent_by</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>msg_open</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_open</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>left</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>-</operator> <operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <name>left</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>-</operator> <operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_escape_xml</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_nl</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_nl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>msg_close</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_close</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>xo_write</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name> <init>= <expr><name>buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bufsiz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <name>bufsiz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bufsiz</name> <operator>=</operator> <name>rc</name> <operator>+</operator> <name>BUFSIZ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>bp</name> <operator>+</operator> <name>rc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_nl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc2</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>bufsiz</name> <operator>-</operator> <name>rc</name></expr></argument>, <argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>code</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">": "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>code</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>+=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_buf_append_div</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>

<return>return;</return>

<case>case <expr><name>XO_STYLE_TEXT</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf_v</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLUMNS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_nl</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>need_nl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_DIV_OPEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_close</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;/div&gt;"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XOIF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_DIV_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>div_close</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_close</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>xo_flush_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_message_hc</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_message_hcv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_message_c</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_message_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_message_e</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_message_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_message</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_message_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_failure</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_WARN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_warn_hcv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><name>xo_handle_t</name> <modifier>*</modifier></type>
<name>xo_create</name> <parameter_list>(<parameter><decl><type><name>xo_style_t</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name> <init>= <expr><call><name>xo_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_style</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_init_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_style</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>xop</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>xo_handle_t</name> <modifier>*</modifier></type>
<name>xo_create_to_file</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>xo_style_t</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name> <init>= <expr><call><name>xo_create</name><argument_list>(<argument><expr><name>style</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_opaque</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_write</name></name> <operator>=</operator> <name>xo_write_to_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_close</name></name> <operator>=</operator> <name>xo_close_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_flush</name></name> <operator>=</operator> <name>xo_flush_file</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>xop</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>xo_set_file_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"xo_set_file: NULL fp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_opaque</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_write</name></name> <operator>=</operator> <name>xo_write_to_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_close</name></name> <operator>=</operator> <name>xo_close_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_flush</name></name> <operator>=</operator> <name>xo_flush_file</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>xo_set_file</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_set_file_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>xo_destroy</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name> <init>= <expr><call><name>xo_default</name><argument_list>(<argument><expr><name>xop_arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_flush_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_close</name></name> <operator>&amp;&amp;</operator> <call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_CLOSE_FP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>xop</name><operator>-&gt;</operator><name>xo_close</name></name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_predicate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_color_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_version</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xop_arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xo_default_handle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xo_default_handle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xo_default_inited</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>xo_set_style</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_style_t</name></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_style</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>xo_style_t</name></type>
<name>xo_get_style</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_name_to_style</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>XO_STYLE_XML</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"json"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>XO_STYLE_JSON</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>XO_STYLE_ENCODER</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>XO_STYLE_TEXT</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"html"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>XO_STYLE_HTML</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sdparams"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>XO_STYLE_SDPARAMS</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_style_is_encoding</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_JSON</name>
<operator>||</operator> <call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_XML</name>
<operator>||</operator> <call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_SDPARAMS</name>
<operator>||</operator> <call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct <name>xo_mapping_s</name> <block>{
<decl_stmt><decl><type><name>xo_xff_flags_t</name></type> <name>xm_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xm_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_mapping_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>xo_xff_flags_t</name></type>
<name>xo_name_lookup</name> <parameter_list>(<parameter><decl><type><name>xo_mapping_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>value</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><name><name>map</name><operator>-&gt;</operator><name>xm_name</name></name></expr>;</condition> <incr><expr><name>map</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>xm_name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>map</name><operator>-&gt;</operator><name>xm_value</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOT_NEEDED_YET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_value_lookup</name> <parameter_list>(<parameter><decl><type><name>xo_mapping_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><name><name>map</name><operator>-&gt;</operator><name>xm_name</name></name></expr>;</condition> <incr><expr><name>map</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>xm_value</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>map</name><operator>-&gt;</operator><name>xm_name</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>xo_mapping_t</name></type> <name><name>xo_xof_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>XOF_COLOR_ALLOWED</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_COLOR</name></expr>, <expr><literal type="string">"color-force"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_COLUMNS</name></expr>, <expr><literal type="string">"columns"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_DTRT</name></expr>, <expr><literal type="string">"dtrt"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_FLUSH</name></expr>, <expr><literal type="string">"flush"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_FLUSH_LINE</name></expr>, <expr><literal type="string">"flush-line"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_IGNORE_CLOSE</name></expr>, <expr><literal type="string">"ignore-close"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_INFO</name></expr>, <expr><literal type="string">"info"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_KEYS</name></expr>, <expr><literal type="string">"keys"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_LOG_GETTEXT</name></expr>, <expr><literal type="string">"log-gettext"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_LOG_SYSLOG</name></expr>, <expr><literal type="string">"log-syslog"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_NO_HUMANIZE</name></expr>, <expr><literal type="string">"no-humanize"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_NO_LOCALE</name></expr>, <expr><literal type="string">"no-locale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_RETAIN_NONE</name></expr>, <expr><literal type="string">"no-retain"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_NO_TOP</name></expr>, <expr><literal type="string">"no-top"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_NOT_FIRST</name></expr>, <expr><literal type="string">"not-first"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_PRETTY</name></expr>, <expr><literal type="string">"pretty"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_RETAIN_ALL</name></expr>, <expr><literal type="string">"retain"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_UNDERSCORES</name></expr>, <expr><literal type="string">"underscores"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_UNITS</name></expr>, <expr><literal type="string">"units"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_WARN</name></expr>, <expr><literal type="string">"warn"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_WARN_XML</name></expr>, <expr><literal type="string">"warn-xml"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_XPATH</name></expr>, <expr><literal type="string">"xpath"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>xo_mapping_t</name></type> <name><name>xo_xof_simple_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>XOF_COLOR_ALLOWED</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_FLUSH</name></expr>, <expr><literal type="string">"flush"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_FLUSH_LINE</name></expr>, <expr><literal type="string">"flush-line"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_NO_HUMANIZE</name></expr>, <expr><literal type="string">"no-humanize"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_NO_LOCALE</name></expr>, <expr><literal type="string">"no-locale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_RETAIN_NONE</name></expr>, <expr><literal type="string">"no-retain"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_PRETTY</name></expr>, <expr><literal type="string">"pretty"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_RETAIN_ALL</name></expr>, <expr><literal type="string">"retain"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_UNDERSCORES</name></expr>, <expr><literal type="string">"underscores"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XOF_WARN</name></expr>, <expr><literal type="string">"warn"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>xo_name_to_flag</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>xo_name_lookup</name><argument_list>(<argument><expr><name>xo_xof_names</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>xo_set_style_name</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>style</name> <init>= <expr><call><name>xo_name_to_style</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_set_color_map</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_text_only</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>value</name></expr><operator>,</operator> <expr><name>ep</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name>np</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>np</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>vp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>cp</name></expr> ?</condition><then> <expr><call><name>xo_color_find</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>vp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>vp</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>xo_color_find</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBXO_TEXT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_color_map_fg</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>fg</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>num</name></expr> </then><else>: <expr><name>fg</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_color_map_bg</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>bg</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>num</name></expr> </then><else>: <expr><name>bg</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>num</name> <operator>&gt;</operator> <name>XO_NUM_COLORS</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLOR_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XOF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLOR_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBXO_TEXT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<for>for <control>( <init>;</init> <condition><expr><name>num</name> <operator>&lt;</operator> <name>XO_NUM_COLORS</name></expr>;</condition> <incr><expr><name>num</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_color_map_fg</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_color_map_bg</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_set_options_simple</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_xof_flags_t</name></type> <name>new_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>bp</name></expr><operator>,</operator> <expr><name>ep</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cp</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name>np</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>np</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>vp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><literal type="string">"colors"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_set_color_map</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_flag</name> <operator>=</operator> <call><name>xo_name_lookup</name><argument_list>(<argument><expr><name>xo_xof_simple_names</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>new_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="string">"no-color"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XOF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLOR_ALLOWED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"unknown simple option: %s"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>xo_set_options</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>style</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>new_style</name></decl>, <decl><type ref="prev"/><name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_xof_flags_t</name></type> <name>new_flag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBXO_COLOR_ON_BY_DEFAULT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLOR_ALLOWED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sz</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>input</name><operator>++</operator></expr> ;</init> <condition><expr><operator>*</operator><name>input</name></expr>;</condition> <incr><expr><name>input</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>input</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLOR_ALLOWED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_FLUSH_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_LOG_GETTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_style</name></name> <operator>=</operator> <name>XO_STYLE_HTML</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0123456789"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_indent_by</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> <operator>+=</operator> <name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_style</name></name> <operator>=</operator> <name>XO_STYLE_JSON</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_KEYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_HUMANIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_style</name></name> <operator>=</operator> <name>XO_STYLE_TEXT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_UNITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_UNDERSCORES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_WARN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_style</name></name> <operator>=</operator> <name>XO_STYLE_XML</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_XPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>bp</name></expr><operator>,</operator> <expr><name>ep</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cp</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name>np</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>np</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vp</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>vp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing value for encoder option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_encoder_init</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"error initializing encoder: %s"</literal></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>vp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><literal type="string">"colors"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_set_color_map</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>new_style</name> <operator>=</operator> <call><name>xo_name_to_style</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_style</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_style</name> <operator>!=</operator> <name>XO_STYLE_ENCODER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>style</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"ignoring multiple styles: '%s'"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <name>new_style</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>new_flag</name> <operator>=</operator> <call><name>xo_name_to_flag</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>new_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="string">"no-color"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XOF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLOR_ALLOWED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="string">"indent"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_indent_by</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing value for indent option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing value for encoder option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_encoder_init</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"error initializing encoder: %s"</literal></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"unknown libxo option value: '%s'"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_style</name></name><operator>=</operator> <name>style</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>xo_set_flags</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>xo_xof_flags_t</name></type>
<name>xo_get_flags</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>xop</name><operator>-&gt;</operator><name>xo_flags</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_strndup</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>xo_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>xo_set_leading_xpath</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_leading_xpath</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_leading_xpath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_leading_xpath</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_leading_xpath</name></name> <operator>=</operator> <call><name>xo_strndup</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>xo_set_info</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_info_t</name> <modifier>*</modifier></type><name>infop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>infop</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xo_info_t</name> <modifier>*</modifier></type><name>xip</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xip</name> <operator>=</operator> <name>infop</name></expr><operator>,</operator> <expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>xip</name><operator>-&gt;</operator><name>xi_name</name></name></expr>;</condition> <incr><expr><name>xip</name><operator>++</operator></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_info</name></name> <operator>=</operator> <name>infop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_info_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>xo_set_formatter</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_formatter_t</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>xo_checkpointer_t</name></type> <name>cfunc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_formatter</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_checkpointer</name></name> <operator>=</operator> <name>cfunc</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>xo_clear_flags</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XOF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_state_name</name> <parameter_list>(<parameter><decl><type><name>xo_state_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"init"</literal></expr>,
<expr><literal type="string">"open_container"</literal></expr>,
<expr><literal type="string">"close_container"</literal></expr>,
<expr><literal type="string">"open_list"</literal></expr>,
<expr><literal type="string">"close_list"</literal></expr>,
<expr><literal type="string">"open_instance"</literal></expr>,
<expr><literal type="string">"close_instance"</literal></expr>,
<expr><literal type="string">"open_leaf_list"</literal></expr>,
<expr><literal type="string">"close_leaf_list"</literal></expr>,
<expr><literal type="string">"discarding"</literal></expr>,
<expr><literal type="string">"marker"</literal></expr>,
<expr><literal type="string">"emit"</literal></expr>,
<expr><literal type="string">"emit_leaf_list"</literal></expr>,
<expr><literal type="string">"finish"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>names</name><index>[<expr><name>state</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_line_ensure_open</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name> <name>flags</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_open</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;div class=\"line\"&gt;"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_open_blank</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;div class=\"blank-line\"&gt;"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_CONTINUATION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XOF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_CONTINUATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XOIF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_DIV_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_DIV_OPEN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XO_STYLE_HTML</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XOIF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_DIV_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_BLANK_LINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>div_open_blank</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_open_blank</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>div_open</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_open</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_line_close</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_close</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;/div&gt;"</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_DIV_OPEN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_line_ensure_open</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XOIF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_DIV_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>div_close</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_close</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_info_compare</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>xo_info_t</name> <modifier>*</modifier></type><name>xip</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>xip</name><operator>-&gt;</operator><name>xi_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>xo_info_t</name> <modifier>*</modifier></type>
<name>xo_info_find</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_info_t</name> <modifier>*</modifier></type><name>xip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>nlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><index>[<expr><name>nlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>xip</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_info</name></name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_info_count</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>xo_info_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>xip</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT</name><parameter_list>(<parameter><type><name>_have</name></type></parameter>, <parameter><type><name>_need</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((_have) &lt;&lt; 8) | (_need))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_check_conversion</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>have_enc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>have_enc</name></expr></argument>, <argument><expr><name>need_enc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>XF_ENC_UTF8</name></expr></argument>, <argument><expr><name>XF_ENC_UTF8</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>XF_ENC_UTF8</name></expr></argument>, <argument><expr><name>XF_ENC_LOCALE</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>XF_ENC_WIDE</name></expr></argument>, <argument><expr><name>XF_ENC_UTF8</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>XF_ENC_WIDE</name></expr></argument>, <argument><expr><name>XF_ENC_LOCALE</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>XF_ENC_LOCALE</name></expr></argument>, <argument><expr><name>XF_ENC_LOCALE</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>XF_ENC_LOCALE</name></expr></argument>, <argument><expr><name>XF_ENC_UTF8</name></expr></argument>)</argument_list></call></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"invalid conversion (%c:%c)"</literal></expr></argument>, <argument><expr><name>have_enc</name></expr></argument>, <argument><expr><name>need_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_format_string_direct</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>,
<parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wcp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>need_enc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>have_enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>wc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ilen</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>XOF_BIT_ISSET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>XFF_ATTR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_UNESCAPE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'%'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wcp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>wcp</name> <operator>==</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ilen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>have_enc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XF_ENC_WIDE</name></expr>:</case>
<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>*</operator><name>wcp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ilen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XF_ENC_UTF8</name></expr>:</case>
<expr_stmt><expr><name>ilen</name> <operator>=</operator> <call><name>xo_utf8_to_wc_len</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ilen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"invalid UTF-8 character: %02hhx"</literal></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <name>ilen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <call><name>xo_utf8_char</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>==</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"invalid UTF-8 character: %02hhx/%d"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>cp</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name>ilen</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XF_ENC_LOCALE</name></expr>:</case>
<expr_stmt><expr><name>ilen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name>MB_LEN_MAX</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ilen</name> <operator>=</operator> <call><name>mbrtowc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_mbstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ilen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"invalid mbs char: %02hhx"</literal></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>L</name><literal type="char">'?'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ilen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ilen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name>ilen</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>ilen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>xo_wcwidth</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <ternary><condition><expr><call><name>iswcntrl</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_TEXT</name> <operator>||</operator> <call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_HTML</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cols</name> <operator>+</operator> <name>width</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>need_enc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XF_ENC_UTF8</name></expr>:</case>


<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>xo_xml_lt</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>wc</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>xo_xml_gt</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>wc</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>xo_xml_amp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name>wc</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>xo_xml_quot</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>slen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>slen</name></expr>;</expr_stmt>
<goto>goto <name>done_with_encoding</name>;</goto>

<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name>wc</name> <operator>!=</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name>wc</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>wc</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wc</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>wc</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wc</name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>wc</name> <operator>=</operator> <name>wc</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name><operator>++</operator> <operator>=</operator> <name>wc</name></expr>;</expr_stmt>
<goto>goto <name>done_with_encoding</name>;</goto>

<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name>wc</name> <operator>!=</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name>wc</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>wc</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name><operator>++</operator> <operator>=</operator> <name>wc</name></expr>;</expr_stmt>
<goto>goto <name>done_with_encoding</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><name>olen</name> <operator>=</operator> <call><name>xo_utf8_emit_len</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>olen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"ignoring bad length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_utf8_emit_char</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XF_ENC_LOCALE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>MB_LEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>olen</name> <operator>=</operator> <call><name>wcrtomb</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>wc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_mbstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>olen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"could not convert wide char: %lx"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<label><name>done_with_encoding</name>:</label>
<expr_stmt><expr><name>cols</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>cols</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_needed_encoding</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_UTF8</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>XF_ENC_UTF8</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_TEXT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>XF_ENC_LOCALE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>XF_ENC_UTF8</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_format_string</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>xo_format_t</name> <modifier>*</modifier></type><name>xfp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>null</name><index>[]</index></name> <init>= <expr><literal type="string">"(null)"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>null_no_quotes</name><index>[]</index></name> <init>= <expr><literal type="string">"null"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wcp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>off</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>, <decl><type ref="prev"/><name>off2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_enc</name> <init>= <expr><call><name>xo_needed_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_check_conversion</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xfp</name><operator>-&gt;</operator><name>xf_enc</name></name></expr></argument>, <argument><expr><name>need_enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>xfp</name><operator>-&gt;</operator><name>xf_width</name><index>[<expr><name>XF_WIDTH_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xfp</name><operator>-&gt;</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strerror</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_errno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>cp</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>normal_string</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xfp</name><operator>-&gt;</operator><name>xf_enc</name></name> <operator>==</operator> <name>XF_ENC_WIDE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wcp</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>wchar_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xfp</name><operator>-&gt;</operator><name>xf_skip</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>wcp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>null</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>normal_string</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>xfp</name><operator>-&gt;</operator><name>xf_skip</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_NOQUOTE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>xo_style_is_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>null_no_quotes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>null_no_quotes</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>null</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>xfp</name><operator>-&gt;</operator><name>xf_enc</name></name> <operator>==</operator> <name>need_enc</name>
<operator>&amp;&amp;</operator> <name><name>xfp</name><operator>-&gt;</operator><name>xf_width</name><index>[<expr><name>XF_WIDTH_MIN</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>xfp</name><operator>-&gt;</operator><name>xf_width</name><index>[<expr><name>XF_WIDTH_SIZE</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>xfp</name><operator>-&gt;</operator><name>xf_width</name><index>[<expr><name>XF_WIDTH_MAX</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLUMNS</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>off2</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>off2</name> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>xo_format_string_direct</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>wcp</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name><name>xfp</name><operator>-&gt;</operator><name>xf_width</name><index>[<expr><name>XF_WIDTH_MAX</name></expr>]</index></name></expr></argument>,
<argument><expr><name>need_enc</name></expr></argument>, <argument><expr><name><name>xfp</name><operator>-&gt;</operator><name>xf_enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>




<expr_stmt><expr><name>off2</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>off2</name> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <name><name>xfp</name><operator>-&gt;</operator><name>xf_width</name><index>[<expr><name>XF_WIDTH_MIN</name></expr>]</index></name></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name><name>xfp</name><operator>-&gt;</operator><name>xf_width</name><index>[<expr><name>XF_WIDTH_MIN</name></expr>]</index></name> <operator>-</operator> <name>cols</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name><name>xfp</name><operator>-&gt;</operator><name>xf_width</name><index>[<expr><name>XF_WIDTH_MIN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>xfp</name><operator>-&gt;</operator><name>xf_seen_minus</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>xfp</name><operator>-&gt;</operator><name>xf_leading_zero</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cols</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLUMNS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

<label><name>bail</name>:</label>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_buf_find_last_number</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>start_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>digit</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>sp</name> <operator>+</operator> <name>start_offset</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>--</operator><name>cp</name> <operator>&gt;=</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

<for>for <control>( <init>;</init> <condition><expr><name>cp</name> <operator>&gt;=</operator> <name>sp</name></expr>;</condition> <incr><expr><name>cp</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>cp</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <name>digit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>digit</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_count_utf8_cols</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>tlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>wc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name>str</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>str</name> <operator>&lt;</operator> <name>ep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tlen</name> <operator>=</operator> <call><name>xo_utf8_to_wc_len</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cols</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <call><name>xo_utf8_char</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>==</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cols</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>iswprint</name><argument_list>(<argument><expr><operator>(</operator><name>wint_t</name><operator>)</operator> <name>wc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>ssize_t</name></type> <name>width</name> <init>= <expr><call><name>xo_wcwidth</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <ternary><condition><expr><call><name>iswcntrl</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cols</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>tlen</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>cols</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_dgettext</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domainname</name> <init>= <expr><name><name>xop</name><operator>-&gt;</operator><name>xo_gt_domain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dgettext</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_LOG_GETTEXT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"xo: gettext: %s%s%smsgid \"%s\" returns \"%s\"\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>domainname</name></expr> ?</condition><then> <expr><literal type="string">"domain \""</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>domainname</name></expr> ?</condition><then> <expr><literal type="string">"\", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_dngettext</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>plural</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domainname</name> <init>= <expr><name><name>xop</name><operator>-&gt;</operator><name>xo_gt_domain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dngettext</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>, <argument><expr><name>sing</name></expr></argument>, <argument><expr><name>plural</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_LOG_GETTEXT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"xo: gettext: %s%s%s"</literal>
<literal type="string">"msgid \"%s\", msgid_plural \"%s\" (%lu) returns \"%s\"\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>domainname</name></expr> ?</condition><then> <expr><literal type="string">"domain \""</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>domainname</name></expr> ?</condition><then> <expr><literal type="string">"\", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>sing</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>plural</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_dgettext</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_dngettext</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>singular</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>plural</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>singular</name></expr> </then><else>: <expr><name>plural</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_format_gettext</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name></type> <name>start_offset</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cols</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name>cp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_GT_PLURAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>xo_buf_find_last_number</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>start_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>two</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="char">','</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>two</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"no comma in plural gettext field: '%s'"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cols</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>two</name> <operator>==</operator> <name>cp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"nothing before comma in plural gettext "</literal>
<literal type="string">"field: '%s'"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cols</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>two</name> <operator>==</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"nothing after comma in plural gettext "</literal>
<literal type="string">"field: '%s'"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cols</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>two</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_GT_FIELD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newstr</name> <operator>=</operator> <call><name>xo_dngettext</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>newstr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>n</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>cp</name></expr> </then><else>: <expr><name>two</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>==</operator> <name>cp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name>two</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>need_enc</name> <operator>==</operator> <name>XF_ENC_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>xo_count_utf8_cols</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name>cp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>newstr</name> <operator>=</operator> <call><name>xo_dgettext</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>==</operator> <name>cp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>need_enc</name> <operator>==</operator> <name>XF_ENC_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cols</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>





<decl_stmt><decl><type><name>ssize_t</name></type> <name>nlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>newstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newcopy</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>nlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newcopy</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><name>nlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start_offset</name></expr>;</expr_stmt>
<return>return <expr><call><name>xo_format_string_direct</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>newcopy</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>need_enc</name></expr></argument>, <argument><expr><name>XF_ENC_UTF8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_data_append_content</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_enc</name> <init>= <expr><call><name>xo_needed_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>start_offset</name> <init>= <expr><call><name>xo_buf_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>xo_format_string_direct</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>, <argument><expr><name>XFF_UNESCAPE</name> <operator>|</operator> <name>flags</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>need_enc</name></expr></argument>, <argument><expr><name>XF_ENC_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_GT_FLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>xo_format_gettext</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>start_offset</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>need_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLUMNS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_bump_width</name> <parameter_list>(<parameter><decl><type><name>xo_format_t</name> <modifier>*</modifier></type><name>xfp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>digit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><operator>&amp;</operator><name><name>xfp</name><operator>-&gt;</operator><name>xf_width</name><index>[<expr><name><name>xfp</name><operator>-&gt;</operator><name>xf_dots</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>ip</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><name>ip</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>digit</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_trim_ws</name> <parameter_list>(<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>delta</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>sp</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr><operator>,</operator> <expr><name>ep</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>len</name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>cp</name> <operator>-</operator> <name>sp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr><operator>,</operator> <expr><name>sp</name> <operator>=</operator> <name>ep</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>len</name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>ep</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ep</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name>ep</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_do_format_field</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>flen</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_format_t</name></type> <name>xf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>style</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_XML</name><operator>)</operator></expr> ?</condition><then> <expr><name>XO_STYLE_XML</name></expr> </then><else>: <expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>make_output</name> <init>= <expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_NO_OUTPUT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_enc</name> <init>= <expr><call><name>xo_needed_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>real_need_enc</name> <init>= <expr><name>need_enc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>old_cols</name> <init>= <expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_GT_FIELD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_enc</name> <operator>=</operator> <name>XF_ENC_UTF8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xbp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>start_offset</name> <init>= <expr><call><name>xo_buf_offset</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>fmt</name></expr><operator>,</operator> <expr><name>ep</name> <operator>=</operator> <name>fmt</name> <operator>+</operator> <name>flen</name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<label><name>add_one</name>:</label>
<if_stmt><if>if <condition>(<expr><name>xp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xp</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cp</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>ep</name> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>add_one</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>make_output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>xo_format_string_direct</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>XFF_UNESCAPE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xp</name></expr></argument>, <argument><expr><name>cp</name> <operator>-</operator> <name>xp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>need_enc</name></expr></argument>, <argument><expr><name>XF_ENC_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLUMNS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_leading_zero</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>xf</name><operator>.</operator><name>xf_width</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>xf</name><operator>.</operator><name>xf_width</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_VA_ARG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XFF_ENCODE_ONLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>style</name> <operator>!=</operator> <name>XO_STYLE_XML</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>xo_style_is_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_skip</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XFF_DISPLAY_ONLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>style</name> <operator>!=</operator> <name>XO_STYLE_TEXT</name>
<operator>&amp;&amp;</operator> <call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XO_STYLE_HTML</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_skip</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>make_output</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_skip</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>







<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_lflag</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_hflag</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_jflag</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_tflag</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_zflag</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_qflag</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>xf</name><operator>.</operator><name>xf_dots</name></name> <operator>&gt;=</operator> <name>XF_WIDTH_NUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"Too many dots in format: '%s'"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_seen_minus</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_leading_zero</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_leading_zero</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_bump_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xf</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_stars</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_star</name><index>[<expr><name><name>xf</name><operator>.</operator><name>xf_dots</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"diouxXDOUeEfFgGaAcCsSpm"</literal></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"unsupported format: '%s'"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>ep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"field format missing format character: %s"</literal></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_VA_ARG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>XF_WIDTH_NUM</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_star</name><index>[<expr><name>s</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_width</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_width</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>xf</name><operator>.</operator><name>xf_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_seen_minus</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_width</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_width</name><index>[<expr><name>XF_WIDTH_MAX</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>xf</name><operator>.</operator><name>xf_width</name><index>[<expr><name>XF_WIDTH_SIZE</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_width</name><index>[<expr><name>XF_WIDTH_MAX</name></expr>]</index></name> <operator>=</operator> <name><name>xf</name><operator>.</operator><name>xf_width</name><index>[<expr><name>XF_WIDTH_SIZE</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'D'</literal> <operator>||</operator> <name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'O'</literal> <operator>||</operator> <name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_lflag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xf</name><operator>.</operator><name>xf_skip</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>fbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_fmt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><name>cp</name> <operator>-</operator> <name>sp</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>fbp</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newfmt</name> <init>= <expr><name><name>fbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newfmt</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newfmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newfmt</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_formatter</name></name> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'S'</literal>
<operator>||</operator> <name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'m'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xf</name><operator>.</operator><name>xf_enc</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'m'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>XF_ENC_UTF8</name></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator><name><name>xf</name><operator>.</operator><name>xf_lflag</name></name> <operator>||</operator> <operator>(</operator><name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'S'</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>XF_ENC_WIDE</name></expr>
</then><else>: <expr><ternary><condition><expr><name><name>xf</name><operator>.</operator><name>xf_hflag</name></name></expr> ?</condition><then> <expr><name>XF_ENC_LOCALE</name></expr> </then><else>: <expr><name>XF_ENC_UTF8</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_format_string</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_TRIM_WS</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>xo_style_is_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_trim_ws</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>columns</name> <init>= <expr><name>rc</name> <operator>=</operator> <call><name>xo_vsnprintf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>newfmt</name></expr></argument>,
<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<switch>switch <condition>(<expr><name>style</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_TRIM_WS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>columns</name> <operator>=</operator> <name>rc</name> <operator>=</operator> <call><name>xo_trim_ws</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_escape_xml</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_ATTR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_TRIM_WS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>columns</name> <operator>=</operator> <name>rc</name> <operator>=</operator> <call><name>xo_trim_ws</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_escape_json</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_TRIM_WS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>columns</name> <operator>=</operator> <name>rc</name> <operator>=</operator> <call><name>xo_trim_ws</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_escape_sdparams</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_TRIM_WS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>columns</name> <operator>=</operator> <name>rc</name> <operator>=</operator> <call><name>xo_trim_ws</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>








<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLUMNS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name> <operator>+=</operator> <name>columns</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name> <operator>+=</operator> <name>columns</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_VA_ARG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator><name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_skip</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition> <block>{<block_content>


</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>XF_WIDTH_NUM</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_star</name><index>[<expr><name>s</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"diouxXDOU"</literal></expr></argument>, <argument><expr><name><name>xf</name><operator>.</operator><name>xf_fc</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_hflag</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_hflag</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_lflag</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<macro><name>va_arg</name><argument_list>(<argument>xop-&gt;xo_vap</argument>, <argument>unsigned long long</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_lflag</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<macro><name>va_arg</name><argument_list>(<argument>xop-&gt;xo_vap</argument>, <argument>unsigned long</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_jflag</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>intmax_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_tflag</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_zflag</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_qflag</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>quad_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"eEfFgGaA"</literal></expr></argument>, <argument><expr><name><name>xf</name><operator>.</operator><name>xf_fc</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_lflag</name></name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>va_arg</name><argument_list>(<argument>xop-&gt;xo_vap</argument>, <argument>long double</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'C'</literal> <operator>||</operator> <operator>(</operator><name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <name><name>xf</name><operator>.</operator><name>xf_lflag</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>wint_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>xf</name><operator>.</operator><name>xf_fc</name></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>xp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>make_output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>xo_format_string_direct</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>XFF_UNESCAPE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xp</name></expr></argument>, <argument><expr><name>cp</name> <operator>-</operator> <name>xp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>need_enc</name></expr></argument>, <argument><expr><name>XF_ENC_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLUMNS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_GT_FLAGS</name></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>ssize_t</name></type> <name>new_cols</name> <init>= <expr><call><name>xo_format_gettext</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>start_offset</name></expr></argument>,
<argument><expr><name>old_cols</name></expr></argument>, <argument><expr><name>real_need_enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLUMNS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name> <operator>+=</operator> <name>new_cols</name> <operator>-</operator> <name>old_cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name> <operator>+=</operator> <name>new_cols</name> <operator>-</operator> <name>old_cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_fix_encoding</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>encoding</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'%'</literal> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>encoding</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>cp</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>

<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_color_append_html</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_color_buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_color_buf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_humanize</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>left</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HN_DIVISOR_1000</name></expr>)</condition> <block>{<block_content>
<for>for <control>( <init>;</init> <condition><expr><name>left</name></expr>;</condition> <incr><expr><name>scale</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>left</name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>( <init>;</init> <condition><expr><name>left</name></expr>;</condition> <incr><expr><name>scale</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>left</name> <operator>/=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>scale</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>xo_humanize_number</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<typedef>typedef <type><struct>struct <name>xo_humanize_save_s</name> <block>{
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xhs_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xhs_columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xhs_anchor_columns</name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_humanize_save_t</name>;</typedef>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_format_humanize</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>,
<parameter><decl><type><name>xo_humanize_save_t</name> <modifier>*</modifier></type><name>savep</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_HUMANIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>end_offset</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>end_offset</name> <operator>==</operator> <name><name>savep</name><operator>-&gt;</operator><name>xhs_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>






<decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name><name>savep</name><operator>-&gt;</operator><name>xhs_offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>value</name> <operator>==</operator> <name>ULLONG_MAX</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>ep</name> <operator>!=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name><name>savep</name><operator>-&gt;</operator><name>xhs_offset</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name><name>savep</name><operator>-&gt;</operator><name>xhs_offset</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>left</name> <init>= <expr><operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name><operator>)</operator> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hn_flags</name> <init>= <expr><name>HN_NOSPACE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_HN_SPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hn_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>HN_NOSPACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_HN_DECIMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hn_flags</name> <operator>|=</operator> <name>HN_DECIMAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_HN_1000</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hn_flags</name> <operator>|=</operator> <name>HN_DIVISOR_1000</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_humanize</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>hn_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name> <operator>=</operator> <name><name>savep</name><operator>-&gt;</operator><name>xhs_columns</name></name> <operator>+</operator> <name>rc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name> <operator>=</operator> <name><name>savep</name><operator>-&gt;</operator><name>xhs_anchor_columns</name></name> <operator>+</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>xo_simple_field</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>encode_only</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>vlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>flen</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>encode_only</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_NO_OUTPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_do_format_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>encode_only</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append_content</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_buf_append_div</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>vlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>flen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>elen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_start</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;div class=\""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_tag</name><index>[]</index></name> <init>= <expr><literal type="string">"\" data-tag=\""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_xpath</name><index>[]</index></name> <init>= <expr><literal type="string">"\" data-xpath=\""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_key</name><index>[]</index></name> <init>= <expr><literal type="string">"\" data-key=\"key"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_end</name><index>[]</index></name> <init>= <expr><literal type="string">"\"&gt;"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_close</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;/div&gt;"</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fmt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>flen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><index>[<expr><name>flen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <call><name>xo_fix_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>








<decl_stmt><decl><type><name>int</name></type> <name>need_predidate</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name>name</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_KEY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_DISPLAY_ONLY</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_XPATH</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>need_predidate</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>va_local</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_checkpointer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>xop</name><operator>-&gt;</operator><name>xo_checkpointer</name></name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>pbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_predicate</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>pbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>pbp</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>pbp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>pbp</name></expr></argument>, <argument><expr><literal type="string">" = '"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>pbp</name></expr></argument>, <argument><expr><literal type="string">"='"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>xo_xff_flags_t</name></type> <name>pflags</name> <init>= <expr><name>flags</name> <operator>|</operator> <name>XFF_XML</name> <operator>|</operator> <name>XFF_ATTR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pflags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>XFF_NO_OUTPUT</name> <operator>|</operator> <name>XFF_ENCODE_ONLY</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_do_format_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>pbp</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>, <argument><expr><name>pflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>pbp</name></expr></argument>, <argument><expr><literal type="string">"']"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>olen</name> <init>= <expr><ternary><condition><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_keys</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_keys</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>dlen</name> <init>= <expr><name><name>pbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>pbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>xo_realloc</name><argument_list>(<argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_keys</name></name></expr></argument>, <argument><expr><name>olen</name> <operator>+</operator> <name>dlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name> <operator>+</operator> <name>olen</name></expr></argument>, <argument><expr><name><name>pbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><index>[<expr><name>olen</name> <operator>+</operator> <name>dlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_keys</name></name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_checkpointer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>xop</name><operator>-&gt;</operator><name>xo_checkpointer</name></name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_ENCODE_ONLY</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_line_ensure_open</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_indent_by</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>div_start</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_start</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_color_buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_color_buf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>div_tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_tag</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_UNITS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XOIF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_UNITS_PENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_units_offset</name></name> <operator>=</operator>
<name><name>xop</name><operator>-&gt;</operator><name>xo_data</name><operator>.</operator><name>xb_curp</name></name> <operator>-</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name><operator>.</operator><name>xb_bufp</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_XPATH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>div_xpath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_xpath</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_leading_xpath</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_leading_xpath</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_leading_xpath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>xsp</name> <operator>=</operator> <operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_state</name></name> <operator>==</operator> <name>XSS_OPEN_LIST</name>
<operator>||</operator> <name><name>xsp</name><operator>-&gt;</operator><name>xs_state</name></name> <operator>==</operator> <name>XSS_OPEN_LEAF_LIST</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_keys</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_KEY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_keys</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_keys</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_INFO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_info</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>in_type</name><index>[]</index></name> <init>= <expr><literal type="string">"\" data-type=\""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>in_help</name><index>[]</index></name> <init>= <expr><literal type="string">"\" data-help=\""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xo_info_t</name> <modifier>*</modifier></type><name>xip</name> <init>= <expr><call><name>xo_info_find</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>xip</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xip</name><operator>-&gt;</operator><name>xi_type</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>in_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>in_type</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xip</name><operator>-&gt;</operator><name>xi_type</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>xip</name><operator>-&gt;</operator><name>xi_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xip</name><operator>-&gt;</operator><name>xi_help</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>in_help</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>in_help</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xip</name><operator>-&gt;</operator><name>xi_help</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>xip</name><operator>-&gt;</operator><name>xi_help</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_KEY</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_KEYS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>div_key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_key</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>base_offset</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>div_end</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_end</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xo_humanize_save_t</name></type> <name>save</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>save</name><operator>.</operator><name>xhs_offset</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>.</operator><name>xhs_columns</name></name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>.</operator><name>xhs_anchor_columns</name></name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_HUMANIZE</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>div_number</name><index>[]</index></name> <init>= <expr><literal type="string">"\" data-number=\""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>div_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_number</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>end_offset</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>olen</name> <init>= <expr><name>end_offset</name> <operator>-</operator> <name><name>save</name><operator>.</operator><name>xhs_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>olen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name><name>save</name><operator>.</operator><name>xhs_offset</name></name></expr></argument>, <argument><expr><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><index>[<expr><name>olen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_format_humanize</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>div_len</name> <operator>+</operator> <name>olen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>new_offset</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>base_offset</name> <operator>+</operator> <name>div_len</name> <operator>+</operator> <name>olen</name></expr></argument>,
<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>base_offset</name></expr></argument>, <argument><expr><name>new_offset</name> <operator>-</operator> <name>base_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>base_offset</name></expr></argument>, <argument><expr><name>div_number</name></expr></argument>, <argument><expr><name>div_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>base_offset</name> <operator>+</operator> <name>div_len</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>div_len</name> <operator>+</operator> <name>olen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>div_close</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_close</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_format_text</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>xo_buf_append_locale</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<expr_stmt><expr><call><name>xo_buf_append_div</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_format_title</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>vlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>flen</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flags</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_open</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;div class=\"title"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_middle</name><index>[]</index></name> <init>= <expr><literal type="string">"\"&gt;"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>div_close</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;/div&gt;"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%s"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>




<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>start</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>left</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_HTML</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_line_ensure_open</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_indent_by</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>, <argument><expr><name>div_open</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_open</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_color_append_html</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>, <argument><expr><name>div_middle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_middle</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vlen</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newfmt</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>flen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newfmt</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newfmt</name><index>[<expr><name>flen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>vlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>newstr</name><index>[<expr><name>vlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newfmt</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>rc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>rc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>newfmt</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_data_append_content</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>move_along</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>newfmt</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <name>left</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_size</name></name> <operator>-</operator> <operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>newfmt</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLUMNS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xo_do_format_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <operator>(</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_HTML</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_escape_xml</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>move_along</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_HTML</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>div_close</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>div_close</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_strnspn</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>accept</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>cp</name> <operator>=</operator> <name>str</name></expr><operator>,</operator> <expr><name>ep</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>len</name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>accept</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_format_is_numeric</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>flen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flen</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>fmt</name><operator>++</operator> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flen</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ssize_t</name></type> <name>spn</name> <init>= <expr><call><name>xo_strnspn</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><literal type="string">"0123456789.*+ -"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>spn</name> <operator>&gt;=</operator> <name>flen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fmt</name> <operator>+=</operator> <name>spn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>-=</operator> <name>spn</name></expr>;</expr_stmt>


<expr_stmt><expr><name>spn</name> <operator>=</operator> <call><name>xo_strnspn</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><literal type="string">"hljtqz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spn</name> <operator>&gt;=</operator> <name>flen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fmt</name> <operator>+=</operator> <name>spn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>-=</operator> <name>spn</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flen</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"diouDOUeEfFgG"</literal></expr></argument>, <argument><expr><operator>*</operator><name>fmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>FALSE</name></expr> </then><else>: <expr><name>TRUE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_stack_set_flags</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NOT_FIRST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XOF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NOT_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_format_prep</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>&amp;</operator> <name>XSF_NOT_FIRST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_LEAF_LIST</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

void
xo_arg (xo_handle_t *xop);
void
xo_arg (xo_handle_t *xop)
{
xop = xo_default(xop);
fprintf(stderr, "0x%x", va_arg(xop-&gt;xo_vap, unsigned));
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_format_value</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>vlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>flen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>elen</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pretty</name> <init>= <expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quote</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_LEAF_LIST</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>XSF_EMIT</name> <operator>|</operator> <name>XSF_EMIT_KEY</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>!</operator><operator>(</operator><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <name>XSF_EMIT_LEAF_LIST</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>nlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nbuf</name><index>[<expr><name>nlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>xo_transition</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>XSS_EMIT_LEAF_LIST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_DISPLAY_ONLY</name> <operator>|</operator> <name>XFF_ENCODE_ONLY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_EMIT_LEAF_LIST</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xsp</name> <operator>=</operator> <operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_KEY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <name>XSF_EMIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_DISPLAY_ONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"key field emitted after normal value field: '%.*s'"</literal></expr></argument>,
<argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <name>XSF_EMIT_KEY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>nlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nbuf</name><index>[<expr><name>nlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>xo_transition</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>XSS_EMIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_DISPLAY_ONLY</name> <operator>|</operator> <name>XFF_ENCODE_ONLY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_EMIT_KEY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>xsp</name> <operator>=</operator> <operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>|=</operator> <name>XSF_EMIT_KEY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <name>XSF_EMIT_LEAF_LIST</name><operator>)</operator>
<operator>||</operator> <operator>!</operator><operator>(</operator><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <name>XSF_EMIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>nlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nbuf</name><index>[<expr><name>nlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>xo_transition</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>XSS_EMIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_DISPLAY_ONLY</name> <operator>|</operator> <name>XFF_ENCODE_ONLY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_EMIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>xsp</name> <operator>=</operator> <operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>|=</operator> <name>XSF_EMIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_humanize_save_t</name></type> <name>save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>leader</name> <init>= <expr><call><name>xo_xml_leader_len</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_TEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_ENCODE_ONLY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_NO_OUTPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>save</name><operator>.</operator><name>xhs_offset</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>.</operator><name>xhs_columns</name></name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>.</operator><name>xhs_anchor_columns</name></name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_HUMANIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_format_humanize</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_ENCODE_ONLY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_NO_OUTPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_buf_append_div</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_DISPLAY_ONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>encoding</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <name>elen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>flen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><index>[<expr><name>flen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>xo_fix_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>missing</name><index>[]</index></name> <init>= <expr><literal type="string">"missing-field-name"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing field name: %s"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>missing</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>missing</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>leader</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>leader</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_data_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_curp</name></name> <operator>!=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr></argument>,
<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_KEY</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_KEYS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>attr</name><index>[]</index></name> <init>= <expr><literal type="string">" key=\"key\""</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_UNITS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XOIF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_UNITS_PENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_units_offset</name></name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_data</name><operator>.</operator><name>xb_curp</name></name> <operator>-</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name><operator>.</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"&lt;/"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>leader</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>leader</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_data_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_DISPLAY_ONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>encoding</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <name>elen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>flen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><index>[<expr><name>flen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>xo_fix_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xo_stack_set_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>&amp;</operator> <name>XSF_NOT_FIRST</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_format_prep</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_QUOTE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_NOQUOTE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>vlen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"true"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>xo_format_is_numeric</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>missing</name><index>[]</index></name> <init>= <expr><literal type="string">"missing-field-name"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing field name: %s"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>missing</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>missing</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_LEAF_LIST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>&amp;&amp;</operator> <name>pretty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>off</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_data_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_UNDERSCORES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>coff</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>off</name> <operator>&lt;</operator> <name>coff</name></expr>;</condition> <incr><expr><name>off</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\":"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>quote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>quote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_DISPLAY_ONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>encoding</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <name>elen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>flen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><index>[<expr><name>flen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>xo_fix_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>missing</name><index>[]</index></name> <init>= <expr><literal type="string">"missing-field-name"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing field name: %s"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>missing</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>missing</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_data_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"=\""</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"\" "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_DISPLAY_ONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_QUOTE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_NOQUOTE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"true"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"diouxXDOUeEfFgGaAcCp"</literal></expr></argument>, <argument><expr><name><name>fmt</name><index>[<expr><name>flen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>encoding</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <name>elen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>flen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><index>[<expr><name>flen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>xo_fix_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>missing</name><index>[]</index></name> <init>= <expr><literal type="string">"missing-field-name"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing field name: %s"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>missing</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>missing</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>name_offset</name> <init>= <expr><call><name>xo_buf_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>value_offset</name> <init>= <expr><call><name>xo_buf_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><ternary><condition><expr><name>quote</name></expr> ?</condition><then> <expr><name>XO_OP_STRING</name></expr> </then><else>: <expr><name>XO_OP_CONTENT</name></expr></else></ternary></expr></argument>,
<argument><expr><call><name>xo_buf_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>, <argument><expr><name>name_offset</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>xo_buf_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>, <argument><expr><name>value_offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_set_gettext_domain</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>flen</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flen</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_gt_domain</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_gt_domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_gt_domain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>flen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>start_offset</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>flen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_offset</name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_data</name><operator>.</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_data</name><operator>.</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_do_format_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>end_offset</name> <init>= <expr><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name><operator>.</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_data</name><operator>.</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>end_offset</name> <operator>-</operator> <name>start_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_data</name><operator>.</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_gt_domain</name></name> <operator>=</operator> <call><name>xo_strndup</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>start_offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name><operator>.</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_data</name><operator>.</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start_offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_format_content</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>vlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>flen</name></decl></parameter>,
<parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<expr_stmt><expr><call><name>xo_buf_append_div</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>tag_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_open_container_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>tag_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_format_value</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>tag_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><call><name>xo_simple_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>xo_color_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"default"</literal></expr>,
<expr><literal type="string">"black"</literal></expr>,
<expr><literal type="string">"red"</literal></expr>,
<expr><literal type="string">"green"</literal></expr>,
<expr><literal type="string">"yellow"</literal></expr>,
<expr><literal type="string">"blue"</literal></expr>,
<expr><literal type="string">"magenta"</literal></expr>,
<expr><literal type="string">"cyan"</literal></expr>,
<expr><literal type="string">"white"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_color_find</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>xo_color_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>xo_color_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>xo_effect_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"reset"</literal></expr>,
<expr><literal type="string">"normal"</literal></expr>,
<expr><literal type="string">"bold"</literal></expr>,
<expr><literal type="string">"underline"</literal></expr>,
<expr><literal type="string">"inverse"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>xo_effect_on_codes</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"0"</literal></expr>,
<expr><literal type="string">"0"</literal></expr>,
<expr><literal type="string">"1"</literal></expr>,
<expr><literal type="string">"4"</literal></expr>,
<expr><literal type="string">"7"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>









static const char *xo_effect_off_codes[] = {
"0",
"0",
"21",
"24",
"27",
NULL
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_effect_find</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>xo_effect_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>xo_effect_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_colors_parse</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_colors_t</name> <modifier>*</modifier></type><name>xocp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_text_only</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>str</name></expr><operator>,</operator> <expr><name>ep</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cp</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name>np</name></expr></incr>)</control> <block>{<block_content>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>np</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>xp</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>xp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>xp</name> <operator>&gt;</operator> <name>cp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xp</name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_color_find</name><argument_list>(<argument><expr><name>cp</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xocp</name><operator>-&gt;</operator><name>xoc_col_fg</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_color_find</name><argument_list>(<argument><expr><name>cp</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xocp</name><operator>-&gt;</operator><name>xoc_col_bg</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_effect_find</name><argument_list>(<argument><expr><name>cp</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xocp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>rc</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_effect_find</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xocp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>rc</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>rc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_EFF_RESET</name></expr>:</case>
<expr_stmt><expr><name><name>xocp</name><operator>-&gt;</operator><name>xoc_col_fg</name></name> <operator>=</operator> <name><name>xocp</name><operator>-&gt;</operator><name>xoc_col_bg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xocp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>=</operator> <name>XO_EFF_RESET</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_EFF_NORMAL</name></expr>:</case>
<expr_stmt><expr><name><name>xocp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>XO_EFF_BOLD</name> <operator>|</operator> <name>XO_EFF_UNDERLINE</name>
<operator>|</operator> <name>XO_EFF_INVERSE</name> <operator>|</operator> <name>XO_EFF_NORMAL</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>

<label><name>unknown</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_WARN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"unknown color/effect string detected: '%s'"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>xo_colors_enabled</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBXO_TEXT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLOR</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_colors_update</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>xo_colors_t</name> <modifier>*</modifier><name>newp</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBXO_TEXT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>xo_color_t</name></type> <name>fg</name> <init>= <expr><name><name>newp</name><operator>-&gt;</operator><name>xoc_col_fg</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLOR_MAP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>fg</name> <operator>&lt;</operator> <name>XO_NUM_COLORS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_color_map_fg</name><index>[<expr><name>fg</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>xoc_col_fg</name></name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xo_color_t</name></type> <name>bg</name> <init>= <expr><name><name>newp</name><operator>-&gt;</operator><name>xoc_col_bg</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLOR_MAP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bg</name> <operator>&lt;</operator> <name>XO_NUM_COLORS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_color_map_bg</name><index>[<expr><name>bg</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>xoc_col_bg</name></name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_colors_handle_text</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_colors_t</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name> <init>= <expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_colors_t</name> <modifier>*</modifier></type><name>oldp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_colors</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="number">0x1b</literal></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><name><name>oldp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>!=</operator> <operator>(</operator><name><name>newp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>&amp;</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xoc_effects</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>|=</operator> <name>XO_EFF_RESET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oldp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>xo_effect_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>bit</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>newp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>&amp;</operator> <name>bit</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>oldp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>&amp;</operator> <name>bit</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>xo_effect_on_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>cp</name></expr></argument>, <argument><expr><literal type="string">";%s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&gt;=</operator> <name>ep</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>==</operator> <name>XO_EFF_RESET</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>oldp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oldp</name><operator>-&gt;</operator><name>xoc_col_fg</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xoc_col_bg</name></name> <operator>=</operator> <name>XO_COL_DEFAULT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>xo_color_t</name></type> <name>fg</name> <init>= <expr><name><name>newp</name><operator>-&gt;</operator><name>xoc_col_fg</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>!=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xoc_col_fg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>cp</name></expr></argument>, <argument><expr><literal type="string">";3%u"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>fg</name> <operator>!=</operator> <name>XO_COL_DEFAULT</name><operator>)</operator></expr> ?</condition><then> <expr><name>fg</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">9</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xo_color_t</name></type> <name>bg</name> <init>= <expr><name><name>newp</name><operator>-&gt;</operator><name>xoc_col_bg</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bg</name> <operator>!=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xoc_col_bg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>cp</name></expr></argument>, <argument><expr><literal type="string">";4%u"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>bg</name> <operator>!=</operator> <name>XO_COL_DEFAULT</name><operator>)</operator></expr> ?</condition><then> <expr><name>bg</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">9</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>-</operator> <name>buf</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;</operator> <name>ep</name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'m'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cp</name> <operator>-</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_colors_handle_html</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_colors_t</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_colors_t</name> <modifier>*</modifier></type><name>oldp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_colors</name></name></expr></init></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><name><name>oldp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>==</operator> <name><name>newp</name><operator>-&gt;</operator><name>xoc_effects</name></name>
<operator>&amp;&amp;</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xoc_col_fg</name></name> <operator>==</operator> <name><name>newp</name><operator>-&gt;</operator><name>xoc_col_fg</name></name>
<operator>&amp;&amp;</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xoc_col_bg</name></name> <operator>==</operator> <name><name>newp</name><operator>-&gt;</operator><name>xoc_col_bg</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_color_buf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_buf_reset</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>xo_effect_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>bit</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>newp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>&amp;</operator> <name>bit</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_buf_append_str</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">" effect-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append_str</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name><name>xo_effect_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>newp</name><operator>-&gt;</operator><name>xoc_col_fg</name></name> <operator>!=</operator> <name>XO_COL_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name><name>xo_color_names</name><index>[<expr><name><name>newp</name><operator>-&gt;</operator><name>xoc_col_fg</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>newp</name><operator>-&gt;</operator><name>xoc_col_bg</name></name> <operator>!=</operator> <name>XO_COL_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name><name>xo_color_names</name><index>[<expr><name><name>newp</name><operator>-&gt;</operator><name>xoc_col_bg</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>newp</name><operator>-&gt;</operator><name>xoc_effects</name></name> <operator>&amp;</operator> <name>XO_EFF_INVERSE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>fg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <literal type="string">"inverse"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <literal type="string">"inverse"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_buf_append_str</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">" color-fg-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append_str</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_buf_append_str</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">" color-bg-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append_str</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_format_colors</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>vlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>flen</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flen</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xo_buffer_t</name></type> <name>xb</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>xo_style_is_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_do_format_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_colors_enabled</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_TEXT</name></expr>:</case>
<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xo_colors_t</name></type> <name>xoc</name> <init>= <expr><name><name>xop</name><operator>-&gt;</operator><name>xo_colors</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xo_colors_parse</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xoc</name></expr></argument>, <argument><expr><name><name>xb</name><operator>.</operator><name>xb_bufp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_colors_update</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_TEXT</name></expr>)</condition> <block>{<block_content>










<expr_stmt><expr><call><name>xo_colors_handle_text</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xoc</name><operator>.</operator><name>xoc_effects</name></name> <operator>&amp;=</operator> <operator>~</operator><name>XO_EFF_RESET</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><name><name>xoc</name><operator>.</operator><name>xoc_effects</name></name> <operator>&amp;=</operator> <operator>~</operator><name>XO_EFF_RESET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_colors_handle_html</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_colors</name></name> <operator>=</operator> <name>xoc</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>




<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_buf_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_format_units</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>vlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>flen</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flags</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>units_start_xml</name><index>[]</index></name> <init>= <expr><literal type="string">" units=\""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>units_start_html</name><index>[]</index></name> <init>= <expr><literal type="string">" data-units=\""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_UNITS_PENDING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_format_content</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"units"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>start</name> <init>= <expr><name><name>xop</name><operator>-&gt;</operator><name>xo_units_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>stop</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_XML</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>units_start_xml</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>units_start_xml</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_HTML</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>units_start_html</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>units_start_html</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_data_escape</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_do_format_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>now</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>delta</name> <init>= <expr><name>now</name> <operator>-</operator> <name>stop</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>stop</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>







<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>stop</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start</name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>stop</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_find_width</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>vlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>flen</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flen</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><name>vlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>==</operator> <name>LONG_MIN</name> <operator>||</operator> <name>width</name> <operator>==</operator> <name>LONG_MAX</name> <operator>||</operator> <name>bp</name> <operator>==</operator> <name>cp</name> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"invalid width for anchor: '%s'"</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flen</name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_formatter</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>flen</name> <operator>==</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_VA_ARG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_formatter</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>flen</name> <operator>==</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_VA_ARG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<decl_stmt><decl><type><name>int</name></type> <name>anchor_was_set</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>start_offset</name> <init>= <expr><call><name>xo_buf_offset</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>xo_buf_cur</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XOIF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>anchor_was_set</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>xo_do_format_field</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>==</operator> <name>LONG_MIN</name> <operator>||</operator> <name>width</name> <operator>==</operator> <name>LONG_MAX</name>
<operator>||</operator> <name>bp</name> <operator>==</operator> <name>cp</name> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"invalid width for anchor: '%s'"</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start_offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>anchor_was_set</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XOIF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>width</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_anchor_clear</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>XOIF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_min_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_anchor_start</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>vlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"the anchor already recording is discarded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XOIF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_offset</name></name> <operator>=</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_min_width</name></name> <operator>=</operator> <call><name>xo_find_width</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xfip</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_anchor_stop</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>vlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"no start anchor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XOIF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_UNITS_PENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>width</name> <init>= <expr><call><name>xo_find_width</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xfip</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_min_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>start</name> <init>= <expr><name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>stop</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>abswidth</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><operator>-</operator><name>width</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>blen</name> <init>= <expr><name>abswidth</name> <operator>-</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_anchor_columns</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>abswidth</name> <operator>&gt;</operator> <name>XO_MAX_ANCHOR_WIDTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"width over %u are not supported"</literal></expr></argument>,
<argument><expr><name>XO_MAX_ANCHOR_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_format_content</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"padding"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>now</name> <init>= <expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>delta</name> <init>= <expr><name>now</name> <operator>-</operator> <name>stop</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <name>blen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>stop</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start</name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>stop</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>xo_anchor_clear</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_class_name</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>ftype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>ftype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'D'</literal></expr>:</case> <return>return <expr><literal type="string">"decoration"</literal></expr>;</return>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> <return>return <expr><literal type="string">"error"</literal></expr>;</return>
<case>case <expr><literal type="char">'L'</literal></expr>:</case> <return>return <expr><literal type="string">"label"</literal></expr>;</return>
<case>case <expr><literal type="char">'N'</literal></expr>:</case> <return>return <expr><literal type="string">"note"</literal></expr>;</return>
<case>case <expr><literal type="char">'P'</literal></expr>:</case> <return>return <expr><literal type="string">"padding"</literal></expr>;</return>
<case>case <expr><literal type="char">'W'</literal></expr>:</case> <return>return <expr><literal type="string">"warning"</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_tag_name</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>ftype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>ftype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> <return>return <expr><literal type="string">"__error"</literal></expr>;</return>
<case>case <expr><literal type="char">'W'</literal></expr>:</case> <return>return <expr><literal type="string">"__warning"</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_role_wants_default_format</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>ftype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>ftype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<case>case <expr><literal type="char">'['</literal></expr>:</case>
<case>case <expr><literal type="char">']'</literal></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>xo_mapping_t</name></type> <name><name>xo_role_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="char">'C'</literal></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="char">'D'</literal></expr>, <expr><literal type="string">"decoration"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="char">'E'</literal></expr>, <expr><literal type="string">"error"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="char">'L'</literal></expr>, <expr><literal type="string">"label"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="char">'N'</literal></expr>, <expr><literal type="string">"note"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="char">'P'</literal></expr>, <expr><literal type="string">"padding"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="char">'T'</literal></expr>, <expr><literal type="string">"title"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="char">'U'</literal></expr>, <expr><literal type="string">"units"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="char">'V'</literal></expr>, <expr><literal type="string">"value"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="char">'W'</literal></expr>, <expr><literal type="string">"warning"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="char">'['</literal></expr>, <expr><literal type="string">"start-anchor"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="char">']'</literal></expr>, <expr><literal type="string">"stop-anchor"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_ROLE_EBRACE</name></cpp:macro> <cpp:value>'{'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_ROLE_TEXT</name></cpp:macro> <cpp:value>'+'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_ROLE_NEWLINE</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>xo_mapping_t</name></type> <name><name>xo_modifier_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>XFF_ARGUMENT</name></expr>, <expr><literal type="string">"argument"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_COLON</name></expr>, <expr><literal type="string">"colon"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_COMMA</name></expr>, <expr><literal type="string">"comma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_DISPLAY_ONLY</name></expr>, <expr><literal type="string">"display"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_ENCODE_ONLY</name></expr>, <expr><literal type="string">"encoding"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_GT_FIELD</name></expr>, <expr><literal type="string">"gettext"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_HUMANIZE</name></expr>, <expr><literal type="string">"humanize"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_HUMANIZE</name></expr>, <expr><literal type="string">"hn"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_HN_SPACE</name></expr>, <expr><literal type="string">"hn-space"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_HN_DECIMAL</name></expr>, <expr><literal type="string">"hn-decimal"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_HN_1000</name></expr>, <expr><literal type="string">"hn-1000"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_KEY</name></expr>, <expr><literal type="string">"key"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_LEAF_LIST</name></expr>, <expr><literal type="string">"leaf-list"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_LEAF_LIST</name></expr>, <expr><literal type="string">"list"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_NOQUOTE</name></expr>, <expr><literal type="string">"no-quotes"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_NOQUOTE</name></expr>, <expr><literal type="string">"no-quote"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_GT_PLURAL</name></expr>, <expr><literal type="string">"plural"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_QUOTE</name></expr>, <expr><literal type="string">"quotes"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_QUOTE</name></expr>, <expr><literal type="string">"quote"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_TRIM_WS</name></expr>, <expr><literal type="string">"trim"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_WS</name></expr>, <expr><literal type="string">"white"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOT_NEEDED_YET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>xo_mapping_t</name></type> <name><name>xo_modifier_short_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>XFF_COLON</name></expr>, <expr><literal type="string">"c"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_DISPLAY_ONLY</name></expr>, <expr><literal type="string">"d"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_ENCODE_ONLY</name></expr>, <expr><literal type="string">"e"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_GT_FIELD</name></expr>, <expr><literal type="string">"g"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_HUMANIZE</name></expr>, <expr><literal type="string">"h"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_KEY</name></expr>, <expr><literal type="string">"k"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_LEAF_LIST</name></expr>, <expr><literal type="string">"l"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_NOQUOTE</name></expr>, <expr><literal type="string">"n"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_GT_PLURAL</name></expr>, <expr><literal type="string">"p"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_QUOTE</name></expr>, <expr><literal type="string">"q"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_TRIM_WS</name></expr>, <expr><literal type="string">"t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>XFF_WS</name></expr>, <expr><literal type="string">"w"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_count_fields</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>fmt</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>rc</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




































<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_parse_roles</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basep</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ftype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name>basep</name></expr>;</init> <condition><expr><name>sp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>sp</name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"backslash at the end of string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <operator>++</operator><name>sp</name></expr>;</init> <condition><expr><operator>*</operator><name>np</name></expr>;</condition> <incr><expr><name>np</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>np</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>*</operator><name>np</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <operator>*</operator><name>np</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>||</operator> <operator>*</operator><name>np</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>slen</name> <init>= <expr><name>np</name> <operator>-</operator> <name>sp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xo_xff_flags_t</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>xo_name_lookup</name><argument_list>(<argument><expr><name>xo_role_names</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ftype</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>xo_name_lookup</name><argument_list>(<argument><expr><name>xo_modifier_names</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"unknown keyword ignored: '%.*s'"</literal></expr></argument>,
<argument><expr><name>slen</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>np</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>sp</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<case>case <expr><literal type="char">'['</literal></expr>:</case>
<case>case <expr><literal type="char">']'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"field descriptor uses multiple types: '%s'"</literal></expr></argument>,
<argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ftype</name> <operator>=</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<case>case <expr><literal type="char">'9'</literal></expr>:</case>
<expr_stmt><expr><name>fnum</name> <operator>=</operator> <operator>(</operator><name>fnum</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>sp</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_ARGUMENT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_COLON</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_DISPLAY_ONLY</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_ENCODE_ONLY</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_GT_FIELD</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_HUMANIZE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_KEY</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_LEAF_LIST</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_NOQUOTE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_GT_PLURAL</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_QUOTE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_TRIM_WS</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XFF_WS</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"field descriptor uses unknown modifier: '%s'"</literal></expr></argument>,
<argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <literal type="char">'N'</literal> <operator>||</operator> <name>ftype</name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_COLON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"colon modifier on 'N' or 'U' field ignored: "</literal>
<literal type="string">"'%s'"</literal></expr></argument>, <argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>XFF_COLON</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name> <operator>=</operator> <ternary><condition><expr><name>ftype</name></expr> ?</condition><then/><else>: <expr><literal type="char">'V'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name> <operator>=</operator> <name>fnum</name></expr>;</expr_stmt>

<return>return <expr><name>sp</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_gettext_finish_numbering_fields</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>fmt</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>fnum</name></decl>, <decl><type ref="prev"/><name>max_fields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>xfip</name> <operator>=</operator> <name>fields</name></expr><operator>,</operator> <expr><name>fnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</condition> <incr><expr><name>xfip</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_ROLE_NEWLINE</name></expr>:</case>
<case>case <expr><name>XO_ROLE_TEXT</name></expr>:</case>
<case>case <expr><name>XO_ROLE_EBRACE</name></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<continue>continue;</continue>
</block_content>}</block></switch>

<expr_stmt><expr><name>fnum</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fnum</name> <operator>&gt;=</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>|=</operator> <name>one</name> <operator>&lt;&lt;</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>max_fields</name> <operator>=</operator> <name>fnum</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>xfip</name> <operator>=</operator> <name>fields</name></expr><operator>,</operator> <expr><name>fnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</condition> <incr><expr><name>xfip</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_ROLE_NEWLINE</name></expr>:</case>
<case>case <expr><name>XO_ROLE_TEXT</name></expr>:</case>
<case>case <expr><name>XO_ROLE_EBRACE</name></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<continue>continue;</continue>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>fnum</name><operator>++</operator></expr>;</init> <condition><expr><name>bits</name> <operator>&amp;</operator> <operator>(</operator><name>one</name> <operator>&lt;&lt;</operator> <name>fnum</name><operator>)</operator></expr>;</condition> <incr><expr><name>fnum</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>fnum</name> <operator>&gt;</operator> <name>max_fields</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name> <operator>=</operator> <name>fnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>|=</operator> <name>one</name> <operator>&lt;&lt;</operator> <name>fnum</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_parse_field_numbers</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num_fields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>field</name></decl>, <decl><type ref="prev"/><name>fnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xfip</name> <operator>=</operator> <name>fields</name></expr><operator>,</operator> <expr><name>field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>xfip</name><operator>++</operator></expr><operator>,</operator> <expr><name>field</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name> <operator>=</operator> <name>field</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name> <operator>&gt;</operator> <name>num_fields</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"field number exceeds number of fields: '%s'"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fnum</name> <operator>=</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fnum</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&amp;</operator> <operator>(</operator><name>one</name> <operator>&lt;&lt;</operator> <name>fnum</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"field number %u reused: '%s'"</literal></expr></argument>,
<argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bits</name> <operator>|=</operator> <name>one</name> <operator>&lt;&lt;</operator> <name>fnum</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_parse_fields</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>num_fields</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>basep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name> <init>= <expr><name>fields</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>seen_fnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>fmt</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <name>field</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>field</name><operator>++</operator></expr><operator>,</operator> <expr><name>xfip</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_start</name></name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name> <operator>=</operator> <name>XO_ROLE_NEWLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name>cp</name></expr>;</init> <condition><expr><operator>*</operator><name>sp</name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator> <operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name> <operator>=</operator> <name>XO_ROLE_TEXT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_content</name></name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_clen</name></name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name>cp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_next</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_start</name></name> <operator>=</operator> <name>cp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name> <operator>=</operator> <name>XO_ROLE_EBRACE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name>cp</name></expr>;</init> <condition><expr><operator>*</operator><name>sp</name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing closing '}}': '%s'"</literal></expr></argument>,
<argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_len</name></name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_start</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_next</name></name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_start</name></name> <operator>=</operator> <name>basep</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>flen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>xo_parse_roles</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>basep</name></expr></argument>, <argument><expr><name>xfip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>seen_fnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ep</name> <operator>=</operator> <operator>++</operator><name>sp</name></expr>;</init> <condition><expr><operator>*</operator><name>sp</name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>||</operator> <operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"backslash at the end of string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>!=</operator> <name>sp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_clen</name></name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name>ep</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_content</name></name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing content (':'): '%s'"</literal></expr></argument>, <argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ep</name> <operator>=</operator> <operator>++</operator><name>sp</name></expr>;</init> <condition><expr><operator>*</operator><name>sp</name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>||</operator> <operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"backslash at the end of string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name>ep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ep</name> <operator>=</operator> <operator>++</operator><name>sp</name></expr>;</init> <condition><expr><operator>*</operator><name>sp</name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_encoding</name></name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_elen</name></name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name>ep</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing closing '}': %s"</literal></expr></argument>, <argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_len</name></name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_next</name></name> <operator>=</operator> <operator>++</operator><name>sp</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_clen</name></name> <operator>||</operator> <name>format</name> <operator>||</operator> <operator>(</operator><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flags</name></name> <operator>&amp;</operator> <name>XFF_ARGUMENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flen</name></name> <operator>=</operator> <name>flen</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>xo_role_wants_default_format</name><argument_list>(<argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_format</name></name> <operator>=</operator> <name>xo_default_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flen</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>seen_fnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_parse_field_numbers</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_gettext_simplify_format</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name></decl></parameter>,
<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>this_field</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>fmt</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>xo_simplify_field_func_t</name></type> <name>field_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ftype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>field</name> <init>= <expr><name>this_field</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xfip</name> <operator>=</operator> <operator>&amp;</operator><name><name>fields</name><index>[<expr><name>field</name></expr>]</index></name></expr>;</init> <condition><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</condition> <incr><expr><name>xfip</name><operator>++</operator></expr><operator>,</operator> <expr><name>field</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ftype</name> <operator>=</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_flags</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_GT_FIELD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_content</name></name> <operator>&amp;&amp;</operator> <name>ftype</name> <operator>!=</operator> <literal type="char">'V'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>field_cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>field_cb</name><argument_list>(<argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_content</name></name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_clen</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XFF_GT_PLURAL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>ftype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<break>break;</break>

<case>case <expr><name>XO_ROLE_NEWLINE</name></expr>:</case>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_ROLE_EBRACE</name></expr>:</case>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_content</name></name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_clen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_ROLE_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_content</name></name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_clen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>!=</operator> <literal type="char">'V'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>ftype</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>fnum</name> <init>= <expr><ternary><condition><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name></expr> ?</condition><then/><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fnum</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>num</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_content</name></name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_clen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type>
<name>xo_dump_fields</name> <parameter_list>(<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>void</name></type>
<name>xo_dump_fields</name> <parameter_list>(<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xfip</name> <operator>=</operator> <name>fields</name></expr>;</init> <condition><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</condition> <incr><expr><name>xfip</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lu(%u): %lx [%c/%u] [%.*s] [%.*s] [%.*s]\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name>xfip</name> <operator>-</operator> <name>fields</name><operator>)</operator></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_flags</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_clen</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_content</name></name></expr> ?</condition><then/><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_flen</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_format</name></name></expr> ?</condition><then/><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_elen</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_encoding</name></name></expr> ?</condition><then/><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>xo_field_info_t</name> <modifier>*</modifier></type>
<name>xo_gettext_find_field</name> <parameter_list>(<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>fnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xfip</name> <operator>=</operator> <name>fields</name></expr>;</init> <condition><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</condition> <incr><expr><name>xfip</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_fnum</name></name> <operator>==</operator> <name>fnum</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>xfip</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_gettext_rewrite_fields</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_fields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_field_info_t</name></type> <name><name>tmp</name><index>[<expr><name>max_fields</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>max_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>fnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>newp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zp</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>newp</name> <operator>=</operator> <name>fields</name></expr><operator>,</operator> <expr><name>outp</name> <operator>=</operator> <name>tmp</name></expr>;</init> <condition><expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</condition> <incr><expr><name>newp</name><operator>++</operator></expr><operator>,</operator> <expr><name>outp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_ROLE_NEWLINE</name></expr>:</case>
<case>case <expr><name>XO_ROLE_TEXT</name></expr>:</case>
<case>case <expr><name>XO_ROLE_EBRACE</name></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>outp</name> <operator>=</operator> <operator>*</operator><name>newp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outp</name><operator>-&gt;</operator><name>xfi_renum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>

<expr_stmt><expr><name>zp</name> <operator>=</operator> <call><name>xo_gettext_find_field</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><operator>++</operator><name>fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outp</name> <operator>=</operator> <operator>*</operator><name>newp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outp</name><operator>-&gt;</operator><name>xfi_renum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outp</name> <operator>=</operator> <operator>*</operator><name>zp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outp</name><operator>-&gt;</operator><name>xfi_renum</name></name> <operator>=</operator> <name><name>newp</name><operator>-&gt;</operator><name>xfi_fnum</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>max_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_gettext_combine_formats</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>fmt</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gtfmt</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>old_fields</name></decl></parameter>,
<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>new_fields</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>new_max_fields</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>reorderedp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reordered</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>newp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>startp</name> <init>= <expr><name>old_fields</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_gettext_finish_numbering_fields</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>old_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>newp</name> <operator>=</operator> <name>new_fields</name></expr>;</init> <condition><expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</condition> <incr><expr><name>newp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_ROLE_NEWLINE</name></expr>:</case>
<case>case <expr><name>XO_ROLE_TEXT</name></expr>:</case>
<case>case <expr><name>XO_ROLE_EBRACE</name></expr>:</case>
<continue>continue;</continue>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<for>for <control>(<init><expr><name>oldp</name> <operator>=</operator> <name>startp</name></expr>;</init> <condition><expr><name><name>oldp</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</condition> <incr><expr><name>oldp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>oldp</name><operator>-&gt;</operator><name>xfi_ftype</name></name> <operator>!=</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_clen</name></name> <operator>!=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xfi_clen</name></name>
<operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_content</name></name></expr></argument>, <argument><expr><name><name>oldp</name><operator>-&gt;</operator><name>xfi_content</name></name></expr></argument>,
<argument><expr><name><name>oldp</name><operator>-&gt;</operator><name>xfi_clen</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reordered</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>startp</name> <operator>=</operator> <name>oldp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>oldp</name><operator>-&gt;</operator><name>xfi_ftype</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>oldp</name> <operator>=</operator> <name>old_fields</name></expr>;</init> <condition><expr><name>oldp</name> <operator>&lt;</operator> <name>startp</name></expr>;</condition> <incr><expr><name>oldp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>oldp</name><operator>-&gt;</operator><name>xfi_ftype</name></name> <operator>!=</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_clen</name></name> <operator>!=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xfi_clen</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_content</name></name></expr></argument>, <argument><expr><name><name>oldp</name><operator>-&gt;</operator><name>xfi_content</name></name></expr></argument>,
<argument><expr><name><name>oldp</name><operator>-&gt;</operator><name>xfi_clen</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>reordered</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>oldp</name> <operator>==</operator> <name>startp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"post-gettext format can't find field "</literal>
<literal type="string">"'%.*s' in format '%s'"</literal></expr></argument>,
<argument><expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_clen</name></name></expr></argument>, <argument><expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_content</name></name></expr></argument>,
<argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>gtfmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>





<for>for <control>(<init><expr><name>oldp</name> <operator>=</operator> <name>startp</name></expr>;</init> <condition><expr><name><name>oldp</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</condition> <incr><expr><name>oldp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>oldp</name><operator>-&gt;</operator><name>xfi_ftype</name></name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oldp</name><operator>-&gt;</operator><name>xfi_ftype</name></name> <operator>==</operator> <name><name>newp</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>copy_it</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<continue>continue;</continue>
</block_content>}</block></switch>




<label><name>copy_it</name>:</label>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_flags</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xfi_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_fnum</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xfi_fnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_format</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xfi_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_flen</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xfi_flen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_encoding</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xfi_encoding</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>xfi_elen</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>xfi_elen</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>reorderedp</name> <operator>=</operator> <name>reordered</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reordered</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_gettext_finish_numbering_fields</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>new_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_gettext_rewrite_fields</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>new_fields</name></expr></argument>, <argument><expr><name>new_max_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_gettext_build_format</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>,
<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>this_field</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_fmtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_style_is_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xo_buffer_t</name></type> <name>xb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xo_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_gettext_simplify_format</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>,
<argument><expr><name>this_field</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail2</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gtfmt</name> <init>= <expr><call><name>xo_dgettext</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xb</name><operator>.</operator><name>xb_bufp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>gtfmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>gtfmt</name> <operator>==</operator> <name>fmt</name> <operator>||</operator> <call><name>xo_streq</name><argument_list>(<argument><expr><name>gtfmt</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail2</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_fmt</name> <init>= <expr><call><name>xo_strndup</name><argument_list>(<argument><expr><name>gtfmt</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail2</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_buf_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>new_fmtp</name> <operator>=</operator> <name>new_fmt</name></expr>;</expr_stmt>
<return>return <expr><name>new_fmt</name></expr>;</return>

<label><name>bail2</name>:</label>
<expr_stmt><expr><call><name>xo_buf_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>bail</name>:</label>
<expr_stmt><expr><operator>*</operator><name>new_fmtp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>fmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_gettext_rebuild_content</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>fstart</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>min_fstart</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>fend</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_fend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>base</name> <init>= <expr><name><name>fstart</name><index>[<expr><name>min_fstart</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>blen</name> <init>= <expr><name><name>fend</name><index>[<expr><name>max_fend</name></expr>]</index></name> <operator>-</operator> <name>base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xo_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name><name>fstart</name><index>[<expr><name>min_fstart</name></expr>]</index></name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>field</name> <init>= <expr><name>min_fstart</name></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>fnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>soff</name></decl>, <decl><type ref="prev"/><name>doff</name> <init>= <expr><name>base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>zp</name></decl>;</decl_stmt>









<for>for <control>(<init><expr><name>xfip</name> <operator>=</operator> <name>fields</name> <operator>+</operator> <name>field</name></expr>;</init> <condition><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</condition> <incr><expr><name>xfip</name><operator>++</operator></expr><operator>,</operator> <expr><name>field</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>fnum</name> <operator>=</operator> <name>field</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_renum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zp</name> <operator>=</operator> <call><name>xo_gettext_find_field</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_renum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fnum</name> <operator>=</operator> <ternary><condition><expr><name>zp</name></expr> ?</condition><then> <expr><name>zp</name> <operator>-</operator> <name>fields</name></expr> </then><else>: <expr><name>field</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>soff</name> <operator>=</operator> <name><name>fstart</name><index>[<expr><name>fnum</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>fend</name><index>[<expr><name>fnum</name></expr>]</index></name> <operator>-</operator> <name>soff</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>soff</name> <operator>-=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_bufp</name></name> <operator>+</operator> <name>doff</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>soff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>doff</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_gettext_build_format</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier><name>fields</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name> <name>this_field</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>fmt</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_fmtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>new_fmtp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>fmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_gettext_combine_formats</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>fmt</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>gtfmt</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier><name>old_fields</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier><name>new_fields</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>new_max_fields</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier><name>reorderedp</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_gettext_rebuild_content</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier><name>fields</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier><name>fstart</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>min_fstart</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier><name>fend</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>max_fend</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_do_emit_fields</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>max_fields</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>gettext_inuse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gettext_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gettext_reordered</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ftype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>new_fields</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>xfip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flush</name> <init>= <expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_FLUSH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flush_line</name> <init>= <expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_FLUSH_LINE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_REORDER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flush_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>








<decl_stmt><decl><type><name>unsigned</name></type> <name>flimit</name> <init>= <expr><name>max_fields</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>min_fstart</name> <init>= <expr><name>flimit</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max_fend</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name><name>fstart</name><index>[<expr><name>flimit</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>fstart</name></expr></argument>, <argument><expr><name>flimit</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fstart</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name><name>fend</name><index>[<expr><name>flimit</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>fend</name></expr></argument>, <argument><expr><name>flimit</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fend</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>xfip</name> <operator>=</operator> <name>fields</name></expr><operator>,</operator> <expr><name>field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <name>max_fields</name> <operator>&amp;&amp;</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</condition>
<incr><expr><name>xfip</name><operator>++</operator></expr><operator>,</operator> <expr><name>field</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ftype</name> <operator>=</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_ftype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_flags</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>gettext_reordered</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fstart</name><index>[<expr><name>field</name></expr>]</index></name> <operator>=</operator> <call><name>xo_buf_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>min_fstart</name> <operator>&gt;</operator> <name>field</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min_fstart</name> <operator>=</operator> <name>field</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_content</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>clen</name> <init>= <expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_clen</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_ARGUMENT</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>content</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <ternary><condition><expr><name>content</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <name>XO_ROLE_NEWLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_line_close</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flush_line</name> <operator>&amp;&amp;</operator> <call><name>xo_flush_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<goto>goto <name>bottom</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ftype</name> <operator>==</operator> <name>XO_ROLE_EBRACE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_format_text</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_start</name></name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bottom</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ftype</name> <operator>==</operator> <name>XO_ROLE_TEXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xo_format_text</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_content</name></name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_clen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bottom</name>;</goto>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <literal type="char">'N'</literal> <operator>||</operator> <name>ftype</name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_WS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_format_content</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"padding"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>XFF_WS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_format_value</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_format</name></name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flen</name></name></expr></argument>,
<argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_encoding</name></name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_elen</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ftype</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_anchor_start</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xfip</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ftype</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_anchor_stop</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xfip</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ftype</name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_format_colors</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xfip</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>ftype</name> <operator>==</operator> <literal type="char">'G'</literal></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><call><name>xo_set_gettext_domain</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xfip</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gettext_inuse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gettext_inuse</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name>new_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_fmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_gettext_build_format</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>,
<argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_next</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gettext_changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>new_max_fields</name> <init>= <expr><call><name>xo_count_fields</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>new_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>new_max_fields</name> <operator>&lt;</operator> <name>max_fields</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_max_fields</name> <operator>=</operator> <name>max_fields</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>ssize_t</name></type> <name>sz</name> <init>= <expr><operator>(</operator><name>new_max_fields</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xo_field_info_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>new_fields</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>new_fields</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_parse_fields</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>new_fields</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>new_max_fields</name></expr></argument>, <argument><expr><name>new_fmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gettext_reordered</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_gettext_combine_formats</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>new_fmt</name></expr></argument>,
<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>new_fields</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>new_max_fields</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gettext_reordered</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gettext_reordered</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_LOG_GETTEXT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"gettext finds reordered "</literal>
<literal type="string">"fields in '%s' and '%s'"</literal></expr></argument>,
<argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>xo_printable</name><argument_list>(<argument><expr><name>new_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flush_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XOIF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_REORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>field</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xfip</name> <operator>=</operator> <name>new_fields</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_fields</name> <operator>=</operator> <name>new_max_fields</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clen</name> <operator>||</operator> <name><name>xfip</name><operator>-&gt;</operator><name>xfi_format</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name> <init>= <expr><call><name>xo_class_name</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>class_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_format_content</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><call><name>xo_tag_name</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>content</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>,
<argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_format</name></name></expr></argument>, <argument><expr><name><name>xfip</name><operator>-&gt;</operator><name>xfi_flen</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ftype</name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_format_title</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xfip</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ftype</name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_format_units</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xfip</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"unknown field type: '%c'"</literal></expr></argument>, <argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_COLON</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_format_content</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"decoration"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XFF_WS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_format_content</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"padding"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>bottom</name>:</label>

<if_stmt><if>if <condition>(<expr><name>gettext_reordered</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fend</name><index>[<expr><name>field</name></expr>]</index></name> <operator>=</operator> <call><name>xo_buf_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_fend</name> <operator>=</operator> <name>field</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>gettext_changed</name> <operator>&amp;&amp;</operator> <name>gettext_reordered</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xo_gettext_rebuild_content</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>new_fields</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fstart</name></expr></argument>, <argument><expr><name>min_fstart</name></expr></argument>,
<argument><expr><name>fend</name></expr></argument>, <argument><expr><name>max_fend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XOIF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_REORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>xo_buf_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_data</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>XO_BUF_HIGH_WATER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_ANCHOR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_flush_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_fmt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name>new_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_gt_domain</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_gt_domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_gt_domain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>rc</name></expr> </then><else>: <expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_do_emit</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_emit_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_errno</name></name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>max_fields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_field_info_t</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_RETAIN_ALL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XOEF_RETAIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_RETAIN_NONE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>XOEF_RETAIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XOEF_RETAIN</name><operator>)</operator>
<operator>||</operator> <call><name>xo_retain_find</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fields</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_fields</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <name>fields</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>max_fields</name> <operator>=</operator> <call><name>xo_count_fields</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>max_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>max_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_parse_fields</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>max_fields</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XOEF_RETAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xo_retain_add</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>max_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>xo_do_emit_fields</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>max_fields</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>char</name> <modifier>*</modifier></type>
<name>xo_simplify_format</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>with_numbers</name></decl></parameter>,
<parameter><decl><type><name>xo_simplify_field_func_t</name></type> <name>field_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_columns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_errno</name></name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>max_fields</name> <init>= <expr><call><name>xo_count_fields</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_field_info_t</name></type> <name><name>fields</name><index>[<expr><name>max_fields</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>max_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_parse_fields</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>max_fields</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xo_buffer_t</name></type> <name>xb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xo_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>with_numbers</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_gettext_finish_numbering_fields</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_gettext_simplify_format</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>field_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>xb</name><operator>.</operator><name>xb_bufp</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_emit_hv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_emit</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_emit_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_emit</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_emit</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name> <init>= <expr><call><name>xo_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_emit</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_emit_hvf</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_emit_flags_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_emit</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_emit_hf</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_emit_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_emit</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_emit_f</name> <parameter_list>(<parameter><decl><type><name>xo_emit_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name> <init>= <expr><call><name>xo_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_emit</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>xo_ssize_t</name></type>
<name>xo_emit_field_hv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rolmod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contents</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>efmt</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rolmod</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rolmod</name> <operator>=</operator> <literal type="string">"V"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xo_field_info_t</name></type> <name>xfi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xfi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xfi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>xo_parse_roles</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>rolmod</name></expr></argument>, <argument><expr><name>rolmod</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xfi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xfi</name><operator>.</operator><name>xfi_start</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfi</name><operator>.</operator><name>xfi_content</name></name> <operator>=</operator> <name>contents</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfi</name><operator>.</operator><name>xfi_format</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfi</name><operator>.</operator><name>xfi_encoding</name></name> <operator>=</operator> <name>efmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfi</name><operator>.</operator><name>xfi_clen</name></name> <operator>=</operator> <ternary><condition><expr><name>contents</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfi</name><operator>.</operator><name>xfi_flen</name></name> <operator>=</operator> <ternary><condition><expr><name>fmt</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfi</name><operator>.</operator><name>xfi_elen</name></name> <operator>=</operator> <ternary><condition><expr><name>efmt</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>efmt</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>contents</name> <operator>&amp;&amp;</operator> <name>fmt</name> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>xo_role_wants_default_format</name><argument_list>(<argument><expr><name><name>xfi</name><operator>.</operator><name>xfi_ftype</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xfi</name><operator>.</operator><name>xfi_format</name></name> <operator>=</operator> <name>xo_default_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xfi</name><operator>.</operator><name>xfi_flen</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_emit_fields</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xfi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>fmt</name></expr> ?</condition><then/><else>: <expr><ternary><condition><expr><name>contents</name></expr> ?</condition><then/><else>: <expr><literal type="string">"field"</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_emit_field_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rolmod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contents</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>efmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>efmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_emit_field_hv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>rolmod</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>efmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_emit_field</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rolmod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contents</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>efmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>efmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_emit_field_hv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rolmod</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>efmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_attr_hv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>extra</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>xbp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>name_offset</name></decl>, <decl><type ref="prev"/><name>value_offset</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>nlen</name> <operator>+</operator> <name>extra</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>nlen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_vsnprintf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_escape_xml</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_buf_has_room</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>+=</operator> <name>nlen</name> <operator>+</operator> <name>extra</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><name>name_offset</name> <operator>=</operator> <call><name>xo_buf_offset</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_append</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value_offset</name> <operator>=</operator> <call><name>xo_buf_offset</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_vsnprintf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>xbp</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_ATTRIBUTE</name></expr></argument>,
<argument><expr><call><name>xo_buf_data</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>name_offset</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>xo_buf_data</name><argument_list>(<argument><expr><name>xbp</name></expr></argument>, <argument><expr><name>value_offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_attr_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_attr_hv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_attr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_attr_hv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_depth_change</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>, <parameter><decl><type><name>xo_state_t</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>xo_xsf_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_HTML</name> <operator>||</operator> <call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_TEXT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_DTRT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XSF_DTRT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_depth_check</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name> <operator>+</operator> <name>delta</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_stack_set_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>XO_FAILURE_NAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name> <operator>=</operator> <call><name>xo_strndup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_IGNORE_CLOSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"close with empty stack: '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_WARN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>top</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>xo_streq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"incorrect close: '%s' .vs. '%s'"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <name>XSF_LIST</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XSF_LIST</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"list close on list confict: '%s'"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <name>XSF_INSTANCE</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XSF_INSTANCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"list close on instance confict: '%s'"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_keys</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_keys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_indent</name></name> <operator>+=</operator> <name>indent</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_set_depth</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_depth_check</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name> <operator>+=</operator> <name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_indent</name></name> <operator>+=</operator> <name>depth</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_style</name></name> <operator>==</operator> <name>XO_STYLE_JSON</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_TOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XOIF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_TOP_EMITTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xo_xsf_flags_t</name></type>
<name>xo_stack_flags</name> <parameter_list>(<parameter><decl><type><name>xo_xof_flags_t</name></type> <name>xflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xflags</name> <operator>&amp;</operator> <name>XOF_DTRT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>XSF_DTRT</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xo_emit_top</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ppn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%*s{%s"</literal></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XOIF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_TOP_EMITTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_version</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%*s\"__version\": \"%s\", %s"</literal></expr></argument>,
<argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_version</name></name></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_version</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_do_open_container</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ppn</name> <init>= <expr><ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pre_nl</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"NULL passed for container name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>XO_FAILURE_NAME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>leader</name> <init>= <expr><call><name>xo_xml_leader</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_flags</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%*s&lt;%s%s"</literal></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>leader</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_curp</name></name> <operator>!=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>+=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr></argument>,
<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>+=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"&gt;%s"</literal></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<expr_stmt><expr><call><name>xo_stack_set_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_TOP</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_TOP_EMITTED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit_top</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>&amp;</operator> <name>XSF_NOT_FIRST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pre_nl</name> <operator>=</operator> <ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">",\n"</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%s%*s\"%s\": {%s"</literal></expr></argument>,
<argument><expr><name>pre_nl</name></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_OPEN_CONTAINER</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>,
<argument><expr><call><name>xo_stack_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_container_hf</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_transition</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_container_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_container_hf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_container</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_container_hf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_container_hd</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_container_hf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_DTRT</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_container_d</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_container_hf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_DTRT</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_do_close_container</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ppn</name> <init>= <expr><ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pre_nl</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <name>XSF_DTRT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing name without 'dtrt' mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>XO_FAILURE_NAME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>leader</name> <init>= <expr><call><name>xo_xml_leader</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_CONTAINER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%*s&lt;/%s%s&gt;%s"</literal></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>leader</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<expr_stmt><expr><call><name>xo_stack_set_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pre_nl</name> <operator>=</operator> <ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ppn</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_CONTAINER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%s%*s}%s"</literal></expr></argument>, <argument><expr><name>pre_nl</name></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<case>case <expr><name>XO_STYLE_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_CONTAINER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_CONTAINER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_CLOSE_CONTAINER</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_container_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_transition</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>XSS_CLOSE_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_container</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_close_container_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_container_hd</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_close_container_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_container_d</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_close_container_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_do_open_list</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ppn</name> <init>= <expr><ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pre_nl</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>

<expr_stmt><expr><name>indent</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_TOP</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_TOP_EMITTED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit_top</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"NULL passed for list name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>XO_FAILURE_NAME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_stack_set_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>&amp;</operator> <name>XSF_NOT_FIRST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pre_nl</name> <operator>=</operator> <ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">",\n"</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%s%*s\"%s\": [%s"</literal></expr></argument>,
<argument><expr><name>pre_nl</name></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_OPEN_LIST</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>XSS_OPEN_LIST</name></expr></argument>,
<argument><expr><name>XSF_LIST</name> <operator>|</operator> <call><name>xo_stack_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_list_hf</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_transition</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>XSS_OPEN_LIST</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_list_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_list_hf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_list</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_list_hf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_list_hd</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_list_hf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_DTRT</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_list_d</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_list_hf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_DTRT</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_do_close_list</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pre_nl</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <name>XSF_DTRT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing name without 'dtrt' mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>XO_FAILURE_NAME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>&amp;</operator> <name>XSF_NOT_FIRST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pre_nl</name> <operator>=</operator> <ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_LIST</name></expr></argument>, <argument><expr><name>XSF_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%s%*s]"</literal></expr></argument>, <argument><expr><name>pre_nl</name></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_LIST</name></expr></argument>, <argument><expr><name>XSF_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_CLOSE_LIST</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_LIST</name></expr></argument>, <argument><expr><name>XSF_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_list_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_transition</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>XSS_CLOSE_LIST</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_list</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_close_list_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_list_hd</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_close_list_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_list_d</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_close_list_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_do_open_leaf_list</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ppn</name> <init>= <expr><ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pre_nl</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_TOP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_TOP_EMITTED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%*s{%s"</literal></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XOIF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_TOP_EMITTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"NULL passed for list name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>XO_FAILURE_NAME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_stack_set_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>&amp;</operator> <name>XSF_NOT_FIRST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pre_nl</name> <operator>=</operator> <ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">",\n"</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%s%*s\"%s\": [%s"</literal></expr></argument>,
<argument><expr><name>pre_nl</name></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_OPEN_LEAF_LIST</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>,
<argument><expr><name>XSF_LIST</name> <operator>|</operator> <call><name>xo_stack_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_do_close_leaf_list</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pre_nl</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <name>XSF_DTRT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing name without 'dtrt' mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>XO_FAILURE_NAME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>&amp;</operator> <name>XSF_NOT_FIRST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pre_nl</name> <operator>=</operator> <ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_LEAF_LIST</name></expr></argument>, <argument><expr><name>XSF_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%s%*s]"</literal></expr></argument>, <argument><expr><name>pre_nl</name></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_CLOSE_LEAF_LIST</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<default>default:</default>
<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_LEAF_LIST</name></expr></argument>, <argument><expr><name>XSF_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_do_open_instance</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ppn</name> <init>= <expr><ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pre_nl</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"NULL passed for instance name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>XO_FAILURE_NAME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>leader</name> <init>= <expr><call><name>xo_xml_leader</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_flags</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%*s&lt;%s%s"</literal></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>leader</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_curp</name></name> <operator>!=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>+=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_data_append</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr></argument>,
<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_curp</name></name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_attrs</name><operator>.</operator><name>xb_bufp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>+=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"&gt;%s"</literal></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<expr_stmt><expr><call><name>xo_stack_set_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>&amp;</operator> <name>XSF_NOT_FIRST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pre_nl</name> <operator>=</operator> <ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">",\n"</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%s%*s{%s"</literal></expr></argument>,
<argument><expr><name>pre_nl</name></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_OPEN_INSTANCE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>, <argument><expr><call><name>xo_stack_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_instance_hf</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_transition</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_instance_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_instance_hf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_instance</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_instance_hf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_instance_hd</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_instance_hf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_DTRT</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_instance_d</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_instance_hf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_DTRT</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_do_close_instance</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ppn</name> <init>= <expr><ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pre_nl</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name> <init>= <expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <name>XSF_DTRT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"missing name without 'dtrt' mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>XO_FAILURE_NAME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>leader</name> <init>= <expr><call><name>xo_xml_leader</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_INSTANCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%*s&lt;/%s%s&gt;%s"</literal></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>leader</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ppn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<expr_stmt><expr><name>pre_nl</name> <operator>=</operator> <ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_INSTANCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%s%*s}"</literal></expr></argument>, <argument><expr><name>pre_nl</name></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>XSF_NOT_FIRST</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<case>case <expr><name>XO_STYLE_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_INSTANCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XSS_CLOSE_INSTANCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_CLOSE_INSTANCE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_instance_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_transition</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>XSS_CLOSE_INSTANCE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_instance</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_close_instance_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_instance_hd</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_close_instance_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_instance_d</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_close_instance_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_do_close_all</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_xsf_flags_t</name></type> <name>flags</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xsp</name> <operator>=</operator> <operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr>;</init> <condition><expr><name>xsp</name> <operator>&gt;=</operator> <name>limit</name></expr>;</condition> <incr><expr><name>xsp</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XSS_INIT</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XSS_OPEN_CONTAINER</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_container</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XSS_OPEN_LIST</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XSS_OPEN_INSTANCE</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_instance</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XSS_OPEN_LEAF_LIST</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_leaf_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XSS_MARKER</name></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name> <operator>&amp;</operator> <name>XSF_MARKER_FLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XSS_MARKER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"close %d failed: %d"</literal></expr></argument>, <argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_state</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>xo_do_close</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>xo_state_t</name></type> <name>new_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>limit</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_state_t</name></type> <name>need_state</name> <init>= <expr><name>new_state</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_state</name> <operator>==</operator> <name>XSS_CLOSE_CONTAINER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_state</name> <operator>=</operator> <name>XSS_OPEN_CONTAINER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>new_state</name> <operator>==</operator> <name>XSS_CLOSE_LIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_state</name> <operator>=</operator> <name>XSS_OPEN_LIST</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>new_state</name> <operator>==</operator> <name>XSS_CLOSE_INSTANCE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_state</name> <operator>=</operator> <name>XSS_OPEN_INSTANCE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>new_state</name> <operator>==</operator> <name>XSS_CLOSE_LEAF_LIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_state</name> <operator>=</operator> <name>XSS_OPEN_LEAF_LIST</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>new_state</name> <operator>==</operator> <name>XSS_MARKER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_state</name> <operator>=</operator> <name>XSS_MARKER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>xsp</name> <operator>=</operator> <operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr>;</init> <condition><expr><name>xsp</name> <operator>&gt;</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name></name></expr>;</condition> <incr><expr><name>xsp</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_state</name></name> <operator>==</operator> <name>XSS_MARKER</name> <operator>&amp;&amp;</operator> <name>need_state</name> <operator>!=</operator> <name>XSS_MARKER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"close (xo_%s) fails at marker '%s'; "</literal>
<literal type="string">"not found '%s'"</literal></expr></argument>,
<argument><expr><call><name>xo_state_name</name><argument_list>(<argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>xsp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"close stops at marker '%s'"</literal></expr></argument>, <argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_state</name></name> <operator>!=</operator> <name>need_state</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>xo_streq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>xsp</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"xo_%s can't find match for '%s'"</literal></expr></argument>,
<argument><expr><call><name>xo_state_name</name><argument_list>(<argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_all</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>xo_transition</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>xo_state_t</name></type> <name>new_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_state</name></decl>, <decl><type ref="prev"/><name>on_marker</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xsp</name> <operator>=</operator> <operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_state</name> <operator>=</operator> <name><name>xsp</name><operator>-&gt;</operator><name>xs_state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>on_marker</name> <operator>=</operator> <operator>(</operator><name>old_state</name> <operator>==</operator> <name>XSS_MARKER</name><operator>)</operator></expr>;</expr_stmt>


<while>while <condition>(<expr><name>old_state</name> <operator>==</operator> <name>XSS_MARKER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xsp</name> <operator>==</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>xsp</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>old_state</name> <operator>=</operator> <name><name>xsp</name><operator>-&gt;</operator><name>xs_state</name></name></expr>;</expr_stmt>
</block_content>}</block></while>






<switch>switch <condition>(<expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>old_state</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<label><name>open_container</name>:</label>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_INIT</name></expr></argument>, <argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>, <argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>, <argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_open_container</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LIST</name></expr></argument>, <argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>, <argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_leaf_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>open_container</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_INIT</name></expr></argument>, <argument><expr><name>XSS_CLOSE_CONTAINER</name></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_container</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>, <argument><expr><name>XSS_CLOSE_CONTAINER</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LIST</name></expr></argument>, <argument><expr><name>XSS_CLOSE_CONTAINER</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>, <argument><expr><name>XSS_CLOSE_CONTAINER</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>, <argument><expr><name>XSS_CLOSE_CONTAINER</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_leaf_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<label><name>open_list</name>:</label>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_INIT</name></expr></argument>, <argument><expr><name>XSS_OPEN_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>, <argument><expr><name>XSS_OPEN_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>, <argument><expr><name>XSS_OPEN_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_open_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LIST</name></expr></argument>, <argument><expr><name>XSS_OPEN_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>open_list</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>, <argument><expr><name>XSS_OPEN_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_leaf_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>open_list</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>


<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LIST</name></expr></argument>, <argument><expr><name>XSS_CLOSE_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_INIT</name></expr></argument>, <argument><expr><name>XSS_CLOSE_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>, <argument><expr><name>XSS_CLOSE_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>, <argument><expr><name>XSS_CLOSE_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>, <argument><expr><name>XSS_CLOSE_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<label><name>open_instance</name>:</label>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LIST</name></expr></argument>, <argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_open_instance</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_INIT</name></expr></argument>, <argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>, <argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_open_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>open_instance</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>, <argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_open_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_instance</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>open_instance</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>, <argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_leaf_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>open_instance</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>


<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>, <argument><expr><name>XSS_CLOSE_INSTANCE</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_instance</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_INIT</name></expr></argument>, <argument><expr><name>XSS_CLOSE_INSTANCE</name></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"xo_close_instance ignored when called from "</literal>
<literal type="string">"initial state ('%s')"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>name</name></expr> ?</condition><then/><else>: <expr><literal type="string">"(unknown)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>, <argument><expr><name>XSS_CLOSE_INSTANCE</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LIST</name></expr></argument>, <argument><expr><name>XSS_CLOSE_INSTANCE</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>, <argument><expr><name>XSS_CLOSE_INSTANCE</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_leaf_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<label><name>open_leaf_list</name>:</label>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>, <argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>, <argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_INIT</name></expr></argument>, <argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_open_leaf_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LIST</name></expr></argument>, <argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>, <argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>open_leaf_list</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>


<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>, <argument><expr><name>XSS_CLOSE_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_leaf_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_INIT</name></expr></argument>, <argument><expr><name>XSS_CLOSE_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"xo_close_leaf_list ignored when called from "</literal>
<literal type="string">"initial state ('%s')"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>name</name></expr> ?</condition><then/><else>: <expr><literal type="string">"(unknown)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>, <argument><expr><name>XSS_CLOSE_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LIST</name></expr></argument>, <argument><expr><name>XSS_CLOSE_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>, <argument><expr><name>XSS_CLOSE_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>, <argument><expr><name>XSS_EMIT</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>, <argument><expr><name>XSS_EMIT</name></expr></argument>)</argument_list></call></expr>:</case>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LIST</name></expr></argument>, <argument><expr><name>XSS_EMIT</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XSS_CLOSE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_INIT</name></expr></argument>, <argument><expr><name>XSS_EMIT</name></expr></argument>)</argument_list></call></expr>:</case>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>, <argument><expr><name>XSS_EMIT</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>on_marker</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>marker_prevents_close</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_close_leaf_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_INIT</name></expr></argument>, <argument><expr><name>XSS_EMIT_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_CONTAINER</name></expr></argument>, <argument><expr><name>XSS_EMIT_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>, <argument><expr><name>XSS_EMIT_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_do_open_leaf_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LEAF_LIST</name></expr></argument>, <argument><expr><name>XSS_EMIT_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>
<break>break;</break>

<case>case <expr><call><name>XSS_TRANSITION</name><argument_list>(<argument><expr><name>XSS_OPEN_LIST</name></expr></argument>, <argument><expr><name>XSS_EMIT_LEAF_LIST</name></expr></argument>)</argument_list></call></expr>:</case>






<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"unknown transition: (%u -&gt; %u)"</literal></expr></argument>,
<argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_state</name></name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_FLUSH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_flush_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>XOIF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_MADE_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

<label><name>marker_prevents_close</name>:</label>
<expr_stmt><expr><call><name>xo_failure</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"marker '%s' prevents transition from %s to %s"</literal></expr></argument>,
<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_name</name></expr></argument>,
<argument><expr><call><name>xo_state_name</name><argument_list>(<argument><expr><name>old_state</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>xo_state_name</name><argument_list>(<argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_marker_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XSS_MARKER</name></expr></argument>,
<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name><index>[<expr><name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>]</index></name><operator>.</operator><name>xs_flags</name> <operator>&amp;</operator> <name>XSF_MARKER_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_open_marker</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_open_marker_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_marker_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>xo_do_close</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>XSS_MARKER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_close_marker</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_close_marker_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>xo_set_writer</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>xo_write_func_t</name></type> <name>write_func</name></decl></parameter>,
<parameter><decl><type><name>xo_close_func_t</name></type> <name>close_func</name></decl></parameter>, <parameter><decl><type><name>xo_flush_func_t</name></type> <name>flush_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_write</name></name> <operator>=</operator> <name>write_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_close</name></name> <operator>=</operator> <name>close_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_flush</name></name> <operator>=</operator> <name>flush_func</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_set_allocator</name> <parameter_list>(<parameter><decl><type><name>xo_realloc_func_t</name></type> <name>realloc_func</name></decl></parameter>, <parameter><decl><type><name>xo_free_func_t</name></type> <name>free_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xo_realloc</name> <operator>=</operator> <name>realloc_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xo_free</name> <operator>=</operator> <name>free_func</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_flush_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_FLUSH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_write</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_flush</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>xop</name><operator>-&gt;</operator><name>xo_flush</name></name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_opaque</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_flush</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_flush_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_finish_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>open_if_empty</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_CLOSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_do_close_all</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NO_TOP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pre_nl</name> <init>= <expr><ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_TOP_EMITTED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XOIF_CLEAR</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_TOP_EMITTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_MADE_OUTPUT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>open_if_empty</name> <operator>=</operator> <literal type="string">"{ "</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pre_nl</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_printf</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"%s%*s%s}\n"</literal></expr></argument>,
<argument><expr><name>pre_nl</name></expr></argument>, <argument><expr><call><name>xo_indent</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>open_if_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_FINISH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><call><name>xo_flush_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>xo_ssize_t</name></type>
<name>xo_finish</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xo_finish_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>xo_finish_atexit</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>xo_finish_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>xo_errorn_hv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_newline</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>need_newline</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fmt</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newfmt</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newfmt</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newfmt</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newfmt</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>newfmt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_HTML</name></expr>:</case>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_buf_append_div</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XOIF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOIF_DIV_OPEN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_line_close</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_write</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>
<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_container_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_format_value</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_vap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_SDPARAMS</name></expr>:</case>
<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_error_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_errorn_hv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>xo_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_errorn_hv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_errorn_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_errorn_hv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>xo_errorn</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_errorn_hv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>xo_parse_args</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>libxo_opt</name><index>[]</index></name> <init>= <expr><literal type="string">"--libxo"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>save</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>xo_program</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xo_program</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>xo_program</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xo_program</name> <operator>=</operator> <operator>++</operator><name>cp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>






<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>xo_program</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>gnu_ext</name><index>[]</index></name> <init>= <expr><literal type="string">".test"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>gnu_ext</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>gnu_ext</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>gnu_ext</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name> <init>= <expr><call><name>xo_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>save</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>libxo_opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>libxo_opt</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>save</name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>save</name></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>save</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>libxo_opt</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"missing libxo option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_set_options</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_set_options</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_set_options</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><operator>++</operator><name>cp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="string">"check"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>XO_HAS_LIBXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"unknown libxo option: '%s'"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"unknown libxo option: '%s'"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLOR_ALLOWED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isatty</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XOF_SET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>save</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>save</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>xo_dump_stack</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_stack_t</name> <modifier>*</modifier></type><name>xsp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Stack dump:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xsp</name> <operator>=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_stack</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>xsp</name><operator>++</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>xop</name><operator>-&gt;</operator><name>xo_depth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>xsp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" [%d] %s '%s' [%x]\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>xo_state_name</name><argument_list>(<argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_state</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_name</name></name></expr> ?</condition><then/><else>: <expr><literal type="string">"--"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>xsp</name><operator>-&gt;</operator><name>xs_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>xo_set_program</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xo_program</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_set_version_h</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xo_style_is_encoding</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XO_STYLE_XML</name></expr>:</case>

<expr_stmt><expr><call><name>xo_attr_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_JSON</name></expr>:</case>




<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_version</name></name> <operator>=</operator> <call><name>xo_strndup</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XO_STYLE_ENCODER</name></expr>:</case>
<expr_stmt><expr><call><name>xo_encoder_handle</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XO_OP_VERSION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>xo_set_version</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xo_set_version_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>xo_emit_warn_hcv</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>as_warning</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_open_marker_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"xo_emit_warn_hcv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_container_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><ternary><condition><expr><name>as_warning</name></expr> ?</condition><then> <expr><literal type="string">"__warning"</literal></expr> </then><else>: <expr><literal type="string">"__error"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xo_program</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{wc:program}"</literal></expr></argument>, <argument><expr><name>xo_program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_XML</name> <operator>||</operator> <call><name>xo_style</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_JSON</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_handle_t</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>xo_style</name></name> <operator>=</operator> <name>XO_STYLE_TEXT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>xo_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_depth_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>XO_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>xo_emit_hv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xo_buffer_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>xo_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xo_format_value</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>xb_curp</name></name> <operator>-</operator> <name><name>src</name><operator>-&gt;</operator><name>xb_bufp</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_free</name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>xo_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_buf_cleanup</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>xo_emit_hv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fmt</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">": {G:strerror}{g:error/%s}"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_close_marker_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"xo_emit_warn_hcv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_flush_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_emit_warn_hc</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_emit_warn_c</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_emit_warn</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_emit_warnx</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_emit_err_v</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>eval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xo_emit_warn_hcv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_emit_err</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>eval</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_err_v</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_emit_errx</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>eval</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_err_v</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xo_emit_errc</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>eval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_err_v</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>




<function><type><name>void</name> <modifier>*</modifier></type>
<name>xo_get_private</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>xop</name><operator>-&gt;</operator><name>xo_private</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>xo_set_private</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_private</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>xo_encoder_func_t</name></type>
<name>xo_get_encoder</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>xop</name><operator>-&gt;</operator><name>xo_encoder</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>xo_set_encoder</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_encoder_func_t</name></type> <name>encoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_style</name></name> <operator>=</operator> <name>XO_STYLE_ENCODER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xop</name><operator>-&gt;</operator><name>xo_encoder</name></name> <operator>=</operator> <name>encoder</name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>xo_explicit_transition</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_state_t</name></type> <name>new_state</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xo_xsf_flags_t</name></type> <name>xsf_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xop</name> <operator>=</operator> <call><name>xo_default</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>new_state</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>XSS_OPEN_LIST</name></expr>:</case>
<expr_stmt><expr><call><name>xo_do_open_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XSS_OPEN_INSTANCE</name></expr>:</case>
<expr_stmt><expr><call><name>xo_do_open_instance</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XSS_CLOSE_INSTANCE</name></expr>:</case>
<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>XSS_OPEN_INSTANCE</name></expr></argument>,
<argument><expr><call><name>xo_stack_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_stack_set_flags</name><argument_list>(<argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_do_close_instance</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XSS_CLOSE_LIST</name></expr>:</case>
<expr_stmt><expr><name>xsf_flags</name> <operator>=</operator> <ternary><condition><expr><call><name>XOF_ISSET</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>XOF_NOT_FIRST</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>XSF_NOT_FIRST</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_depth_change</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>XSS_OPEN_LIST</name></expr></argument>,
<argument><expr><name>XSF_LIST</name> <operator>|</operator> <name>xsf_flags</name> <operator>|</operator> <call><name>xo_stack_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_do_close_list</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
