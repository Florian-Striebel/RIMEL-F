<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/libxo/xo_encoder.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XO_ENCODER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_ENCODER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>extern</specifier> <name>xo_realloc_func_t</name></type> <name>xo_realloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>xo_free_func_t</name></type> <name>xo_free</name></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>xo_streq</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>one</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>xo_xff_flags_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_COLON</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_COMMA</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_WS</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_ENCODE_ONLY</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_QUOTE</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_NOQUOTE</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_DISPLAY_ONLY</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_KEY</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_XML</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_ATTR</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_BLANK_LINE</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_NO_OUTPUT</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_TRIM_WS</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_LEAF_LIST</name></cpp:macro> <cpp:value>(1&lt;&lt;13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_UNESCAPE</name></cpp:macro> <cpp:value>(1&lt;&lt;14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_HUMANIZE</name></cpp:macro> <cpp:value>(1&lt;&lt;15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_HN_SPACE</name></cpp:macro> <cpp:value>(1&lt;&lt;16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_HN_DECIMAL</name></cpp:macro> <cpp:value>(1&lt;&lt;17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_HN_1000</name></cpp:macro> <cpp:value>(1&lt;&lt;18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_GT_FIELD</name></cpp:macro> <cpp:value>(1&lt;&lt;19)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_GT_PLURAL</name></cpp:macro> <cpp:value>(1&lt;&lt;20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_ARGUMENT</name></cpp:macro> <cpp:value>(1&lt;&lt;21)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFF_GT_FLAGS</name></cpp:macro> <cpp:value>(XFF_GT_FIELD | XFF_GT_PLURAL)</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name></type> <name>xo_encoder_op_t</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_CREATE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_OPEN_CONTAINER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_CLOSE_CONTAINER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_OPEN_LIST</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_CLOSE_LIST</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_OPEN_LEAF_LIST</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_CLOSE_LEAF_LIST</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_OPEN_INSTANCE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_CLOSE_INSTANCE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_STRING</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_CONTENT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_FINISH</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_FLUSH</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_DESTROY</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_ATTRIBUTE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_VERSION</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_OPTIONS</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_OP_OPTIONS_PLUS</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_ENCODER_HANDLER_ARGS</name></cpp:macro> <cpp:value>xo_handle_t *xop __attribute__ ((__unused__)), xo_encoder_op_t op __attribute__ ((__unused__)), const char *name __attribute__ ((__unused__)), const char *value __attribute__ ((__unused__)), void *private __attribute__ ((__unused__)), xo_xff_flags_t flags __attribute__ ((__unused__))</cpp:value></cpp:define>







<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xo_encoder_func_t</name>)<parameter_list>(<parameter><decl><type><name>XO_ENCODER_HANDLER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>xo_encoder_init_args_s</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>xei_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_encoder_func_t</name></type> <name>xei_handler</name></decl>;</decl_stmt>
}</block></struct></type> <name>xo_encoder_init_args_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_ENCODER_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_ENCODER_INIT_ARGS</name></cpp:macro> <cpp:value>xo_encoder_init_args_t *arg __attribute__ ((__unused__))</cpp:value></cpp:define>


<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xo_encoder_init_func_t</name>)<parameter_list>(<parameter><decl><type><name>XO_ENCODER_INIT_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_ENCODER_INIT_NAME_TOKEN</name></cpp:macro> <cpp:value>xo_encoder_library_init</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_STRINGIFY</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#_x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_STRINGIFY2</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XO_STRINGIFY(_x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XO_ENCODER_INIT_NAME</name></cpp:macro> <cpp:value>XO_STRINGIFY2(XO_ENCODER_INIT_NAME_TOKEN)</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>XO_ENCODER_INIT_NAME_TOKEN</name> <parameter_list>(<parameter><decl><type><name>XO_ENCODER_INIT_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_encoder_register</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>xo_encoder_func_t</name></type> <name>func</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_encoder_unregister</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type>
<name>xo_get_private</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_encoder_path_add</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_set_private</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_encoder_func_t</name></type>
<name>xo_get_encoder</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_set_encoder</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_encoder_func_t</name></type> <name>encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type>
<name>xo_encoder_init</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>xo_handle_t</name> <modifier>*</modifier></type>
<name>xo_encoder_create</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>xo_xof_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type>
<name>xo_encoder_handle</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>xo_encoder_op_t</name></type> <name>op</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>xo_xff_flags_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>xo_encoders_clean</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xo_encoder_op_name</name> <parameter_list>(<parameter><decl><type><name>xo_encoder_op_t</name></type> <name>op</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type>
<name>xo_failure</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
