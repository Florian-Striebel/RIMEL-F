<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/tests/core/test_10.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_encoder.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>base_grocery</name><index>[]</index></name> <init>= <expr><literal type="string">"GRO"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>base_hardware</name><index>[]</index></name> <init>= <expr><literal type="string">"HRD"</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>item</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>i_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_sold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_instock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_onorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>i_sku_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_sku_num</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name><name>struct</name> <name>item</name></name></type> <name><name>list</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"gum"</literal></expr>, <expr><literal type="number">1412</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>base_grocery</name></expr>, <expr><literal type="number">415</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rope"</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>base_hardware</name></expr>, <expr><literal type="number">212</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ladder"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>base_hardware</name></expr>, <expr><literal type="number">517</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bolt"</literal></expr>, <expr><literal type="number">4123</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><name>base_hardware</name></expr>, <expr><literal type="number">632</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"water"</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>base_grocery</name></expr>, <expr><literal type="number">2331</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>item</name></name></type> <name><name>list2</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"fish"</literal></expr>, <expr><literal type="number">1321</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>base_grocery</name></expr>, <expr><literal type="number">533</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_info_t</name></type> <name><name>info</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"in-stock"</literal></expr>, <expr><literal type="string">"number"</literal></expr>, <expr><literal type="string">"Number of items in stock"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"Name of the item"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"on-order"</literal></expr>, <expr><literal type="string">"number"</literal></expr>, <expr><literal type="string">"Number of items on order"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sku"</literal></expr>, <expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"Stock Keeping Unit"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sold"</literal></expr>, <expr><literal type="string">"number"</literal></expr>, <expr><literal type="string">"Number of items sold"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>info_count</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>xo_parse_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>argc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</condition> <incr><expr><name>argc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_XML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"json"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_JSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"html"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_HTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"pretty"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"xpath"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_XPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"error detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_set_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>info_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_KEYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_set_version</name><argument_list>(<argument><expr><literal type="string">"3.1.4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_container_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_attr</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_list</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_attr</name><argument_list>(<argument><expr><literal type="string">"test2"</literal></expr></argument>, <argument><expr><literal type="string">"value2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>colors</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"blue"</literal></expr>, <expr><literal type="string">"green"</literal></expr>, <expr><literal type="string">"red"</literal></expr>, <expr><literal type="string">"yellow"</literal></expr>, <expr><literal type="string">"default"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{C:/bg-%s}"</literal></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{C:/fg-%s}{T:/%s}"</literal></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{C:reset}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{C:bold}{:data} {C:underline}{:data} {C:inverse}{:data} "</literal>
<literal type="string">"{C:no-bold}{:data} {C:no-inverse}{:data} "</literal>
<literal type="string">"{C:no-underline}{:data}\n"</literal></expr></argument>,
<argument><expr><literal type="string">"bold"</literal></expr></argument>, <argument><expr><literal type="string">"bold-ul"</literal></expr></argument>, <argument><expr><literal type="string">"triple"</literal></expr></argument>, <argument><expr><literal type="string">"inv-ul"</literal></expr></argument>, <argument><expr><literal type="string">"underline"</literal></expr></argument>, <argument><expr><literal type="string">"plain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{T:Item/%-10s}{C:bold,underline}{T:Total Sold/%12s}{C:no-bold}"</literal>
<literal type="string">"{T:In Stock/%12s}{C:/%s}"</literal>
<literal type="string">"{T:On Order/%12s}{C:normal}{T:SKU/%5s}\n"</literal></expr></argument>, <argument><expr><literal type="string">"inverse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
xo_finish();
return 0;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>ip</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name><name>ip</name><operator>-&gt;</operator><name>i_title</name></name></expr>;</condition> <incr><expr><name>ip</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xo_open_instance</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_attr</name><argument_list>(<argument><expr><literal type="string">"test3"</literal></expr></argument>, <argument><expr><literal type="string">"value3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{keq:sku/%s-%u/%s-000-%u}"</literal>
<literal type="string">"{k:name/%-10s/%s}{n:sold/%12u/%u}"</literal>
<literal type="string">"{C:/%s}{:in-stock/%12u/%u}{C:normal}"</literal>
<literal type="string">"{C:/fg-%s}{:on-order/%12u/%u}{C:/fg-default}"</literal>
<literal type="string">"{qkd:sku/%5s-000-%u/%s-000-%u}\n"</literal></expr></argument>,
<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sku_base</name></name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sku_num</name></name></expr></argument>,
<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sold</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>ip</name><operator>-&gt;</operator><name>i_instock</name></name> <operator>&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"inverse"</literal></expr> </then><else>: <expr><literal type="string">"normal"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_instock</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>ip</name><operator>-&gt;</operator><name>i_onorder</name></name> <operator>&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"yellow"</literal></expr> </then><else>: <expr><literal type="string">"default"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_onorder</name></name></expr></argument>,
<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sku_base</name></name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sku_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_close_instance</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_close_list</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_list</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ip</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name><name>ip</name><operator>-&gt;</operator><name>i_title</name></name></expr>;</condition> <incr><expr><name>ip</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xo_open_instance</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{keq:sku/%s-%u/%s-000-%u}"</literal></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sku_base</name></name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sku_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{L:Item} '{k:name/%s}':\n"</literal></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{P: }{L:Total sold}: {n:sold/%u%s}\n"</literal></expr></argument>,
<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sold</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sold</name></name></expr> ?</condition><then> <expr><literal type="string">".0"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{P: }{Lcw:In stock}{C:inverse}{:in-stock/%u}{C:}\n"</literal></expr></argument>,
<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_instock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{P: }{Lcw:On order}{:on-order/%u}\n"</literal></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_onorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{P: }{L:SKU}: {qkd:sku/%s-000-%u}\n"</literal></expr></argument>,
<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sku_base</name></name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sku_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_close_instance</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_close_list</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_list</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ip</name> <operator>=</operator> <name>list2</name></expr>;</init> <condition><expr><name><name>ip</name><operator>-&gt;</operator><name>i_title</name></name></expr>;</condition> <incr><expr><name>ip</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xo_open_instance</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{keq:sku/%s-%u/%s-000-%u}"</literal></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sku_base</name></name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sku_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{L:Item} '{k:name/%s}':\n"</literal></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{P: }{C:bg-blue , fg-white, bold }{L:Total sold}: "</literal>
<literal type="string">"{n:sold/%u%s}{C:}\n"</literal></expr></argument>,
<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sold</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sold</name></name></expr> ?</condition><then> <expr><literal type="string">".0"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{P: }{Lcw:In stock}{:in-stock/%u}\n"</literal></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_instock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{P: }{Lcw:On order}{:on-order/%u}\n"</literal></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_onorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{P: }{L:SKU}: {qkd:sku/%s-000-%u}\n"</literal></expr></argument>,
<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sku_base</name></name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_sku_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_close_instance</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_close_list</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_list</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ip</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name><name>ip</name><operator>-&gt;</operator><name>i_title</name></name></expr>;</condition> <incr><expr><name>ip</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xo_attr</name><argument_list>(<argument><expr><literal type="string">"test4"</literal></expr></argument>, <argument><expr><literal type="string">"value4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{Lwc:Item}{l:item}\n"</literal></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_close_list</name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"X{P:}X"</literal></expr></argument>, <argument><expr><literal type="string">"epic fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"X{T:}X"</literal></expr></argument>, <argument><expr><literal type="string">"epic fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"X{N:}X"</literal></expr></argument>, <argument><expr><literal type="string">"epic fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"X{L:}X\n"</literal></expr></argument>, <argument><expr><literal type="string">"epic fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"X{P: }X{Lwc:Cost}{:cost/%u}\n"</literal></expr></argument>, <argument><expr><literal type="number">425</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"X{P:/%30s}X{Lwc:Cost}{:cost/%u}\n"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">455</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_close_container_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
