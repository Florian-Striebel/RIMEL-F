<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/tests/core/test_04.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>xo_info_t</name></type> <name><name>info</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"employee"</literal></expr>, <expr><literal type="string">"object"</literal></expr>, <expr><literal type="string">"Employee data"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"first-name"</literal></expr>, <expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"First name of employee"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"last-name"</literal></expr>, <expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"Last name of employee"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"department"</literal></expr>, <expr><literal type="string">"number"</literal></expr>, <expr><literal type="string">"Department number"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>info_count</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>employee</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>e_dept</name></decl>;</decl_stmt>
}</block> <decl><name><name>employees</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"Terry"</literal></expr>, <expr><literal type="string">"Jones"</literal></expr>, <expr><literal type="number">660</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Leslie"</literal></expr>, <expr><literal type="string">"Patterson"</literal></expr>, <expr><literal type="number">341</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ashley"</literal></expr>, <expr><literal type="string">"Smith"</literal></expr>, <expr><literal type="number">1440</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name> <init>= <expr><name>employees</name></expr></init></decl>;</struct>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>xo_parse_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_set_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>info_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"employees"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_list</name><argument_list>(<argument><expr><literal type="string">"employee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{T:Last Name/%-12s}{T:First Name/%-14s}{T:Department/%s}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>( <init>;</init> <condition><expr><name><name>ep</name><operator>-&gt;</operator><name>e_first</name></name></expr>;</condition> <incr><expr><name>ep</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xo_open_instance</name><argument_list>(<argument><expr><literal type="string">"employee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{:first-name/%-12s/%s}{:last-name/%-14s/%s}"</literal>
<literal type="string">"{:department/%8u/%u}\n"</literal></expr></argument>,
<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>e_first</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>e_last</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>e_dept</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_instance</name><argument_list>(<argument><expr><literal type="string">"employee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_close_list</name><argument_list>(<argument><expr><literal type="string">"employee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"employees"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
