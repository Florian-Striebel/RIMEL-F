<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/tests/core/test_02.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_encoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_humanize.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xo_set_program</name><argument_list>(<argument><expr><literal type="string">"test_02"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>xo_parse_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>argc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</condition> <incr><expr><name>argc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_XML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"json"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_JSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"html"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_HTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"pretty"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"xpath"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_XPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_UNITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_set_file</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_container_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{kt:name/%-*.*s}{eq:flags/0x%x}"</literal></expr></argument>,
<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"em0"</literal></expr></argument>, <argument><expr><literal type="number">34883</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{d:/%-*.*s}{etk:name}{eq:flags/0x%x}"</literal></expr></argument>,
<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"em0"</literal></expr></argument>, <argument><expr><literal type="string">"em0"</literal></expr></argument>, <argument><expr><literal type="number">34883</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"We are {{emit}}{{ting}} some {:what}\n"</literal></expr></argument>, <argument><expr><literal type="string">"braces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_message</name><argument_list>(<argument><expr><literal type="string">"abcdef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_message_e</name><argument_list>(<argument><expr><literal type="string">"abcdef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_message</name><argument_list>(<argument><expr><literal type="string">"improper use of profanity; %s; %s"</literal></expr></argument>,
<argument><expr><literal type="string">"ten yard penalty"</literal></expr></argument>, <argument><expr><literal type="string">"first down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"length {:length/%6.6s}\n"</literal></expr></argument>, <argument><expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"close {:fd/%d} returned {:error/%m} {:test}\n"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"good"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"close {:fd/%d} returned {:error/%6.6m} {:test}\n"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"good"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>xo_message</name><argument_list>(<argument><expr><literal type="string">"improper use of profanity; %s; %s"</literal></expr></argument>,
<argument><expr><literal type="string">"ten yard penalty"</literal></expr></argument>, <argument><expr><literal type="string">"first down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">" {:lines/%7ju} {:words/%7ju} "</literal>
<literal type="string">"{:characters/%7ju} {d:filename/%s}\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{lw:bytes/%d}{Np:byte,bytes}\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{:mbuf-current/%u}/{:mbuf-cache/%u}/{:mbuf-total/%u} "</literal>
<literal type="string">"{N:mbufs &lt;&amp;&gt; in use (current\\/cache\\/total)}\n"</literal></expr></argument>,
<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{:distance/%u}{Uw:miles} from {:location}\n"</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="string">"Boston"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{:memory/%u}{U:k} left out of {:total/%u}{U:kb}\n"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">640</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{:memory/%u}{U:/%s} left out of {:total/%u}{U:/%s}\n"</literal></expr></argument>,
<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"k"</literal></expr></argument>, <argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="string">"kilobytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{,title:/before%safter:}\n"</literal></expr></argument>, <argument><expr><literal type="string">"working"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{,display,white,colon:some/%s}"</literal>
<literal type="string">"{,value:ten/%ju}{,value:eleven/%ju}\n"</literal></expr></argument>,
<argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{:unknown/%u} "</literal>
<literal type="string">"{N:/packet%s here\\/there\\/everywhere}\n"</literal></expr></argument>,
<argument><expr><literal type="number">1010</literal></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{:unknown/%u} "</literal>
<literal type="string">"{,note:/packet%s here\\/there\\/everywhere}\n"</literal></expr></argument>,
<argument><expr><literal type="number">1010</literal></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"({[:/%d}{n:min/15}/{n:cur/20}/{:max/%d}{]:})\n"</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"({[:30}{:min/%u}/{:cur/%u}/{:max/%u}{]:})\n"</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"({[:-30}{n:min/15}/{n:cur/20}/{n:max/125}{]:})\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"({[:}{:min/%u}/{:cur/%u}/{:max/%u}{]:/%d})\n"</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"Humanize: {h:val1/%u}, {h,hn-space:val2/%u}, "</literal>
<literal type="string">"{h,hn-decimal:val3/%u}, {h,hn-1000:val4/%u}, "</literal>
<literal type="string">"{h,hn-decimal:val5/%u}\n"</literal></expr></argument>,
<argument><expr><literal type="number">21</literal></expr></argument>,
<argument><expr><literal type="number">57</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>,
<argument><expr><literal type="number">96</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>,
<argument><expr><operator>(</operator><literal type="number">42</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">420</literal><operator>)</operator> <operator>*</operator> <literal type="number">1024</literal></expr></argument>,
<argument><expr><literal type="number">1342172800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_list</name><argument_list>(<argument><expr><literal type="string">"flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{lq:flag/one} {lq:flag/two} {lq:flag/three}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_list</name><argument_list>(<argument><expr><literal type="string">"flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{n:works/%s}\n"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{e:empty-tag/}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"1:{qt:t1/%*d} 2:{qt:t2/test%-*u} "</literal>
<literal type="string">"3:{qt:t3/%10sx} 4:{qt:t4/x%-*.*s}\n"</literal></expr></argument>,
<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="string">"ten-long"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{E:this is an error}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{E:/%s more error%s}\n"</literal></expr></argument>, <argument><expr><literal type="string">"two"</literal></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{W:this is an warning}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{W:/%s more warning%s}\n"</literal></expr></argument>, <argument><expr><literal type="string">"two"</literal></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{L:/V1\\/V2 packet%s}: {:count/%u}\n"</literal></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>test</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{:test/%04d} {L:/tr%s}\n"</literal></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>test</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"y"</literal></expr> </then><else>: <expr><literal type="string">"ies"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_message</name><argument_list>(<argument><expr><literal type="string">"improper use of profanity; %s; %s"</literal></expr></argument>,
<argument><expr><literal type="string">"ten yard penalty"</literal></expr></argument>, <argument><expr><literal type="string">"first down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_error</name><argument_list>(<argument><expr><literal type="string">"Shut 'er down, Clancey! She's a-pumpin' mud! &lt;&gt;!,\"!&lt;&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_error</name><argument_list>(<argument><expr><literal type="string">"err message (%d)"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_error</name><argument_list>(<argument><expr><literal type="string">"err message (%d)\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_errorn</name><argument_list>(<argument><expr><literal type="string">"err message (%d)"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_errorn</name><argument_list>(<argument><expr><literal type="string">"err message (%d)\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_close_container_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
