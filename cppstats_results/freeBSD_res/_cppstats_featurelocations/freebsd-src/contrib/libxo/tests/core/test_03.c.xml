<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/tests/core/test_03.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_encoder.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>xo_info_t</name></type> <name><name>info</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"employee"</literal></expr>, <expr><literal type="string">"object"</literal></expr>, <expr><literal type="string">"Employee data"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"first-name"</literal></expr>, <expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"First name of employee"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"last-name"</literal></expr>, <expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"Last name of employee"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"department"</literal></expr>, <expr><literal type="string">"number"</literal></expr>, <expr><literal type="string">"Department number"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>info_count</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>opt_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>opt_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>employee</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>e_dept</name></decl>;</decl_stmt>
}</block> <decl><name><name>employees</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"Terry"</literal></expr>, <expr><literal type="string">"Jones"</literal></expr>, <expr><literal type="number">660</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Leslie"</literal></expr>, <expr><literal type="string">"Patterson"</literal></expr>, <expr><literal type="number">341</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ashley"</literal></expr>, <expr><literal type="string">"Smith"</literal></expr>, <expr><literal type="number">1440</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</struct>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>xo_parse_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>argc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</condition> <incr><expr><name>argc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>opt_count</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"extra"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>opt_extra</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_set_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>info_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"employees"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_list</name><argument_list>(<argument><expr><literal type="string">"employee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"[{:extra/%*s}]\n"</literal></expr></argument>, <argument><expr><name>opt_extra</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{T:/%13s} {T:/%5s} {T:/%6s} {T:/%7s} {T:/%8s} {T:Size(s)}\n"</literal></expr></argument>,
<argument><expr><literal type="string">"Type"</literal></expr></argument>, <argument><expr><literal type="string">"InUse"</literal></expr></argument>, <argument><expr><literal type="string">"MemUse"</literal></expr></argument>, <argument><expr><literal type="string">"HighUse"</literal></expr></argument>, <argument><expr><literal type="string">"Requests"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_list</name><argument_list>(<argument><expr><literal type="string">"memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_instance</name><argument_list>(<argument><expr><literal type="string">"memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIu64</name></cpp:macro> <cpp:value>"llu"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_ULL</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned long long) _x)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{k:type/%13s} {:in-use/%5"</literal> <name>PRIu64</name> <literal type="string">"} "</literal>
<literal type="string">"{:memory-use/%5"</literal> <name>PRIu64</name> <literal type="string">"}{U:K} {:high-use/%7s} "</literal>
<literal type="string">"{:requests/%8"</literal> <name>PRIu64</name> <literal type="string">"} "</literal></expr></argument>,
<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name>TO_ULL</name><argument_list>(<argument><expr><literal type="number">12345</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TO_ULL</name><argument_list>(<argument><expr><literal type="number">54321</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><call><name>TO_ULL</name><argument_list>(<argument><expr><literal type="number">32145</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
xo_open_list("size");
for (i = 0; i &lt; 32; i++) {
if (!first)
xo_emit(",");
xo_emit("{l:size/%d}", 1 &lt;&lt; (i + 4));
first = 0;
}
xo_close_list("size");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>xo_close_instance</name><argument_list>(<argument><expr><literal type="string">"memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_list</name><argument_list>(<argument><expr><literal type="string">"memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>opt_count</name><operator>--</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ep</name> <operator>=</operator> <name>employees</name></expr>;</init> <condition><expr><name><name>ep</name><operator>-&gt;</operator><name>e_first</name></name></expr>;</condition> <incr><expr><name>ep</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xo_open_instance</name><argument_list>(<argument><expr><literal type="string">"employee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{:first-name} {:last-name} works in "</literal>
<literal type="string">"dept #{:department/%u}\n"</literal></expr></argument>,
<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>e_first</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>e_last</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>e_dept</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_instance</name><argument_list>(<argument><expr><literal type="string">"employee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_close_list</name><argument_list>(<argument><expr><literal type="string">"employee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"employees"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
