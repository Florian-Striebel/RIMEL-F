<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/tests/core/test_12.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_encoder.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_emit_flags_t</name></type> <name>flags</name> <init>= <expr><name>XOEF_RETAIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_color</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xo_set_program</name><argument_list>(<argument><expr><literal type="string">"test_12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>xo_parse_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>argc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</condition> <incr><expr><name>argc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_XML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"json"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_JSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"html"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_HTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"no-color"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>opt_color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"pretty"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"xpath"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_XPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"no-retain"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>XOEF_RETAIN</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>xo_streq</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"big"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_UNITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_set_file</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{C:fg-red,bg-green}Merry XMas!!{C:}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"One {C:fg-yellow,bg-blue}{:animal}{C:}, "</literal>
<literal type="string">"Two {C:fg-green,bg-yellow}{:animal}{C:}\n"</literal></expr></argument>,
<argument><expr><literal type="string">"fish"</literal></expr></argument>, <argument><expr><literal type="string">"fish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt1</name> <init>= <expr><literal type="string">"The {C:fg-red}{k:name}{C:reset} is "</literal>
<literal type="string">"{C:/fg-%s}{:color}{C:reset} til {:time/%02d:%02d}\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt2</name> <init>= <expr><literal type="string">"My {C:fg-red}{:hand}{C:reset} hand is "</literal>
<literal type="string">"{C:/fg-%s}{:color}{C:reset} til {:time/%02d:%02d}\n"</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xo_open_instance</name><argument_list>(<argument><expr><literal type="string">"thing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_f</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fmt1</name></expr></argument>, <argument><expr><literal type="string">"thing"</literal></expr></argument>, <argument><expr><literal type="string">"green"</literal></expr></argument>, <argument><expr><literal type="string">"green"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit_f</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fmt2</name></expr></argument>, <argument><expr><literal type="string">"left"</literal></expr></argument>, <argument><expr><literal type="string">"blue"</literal></expr></argument>, <argument><expr><literal type="string">"blue"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"2by4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"There is {:4x4} in {:2morrow}\n"</literal></expr></argument>, <argument><expr><literal type="string">"truck"</literal></expr></argument>, <argument><expr><literal type="string">"tomorrow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"2by4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container_h</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
