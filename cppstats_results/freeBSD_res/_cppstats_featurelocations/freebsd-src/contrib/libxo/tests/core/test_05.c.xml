<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/tests/core/test_05.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBXO_WCWIDTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_wcwidth.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xo_wcwidth</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wcwidth(_x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>xo_info_t</name></type> <name><name>info</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"employee"</literal></expr>, <expr><literal type="string">"object"</literal></expr>, <expr><literal type="string">"Employee data"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"first-name"</literal></expr>, <expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"First name of employee"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"last-name"</literal></expr>, <expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"Last name of employee"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"department"</literal></expr>, <expr><literal type="string">"number"</literal></expr>, <expr><literal type="string">"Department number"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"percent-time"</literal></expr>, <expr><literal type="string">"number"</literal></expr>, <expr><literal type="string">"Percentage of full &amp; part time (%)"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>info_count</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>employee</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e_nic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>e_dept</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>e_percent</name></decl>;</decl_stmt>
}</block> <decl><name><name>employees</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"Jim"</literal></expr>, <expr><literal type="string">"á ááá¢"</literal></expr>, <expr><literal type="string">"ááá®ááá áá®"</literal></expr>, <expr><literal type="number">431</literal></expr>, <expr><literal type="number">90</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Terry"</literal></expr>, <expr><literal type="string">"&lt;one"</literal></expr>, <expr><literal type="string">"Îá½Ïá½¶ ÏÎ±á½Ïá½° ÏÎ±Ïá½·ÏÏÎ±ÏÎ±á½· Î¼Î¿Î¹ Jones"</literal></expr>, <expr><literal type="number">660</literal></expr>, <expr><literal type="number">90</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Leslie"</literal></expr>, <expr><literal type="string">"Les"</literal></expr>, <expr><literal type="string">"Patterson"</literal></expr>, <expr><literal type="number">341</literal></expr>,<expr><literal type="number">60</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ashley"</literal></expr>, <expr><literal type="string">"Ash"</literal></expr>, <expr><literal type="string">"Meter &amp; Smith"</literal></expr>, <expr><literal type="number">1440</literal></expr>, <expr><literal type="number">40</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"0123456789"</literal></expr>, <expr><literal type="string">"0123456789"</literal></expr>, <expr><literal type="string">"012345678901234567890"</literal></expr>, <expr><literal type="number">1440</literal></expr>, <expr><literal type="number">40</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"áá®áá"</literal></expr>, <expr><literal type="string">"ááááá á"</literal></expr>, <expr><literal type="string">"á¡ááá ááá¨áá áá¡á"</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">90</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"à·´à¶«à·à¶«à·´à·´à¶«à·à¶«à·´"</literal></expr>, <expr><literal type="string">"Mick"</literal></expr>,
<expr><literal type="string">"à·´à¶«à·à¶«à·´à·´à¶«à·à¶«à·´à·´à¶«à·à¶«à·´à·´à·´"</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name> <init>= <expr><name>employees</name></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>xo_parse_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_set_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>info_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_COLUMNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"indian-languages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{T:Sample text}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"This sample text was taken from the Punjabi Wikipedia "</literal>
<literal type="string">"article on Lahore and transliterated into the Latin script.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{T:Gurmukhi:}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{:gurmukhi}\n"</literal></expr></argument>,
<argument><expr><literal type="string">"à¨²à¨¹à©à¨° à¨ªà¨¾à¨à¨¿à¨¸à¨¤à¨¾à¨¨à© à¨ªà©°à¨à¨¾à¨¬ à¨¦à© à¨°à¨¾à¨à¨§à¨¾à¨¨à© à¨¹à© à¥¤ à¨²à©à¨ à¨à¨¿à¨£à¨¤à© à¨¦à© à¨¨à¨¾à¨² à¨à¨°à¨¾à¨à© à¨¤à©à¨ à¨¬à¨¾à¨à¨¦ à¨²à¨¹à©à¨° à¨¦à©à¨à¨¾ à¨¸à¨­ à¨¤à©à¨ à¨µà©±à¨¡à¨¾ à¨¸à¨¼à¨¹à¨¿à¨° à¨¹à© à¥¤ à¨²à¨¹à©à¨° à¨ªà¨¾à¨à¨¿à¨¸à¨¤à¨¾à¨¨ à¨¦à¨¾ à¨¸à¨¿à¨à¨¸à©, à¨°à¨¹à¨¤à¨²à© à¨¤à© à¨ªà©à©à¨¹à¨¾à¨ à¨¦à¨¾ à¨à©à©à¨¹ à¨¹à© à¨à¨¤à© à¨à¨¸ à¨²à¨ à¨à¨¹à¨¨à©à©° à¨ªà¨¾à¨à¨¿à¨¸à¨¤à¨¾à¨¨ à¨¦à¨¾ à¨¦à¨¿à¨² à¨µà© à¨à¨¿à¨¹à¨¾ à¨à¨¾à¨à¨¦à¨¾ à¨¹à© à¥¤ à¨²à¨¹à©à¨° à¨¦à¨°à¨¿à¨-à¨-à¨°à¨¾à¨µà© à¨¦à© à¨à©°à¨¢à© à¨¤à© à¨µà¨¸à¨¦à¨¾ à¨¹à© à¨¤à© à¨à¨¸à¨¦à© à¨²à©à¨ à¨à¨¿à¨£à¨¤à© à¨à©±à¨ à¨à¨°à©à© à¨¦à© à¨¨à©à©à© à¨¹à© à¥¤"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{T:Shahmukhi:}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{:shahmukhi}\n"</literal></expr></argument>,
<argument><expr><literal type="string">"ÙÛÙØ± Ù¾Ø§Ú©Ø³ØªØ§ÙÛ Ù¾ÙØ¬Ø§Ø¨ Ø¯Ø§ Ø¯Ø§Ø±Ø§ÙØ­Ú©ÙÙØª Ø§ÛÛ ÙÙÚ© Ú¯ÙØªÛ Ø¯Û ÙØ§Ù Ú©Ø±Ø§ÚÛ ØªÙÚº Ø¨Ø¹Ø¯ ÙÛÙØ± Ø¯ÙØ¬Ø§ Ø³Ø¨Ú¾ ØªÙÚº ÙÚØ§ Ø´ÛØ± Ø§ÛÛ ÙÛÙØ± Ù¾Ø§Ú©Ø³ØªØ§Ù Ø¯Ø§ Ø³ÛØ§Ø³ÛØ Ø±ÛØªÙÛ ØªÛ Ù¾ÚÚ¾Ø§Ø¦Û Ø¯Ø§ Ú¯ÚÚ¾ Ø§Û ØªÛ Ø§Ø³ ÙØ¦Û Ø§ÛÚ¾ÙÙÚº Ù¾Ø§Ú©Ø³ØªØ§Ù Ø¯Ø§ Ø¯Ù ÙÛ Ú©ÛÚ¾Ø§ Ø¬Ø§ÙØ¯Ø§ Ø§ÛÛ ÙÛÙØ± Ø¯Ø±ÛØ§Û Ø±Ø§ÙÛ Ø¯Û Ú©ÙÚÚ¾Û ØªÛ ÙØ³Ø¯Ø§ Ø§Û Ø§Ø³Ø¯Û ÙÙÚ© Ú¯ÙØªÛ Ø§Ú© Ú©Ø±ÙÚ Ø¯Û ÙÛÚÛ Ø§Û Û"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{T:Transliteration}:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{:tranliteration}\n"</literal></expr></argument>,
<argument><expr><literal type="string">"lahor pÄkistÄn panjÄb dÄ dÄrul hakÅ«mat Ä. lÅk giá¹tÄ« dÄ nÄá¸· karÄcÄ« tÅá· bÄad lahor dÅ«jÄ sab tÅá· vaá¸á¸Ä shahr Ä. lahor pÄkistÄn dÄ siÄsÄ«, rahtalÄ« tÄ paá¹ÄÌÄ« dÄ gÄÌá¹ Ä tÄ is laÄ« ihnÅ«á· pÄkistÄn dÄ dil vÄ« kehÄ jÄndÄ Ä. lahor dariÄÄ rÄvÄ« dÄ kaná¸Ä tÄ vasdÄ Ä. isdÄ« lÅk giá¹tÄ« ikk karÅá¹ dÄ nÄá¹Ä Ä."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"indian-languages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"employees"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wc</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>L</name><literal type="char">'à·´'</literal></expr>, <expr><name>L</name><literal type="char">'à¶«'</literal></expr>, <expr><name>L</name><literal type="char">'à·'</literal></expr>, <expr><name>L</name><literal type="char">'à¶«'</literal></expr>, <expr><literal type="number">0x17D2</literal></expr>, <expr><name>L</name><literal type="char">'à·´'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>wc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"Wide char: {lq:wc/%lc - %#lx - %d}\n"</literal></expr></argument>,
<argument><expr><name><name>wc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>wc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>xo_wcwidth</name><argument_list>(<argument><expr><name><name>wc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>msg</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>L</name><literal type="char">'1'</literal></expr>, <expr><literal type="number">0x034f</literal></expr>, <expr><name>L</name><literal type="char">'2'</literal></expr>, <expr><literal type="number">0x20dd</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"Wide char: {lq:wc/%lc - %#lx - %d}\n"</literal></expr></argument>,
<argument><expr><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>xo_wcwidth</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"Cool: [{:fancy/%ls}]\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"Îá½Ïá½¶ ÏÎ±á½Ïá½° ÏÎ±Ïá½·ÏÏÎ±ÏÎ±á½· Î¼Î¿Î¹ {:v1/%s}, {:v2/%s}\n"</literal></expr></argument>,
<argument><expr><literal type="string">"Î³Î¹Î³Î½á½½ÏÎºÎµÎ¹Î½"</literal></expr></argument>, <argument><expr><literal type="string">"á½¦ á¼Î½Î´ÏÎµÏ á¾¿ÎÎ¸Î·Î½Î±á¿Î¿Î¹"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"ááá®ááá {:v1/%s} {:v2/%s}\n"</literal></expr></argument>,
<argument><expr><literal type="string">"áá®áááá ááááá áá á áááá¡á¢á ááªáá"</literal></expr></argument>,
<argument><expr><literal type="string">"Unicode-áá¡ ááááá á¡ááá ááá¨áá áá¡á"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{Twc:Width}{:width/%d}\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"[{:sinhala}]\n"</literal></expr></argument>, <argument><expr><literal type="string">"à·´à¶«à·à¶«à·´"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{Twc:Width}{:width/%d}\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"[{:sinhala}]\n"</literal></expr></argument>, <argument><expr><literal type="string">"à·´"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{Twc:Width}{:width/%d}\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"[{:sinhala/%-4..4s/%s}]\n"</literal></expr></argument>, <argument><expr><literal type="string">"à·´à¶«à·à¶«à·´à·´à¶«à·à¶«à·´"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{Twc:Width}{:width/%d}\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"[{:not-sinhala/%-4..4s/%s}]\n"</literal></expr></argument>, <argument><expr><literal type="string">"123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"[{:tag/%s}]\n"</literal></expr></argument>, <argument><expr><literal type="string">"à¶»à·âà¶"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{Twc:Width}{:width/%d}\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_open_list</name><argument_list>(<argument><expr><literal type="string">"employee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{T:First Name/%-25s}{T:Last Name/%-14s}"</literal>
<literal type="string">"{T:/%-12s}{T:Time (%)}\n"</literal></expr></argument>, <argument><expr><literal type="string">"Department"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>( <init>;</init> <condition><expr><name><name>ep</name><operator>-&gt;</operator><name>e_first</name></name></expr>;</condition> <incr><expr><name>ep</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xo_open_instance</name><argument_list>(<argument><expr><literal type="string">"employee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{[:-25}{:first-name/%s} ({:nic-name/\"%s\"}){]:}"</literal>
<literal type="string">"{:last-name/%-14..14s/%s}"</literal>
<literal type="string">"{:department/%8u}{:percent-time/%8u}\n"</literal></expr></argument>,
<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>e_first</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>e_nic</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>e_last</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>e_dept</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>e_percent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>e_percent</name></name> <operator>&gt;</operator> <literal type="number">50</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_attr</name><argument_list>(<argument><expr><literal type="string">"full-time"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"honest &amp; for true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{e:benefits/%s}"</literal></expr></argument>, <argument><expr><literal type="string">"full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xo_close_instance</name><argument_list>(<argument><expr><literal type="string">"employee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xo_close_list</name><argument_list>(<argument><expr><literal type="string">"employee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"employees"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
