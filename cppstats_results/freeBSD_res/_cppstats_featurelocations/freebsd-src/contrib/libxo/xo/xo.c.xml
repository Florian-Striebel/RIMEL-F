<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libxo/xo/xo.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xo_explicit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNUSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name></cpp:macro> <cpp:value>__attribute__ ((__unused__))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>opt_warn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>save_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>checkpoint_argv</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>next_arg</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>*</operator><name>save_argv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"missing argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>save_argv</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>prep_arg</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>fp</name> <operator>=</operator> <name>fmt</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr><operator>,</operator> <expr><name>fp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>fp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>cp</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <literal type="char">'\e'</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>checkpoint</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier><name>xop</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>va_list</name> <name>vap</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>restore</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>restore</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>save_argv</name> <operator>=</operator> <name>checkpoint_argv</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>checkpoint_argv</name> <operator>=</operator> <name>save_argv</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>xo_ssize_t</name></type>
<name>formatter</name> <parameter_list>(<parameter><decl><type><name>xo_handle_t</name> <modifier>*</modifier></type><name>xop</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>xo_ssize_t</name></type> <name>bufsiz</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name> <name>vap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <name>lflag</name></type> <name>UNUSED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>jflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><type ref="prev"/><name>zflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>qflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>star1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>star2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>w2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>fmt</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lflag</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hflag</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jflag</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tflag</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>zflag</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qflag</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>star1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>star1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>star2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"diouxXDOUeEfFgGaAcCsSp"</literal></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_warn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_error_h</name><argument_list>(<argument><expr><name>xop</name></expr></argument>, <argument><expr><literal type="string">"unsupported format: '%s'"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>char</name></type> <name>fc</name> <init>= <expr><operator>*</operator><name>cp</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>star1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w1</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><call><name>next_arg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>star2</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w2</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><call><name>next_arg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fc</name> <operator>==</operator> <literal type="char">'D'</literal> <operator>||</operator> <name>fc</name> <operator>==</operator> <literal type="char">'O'</literal> <operator>||</operator> <name>fc</name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"diD"</literal></expr></argument>, <argument><expr><name>fc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>value</name> <init>= <expr><call><name>strtoll</name><argument_list>(<argument><expr><call><name>next_arg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>star1</name> <operator>&amp;&amp;</operator> <name>star2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>star1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"ouxXOUp"</literal></expr></argument>, <argument><expr><name>fc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>value</name> <init>= <expr><call><name>strtoull</name><argument_list>(<argument><expr><call><name>next_arg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>star1</name> <operator>&amp;&amp;</operator> <name>star2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>star1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"eEfFgGaA"</literal></expr></argument>, <argument><expr><name>fc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><call><name>strtold</name><argument_list>(<argument><expr><call><name>next_arg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>star1</name> <operator>&amp;&amp;</operator> <name>star2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>star1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fc</name> <operator>==</operator> <literal type="char">'C'</literal> <operator>||</operator> <name>fc</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name>fc</name> <operator>==</operator> <literal type="char">'S'</literal> <operator>||</operator> <name>fc</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>next_arg</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>star1</name> <operator>&amp;&amp;</operator> <name>star2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>star1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_version</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"libxo version %s%s\n"</literal></expr></argument>,
<argument><expr><name>xo_version</name></expr></argument>, <argument><expr><name>xo_version_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"xo version %s%s\n"</literal></expr></argument>,
<argument><expr><name>LIBXO_VERSION</name></expr></argument>, <argument><expr><name>LIBXO_VERSION_EXTRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_help</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Usage: xo [options] format [fields]\n"</literal>
<literal type="string">" --close &lt;path&gt; Close tags for the given path\n"</literal>
<literal type="string">" --close-instance &lt;name&gt; Close an open instance name\n"</literal>
<literal type="string">" --close-list &lt;name&gt; Close an open list name\n"</literal>
<literal type="string">" --continuation OR -C Output belongs on same line as previous output\n"</literal>
<literal type="string">" --depth &lt;num&gt; Set the depth for pretty printing\n"</literal>
<literal type="string">" --help Display this help text\n"</literal>
<literal type="string">" --html OR -H Generate HTML output\n"</literal>
<literal type="string">" --instance OR -I &lt;name&gt; Wrap in an instance of the given name\n"</literal>
<literal type="string">" --json OR -J Generate JSON output\n"</literal>
<literal type="string">" --leading-xpath &lt;path&gt; OR -l &lt;path&gt; "</literal>
<literal type="string">"Add a prefix to generated XPaths (HTML)\n"</literal>
<literal type="string">" --not-first Indicate this object is not the first (JSON)\n"</literal>
<literal type="string">" --open &lt;path&gt; Open tags for the given path\n"</literal>
<literal type="string">" --open-instance &lt;name&gt; Open an instance given by name\n"</literal>
<literal type="string">" --open-list &lt;name&gt; Open a list given by name\n"</literal>
<literal type="string">" --option &lt;opts&gt; -or -O &lt;opts&gt; Give formatting options\n"</literal>
<literal type="string">" --pretty OR -p Make 'pretty' output (add indent, newlines)\n"</literal>
<literal type="string">" --style &lt;style&gt; OR -s &lt;style&gt; "</literal>
<literal type="string">"Generate given style (xml, json, text, html)\n"</literal>
<literal type="string">" --text OR -T Generate text output (the default style)\n"</literal>
<literal type="string">" --top-wrap Generate a top-level object wrapper (JSON)\n"</literal>
<literal type="string">" --version Display version information\n"</literal>
<literal type="string">" --warn OR -W Display warnings in text on stderr\n"</literal>
<literal type="string">" --warn-xml Display warnings in xml on stdout\n"</literal>
<literal type="string">" --wrap &lt;path&gt; Wrap output in a set of containers\n"</literal>
<literal type="string">" --xml OR -X Generate XML output\n"</literal>
<literal type="string">" --xpath Add XPath data to HTML output\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>opts</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>o_close_instance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o_close_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o_help</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o_not_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o_open_instance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o_open_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o_top_wrap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o_warn_xml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o_wrap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o_xpath</name></decl>;</decl_stmt>
}</block> <decl><name>opts</name></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_opts</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"close"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'c'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"close-instance"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>o_close_instance</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"close-list"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>o_close_list</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"continuation"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'C'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"depth"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>o_depth</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>o_help</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"html"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'H'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"instance"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'I'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"json"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'J'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"leading-xpath"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'l'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"not-first"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>o_not_first</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"open"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"open-instance"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>o_open_instance</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"open-list"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>o_open_list</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"option"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'O'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pretty"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'p'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"style"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"text"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'T'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"top-wrap"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>o_top_wrap</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xml"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'X'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xpath"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>o_xpath</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"version"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>o_version</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"warn"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'W'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"warn-xml"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>o_warn_xml</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"wrap"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>o_wrap</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opt_opener</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>opt_closer</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>opt_wrapper</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opt_options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opt_instance</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opt_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xo_state_t</name></type> <name>new_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_not_first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_top_wrap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>xo_parse_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"Cc:HJl:O:o:ps:TXW"</literal></expr></argument>,
<argument><expr><name>long_opts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_CONTINUATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>opt_closer</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_IGNORE_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_HTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><name>opt_instance</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_JSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><call><name>xo_set_leading_xpath</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<expr_stmt><expr><name>opt_options</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><name>opt_opener</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_PRETTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>xo_set_style_name</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unknown style: %s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<expr_stmt><expr><call><name>xo_set_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XO_STYLE_XML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><name>opt_warn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_WARN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">':'</literal></expr>:</case>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"missing argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>o_depth</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_depth</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>.</operator><name>o_help</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>.</operator><name>o_not_first</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_not_first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>.</operator><name>o_xpath</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_XPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>.</operator><name>o_version</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>.</operator><name>o_warn_xml</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_warn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_WARN</name> <operator>|</operator> <name>XOF_WARN_XML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>.</operator><name>o_wrap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_wrapper</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>.</operator><name>o_top_wrap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_top_wrap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>.</operator><name>o_open_list</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"only one open/close list/instance allowed: %s"</literal></expr></argument>,
<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opt_name</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <name>XSS_OPEN_LIST</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>.</operator><name>o_open_instance</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"only one open/close list/instance allowed: %s"</literal></expr></argument>,
<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opt_name</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <name>XSS_OPEN_INSTANCE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>.</operator><name>o_close_list</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"only one open/close list/instance allowed: %s"</literal></expr></argument>,
<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opt_name</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <name>XSS_CLOSE_LIST</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>.</operator><name>o_close_instance</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"only one open/close list/instance allowed: %s"</literal></expr></argument>,
<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opt_name</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <name>XSS_CLOSE_INSTANCE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>print_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_options</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xo_set_options</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opt_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"invalid options: %s"</literal></expr></argument>, <argument><expr><name>opt_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_set_formatter</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>formatter</name></expr></argument>, <argument><expr><name>checkpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_NO_VA_ARG</name> <operator>|</operator> <name>XOF_NO_TOP</name> <operator>|</operator> <name>XOF_NO_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>new_state</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_depth</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opt_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_not_first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_NOT_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_explicit_transition</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>, <argument><expr><name>opt_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <operator>*</operator><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_opener</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>opt_closer</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_top_wrap</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>opt_closer</name> <operator>&amp;&amp;</operator> <call><name>xo_get_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XO_STYLE_JSON</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>opt_depth</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_clear_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_NO_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_closer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_depth</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>opt_closer</name></expr>;</init> <condition><expr><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name>np</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>np</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>opt_depth</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_depth</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opt_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_not_first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_NOT_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>opt_opener</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>opt_opener</name></expr>;</init> <condition><expr><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name>np</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>np</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>np</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>opt_wrapper</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>opt_wrapper</name></expr>;</init> <condition><expr><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name>np</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>np</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>np</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_instance</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_open_instance</name><argument_list>(<argument><expr><name>opt_instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>save_argv</name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prep_arg</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_instance</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_close_instance</name><argument_list>(<argument><expr><name>opt_instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name>opt_wrapper</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>opt_wrapper</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><ternary><condition><expr><name>np</name></expr> ?</condition><then> <expr><name>np</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>opt_wrapper</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>np</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>opt_wrapper</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>opt_depth</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>opt_closer</name> <operator>&amp;&amp;</operator> <name>opt_top_wrap</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>


<while>while <condition>(<expr><name>opt_closer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>opt_closer</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><ternary><condition><expr><name>np</name></expr> ?</condition><then> <expr><name>np</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>opt_closer</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>np</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>opt_closer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>opt_depth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_set_depth</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opt_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_clear_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_NO_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>opt_top_wrap</name> <operator>&amp;&amp;</operator> <name>opt_opener</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_set_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XOF_NO_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
