<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/hyperv/tools/hv_kvp_daemon.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ifaddrs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/ethernet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if_dl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hv_kvp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hv_utilreg.h"</cpp:file></cpp:include>
<typedef>typedef <type><name>uint8_t</name></type> <name>__u8</name>;</typedef>
<typedef>typedef <type><name>uint16_t</name></type> <name>__u16</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>__u32</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>__u64</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOL_FILE_MODE</name></cpp:macro> <cpp:value>(S_IRUSR | S_IWUSR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOL_DIR_MODE</name></cpp:macro> <cpp:value>(POOL_FILE_MODE | S_IXUSR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOL_DIR</name></cpp:macro> <cpp:value>"/var/db/hyperv/pool"</cpp:value></cpp:define>





<enum>enum <name>key_index</name> <block>{
<decl><name>FullyQualifiedDomainName</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>IntegrationServicesVersion</name></decl>,
<decl><name>NetworkAddressIPv4</name></decl>,
<decl><name>NetworkAddressIPv6</name></decl>,
<decl><name>OSBuildNumber</name></decl>,
<decl><name>OSName</name></decl>,
<decl><name>OSMajorVersion</name></decl>,
<decl><name>OSMinorVersion</name></decl>,
<decl><name>OSVersion</name></decl>,
<decl><name>ProcessorArchitecture</name></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>IPADDR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>NETMASK</name></decl>,
<decl><name>GATEWAY</name></decl>,
<decl><name>DNS</name></decl>
}</block>;</enum>







<struct>struct <name>kvp_op_hdlr</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>kvp_op_key</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>kvp_op_init</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>kvp_op_exec</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hv_kvp_msg</name></name> <modifier>*</modifier></type><name>kvp_op_msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>kvp_op_hdlr</name></name></type> <name><name>kvp_op_hdlrs</name><index>[<expr><name>HV_KVP_OP_COUNT</name></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>os_name</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>os_major</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>os_minor</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>processor_arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>os_build</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lic_version</name> <init>= <expr><literal type="string">"BSD Pre-Release version"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>utsname</name></name></type> <name>uts_buf</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>is_daemon</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>is_debugging</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVP_LOG</name><parameter_list>(<parameter><type><name>priority</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (is_debugging == 1) { if (is_daemon == 1) syslog(priority, format, ##args); else printf(format, ##args); } else { if (priority &lt; LOG_DEBUG) { if (is_daemon == 1) syslog(priority, format, ##args); else printf(format, ##args); } } } while(0)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FILE_NAME</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENTRIES_PER_BLOCK</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<struct>struct <name>kvp_record</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>HV_KVP_EXCHANGE_MAX_KEY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>value</name><index>[<expr><name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>kvp_pool</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pool_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kvp_record</name></name> <modifier>*</modifier></type><name>records</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_records</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><name>MAX_FILE_NAME</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>kvp_pool</name></name></type> <name><name>kvp_pools</name><index>[<expr><name>HV_KVP_POOL_COUNT</name></expr>]</index></name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>kvp_acquire_lock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name></type> <name>fl</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>F_WRLCK</name></expr>, <expr><name>SEEK_SET</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fl</name><operator>.</operator><name>l_pid</name></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>pool_fd</name></expr></argument>, <argument><expr><name>F_SETLKW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fl</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Failed to acquire the lock pool: %d"</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>kvp_release_lock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name></type> <name>fl</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>F_UNLCK</name></expr>, <expr><name>SEEK_SET</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fl</name><operator>.</operator><name>l_pid</name></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>pool_fd</name></expr></argument>, <argument><expr><name>F_SETLK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fl</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fcntl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release the lock pool: %d\n"</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>kvp_update_file</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>filep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kvp_acquire_lock</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filep</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kvp_release_lock</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open file, pool: %d\n"</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>records</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kvp_record</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_records</name></expr></argument>, <argument><expr><name>filep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>filep</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>filep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kvp_release_lock</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write file, pool: %d\n"</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kvp_release_lock</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>kvp_update_mem_state</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>filep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>records_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kvp_record</name></name> <modifier>*</modifier></type><name>record</name> <init>= <expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>records</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kvp_record</name></name> <modifier>*</modifier></type><name>readp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_blocks</name> <init>= <expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_blocks</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alloc_unit</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kvp_record</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ENTRIES_PER_BLOCK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kvp_acquire_lock</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filep</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kvp_release_lock</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open file, pool: %d\n"</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>( <init>;</init> <condition>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>readp</name> <operator>=</operator> <operator>&amp;</operator><name><name>record</name><index>[<expr><name>records_read</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>records_read</name> <operator>+=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>readp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kvp_record</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ENTRIES_PER_BLOCK</name> <operator>*</operator> <name>num_blocks</name></expr></argument>,
<argument><expr><name>filep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>filep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read file, pool: %d\n"</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>filep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>num_blocks</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>alloc_unit</name> <operator>*</operator> <name>num_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>record</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"malloc failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>

<expr_stmt><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_blocks</name> <operator>=</operator> <name>num_blocks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>records</name> <operator>=</operator> <name>record</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_records</name> <operator>=</operator> <name>records_read</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>filep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kvp_release_lock</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_file_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>filep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>records_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kvp_record</name></name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kvp_record</name></name> <modifier>*</modifier></type><name>readp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alloc_unit</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kvp_record</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ENTRIES_PER_BLOCK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mkdir</name><argument_list>(<argument><expr><name>POOL_DIR</name></expr></argument>, <argument><expr><name>POOL_DIR_MODE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>errno</name> <operator>!=</operator> <name>EEXIST</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EISDIR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">" Failed to create /var/db/hyperv/pool\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>chmod</name><argument_list>(<argument><expr><name>POOL_DIR</name></expr></argument>, <argument><expr><name>POOL_DIR_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HV_KVP_POOL_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>kvp_pools</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>records_read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_blocks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>MAX_FILE_NAME</name></expr></argument>, <argument><expr><literal type="string">"/var/db/hyperv/pool/.kvp_pool_%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><name>POOL_FILE_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fchmod</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>POOL_FILE_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>filep</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>alloc_unit</name> <operator>*</operator> <name>num_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>record</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>filep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>( <init>;</init> <condition>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>readp</name> <operator>=</operator> <operator>&amp;</operator><name><name>record</name><index>[<expr><name>records_read</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>records_read</name> <operator>+=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>readp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kvp_record</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ENTRIES_PER_BLOCK</name></expr></argument>,
<argument><expr><name>filep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>filep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read file, pool: %d\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>filep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>num_blocks</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>alloc_unit</name> <operator>*</operator>
<name>num_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>record</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>filep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>
<expr_stmt><expr><name><name>kvp_pools</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pool_fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp_pools</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_blocks</name> <operator>=</operator> <name>num_blocks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp_pools</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>records</name> <operator>=</operator> <name>record</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp_pools</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_records</name> <operator>=</operator> <name>records_read</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>filep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_key_delete</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>__u8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_records</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kvp_record</name></name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"kvp_key_delete: pool = %d, "</literal>
<literal type="string">"key = %s\n"</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>kvp_update_mem_state</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_records</name> <operator>=</operator> <name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_records</name></expr>;</expr_stmt>
<expr_stmt><expr><name>record</name> <operator>=</operator> <name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>records</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_records</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>record</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Found delete key in pool %d.\n"</literal></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>num_records</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_records</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kvp_update_file</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num_records</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>record</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>record</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>record</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name><name>record</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_records</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kvp_update_file</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></for>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Not found delete key in pool %d.\n"</literal></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_key_add_or_modify</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>__u8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>__u32</name></type> <name>key_size</name></decl></parameter>, <parameter><decl><type><name>__u8</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>__u32</name></type> <name>value_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_records</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kvp_record</name></name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_blocks</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"kvp_key_add_or_modify: pool = %d, "</literal>
<literal type="string">"key = %s, value = %s\n,"</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key_size</name> <operator>&gt;</operator> <name>HV_KVP_EXCHANGE_MAX_KEY_SIZE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>value_size</name> <operator>&gt;</operator> <name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"kvp_key_add_or_modify: returning 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>kvp_update_mem_state</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_records</name> <operator>=</operator> <name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_records</name></expr>;</expr_stmt>
<expr_stmt><expr><name>record</name> <operator>=</operator> <name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>records</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_blocks</name> <operator>=</operator> <name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_blocks</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_records</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>record</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>record</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kvp_update_file</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>num_records</name> <operator>==</operator> <operator>(</operator><name>ENTRIES_PER_BLOCK</name> <operator>*</operator> <name>num_blocks</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kvp_record</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<name>ENTRIES_PER_BLOCK</name> <operator>*</operator> <operator>(</operator><name>num_blocks</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>record</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_blocks</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>record</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>record</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>records</name> <operator>=</operator> <name>record</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_records</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kvp_update_file</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_get_value</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>__u8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>, <parameter><decl><type><name>__u8</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>value_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_records</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kvp_record</name></name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"kvp_get_value: pool = %d, key = %s\n,"</literal></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key_size</name> <operator>&gt;</operator> <name>HV_KVP_EXCHANGE_MAX_KEY_SIZE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>value_size</name> <operator>&gt;</operator> <name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>kvp_update_mem_state</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_records</name> <operator>=</operator> <name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_records</name></expr>;</expr_stmt>
<expr_stmt><expr><name>record</name> <operator>=</operator> <name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>records</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_records</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>record</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>record</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>value_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_pool_enumerate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>__u8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>,
<parameter><decl><type><name>__u8</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kvp_record</name></name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"kvp_pool_enumerate: pool = %d, index = %d\n,"</literal></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>kvp_update_mem_state</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>record</name> <operator>=</operator> <name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>records</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>kvp_pools</name><index>[<expr><name>pool</name></expr>]</index></name><operator>.</operator><name>num_records</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>record</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>record</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>value_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>kvp_get_os_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uts_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>os_build</name> <operator>=</operator> <name><name>uts_buf</name><operator>.</operator><name>release</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>os_name</name> <operator>=</operator> <name><name>uts_buf</name><operator>.</operator><name>sysname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>processor_arch</name> <operator>=</operator> <name><name>uts_buf</name><operator>.</operator><name>machine</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>os_build</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<return>return;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>kvp_if_name_to_mac</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>if_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mac_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifaddrs_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>head_ifaddrs_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>sdl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifaddrs_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>head_ifaddrs_ptr</name> <operator>=</operator> <name>ifaddrs_ptr</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>sdl</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_dl</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>ifaddrs_ptr</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sdl</name><operator>-&gt;</operator><name>sdl_type</name></name> <operator>==</operator> <name>IFT_ETHER</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ifaddrs_ptr</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>, <argument><expr><name>if_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mac_addr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>ether_ntoa</name><argument_list>(<argument><expr><operator>(</operator>struct <name>ether_addr</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>LLADDR</name><argument_list>(<argument><expr><name>sdl</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>ifaddrs_ptr</name> <operator>=</operator> <name><name>ifaddrs_ptr</name><operator>-&gt;</operator><name>ifa_next</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>freeifaddrs</name><argument_list>(<argument><expr><name>head_ifaddrs_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>mac_addr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>kvp_mac_to_if_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>if_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifaddrs_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>head_ifaddrs_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>sdl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifaddrs_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>head_ifaddrs_ptr</name> <operator>=</operator> <name>ifaddrs_ptr</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>sdl</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_dl</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>ifaddrs_ptr</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_type</name></name> <operator>==</operator> <name>IFT_ETHER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>ether_ntoa</name><argument_list>(<argument><expr><operator>(</operator>struct <name>ether_addr</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>LLADDR</name><argument_list>(<argument><expr><name>sdl</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>buf_ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>mac</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>if_name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>ifaddrs_ptr</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>ifaddrs_ptr</name> <operator>=</operator> <name><name>ifaddrs_ptr</name><operator>-&gt;</operator><name>ifa_next</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>freeifaddrs</name><argument_list>(<argument><expr><name>head_ifaddrs_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>if_name</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>kvp_process_ipconfig_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>config_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>element_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>




<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>config_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>config_buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>element_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>config_buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>config_buf</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>kvp_get_ipconfig_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>if_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hv_kvp_ipaddr_value</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dhcp_info</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"netstat -rn | grep %s | awk '/default/ {print $2 }'"</literal></expr></argument>, <argument><expr><name>if_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>kvp_process_ipconfig_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buffer</name><operator>-&gt;</operator><name>gate_way</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>MAX_GATEWAY_SIZE</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>INET_ADDRSTRLEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"netstat -rn inet6 | grep %s | awk '/default/ {print $2 }'"</literal></expr></argument>, <argument><expr><name>if_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>kvp_process_ipconfig_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buffer</name><operator>-&gt;</operator><name>gate_way</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>MAX_GATEWAY_SIZE</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"sh /usr/libexec/hyperv/hv_get_dns_info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>kvp_process_ipconfig_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buffer</name><operator>-&gt;</operator><name>dns_addr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>MAX_IP_ADDR_SIZE</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>INET_ADDRSTRLEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>,
<argument><expr><literal type="string">"sh /usr/libexec/hyperv/hv_get_dhcp_info"</literal></expr></argument>, <argument><expr><name>if_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>dhcp_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dhcp_info</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Enabled"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>dhcp_enabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>dhcp_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>hweight32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>res</name> <init>= <expr><operator>*</operator><name>w</name> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>res</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>+</operator> <operator>(</operator><name>res</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>+</operator> <operator>(</operator><name>res</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>res</name> <operator>+</operator> <operator>(</operator><name>res</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x000000FF</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_process_ip_address</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addrp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>addr6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>addr_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>addrp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>inet_ntop</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr_length</name> <operator>=</operator> <name>INET_ADDRSTRLEN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>addr6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>addrp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>inet_ntop</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr_length</name> <operator>=</operator> <name>INET6_ADDRSTRLEN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>length</name> <operator>-</operator> <operator>*</operator><name>offset</name><operator>)</operator> <operator>&lt;</operator> <name>addr_length</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"inet_ntop failed\n"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block>{<block_content>
<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_get_ip_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>if_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>curp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sn_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hv_kvp_ipaddr_value</name></name> <modifier>*</modifier></type><name>ip_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cidr_mask</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>weight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sn_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sn_str_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>addr6</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>HV_KVP_OP_ENUMERATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>out_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_length</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ip_buffer</name> <operator>=</operator> <name>out_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ip_buffer</name><operator>-&gt;</operator><name>ip_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ip_buffer</name><operator>-&gt;</operator><name>ip_addr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip_buffer</name><operator>-&gt;</operator><name>addr_family</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"getifaddrs failed\n"</literal></expr></argument>, <argument><expr><name>buffer_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curp</name> <operator>=</operator> <name>ifap</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>curp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curp</name><operator>-&gt;</operator><name>ifa_addr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curp</name> <operator>=</operator> <name><name>curp</name><operator>-&gt;</operator><name>ifa_next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>if_name</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>curp</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>, <argument><expr><name>if_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>if_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>curp</name> <operator>=</operator> <name><name>curp</name><operator>-&gt;</operator><name>ifa_next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>family</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curp</name><operator>-&gt;</operator><name>ifa_addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>!=</operator> <name>family</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curp</name> <operator>=</operator> <name><name>curp</name><operator>-&gt;</operator><name>ifa_next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curp</name><operator>-&gt;</operator><name>ifa_addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>!=</operator> <name>AF_INET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>curp</name><operator>-&gt;</operator><name>ifa_addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>!=</operator> <name>AF_INET6</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curp</name> <operator>=</operator> <name><name>curp</name><operator>-&gt;</operator><name>ifa_next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>HV_KVP_OP_GET_IP_INFO</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>curp</name><operator>-&gt;</operator><name>ifa_addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ip_buffer</name><operator>-&gt;</operator><name>addr_family</name></name> <operator>|=</operator> <name>ADDR_FAMILY_IPV4</name></expr>;</expr_stmt>




<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_process_ip_address</name><argument_list>(
<argument><expr><name><name>curp</name><operator>-&gt;</operator><name>ifa_netmask</name></name></expr></argument>,
<argument><expr><name>AF_INET</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator>
<name><name>ip_buffer</name><operator>-&gt;</operator><name>sub_net</name></name></expr></argument>,
<argument><expr><name>length</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sn_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>kvp_get_ip_info_ipaddr</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ip_buffer</name><operator>-&gt;</operator><name>addr_family</name></name> <operator>|=</operator> <name>ADDR_FAMILY_IPV6</name></expr>;</expr_stmt>




<expr_stmt><expr><name>weight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sn_str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ip_buffer</name><operator>-&gt;</operator><name>sub_net</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sn_str_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ip_buffer</name><operator>-&gt;</operator><name>sub_net</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>addr6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator>
<name><name>curp</name><operator>-&gt;</operator><name>ifa_netmask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>addr6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>weight</name> <operator>+=</operator> <call><name>hweight32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cidr_mask</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cidr_mask</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/%d"</literal></expr></argument>, <argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>length</name> <operator>-</operator> <name>sn_offset</name><operator>)</operator> <operator>&lt;</operator>
<operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>cidr_mask</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>kvp_get_ip_info_ipaddr</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sn_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>sn_str</name></expr></argument>, <argument><expr><name>cidr_mask</name></expr></argument>, <argument><expr><name>sn_str_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block>{<block_content>
<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>sn_str</name></expr></argument>, <argument><expr><name>cidr_mask</name></expr></argument>, <argument><expr><name>sn_str_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ip_buffer</name><operator>-&gt;</operator><name>sub_net</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>sn_str_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sn_offset</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sn_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>kvp_get_ipconfig_info</name><argument_list>(<argument><expr><name>if_name</name></expr></argument>, <argument><expr><name>ip_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>kvp_get_ip_info_ipaddr</name>:</label>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_process_ip_address</name><argument_list>(<argument><expr><name><name>curp</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>,
<argument><expr><name><name>curp</name><operator>-&gt;</operator><name>ifa_addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>kvp_get_ip_info_done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curp</name> <operator>=</operator> <name><name>curp</name><operator>-&gt;</operator><name>ifa_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>kvp_get_ip_info_done</name>:</label>
<expr_stmt><expr><call><name>freeifaddrs</name><argument_list>(<argument><expr><name>ifap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_write_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>EIO</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_set_ip_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>if_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hv_kvp_ipaddr_value</name></name> <modifier>*</modifier></type><name>new_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>if_file</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mac_addr</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>if_file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>if_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><literal type="string">"/var/db/hyperv"</literal></expr></argument>,
<argument><expr><literal type="string">"hv_set_ip_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>if_file</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"FreeBSD Failed to open config file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>mac_addr</name> <operator>=</operator> <call><name>kvp_if_name_to_mac</name><argument_list>(<argument><expr><name>if_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mac_addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<goto>goto <name>kvp_set_ip_info_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_write_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"HWADDR"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>mac_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>kvp_set_ip_info_error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_write_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"IF_NAME"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>if_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>kvp_set_ip_info_error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_write_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"IP_ADDR"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>new_val</name><operator>-&gt;</operator><name>ip_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>kvp_set_ip_info_error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_write_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"SUBNET"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>new_val</name><operator>-&gt;</operator><name>sub_net</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>kvp_set_ip_info_error</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_write_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"GATEWAY"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>new_val</name><operator>-&gt;</operator><name>gate_way</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>kvp_set_ip_info_error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_write_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"DNS"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>new_val</name><operator>-&gt;</operator><name>dns_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>kvp_set_ip_info_error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>new_val</name><operator>-&gt;</operator><name>dhcp_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_write_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"DHCP"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_write_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"DHCP"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>kvp_set_ip_info_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mac_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>,
<argument><expr><literal type="string">"sh /usr/libexec/hyperv/hv_set_ifconfig"</literal></expr></argument>, <argument><expr><name>if_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>kvp_set_ip_info_error</name>:</label>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write config file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mac_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_get_domain_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gethostname</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_CANONNAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo failed\n"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_op_getipinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hv_kvp_msg</name></name> <modifier>*</modifier></type><name>op_msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>data</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hv_kvp_ipaddr_value</name></name> <modifier>*</modifier></type><name>ip_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>if_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>op_msg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"In kvp_op_getipinfo.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ip_val</name> <operator>=</operator> <operator>&amp;</operator><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_ip_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_S_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>if_name</name> <operator>=</operator> <call><name>kvp_mac_to_if_name</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ip_val</name><operator>-&gt;</operator><name>adapter_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>if_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_E_FAIL</name></expr>;</expr_stmt>
<goto>goto <name>kvp_op_getipinfo_done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_get_ip_info</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>if_name</name></expr></argument>,
<argument><expr><name>HV_KVP_OP_GET_IP_INFO</name></expr></argument>, <argument><expr><name>ip_val</name></expr></argument>, <argument><expr><operator>(</operator><name>MAX_IP_ADDR_SIZE</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_E_FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>if_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>kvp_op_getipinfo_done</name>:</label>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_op_setipinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hv_kvp_msg</name></name> <modifier>*</modifier></type><name>op_msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>data</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hv_kvp_ipaddr_value</name></name> <modifier>*</modifier></type><name>ip_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>if_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>op_msg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"In kvp_op_setipinfo.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ip_val</name> <operator>=</operator> <operator>&amp;</operator><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_ip_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_S_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>if_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ip_val</name><operator>-&gt;</operator><name>adapter_id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>if_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_GUID_NOTFOUND</name></expr>;</expr_stmt>
<goto>goto <name>kvp_op_setipinfo_done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_set_ip_info</name><argument_list>(<argument><expr><name>if_name</name></expr></argument>, <argument><expr><name>ip_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_E_FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>kvp_op_setipinfo_done</name>:</label>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_op_setgetdel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hv_kvp_msg</name></name> <modifier>*</modifier></type><name>op_msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kvp_op_hdlr</name></name> <modifier>*</modifier></type><name>op_hdlr</name> <init>= <expr><operator>(</operator>struct <name>kvp_op_hdlr</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op_pool</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>op_msg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>op_hdlr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op_pool</name> <operator>=</operator> <name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>kvp_hdr</name><operator>.</operator><name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_S_OK</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>op_hdlr</name><operator>-&gt;</operator><name>kvp_op_key</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HV_KVP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>op_pool</name> <operator>==</operator> <name>HV_KVP_POOL_AUTO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Ilegal to write to pool %d from host\n"</literal></expr></argument>,
<argument><expr><name>op_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_key_add_or_modify</name><argument_list>(<argument><expr><name>op_pool</name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_set</name><operator>.</operator><name>data</name><operator>.</operator><name>key</name></name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_set</name><operator>.</operator><name>data</name><operator>.</operator><name>key_size</name></name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_set</name><operator>.</operator><name>data</name><operator>.</operator><name>msg_value</name><operator>.</operator><name>value</name></name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_set</name><operator>.</operator><name>data</name><operator>.</operator><name>value_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>HV_KVP_OP_GET</name></expr>:</case>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_get_value</name><argument_list>(<argument><expr><name>op_pool</name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_get</name><operator>.</operator><name>data</name><operator>.</operator><name>key</name></name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_get</name><operator>.</operator><name>data</name><operator>.</operator><name>key_size</name></name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_get</name><operator>.</operator><name>data</name><operator>.</operator><name>msg_value</name><operator>.</operator><name>value</name></name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_get</name><operator>.</operator><name>data</name><operator>.</operator><name>value_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>HV_KVP_OP_DELETE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>op_pool</name> <operator>==</operator> <name>HV_KVP_POOL_AUTO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Ilegal to change pool %d from host\n"</literal></expr></argument>,
<argument><expr><name>op_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>kvp_key_delete</name><argument_list>(<argument><expr><name>op_pool</name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_delete</name><operator>.</operator><name>key</name></name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_delete</name><operator>.</operator><name>key_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_S_CONT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_op_enumerate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hv_kvp_msg</name></name> <modifier>*</modifier></type><name>op_msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>data</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>op_msg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>kvp_hdr</name><operator>.</operator><name>operation</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>op_pool</name> <operator>=</operator> <name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>kvp_hdr</name><operator>.</operator><name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_S_OK</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>op_pool</name> <operator>!=</operator> <name>HV_KVP_POOL_AUTO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>kvp_pool_enumerate</name><argument_list>(<argument><expr><name>op_pool</name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_enum_data</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_enum_data</name><operator>.</operator><name>data</name><operator>.</operator><name>key</name></name></expr></argument>,
<argument><expr><name>HV_KVP_EXCHANGE_MAX_KEY_SIZE</name></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_enum_data</name><operator>.</operator><name>data</name><operator>.</operator><name>msg_value</name><operator>.</operator><name>value</name></name></expr></argument>,
<argument><expr><name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_S_CONT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>kvp_op_enumerate_done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_enum_data</name><operator>.</operator><name>data</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>key_value</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_enum_data</name><operator>.</operator><name>data</name><operator>.</operator><name>msg_value</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_enum_data</name><operator>.</operator><name>index</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>FullyQualifiedDomainName</name></expr>:</case>
<expr_stmt><expr><call><name>kvp_get_domain_name</name><argument_list>(<argument><expr><name>key_value</name></expr></argument>,
<argument><expr><name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><literal type="string">"FullyQualifiedDomainName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>IntegrationServicesVersion</name></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><literal type="string">"IntegrationServicesVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>key_value</name></expr></argument>, <argument><expr><name>lic_version</name></expr></argument>, <argument><expr><name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NetworkAddressIPv4</name></expr>:</case>
<expr_stmt><expr><call><name>kvp_get_ip_info</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HV_KVP_OP_ENUMERATE</name></expr></argument>,
<argument><expr><name>key_value</name></expr></argument>, <argument><expr><name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><literal type="string">"NetworkAddressIPv4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NetworkAddressIPv6</name></expr>:</case>
<expr_stmt><expr><call><name>kvp_get_ip_info</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HV_KVP_OP_ENUMERATE</name></expr></argument>,
<argument><expr><name>key_value</name></expr></argument>, <argument><expr><name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><literal type="string">"NetworkAddressIPv6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>OSBuildNumber</name></expr>:</case>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>key_value</name></expr></argument>, <argument><expr><name>os_build</name></expr></argument>, <argument><expr><name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><literal type="string">"OSBuildNumber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>OSName</name></expr>:</case>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>key_value</name></expr></argument>, <argument><expr><name>os_name</name></expr></argument>, <argument><expr><name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><literal type="string">"OSName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>OSMajorVersion</name></expr>:</case>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>key_value</name></expr></argument>, <argument><expr><name>os_major</name></expr></argument>, <argument><expr><name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><literal type="string">"OSMajorVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>OSMinorVersion</name></expr>:</case>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>key_value</name></expr></argument>, <argument><expr><name>os_minor</name></expr></argument>, <argument><expr><name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><literal type="string">"OSMinorVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>OSVersion</name></expr>:</case>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>key_value</name></expr></argument>, <argument><expr><name>os_build</name></expr></argument>, <argument><expr><name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><literal type="string">"OSVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ProcessorArchitecture</name></expr>:</case>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>key_value</name></expr></argument>, <argument><expr><name>processor_arch</name></expr></argument>, <argument><expr><name>HV_KVP_EXCHANGE_MAX_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><literal type="string">"ProcessorArchitecture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Auto pool Index %d not found.\n"</literal></expr></argument>,
<argument><expr><name><name>op_msg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>kvp_enum_data</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_S_CONT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<label><name>kvp_op_enumerate_done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>op_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_S_CONT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_op_load</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>exec</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hv_kvp_msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>key</name> <operator>&gt;=</operator> <name>HV_KVP_OP_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Operation key out of supported range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>kvp_op_load_done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>kvp_op_hdlrs</name><index>[<expr><name>key</name></expr>]</index></name><operator>.</operator><name>kvp_op_key</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp_op_hdlrs</name><index>[<expr><name>key</name></expr>]</index></name><operator>.</operator><name>kvp_op_init</name> <operator>=</operator> <name>init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp_op_hdlrs</name><index>[<expr><name>key</name></expr>]</index></name><operator>.</operator><name>kvp_op_exec</name> <operator>=</operator> <name>exec</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kvp_op_hdlrs</name><index>[<expr><name>key</name></expr>]</index></name><operator>.</operator><name>kvp_op_init</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>kvp_op_hdlrs</name><index>[<expr><name>key</name></expr>]</index></name><operator>.</operator><call><name>kvp_op_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>kvp_op_load_done</name>:</label>
<return>return<expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>kvp_ops_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HV_KVP_OP_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>kvp_op_hdlrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>kvp_op_key</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp_op_hdlrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>kvp_op_init</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp_op_hdlrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>kvp_op_exec</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return<expr><operator>(</operator><call><name>kvp_op_load</name><argument_list>(<argument><expr><name>HV_KVP_OP_GET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kvp_op_setgetdel</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>kvp_op_load</name><argument_list>(<argument><expr><name>HV_KVP_OP_SET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kvp_op_setgetdel</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>kvp_op_load</name><argument_list>(<argument><expr><name>HV_KVP_OP_DELETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kvp_op_setgetdel</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>kvp_op_load</name><argument_list>(<argument><expr><name>HV_KVP_OP_ENUMERATE</name></expr></argument>, <argument><expr><name>kvp_get_os_info</name></expr></argument>,
<argument><expr><name>kvp_op_enumerate</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>kvp_op_load</name><argument_list>(<argument><expr><name>HV_KVP_OP_GET_IP_INFO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kvp_op_getipinfo</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>kvp_op_load</name><argument_list>(<argument><expr><name>HV_KVP_OP_SET_IP_INFO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kvp_op_setipinfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hv_kvp_msg</name></name> <modifier>*</modifier></type><name>hv_kvp_dev_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hv_kvp_msg</name></name> <modifier>*</modifier></type><name>hv_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>hv_kvp_poll_fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hv_kvp_dev_fd</name></decl>, <decl><type ref="prev"/><name>error</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"dn"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><name>is_daemon</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><name>is_debugging</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><call><name>openlog</name><argument_list>(<argument><expr><literal type="string">"HV_KVP"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LOG_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>is_daemon</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>daemon</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Run as regular process.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"HV_KVP starting; pid is: %d\n"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>hv_kvp_dev_buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hv_kvp_dev_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hv_msg</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hv_msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>hv_kvp_dev_buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hv_msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory for hv buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>kvp_ops_init</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initizlize operation handlers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>kvp_file_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize the pools\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>hv_kvp_dev_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/hv_kvp_dev"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hv_kvp_dev_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"open /dev/hv_kvp_dev failed; error: %d %s\n"</literal></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>hv_kvp_poll_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>hv_kvp_dev_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hv_kvp_poll_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hv_kvp_dev_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hv_kvp_dev_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hv_kvp_dev_buf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>kvp_hdr</name><operator>.</operator><name>operation</name></name> <operator>=</operator> <name>HV_KVP_OP_REGISTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>hv_kvp_dev_fd</name></expr></argument>, <argument><expr><name>hv_kvp_dev_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hv_kvp_dev_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>poll</name> <argument_list>(<argument><expr><name>hv_kvp_poll_fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INFTIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"poll returned r = %d, revent = 0x%x\n"</literal></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hv_kvp_poll_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Poll failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"poll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pread</name><argument_list>(<argument><expr><name>hv_kvp_dev_fd</name></expr></argument>, <argument><expr><name>hv_kvp_dev_buf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hv_kvp_dev_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Read failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"pread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>hv_kvp_msg</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"read len is: %d\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hv_msg</name></expr></argument>, <argument><expr><name>hv_kvp_dev_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hv_msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>hv_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>kvp_hdr</name><operator>.</operator><name>operation</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pool</name> <operator>=</operator> <name><name>hv_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>kvp_hdr</name><operator>.</operator><name>pool</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>op</name> <operator>&gt;=</operator> <name>HV_KVP_OP_COUNT</name> <operator>||</operator>
<name><name>kvp_op_hdlrs</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><name>kvp_op_exec</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported operation OP = %d\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hv_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>HV_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>error</name> <operator>=</operator> <name><name>kvp_op_hdlrs</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><call><name>kvp_op_exec</name><argument_list>(<argument><expr><name>hv_msg</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>kvp_op_hdlrs</name><index>[<expr><name>op</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>hv_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>!=</operator> <name>HV_S_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hv_msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>error</name></name> <operator>!=</operator> <name>HV_S_CONT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Operation failed OP = %d, error = 0x%x\n"</literal></expr></argument>,
<argument><expr><name>op</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>





<label><name>hv_kvp_done</name>:</label>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pwrite</name><argument_list>(<argument><expr><name>hv_kvp_dev_fd</name></expr></argument>, <argument><expr><name>hv_msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hv_kvp_dev_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>hv_kvp_msg</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>KVP_LOG</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"write len is: %d\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>hv_kvp_done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
