<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/cpio/test/test_option_t.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_option_t</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>date2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><literal type="string">"test_option_t.cpio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -it &lt; test_option_t.cpio &gt;it.out 2&gt;it.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertTextFileContents</name><argument_list>(<argument><expr><literal type="string">"1 block\n"</literal></expr></argument>, <argument><expr><literal type="string">"it.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><literal type="string">"test_option_t.stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>slurpfile</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"test_option_t.stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertTextFileContents</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"it.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -t &lt; test_option_t.cpio &gt;t.out 2&gt;t.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertTextFileContents</name><argument_list>(<argument><expr><literal type="string">"1 block\n"</literal></expr></argument>, <argument><expr><literal type="string">"t.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><literal type="string">"test_option_t.stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>slurpfile</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"test_option_t.stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertTextFileContents</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"t.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>!=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -ot &lt; test_option_t.cpio &gt;ot.out 2&gt;ot.err"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"ot.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -itv &lt; test_option_t.cpio &gt;tv.out 2&gt;tv.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertTextFileContents</name><argument_list>(<argument><expr><literal type="string">"1 block\n"</literal></expr></argument>, <argument><expr><literal type="string">"tv.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><literal type="string">"test_option_tv.stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -itnv &lt; test_option_t.cpio &gt;itnv.out 2&gt;itnv.err"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertTextFileContents</name><argument_list>(<argument><expr><literal type="string">"1 block\n"</literal></expr></argument>, <argument><expr><literal type="string">"itnv.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>slurpfile</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"itnv.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"-rw-r--r-- 1 1000 1000 0 "</literal></expr></argument>,<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>mtime</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>date2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date2</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%b %d %Y"</literal></expr></argument>, <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_snprintf</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%12.12s file"</literal></expr></argument>, <argument><expr><name>date2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>date2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date2</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%b %e %Y"</literal></expr></argument>, <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%12.12s file"</literal></expr></argument>, <argument><expr><name>date2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">42</literal></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>!=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -in &lt; test_option_t.cpio &gt;in.out 2&gt;in.err"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"in.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
