<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/cpio/test/test_gcpio_compat.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unpack_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>se</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><literal type="number">0775</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertChdir</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -i %s &lt; %s &gt;unpack.out 2&gt;unpack.err"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Error invoking %s -i %s &lt; %s"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>canSymlink</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Error invoking %s -i %s &lt; %s"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertTextFileContents</name><argument_list>(<argument><expr><name>se</name></expr></argument>, <argument><expr><literal type="string">"unpack.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>assertIsReg</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileSize</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileSize</name><argument_list>(<argument><expr><literal type="string">"linkfile"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNLinks</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertIsHardlink</name><argument_list>(<argument><expr><literal type="string">"linkfile"</literal></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileSize</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileSize</name><argument_list>(<argument><expr><literal type="string">"linkfile"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>canSymlink</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertIsSymlink</name><argument_list>(<argument><expr><literal type="string">"symlink"</literal></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>assertIsDir</name><argument_list>(<argument><expr><literal type="string">"dir"</literal></expr></argument>, <argument><expr><literal type="number">0775</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertChdir</name><argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_gcpio_compat</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assertUmask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>canSymlink</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unpack_test</name><argument_list>(<argument><expr><literal type="string">"test_gcpio_compat_ref.bin"</literal></expr></argument>,
<argument><expr><literal type="string">"--no-preserve-owner"</literal></expr></argument>, <argument><expr><literal type="string">"1 block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unpack_test</name><argument_list>(<argument><expr><literal type="string">"test_gcpio_compat_ref.crc"</literal></expr></argument>,
<argument><expr><literal type="string">"--no-preserve-owner"</literal></expr></argument>, <argument><expr><literal type="string">"2 blocks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unpack_test</name><argument_list>(<argument><expr><literal type="string">"test_gcpio_compat_ref.newc"</literal></expr></argument>,
<argument><expr><literal type="string">"--no-preserve-owner"</literal></expr></argument>, <argument><expr><literal type="string">"2 blocks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unpack_test</name><argument_list>(<argument><expr><literal type="string">"test_gcpio_compat_ref.ustar"</literal></expr></argument>,
<argument><expr><literal type="string">"--no-preserve-owner"</literal></expr></argument>, <argument><expr><literal type="string">"7 blocks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>unpack_test</name><argument_list>(<argument><expr><literal type="string">"test_gcpio_compat_ref_nosym.bin"</literal></expr></argument>,
<argument><expr><literal type="string">"--no-preserve-owner"</literal></expr></argument>, <argument><expr><literal type="string">"1 block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unpack_test</name><argument_list>(<argument><expr><literal type="string">"test_gcpio_compat_ref_nosym.crc"</literal></expr></argument>,
<argument><expr><literal type="string">"--no-preserve-owner"</literal></expr></argument>, <argument><expr><literal type="string">"2 blocks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unpack_test</name><argument_list>(<argument><expr><literal type="string">"test_gcpio_compat_ref_nosym.newc"</literal></expr></argument>,
<argument><expr><literal type="string">"--no-preserve-owner"</literal></expr></argument>, <argument><expr><literal type="string">"2 blocks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unpack_test</name><argument_list>(<argument><expr><literal type="string">"test_gcpio_compat_ref_nosym.ustar"</literal></expr></argument>,
<argument><expr><literal type="string">"--no-preserve-owner"</literal></expr></argument>, <argument><expr><literal type="string">"7 blocks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</unit>
