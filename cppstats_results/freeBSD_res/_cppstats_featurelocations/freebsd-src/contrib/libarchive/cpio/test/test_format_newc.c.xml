<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/cpio/test/test_format_newc.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAD</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>block</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((~(n) + 1) &amp; ((block) - 1))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>from_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>*=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>--</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>nlinks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>stat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>st</name><operator>.</operator><name>st_nlink</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_format_newc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>devmajor</name></decl>, <decl><type ref="prev"/><name>devminor</name></decl>, <decl><type ref="prev"/><name>ino</name></decl>, <decl><type ref="prev"/><name>gid</name></decl>, <decl><type ref="prev"/><name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>fs</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>result</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assertUmask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <call><name>getuid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertMakeFile</name><argument_list>(<argument><expr><literal type="string">"file1"</literal></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><literal type="string">"1234567890"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"file1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertMakeHardlink</name><argument_list>(<argument><expr><literal type="string">"hardlink"</literal></expr></argument>, <argument><expr><literal type="string">"file1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"hardlink\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertMakeHardlink</name><argument_list>(<argument><expr><literal type="string">"hardlink2"</literal></expr></argument>, <argument><expr><literal type="string">"file1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>canSymlink</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assertMakeSymlink</name><argument_list>(<argument><expr><literal type="string">"symlink"</literal></expr></argument>, <argument><expr><literal type="string">"file1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"symlink\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"dir"</literal></expr></argument>, <argument><expr><literal type="number">0775</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"dir\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_LargeInode</name><argument_list>(<argument><expr><literal type="string">"file1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
<argument><expr><literal type="string">"bsdcpio: file1: large inode number truncated: "</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>canSymlink</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_LargeInode</name><argument_list>(<argument><expr><literal type="string">"symlink"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
<argument><expr><literal type="string">"bsdcpio: symlink: large inode number truncated: "</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_LargeInode</name><argument_list>(<argument><expr><literal type="string">"dir"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
<argument><expr><literal type="string">"bsdcpio: dir: large inode number truncated: "</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_LargeInode</name><argument_list>(<argument><expr><literal type="string">"hardlink"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
<argument><expr><literal type="string">"bsdcpio: hardlink: large inode number truncated: "</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -o --format=newc &lt;list &gt;newc.out 2&gt;newc.err"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>canSymlink</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"2 blocks\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"1 block\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>assertTextFileContents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"newc.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>slurpfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"newc.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>canSymlink</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1024</literal></expr> </then><else>: <expr><literal type="number">512</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>







<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">110</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"070701"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ino</name> <operator>=</operator> <call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0x8180</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0x81a4</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>gid</name> <operator>=</operator> <call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">38</literal></expr></argument>, <argument><expr><literal type="string">"00000003"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"t=%#08jx now=%#08jx=%jd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>t</name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>now</name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>t</name> <operator>&lt;=</operator> <name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"t=%#08jx now - 2=%#08jx=%jd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>t</name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>now</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>now</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>t</name> <operator>&gt;=</operator> <name>now</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"newc format stores body only with last appearance of a link\n"</literal>
<literal type="string">" first appearance should be empty, so this file size\n"</literal>
<literal type="string">" field should be zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> <operator>+=</operator> <call><name>PAD</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>devmajor</name> <operator>=</operator> <call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">62</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>devminor</name> <operator>=</operator> <call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">70</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">78</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">86</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">94</literal></expr></argument>, <argument><expr><literal type="string">"00000006"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">94</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>+=</operator> <call><name>PAD</name><argument_list>(<argument><expr><name>ns</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">102</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"file1\0"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>e</name> <operator>+=</operator> <literal type="number">110</literal> <operator>+</operator> <name>fs</name> <operator>+</operator> <name>ns</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>canSymlink</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">110</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"070701"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CYGWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0xa180</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0xa1ff</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">38</literal></expr></argument>, <argument><expr><literal type="string">"00000001"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"First entry created at t=%#08jx this entry created"</literal>
<literal type="string">" at t2=%#08jx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>t</name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>t2</name> <operator>==</operator> <name>t</name> <operator>||</operator> <name>t2</name> <operator>==</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">54</literal></expr></argument>, <argument><expr><literal type="string">"00000005"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> <operator>+=</operator> <call><name>PAD</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>devmajor</name></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">62</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>devminor</name></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">70</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">78</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">86</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">94</literal></expr></argument>, <argument><expr><literal type="string">"00000008"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">94</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>+=</operator> <call><name>PAD</name><argument_list>(<argument><expr><name>ns</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">102</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"symlink\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">110</literal> <operator>+</operator> <name>ns</name></expr></argument>, <argument><expr><literal type="string">"file1\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>+=</operator> <literal type="number">110</literal> <operator>+</operator> <name>fs</name> <operator>+</operator> <name>ns</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">110</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"070701"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0x41c0</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">040775</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">02000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>nlinks</name><argument_list>(<argument><expr><literal type="string">"dir"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">38</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"First entry created at t=%#08jx this entry created at"</literal>
<literal type="string">"t2=%#08jx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>t</name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>t2</name> <operator>==</operator> <name>t</name> <operator>||</operator> <name>t2</name> <operator>==</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">54</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> <operator>+=</operator> <call><name>PAD</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>devmajor</name></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">62</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>devminor</name></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">70</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">78</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">86</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">94</literal></expr></argument>, <argument><expr><literal type="string">"00000004"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">94</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>+=</operator> <call><name>PAD</name><argument_list>(<argument><expr><name>ns</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">102</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"dir\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>+=</operator> <literal type="number">110</literal> <operator>+</operator> <name>fs</name> <operator>+</operator> <name>ns</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">110</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"070701"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"If these aren't the same, then the hardlink detection failed to match them."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ino</name></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0x8180</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0x81a4</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">38</literal></expr></argument>, <argument><expr><literal type="string">"00000003"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"First entry created at t=%#08jx this entry created at"</literal>
<literal type="string">"t2=%#08jx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>t</name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>t2</name> <operator>==</operator> <name>t</name> <operator>||</operator> <name>t2</name> <operator>==</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> <operator>+=</operator> <call><name>PAD</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>devmajor</name></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">62</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>devminor</name></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">70</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">78</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">86</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">94</literal></expr></argument>, <argument><expr><literal type="string">"00000009"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">94</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>+=</operator> <call><name>PAD</name><argument_list>(<argument><expr><name>ns</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">102</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"hardlink\0\0"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">110</literal> <operator>+</operator> <name>ns</name></expr></argument>, <argument><expr><literal type="string">"1234567890\0\0"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>+=</operator> <literal type="number">110</literal> <operator>+</operator> <name>ns</name> <operator>+</operator> <name>fs</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_hex</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">110</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"070701"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">22</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">38</literal></expr></argument>, <argument><expr><literal type="string">"00000001"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">46</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">54</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">62</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">70</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">78</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">86</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name>from_hex</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">94</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">102</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"TRAILER!!!\0\0"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
