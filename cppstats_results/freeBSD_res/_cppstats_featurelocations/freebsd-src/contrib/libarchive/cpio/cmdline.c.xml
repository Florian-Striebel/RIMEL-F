<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/cpio/cmdline.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpio_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GRP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PWD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"err.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>short_options</name> <init>= <expr><literal type="string">"067AaBC:cdE:F:f:H:hI:iJjLlmnO:opR:rtuVvW:yZz"</literal></expr></init></decl>;</decl_stmt>




<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>option</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>required</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>equivalent</name></decl>;</decl_stmt>
}</block> <decl><name><name>cpio_longopts</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"b64encode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_B64ENCODE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"binary"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'7'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"create"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dereference"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'L'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dot"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'V'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"extract"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'i'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"file"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="char">'F'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"format"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="char">'H'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"grzip"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_GRZIP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'h'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"insecure"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_INSECURE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"link"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'l'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"list"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lrzip"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_LRZIP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lz4"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_LZ4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lzma"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_LZMA</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lzop"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_LZOP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"make-directories"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'d'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-preserve-owner"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_NO_PRESERVE_OWNER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"null"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'0'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"numeric-uid-gid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"owner"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="char">'R'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"passphrase"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OPTION_PASSPHRASE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pass-through"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'p'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"preserve-modification-time"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"preserve-owner"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_PRESERVE_OWNER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pwb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'6'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"quiet"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_QUIET</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unconditional"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'u'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uuencode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_UUENCODE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"verbose"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'v'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"version"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_VERSION</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'J'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"zstd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_ZSTD</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>











<function><type><name>int</name></type>
<name>cpio_getopt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpio</name></name> <modifier>*</modifier></type><name>cpio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<enum>enum <block>{ <decl><name>state_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>state_next_word</name></decl>, <decl><name>state_short</name></decl>, <decl><name>state_long</name></decl> }</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>state</name> <init>= <expr><name>state_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>opt_word</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>popt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>match</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>match2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>long_prefix</name> <init>= <expr><literal type="string">"--"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>optlength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><literal type="char">'?'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>required</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cpio</name><operator>-&gt;</operator><name>argument</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>state_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>cpio</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>cpio</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>state_next_word</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>state_next_word</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cpio</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cpio</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cpio</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>cpio</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>cpio</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opt_word</name> <operator>=</operator> <operator>*</operator><name><name>cpio</name><operator>-&gt;</operator><name>argv</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>cpio</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt_word</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>state_long</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opt_word</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>state_short</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>opt_word</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>state_short</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <operator>*</operator><name>opt_word</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>state_next_word</name></expr>;</expr_stmt>
<return>return <expr><call><name>cpio_getopt</name><argument_list>(<argument><expr><name>cpio</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>short_options</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>required</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>required</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt_word</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt_word</name> <operator>=</operator> <operator>*</operator><name><name>cpio</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_word</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Option -%c requires an argument"</literal></expr></argument>,
<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>cpio</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>cpio</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>state_long</name></expr>;</expr_stmt>
<expr_stmt><expr><name>long_prefix</name> <operator>=</operator> <literal type="string">"-W "</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>state_next_word</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpio</name><operator>-&gt;</operator><name>argument</name></name> <operator>=</operator> <name>opt_word</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>state_long</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>state_next_word</name></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>opt_word</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optlength</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>opt_word</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpio</name><operator>-&gt;</operator><name>argument</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>optlength</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>opt_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>popt</name> <operator>=</operator> <name>cpio_longopts</name></expr>;</init> <condition><expr><name><name>popt</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>popt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>opt_word</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>opt_word</name></expr></argument>, <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>optlength</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match2</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>popt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>optlength</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Option %s%s is not supported"</literal></expr></argument>,
<argument><expr><name>long_prefix</name></expr></argument>, <argument><expr><name>opt_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Ambiguous option %s%s (matches --%s and --%s)"</literal></expr></argument>,
<argument><expr><name>long_prefix</name></expr></argument>, <argument><expr><name>opt_word</name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>match2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>required</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cpio</name><operator>-&gt;</operator><name>argument</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cpio</name><operator>-&gt;</operator><name>argument</name></name> <operator>=</operator> <operator>*</operator><name><name>cpio</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cpio</name><operator>-&gt;</operator><name>argument</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Option %s%s requires an argument"</literal></expr></argument>,
<argument><expr><name>long_prefix</name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>cpio</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>cpio</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cpio</name><operator>-&gt;</operator><name>argument</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Option %s%s does not allow an argument"</literal></expr></argument>,
<argument><expr><name>long_prefix</name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name><name>match</name><operator>-&gt;</operator><name>equivalent</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>opt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>owner_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>errbuff</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>u</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ue</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>uid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>gid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="string">"Invalid empty user/group spec"</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>*</operator><name>spec</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>*</operator><name>spec</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ue</name> <operator>=</operator> <name>u</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>spec</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ue</name> <operator>=</operator> <name>u</name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>ue</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ue</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ue</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>ue</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>ue</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>g</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>g</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>u</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pwent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>user</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>ue</name> <operator>-</operator> <name>u</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>user</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="string">"Couldn't allocate memory"</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>ue</name> <operator>-</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>user</name><index>[<expr><name>ue</name> <operator>-</operator> <name>u</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pwent</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>uid</name> <operator>=</operator> <name><name>pwent</name><operator>-&gt;</operator><name>pw_uid</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ue</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>gid</name> <operator>=</operator> <name><name>pwent</name><operator>-&gt;</operator><name>pw_gid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>uid</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Couldn't lookup user ``%s''"</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errbuff</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuff</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>errbuff</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>g</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>group</name></name> <modifier>*</modifier></type><name>grp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>grp</name> <operator>=</operator> <call><name>getgrnam</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>gid</name> <operator>=</operator> <name><name>grp</name><operator>-&gt;</operator><name>gr_gid</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>gid</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Couldn't lookup group ``%s''"</literal></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errbuff</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuff</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>errbuff</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
