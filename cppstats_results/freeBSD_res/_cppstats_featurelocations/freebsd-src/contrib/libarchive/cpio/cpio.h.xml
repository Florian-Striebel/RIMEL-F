<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/cpio/cpio.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CPIO_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPIO_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpio_platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>









<struct>struct <name>cpio</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argument</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>add_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extract_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compress_program</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option_append</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option_atime_restore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option_follow_links</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option_link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>option_null</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option_numeric_uid_gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option_pwb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option_rename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>destdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>destdir_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pass_destpath_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pass_destpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uid_override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uname_override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gid_override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gname_override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>day_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passphrase</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>archive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>archive_read_disk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>return_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type><name>linkresolver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>name_cache</name></name> <modifier>*</modifier></type><name>uname_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>name_cache</name></name> <modifier>*</modifier></type><name>gname_cache</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>matching</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buff_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ppbuff</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>owner_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<enum>enum <block>{
<decl><name>OPTION_B64ENCODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>OPTION_GRZIP</name></decl>,
<decl><name>OPTION_INSECURE</name></decl>,
<decl><name>OPTION_LRZIP</name></decl>,
<decl><name>OPTION_LZ4</name></decl>,
<decl><name>OPTION_LZMA</name></decl>,
<decl><name>OPTION_LZOP</name></decl>,
<decl><name>OPTION_PASSPHRASE</name></decl>,
<decl><name>OPTION_NO_PRESERVE_OWNER</name></decl>,
<decl><name>OPTION_PRESERVE_OWNER</name></decl>,
<decl><name>OPTION_QUIET</name></decl>,
<decl><name>OPTION_UUENCODE</name></decl>,
<decl><name>OPTION_VERSION</name></decl>,
<decl><name>OPTION_ZSTD</name></decl>,
}</block>;</enum>

<function_decl><type><name>int</name></type> <name>cpio_getopt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpio</name></name> <modifier>*</modifier></type><name>cpio</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
