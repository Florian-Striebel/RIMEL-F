<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/cat/cmdline.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsdcat_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsdcat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"err.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>short_options</name> <init>= <expr><literal type="string">"h"</literal></expr></init></decl>;</decl_stmt>










<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>bsdcat_option</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>required</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>equivalent</name></decl>;</decl_stmt>
}</block> <decl><name><name>tar_longopts</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'h'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"version"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPTION_VERSION</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>











































<function><type><name>int</name></type>
<name>bsdcat_getopt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdcat</name></name> <modifier>*</modifier></type><name>bsdcat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<enum>enum <block>{ <decl><name>state_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>state_old_tar</name></decl>, <decl><name>state_next_word</name></decl>,
<decl><name>state_short</name></decl>, <decl><name>state_long</name></decl> }</block>;</enum>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bsdcat_option</name></name> <modifier>*</modifier></type><name>popt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>match</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>match2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>long_prefix</name> <init>= <expr><literal type="string">"--"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>optlength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><literal type="char">'?'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>required</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>argument</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_state</name></name> <operator>==</operator> <name>state_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_state</name></name> <operator>=</operator> <name>state_next_word</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_state</name></name> <operator>==</operator> <name>state_next_word</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bsdcat</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdcat</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name> <operator>=</operator> <operator>*</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argv</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_state</name></name> <operator>=</operator> <name>state_long</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_state</name></name> <operator>=</operator> <name>state_short</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_state</name></name> <operator>==</operator> <name>state_short</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <operator>*</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_state</name></name> <operator>=</operator> <name>state_next_word</name></expr>;</expr_stmt>
<return>return <expr><call><name>bsdcat_getopt</name><argument_list>(<argument><expr><name>bsdcat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>short_options</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>required</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>required</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name> <operator>=</operator> <operator>*</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Option -%c requires an argument"</literal></expr></argument>,
<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_state</name></name> <operator>=</operator> <name>state_long</name></expr>;</expr_stmt>
<expr_stmt><expr><name>long_prefix</name> <operator>=</operator> <literal type="string">"-W "</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_state</name></name> <operator>=</operator> <name>state_next_word</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>argument</name></name> <operator>=</operator> <name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_state</name></name> <operator>==</operator> <name>state_long</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_state</name></name> <operator>=</operator> <name>state_next_word</name></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optlength</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>argument</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>optlength</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>popt</name> <operator>=</operator> <name>tar_longopts</name></expr>;</init> <condition><expr><name><name>popt</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>popt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name></expr></argument>, <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>optlength</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match2</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>popt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>optlength</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Option %s%s is not supported"</literal></expr></argument>,
<argument><expr><name>long_prefix</name></expr></argument>, <argument><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Ambiguous option %s%s (matches --%s and --%s)"</literal></expr></argument>,
<argument><expr><name>long_prefix</name></expr></argument>, <argument><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>getopt_word</name></name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>match2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>required</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bsdcat</name><operator>-&gt;</operator><name>argument</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bsdcat</name><operator>-&gt;</operator><name>argument</name></name> <operator>=</operator> <operator>*</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdcat</name><operator>-&gt;</operator><name>argument</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Option %s%s requires an argument"</literal></expr></argument>,
<argument><expr><name>long_prefix</name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>bsdcat</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bsdcat</name><operator>-&gt;</operator><name>argument</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Option %s%s does not allow an argument"</literal></expr></argument>,
<argument><expr><name>long_prefix</name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name><name>match</name><operator>-&gt;</operator><name>equivalent</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>opt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
