<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/cat/test/test_0.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEV_NULL</name></cpp:macro> <cpp:value>"/dev/null"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEV_NULL</name></cpp:macro> <cpp:value>"NUL"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_0</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"File %s does not exist?!"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>stat</name><argument_list>(<argument><expr><name>testprogfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\nFile %s does not exist; aborting test.\n\n"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"%s is not executable?!"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">0111</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\nFile %s not executable; aborting test.\n\n"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s --version &gt;"</literal> <name>DEV_NULL</name></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Unable to successfully run: %s --version\n"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


</block_content>}</block>
</unit>
