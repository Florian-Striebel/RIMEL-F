<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/cat/test/test_error_mixed.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_error_mixed</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reffile1</name> <init>= <expr><literal type="string">"test_expand.plain"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reffile2</name> <init>= <expr><literal type="string">"test_expand.error"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reffile3</name> <init>= <expr><literal type="string">"test_expand.Z"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><name>reffile2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><name>reffile1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><name>reffile3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>!=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s %s %s %s &gt;test.out 2&gt;test.err"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>, <argument><expr><name>reffile1</name></expr></argument>, <argument><expr><name>reffile2</name></expr></argument>, <argument><expr><name>reffile3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertTextFileContents</name><argument_list>(
<argument><expr><literal type="string">"contents of test_expand.plain.\n"</literal>
<literal type="string">"contents of test_expand.Z.\n"</literal></expr></argument>, <argument><expr><literal type="string">"test.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertNonEmptyFile</name><argument_list>(<argument><expr><literal type="string">"test.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
