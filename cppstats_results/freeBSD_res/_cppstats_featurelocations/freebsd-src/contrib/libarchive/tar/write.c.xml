<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/tar/write.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsdtar_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_STAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ATTR_XATTR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;attr/xattr.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GRP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBGEN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PATHS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;paths.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PWD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsdtar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"line_reader.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BINARY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>archive_dir_entry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_dir_entry</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mtime_nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>archive_dir</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_dir_entry</name></name> <modifier>*</modifier></type><name>head</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>append_archive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>ina</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>append_archive_filename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>archive_names_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>copy_file_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>excluded_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>report_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>progress</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>test_for_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>metadata_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>write_archive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>write_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>write_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>write_hierarchy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>seek_file</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>distance</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>whence</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>distance</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>SetFilePointerEx</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>distance</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FILE_BEGIN</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>open</name></cpp:macro> <cpp:value>_open</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>close</name></cpp:macro> <cpp:value>_close</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read</name></cpp:macro> <cpp:value>_read</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>lseek</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lseek</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lseek</name></cpp:macro> <cpp:value>seek_file</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_writer_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>writer_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>writer_options</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>ENV_WRITER_OPTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>writer_options</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>module_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>IGNORE_WRONG_MODULE_NAME</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>opt_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>writer_options</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>module_len</name> <operator>+</operator> <name>opt_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>IGNORE_WRONG_MODULE_NAME</name></expr></argument>, <argument><expr><name>module_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>writer_options</name></expr></argument>, <argument><expr><name>opt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_write_set_options</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>archive_write_set_options</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>option_options</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_reader_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reader_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bsdtar</name></expr>;</expr_stmt>

<expr_stmt><expr><name>reader_options</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>ENV_READER_OPTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reader_options</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>module_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>IGNORE_WRONG_MODULE_NAME</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>opt_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>reader_options</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>module_len</name> <operator>+</operator> <name>opt_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>IGNORE_WRONG_MODULE_NAME</name></expr></argument>, <argument><expr><name>module_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>reader_options</name></expr></argument>, <argument><expr><name>opt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_set_options</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tar_mode_c</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>filter_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>argv</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>names_from_file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no files or directories specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>cset_get_format</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_write_set_format_pax_restricted</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cset_set_format</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>, <argument><expr><literal type="string">"pax restricted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_write_set_format_by_name</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><call><name>cset_get_format</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Can't use format %s: %s\n"</literal></expr></argument>,
<argument><expr><call><name>cset_get_format</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_write_set_bytes_per_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>bytes_per_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_write_set_bytes_in_last_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>cset_write_add_filters</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unsupported compression option --%s"</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>filter_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_writer_options</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>passphrase</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_write_set_passphrase</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_write_set_passphrase_callback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bsdtar</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>passphrase_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>archive_write_open_filename</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write_archive</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>tar_mode_r</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>end_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>test_for_append</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ARCHIVE_FORMAT_TAR_PAX_RESTRICTED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Cannot open %s"</literal></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_support_format_empty</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_support_format_tar</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_support_format_gnutar</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_reader_options</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_open_fd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">10240</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_errno</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Can't read archive %s: %s"</literal></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_filter_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_FILTER_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Cannot append to compressed archive."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>archive_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>end_offset</name> <operator>=</operator> <call><name>archive_read_header_position</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><call><name>cset_get_format</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_write_set_format_by_name</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><call><name>cset_get_format</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>format</name> <operator>&amp;=</operator> <name>ARCHIVE_FORMAT_BASE_MASK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>archive_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ARCHIVE_FORMAT_BASE_MASK</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>format</name> <operator>!=</operator> <name>ARCHIVE_FORMAT_EMPTY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Format %s is incompatible with the archive %s."</literal></expr></argument>,
<argument><expr><call><name>cset_get_format</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>ARCHIVE_FORMAT_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ARCHIVE_FORMAT_TAR_PAX_RESTRICTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_write_set_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>end_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Could not seek to archive end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_writer_options</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>archive_write_open_fd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_archive</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tar_mode_u</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>end_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_dir_entry</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_dir</name></name></type> <name>archive_dir</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>archive_dir</name></name> <operator>=</operator> <operator>&amp;</operator><name>archive_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>archive_dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>archive_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ARCHIVE_FORMAT_TAR_PAX_RESTRICTED</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_for_append</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Cannot open %s"</literal></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_support_format_tar</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_support_format_gnutar</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_reader_options</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_read_open_fd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>bytes_per_block</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Can't open %s: %s"</literal></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_filter_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_FILTER_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Cannot append to compressed archive."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_exclude_entry</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_MATCH_MTIME</name> <operator>|</operator> <name>ARCHIVE_MATCH_OLDER</name> <operator>|</operator>
<name>ARCHIVE_MATCH_EQUAL</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Error : %s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>archive_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>end_offset</name> <operator>=</operator> <call><name>archive_read_header_position</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>archive_write_set_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_write_set_bytes_per_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>bytes_per_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_write_set_bytes_in_last_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>end_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Could not seek to archive end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_writer_options</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>archive_write_open_fd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_archive</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>archive_dir</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>archive_dir</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>archive_dir</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>archive_dir</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>archive_dir</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>archive_dir</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_archive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sparse_entry</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>buff_size</name></name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>buff_size</name></name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>bytes_per_block</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>buff_size</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>buff_size</name></name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>buff_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"cannot allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>resolver</name></name> <operator>=</operator> <call><name>archive_entry_linkresolver_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"cannot create link resolver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_linkresolver_set_strategy</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>resolver</name></name></expr></argument>,
<argument><expr><call><name>archive_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name> <operator>=</operator> <call><name>archive_read_disk_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Cannot create read_disk object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>symlink_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><call><name>archive_read_disk_set_symlink_hybrid</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><call><name>archive_read_disk_set_symlink_logical</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_read_disk_set_symlink_physical</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>archive_read_disk_set_matching</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>, <argument><expr><name>excluded_callback</name></expr></argument>, <argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_disk_set_metadata_filter_callback</name><argument_list>(
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>, <argument><expr><name>metadata_filter</name></expr></argument>, <argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_read_disk_set_behavior</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_disk_set_standard_lookup</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>names_from_file</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_names_from_file</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>argv</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>*</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argv</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>*</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><literal type="string">"Missing argument for -C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>return_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Meaningless argument for -C: ''"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>return_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_chdir</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_chdir</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>append_archive_filename</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>,
<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_hierarchy</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argv</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>archive_read_disk_set_matching</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_disk_set_metadata_filter_callback</name><argument_list>(
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_linkify</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>resolver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparse_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>disk</name> <init>= <expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></init></decl>;</decl_stmt>










<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_disk_open</name><argument_list>(<argument><expr><name>disk</name></expr></argument>,
<argument><expr><call><name>archive_entry_sourcepath</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><call><name>archive_errno</name><argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>return_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>next_entry</name>;</goto>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>entry2</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_next_header2</name><argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>entry2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><call><name>archive_errno</name><argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>return_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>next_entry</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>next_entry</name>:</label>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_linkify</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>resolver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparse_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>return_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_linkresolver_free</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>resolver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>resolver</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_TOTALS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Total bytes written: %s\n"</literal></expr></argument>,
<argument><expr><call><name>tar_i64toa</name><argument_list>(<argument><expr><call><name>archive_filter_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>archive_names_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lafe_line_reader</name></name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>next_line_is_dir</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>lafe_line_reader</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>names_from_file</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>lafe_line_reader_next</name><argument_list>(<argument><expr><name>lr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>next_line_is_dir</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_chdir</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Meaningless argument for -C: ''"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>return_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>next_line_is_dir</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_NULL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"-C"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>next_line_is_dir</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_chdir</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write_hierarchy</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>lafe_line_reader_free</name><argument_list>(<argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>next_line_is_dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Unexpected end of filename list; "</literal>
<literal type="string">"directory expected after -C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>append_archive_filename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>raw_filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>ina</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>raw_filename</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ina</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>ina</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>ina</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_reader_options</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>ina</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_set_options</name><argument_list>(<argument><expr><name>ina</name></expr></argument>, <argument><expr><literal type="string">"mtree:checkfs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>passphrase</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>archive_read_add_passphrase</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>archive_read_set_passphrase_callback</name><argument_list>(<argument><expr><name>ina</name></expr></argument>, <argument><expr><name>bsdtar</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>passphrase_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_read_open_filename</name><argument_list>(<argument><expr><name>ina</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>bytes_per_block</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>ina</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>return_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>append_archive</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>ina</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Error reading archive %s: %s"</literal></expr></argument>,
<argument><expr><name>raw_filename</name></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>ina</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>return_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>ina</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>append_archive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>ina</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>in_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ARCHIVE_OK</name> <operator>==</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>ina</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_entry</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_excluded</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>, <argument><expr><name>in_entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_INTERACTIVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>yes</name><argument_list>(<argument><expr><literal type="string">"copy '%s'"</literal></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>in_entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>safe_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"a "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_item_verbose</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>in_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>safe_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"a %s"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>in_entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>need_report</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report_write</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>in_entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>in_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>in_entry</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">": %s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>in_entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_read_data_skip</name><argument_list>(<argument><expr><name>ina</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>copy_file_data_block</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>ina</name></expr></argument>, <argument><expr><name>in_entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>e</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr> ?</condition><then> <expr><name>ARCHIVE_OK</name></expr> </then><else>: <expr><name>e</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_file_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>in_a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>progress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>null_buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>archive_read_data_block</name><argument_list>(<argument><expr><name>in_a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buff</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytes_read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>need_report</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report_write</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>progress</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sparse</name> <init>= <expr><name>offset</name> <operator>-</operator> <name>progress</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>null_buff</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>null_buff</name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>null_buff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>buff_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>sparse</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sparse</name> <operator>&gt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>buff_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>buff_size</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>sparse</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator>
<call><name>archive_write_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>null_buff</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytes_written</name> <operator>&lt;</operator> <name>ns</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"%s: Truncated write; file may "</literal>
<literal type="string">"have grown while being archived."</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>progress</name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sparse</name> <operator>-=</operator> <name>bytes_written</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>archive_write_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytes_written</name> <operator>&lt;</operator> <name>bytes_read</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"%s: Truncated write; file may have grown "</literal>
<literal type="string">"while being archived."</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>progress</name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><call><name>archive_errno</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>excluded_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name> <init>= <expr><operator>(</operator>struct <name>bsdtar</name> <operator>*</operator><operator>)</operator><name>_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_NO_SUBDIRS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>archive_read_disk_can_descend</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_INTERACTIVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>yes</name><argument_list>(<argument><expr><literal type="string">"add '%s'"</literal></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_read_disk_descend</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>metadata_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name> <init>= <expr><operator>(</operator>struct <name>bsdtar</name> <operator>*</operator><operator>)</operator><name>_data</name></expr></init></decl>;</decl_stmt>





















<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_INTERACTIVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>yes</name><argument_list>(<argument><expr><literal type="string">"add '%s'"</literal></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_NO_SUBDIRS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>archive_read_disk_can_descend</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_read_disk_descend</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_hierarchy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>disk</name> <init>= <expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spare_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_disk_open</name><argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><call><name>archive_errno</name><argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>return_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>first_fs</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_next_header2</name><argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><call><name>archive_errno</name><argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_FATAL</name> <operator>||</operator> <name>r</name> <operator>==</operator> <name>ARCHIVE_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>return_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_uid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>uname</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_uname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,
<argument><expr><call><name>archive_read_disk_uname</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>gid</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_gid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>gname</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_gname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,
<argument><expr><call><name>archive_read_disk_gname</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>uname</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_uname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>gname</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_gname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>gname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>edit_pathname</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>safe_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"a "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_item_verbose</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>safe_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"a %s"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AE_IFREG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>archive_entry_linkify</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>resolver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spare_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>spare_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>spare_entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>write_entry</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>safe_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"a "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_item_verbose</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">": %s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">": %s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <name>ARCHIVE_WARN</name> <operator>&amp;&amp;</operator> <call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>copy_file_data_block</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>diskreader</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>report_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>progress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>comp</name></decl>, <decl><type ref="prev"/><name>uncomp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compression</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>comp</name> <operator>=</operator> <call><name>archive_filter_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uncomp</name> <operator>=</operator> <call><name>archive_filter_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"In: %d files, %s bytes;"</literal></expr></argument>,
<argument><expr><call><name>archive_file_count</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tar_i64toa</name><argument_list>(<argument><expr><name>uncomp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>&gt;=</operator> <name>uncomp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>compression</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>compression</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uncomp</name> <operator>-</operator> <name>comp</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>uncomp</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" Out: %s bytes, compression %d%%\n"</literal></expr></argument>,
<argument><expr><call><name>tar_i64toa</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>safe_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Current: %s (%s"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>tar_i64toa</name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"/%s bytes)\n"</literal></expr></argument>,
<argument><expr><call><name>tar_i64toa</name><argument_list>(<argument><expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_for_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>argv</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>names_from_file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no files or directories specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Cannot append to stdout."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Cannot append to %s: not a regular file."</literal></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







</block_content>}</block></function>
</unit>
