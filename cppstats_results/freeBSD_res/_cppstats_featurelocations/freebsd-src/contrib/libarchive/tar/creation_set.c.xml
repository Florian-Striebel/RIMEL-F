<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/tar/creation_set.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsdtar_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsdtar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"err.h"</cpp:file></cpp:include>

<struct>struct <name>creation_set</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>create_format</name></decl>;</decl_stmt>
<struct>struct <name>filter_set</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>program</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filter_name</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>filters</name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>filter_count</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>suffix_code_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>form</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_suffix_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>suffix_code_t</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>suffix</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>suffix</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>suffix</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>tbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>form</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_filter_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>suffix_code_t</name></name></type> <name><name>filters</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">".Z"</literal></expr>, <expr><literal type="string">"compress"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".bz2"</literal></expr>, <expr><literal type="string">"bzip2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".gz"</literal></expr>, <expr><literal type="string">"gzip"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".grz"</literal></expr>, <expr><literal type="string">"grzip"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".lrz"</literal></expr>, <expr><literal type="string">"lrzip"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".lz"</literal></expr>, <expr><literal type="string">"lzip"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".lz4"</literal></expr>, <expr><literal type="string">"lz4"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".lzo"</literal></expr>, <expr><literal type="string">"lzop"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".lzma"</literal></expr>, <expr><literal type="string">"lzma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".uu"</literal></expr>, <expr><literal type="string">"uuencode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".xz"</literal></expr>, <expr><literal type="string">"xz"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".zst"</literal></expr>, <expr><literal type="string">"zstd"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>get_suffix_code</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_format_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>suffix_code_t</name></name></type> <name><name>formats</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">".7z"</literal></expr>, <expr><literal type="string">"7zip"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".ar"</literal></expr>, <expr><literal type="string">"arbsd"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".cpio"</literal></expr>, <expr><literal type="string">"cpio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".iso"</literal></expr>, <expr><literal type="string">"iso9960"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".mtree"</literal></expr>, <expr><literal type="string">"mtree"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".shar"</literal></expr>, <expr><literal type="string">"shar"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".tar"</literal></expr>, <expr><literal type="string">"paxr"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".warc"</literal></expr>, <expr><literal type="string">"warc"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".xar"</literal></expr>, <expr><literal type="string">"xar"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".zip"</literal></expr>, <expr><literal type="string">"zip"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>get_suffix_code</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>decompose_alias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>suffix_code_t</name></name></type> <name><name>alias</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">".taz"</literal></expr>, <expr><literal type="string">".tar.gz"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".tgz"</literal></expr>, <expr><literal type="string">".tar.gz"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".tbz"</literal></expr>, <expr><literal type="string">".tar.bz2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".tbz2"</literal></expr>, <expr><literal type="string">".tar.bz2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".tz2"</literal></expr>, <expr><literal type="string">".tar.bz2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".tlz"</literal></expr>, <expr><literal type="string">".tar.lzma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".txz"</literal></expr>, <expr><literal type="string">".tar.xz"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".tzo"</literal></expr>, <expr><literal type="string">".tar.lzo"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".taZ"</literal></expr>, <expr><literal type="string">".tar.Z"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".tZ"</literal></expr>, <expr><literal type="string">".tar.Z"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".tzst"</literal></expr>, <expr><literal type="string">".tar.zst"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>get_suffix_code</name><argument_list>(<argument><expr><name>alias</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_cset_add_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type><name>cset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filter_set</name></name> <modifier>*</modifier></type><name>new_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_filter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_ptr</name> <operator>=</operator> <operator>(</operator>struct <name>filter_set</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cset</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>cset</name><operator>-&gt;</operator><name>filter_count</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>new_filter</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_filter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <name>new_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>cset</name><operator>-&gt;</operator><name>filter_count</name></name></expr>]</index></name><operator>.</operator><name>program</name> <operator>=</operator> <name>program</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>cset</name><operator>-&gt;</operator><name>filter_count</name></name></expr>]</index></name><operator>.</operator><name>filter_name</name> <operator>=</operator> <name>new_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cset</name><operator>-&gt;</operator><name>filter_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cset_add_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type><name>cset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_cset_add_filter</name><argument_list>(<argument><expr><name>cset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cset_add_filter_program</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type><name>cset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_cset_add_filter</name><argument_list>(<argument><expr><name>cset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cset_read_support_filter_program</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type><name>cset</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cset</name><operator>-&gt;</operator><name>filter_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>program</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_read_support_filter_program</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>cnt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cset_write_add_filters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type><name>cset</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>filter_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cset</name><operator>-&gt;</operator><name>filter_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>program</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_write_add_filter_program</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_write_add_filter_by_name</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>filter_name</name> <operator>=</operator> <name><name>cset</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter_name</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>cnt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cset_set_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type><name>cset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cset</name><operator>-&gt;</operator><name>create_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cset</name><operator>-&gt;</operator><name>create_format</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>cset_get_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type><name>cset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cset</name><operator>-&gt;</operator><name>create_format</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_cleanup_filters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filter_set</name></name> <modifier>*</modifier></type><name>filters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>cset_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type><name>cset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_cleanup_filters</name><argument_list>(<argument><expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name><name>cset</name><operator>-&gt;</operator><name>filter_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cset</name><operator>-&gt;</operator><name>create_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type>
<name>cset_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>creation_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>cset_auto_compress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type><name>cset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filter_set</name></name> <modifier>*</modifier></type><name>old_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_filter_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_filters</name> <operator>=</operator> <name><name>cset</name><operator>-&gt;</operator><name>filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_filter_count</name> <operator>=</operator> <name><name>cset</name><operator>-&gt;</operator><name>filter_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cset</name><operator>-&gt;</operator><name>filter_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_filter_code</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cset_add_filter</name><argument_list>(<argument><expr><name>cset</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_format_code</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cset_set_format</name><argument_list>(<argument><expr><name>cset</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>decompose_alias</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filter_set</name></name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>_cleanup_filters</name><argument_list>(<argument><expr><name>old_filters</name></expr></argument>, <argument><expr><name>old_filter_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cset</name><operator>-&gt;</operator><name>filter_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name><name>cset</name><operator>-&gt;</operator><name>filter_count</name></name></expr>;</init> <condition><expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cset</name><operator>-&gt;</operator><name>filters</name><index>[<expr><operator>--</operator><name>r</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cset</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <name>old_filters</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cset</name><operator>-&gt;</operator><name>filter_count</name></name> <operator>=</operator> <name>old_filter_count</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
