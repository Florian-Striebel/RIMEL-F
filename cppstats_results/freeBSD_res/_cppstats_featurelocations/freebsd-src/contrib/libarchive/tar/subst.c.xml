<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/tar/subst.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsdtar_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_REGEX_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PCREPOSIX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsdtar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PCREPOSIX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcreposix.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regex.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>REG_BASIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_BASIC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"err.h"</cpp:file></cpp:include>

<struct>struct <name>subst_rule</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>subst_rule</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regex_t</name></type> <name>re</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>global</name><range>:<expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>print</name><range>:<expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>regular</name><range>:<expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>symlink</name><range>:<expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>hardlink</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>substitution</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>subst_rule</name></name> <modifier>*</modifier></type><name>first_rule</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_rule</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_substitution</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>substitution</name></name> <modifier>*</modifier></type><name>subst</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>substitution</name></name> <operator>=</operator> <name>subst</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>subst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subst</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>subst</name><operator>-&gt;</operator><name>first_rule</name></name> <operator>=</operator> <name><name>subst</name><operator>-&gt;</operator><name>last_rule</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>add_substitution</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rule_text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>subst_rule</name></name> <modifier>*</modifier></type><name>rule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>substitution</name></name> <modifier>*</modifier></type><name>subst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end_pattern</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start_subst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subst</name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>substitution</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_substitution</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subst</name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>substitution</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rule</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rule</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subst</name><operator>-&gt;</operator><name>last_rule</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>subst</name><operator>-&gt;</operator><name>first_rule</name></name> <operator>=</operator> <name>rule</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>subst</name><operator>-&gt;</operator><name>last_rule</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>rule</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>subst</name><operator>-&gt;</operator><name>last_rule</name></name> <operator>=</operator> <name>rule</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rule_text</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Empty replacement string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>end_pattern</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>rule_text</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>rule_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid replacement string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>end_pattern</name> <operator>-</operator> <name>rule_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>rule_text</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end_pattern</name> <operator>-</operator> <name>rule_text</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>end_pattern</name> <operator>-</operator> <name>rule_text</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rule</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>REG_BASIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rule</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid regular expression: %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_subst</name> <operator>=</operator> <name>end_pattern</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end_pattern</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>start_subst</name></expr></argument>, <argument><expr><operator>*</operator><name>rule_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid replacement string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>end_pattern</name> <operator>-</operator> <name>start_subst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rule</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name>start_subst</name></expr></argument>, <argument><expr><name>end_pattern</name> <operator>-</operator> <name>start_subst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>result</name><index>[<expr><name>end_pattern</name> <operator>-</operator> <name>start_subst</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>global</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>print</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>regular</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>symlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>hardlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>end_pattern</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>end_pattern</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>global</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>hardlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>hardlink</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>print</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>regular</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>regular</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>symlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>symlink</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid replacement flag %c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>end_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>realloc_strncat</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>append</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>old_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>old_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>new_str</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>old_len</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_str</name></expr></argument>, <argument><expr><operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>old_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_str</name> <operator>+</operator> <name>old_len</name></expr></argument>, <argument><expr><name>append</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_str</name><index>[<expr><name>old_len</name> <operator>+</operator> <name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>new_str</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>realloc_strcat</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>append</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>old_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>old_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>new_str</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>old_len</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>append</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_str</name></expr></argument>, <argument><expr><operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>old_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>new_str</name> <operator>+</operator> <name>old_len</name></expr></argument>, <argument><expr><name>append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>new_str</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>apply_substitution</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>symlink_target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hardlink_target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regmatch_t</name></type> <name><name>matches</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>subst_rule</name></name> <modifier>*</modifier></type><name>rule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>substitution</name></name> <modifier>*</modifier></type><name>subst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>got_match</name></decl>, <decl><type ref="prev"/><name>print_match</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subst</name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>substitution</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>got_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>print_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>rule</name> <operator>=</operator> <name><name>subst</name><operator>-&gt;</operator><name>first_rule</name></name></expr>;</init> <condition><expr><name>rule</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>symlink_target</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rule</name><operator>-&gt;</operator><name>symlink</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hardlink_target</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rule</name><operator>-&gt;</operator><name>hardlink</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rule</name><operator>-&gt;</operator><name>regular</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rule</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>got_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>print_match</name> <operator>|=</operator> <name><name>rule</name><operator>-&gt;</operator><name>print</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>realloc_strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>rule</name><operator>-&gt;</operator><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rule</name><operator>-&gt;</operator><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>realloc_strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>rule</name><operator>-&gt;</operator><name>result</name></name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>realloc_strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
<argument><expr><name>name</name> <operator>+</operator> <name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr></argument>,
<argument><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>-</operator> <name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rule</name><operator>-&gt;</operator><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>result</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'~'</literal></expr>:</case>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><call><name>realloc_strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>rule</name><operator>-&gt;</operator><name>result</name></name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<case>case <expr><literal type="char">'9'</literal></expr>:</case>
<expr_stmt><expr><call><name>realloc_strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>rule</name><operator>-&gt;</operator><name>result</name></name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>rule</name><operator>-&gt;</operator><name>re</name><operator>.</operator><name>re_nsub</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>realloc_strncat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <name><name>matches</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr></argument>, <argument><expr><name><name>matches</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>-</operator> <name><name>matches</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><call><name>realloc_strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>rule</name><operator>-&gt;</operator><name>result</name></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>+=</operator> <name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rule</name><operator>-&gt;</operator><name>global</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>got_match</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>realloc_strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>print_match</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s &gt;&gt; %s\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>got_match</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cleanup_substitution</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>subst_rule</name></name> <modifier>*</modifier></type><name>rule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>substitution</name></name> <modifier>*</modifier></type><name>subst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subst</name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>substitution</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>rule</name> <operator>=</operator> <name><name>subst</name><operator>-&gt;</operator><name>first_rule</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>subst</name><operator>-&gt;</operator><name>first_rule</name></name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
