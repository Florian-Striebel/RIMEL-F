<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/tar/test/test_option_acls.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD</name> <operator>||</operator> <name>ARCHIVE_ACL_DARWIN</name> <operator>||</operator> <name>ARCHIVE_ACL_LIBACL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>acl_perm_t</name></type> <name><name>acl_perms</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<expr><name>ACL_READ_DATA</name></expr>,
<expr><name>ACL_LIST_DIRECTORY</name></expr>,
<expr><name>ACL_WRITE_DATA</name></expr>,
<expr><name>ACL_ADD_FILE</name></expr>,
<expr><name>ACL_EXECUTE</name></expr>,
<expr><name>ACL_SEARCH</name></expr>,
<expr><name>ACL_DELETE</name></expr>,
<expr><name>ACL_APPEND_DATA</name></expr>,
<expr><name>ACL_ADD_SUBDIRECTORY</name></expr>,
<expr><name>ACL_DELETE_CHILD</name></expr>,
<expr><name>ACL_READ_ATTRIBUTES</name></expr>,
<expr><name>ACL_WRITE_ATTRIBUTES</name></expr>,
<expr><name>ACL_READ_EXTATTRIBUTES</name></expr>,
<expr><name>ACL_WRITE_EXTATTRIBUTES</name></expr>,
<expr><name>ACL_READ_SECURITY</name></expr>,
<expr><name>ACL_WRITE_SECURITY</name></expr>,
<expr><name>ACL_CHANGE_OWNER</name></expr>,
<expr><name>ACL_SYNCHRONIZE</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>ACL_EXECUTE</name></expr>,
<expr><name>ACL_WRITE</name></expr>,
<expr><name>ACL_READ</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<expr><name>ACL_READ_DATA</name></expr>,
<expr><name>ACL_LIST_DIRECTORY</name></expr>,
<expr><name>ACL_WRITE_DATA</name></expr>,
<expr><name>ACL_ADD_FILE</name></expr>,
<expr><name>ACL_APPEND_DATA</name></expr>,
<expr><name>ACL_ADD_SUBDIRECTORY</name></expr>,
<expr><name>ACL_READ_NAMED_ATTRS</name></expr>,
<expr><name>ACL_WRITE_NAMED_ATTRS</name></expr>,
<expr><name>ACL_DELETE_CHILD</name></expr>,
<expr><name>ACL_READ_ATTRIBUTES</name></expr>,
<expr><name>ACL_WRITE_ATTRIBUTES</name></expr>,
<expr><name>ACL_DELETE</name></expr>,
<expr><name>ACL_READ_ACL</name></expr>,
<expr><name>ACL_WRITE_ACL</name></expr>,
<expr><name>ACL_WRITE_OWNER</name></expr>,
<expr><name>ACL_SYNCHRONIZE</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name> <operator>||</operator> <name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>acl_flag_t</name></type> <name><name>acl_flags</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<expr><name>ACL_ENTRY_INHERITED</name></expr>,
<expr><name>ACL_ENTRY_FILE_INHERIT</name></expr>,
<expr><name>ACL_ENTRY_DIRECTORY_INHERIT</name></expr>,
<expr><name>ACL_ENTRY_LIMIT_INHERIT</name></expr>,
<expr><name>ACL_ENTRY_ONLY_INHERIT</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>ACL_ENTRY_FILE_INHERIT</name></expr>,
<expr><name>ACL_ENTRY_DIRECTORY_INHERIT</name></expr>,
<expr><name>ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>,
<expr><name>ACL_ENTRY_INHERIT_ONLY</name></expr>,
<expr><name>ACL_ENTRY_SUCCESSFUL_ACCESS</name></expr>,
<expr><name>ACL_ENTRY_FAILED_ACCESS</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_ENTRY_INHERITED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ACL_ENTRY_INHERITED</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_acl_entry</name><parameter_list>(<parameter><decl><type><name>acl_entry_t</name></type> <name>ae_a</name></decl></parameter>, <parameter><decl><type><name>acl_entry_t</name></type> <name>ae_b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_nfs4</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>acl_tag_t</name></type> <name>tag_a</name></decl>, <decl><type ref="prev"/><name>tag_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_permset_t</name></type> <name>permset_a</name></decl>, <decl><type ref="prev"/><name>permset_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>perm_a</name></decl>, <decl><type ref="prev"/><name>perm_b</name></decl>, <decl><type ref="prev"/><name>perm_start</name></decl>, <decl><type ref="prev"/><name>perm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>qual_a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>qual_b</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<decl_stmt><decl><type><name>acl_entry_type_t</name></type> <name>type_a</name></decl>, <decl><type ref="prev"/><name>type_b</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name> <operator>||</operator> <name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<decl_stmt><decl><type><name>acl_flagset_t</name></type> <name>flagset_a</name></decl>, <decl><type ref="prev"/><name>flagset_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag_a</name></decl>, <decl><type ref="prev"/><name>flag_b</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_get_tag_type</name><argument_list>(<argument><expr><name>ae_a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_tag_type() error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_get_tag_type</name><argument_list>(<argument><expr><name>ae_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_tag_type() error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tag_a</name> <operator>!=</operator> <name>tag_b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>tag_a</name> <operator>==</operator> <name>ACL_EXTENDED_ALLOW</name> <operator>||</operator> <name>tag_b</name> <operator>==</operator> <name>ACL_EXTENDED_DENY</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>tag_a</name> <operator>==</operator> <name>ACL_USER</name> <operator>||</operator> <name>tag_a</name> <operator>==</operator> <name>ACL_GROUP</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>qual_a</name> <operator>=</operator> <call><name>acl_get_qualifier</name><argument_list>(<argument><expr><name>ae_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_qualifier() error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assert</name><argument_list>(<argument><expr><name>qual_a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>qual_b</name> <operator>=</operator> <call><name>acl_get_qualifier</name><argument_list>(<argument><expr><name>ae_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_qualifier() error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assert</name><argument_list>(<argument><expr><name>qual_b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>qual_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>guid_t</name> <operator>*</operator><operator>)</operator><name>qual_a</name><operator>)</operator><operator>-&gt;</operator><name>g_guid</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>guid_t</name> <operator>*</operator><operator>)</operator><name>qual_b</name><operator>)</operator><operator>-&gt;</operator><name>g_guid</name></expr></argument>, <argument><expr><name>KAUTH_GUID_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag_a</name> <operator>==</operator> <name>ACL_USER</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><operator>(</operator><name>uid_t</name> <operator>*</operator><operator>)</operator><name>qual_a</name> <operator>!=</operator> <operator>*</operator><operator>(</operator><name>uid_t</name> <operator>*</operator><operator>)</operator><name>qual_b</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>tag_a</name> <operator>==</operator> <name>ACL_GROUP</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><operator>(</operator><name>gid_t</name> <operator>*</operator><operator>)</operator><name>qual_a</name> <operator>!=</operator> <operator>*</operator><operator>(</operator><name>gid_t</name> <operator>*</operator><operator>)</operator><name>qual_b</name><operator>)</operator><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>qual_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>qual_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>qual_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>qual_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_nfs4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_get_entry_type_np</name><argument_list>(<argument><expr><name>ae_a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_entry_type_np() error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_get_entry_type_np</name><argument_list>(<argument><expr><name>ae_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_entry_type_np() error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type_a</name> <operator>!=</operator> <name>type_b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_get_permset</name><argument_list>(<argument><expr><name>ae_a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>permset_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_permset() error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_get_permset</name><argument_list>(<argument><expr><name>ae_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>permset_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_permset() error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>perm_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>perm_end</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>acl_perms</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>acl_perms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_nfs4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>perm_start</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>perm_end</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>perm_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>perm_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_LIBACL</name></expr></cpp:if>
<expr_stmt><expr><name>perm_a</name> <operator>=</operator> <call><name>acl_get_perm</name><argument_list>(<argument><expr><name>permset_a</name></expr></argument>, <argument><expr><name><name>acl_perms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perm_b</name> <operator>=</operator> <call><name>acl_get_perm</name><argument_list>(<argument><expr><name>permset_b</name></expr></argument>, <argument><expr><name><name>acl_perms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>perm_a</name> <operator>=</operator> <call><name>acl_get_perm_np</name><argument_list>(<argument><expr><name>permset_a</name></expr></argument>, <argument><expr><name><name>acl_perms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perm_b</name> <operator>=</operator> <call><name>acl_get_perm_np</name><argument_list>(<argument><expr><name>permset_b</name></expr></argument>, <argument><expr><name><name>acl_perms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>perm_a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>perm_b</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>perm_a</name> <operator>!=</operator> <name>perm_b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name> <operator>||</operator> <name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_nfs4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_get_flagset_np</name><argument_list>(<argument><expr><name>ae_a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flagset_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_flagset_np() error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_get_flagset_np</name><argument_list>(<argument><expr><name>ae_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flagset_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_flagset_np() error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>acl_flags</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>acl_flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>flag_a</name> <operator>=</operator> <call><name>acl_get_flag_np</name><argument_list>(<argument><expr><name>flagset_a</name></expr></argument>, <argument><expr><name><name>acl_flags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flag_b</name> <operator>=</operator> <call><name>acl_get_flag_np</name><argument_list>(<argument><expr><name>flagset_b</name></expr></argument>, <argument><expr><name><name>acl_flags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>flag_b</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_a</name> <operator>!=</operator> <name>flag_b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>is_nfs4</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUPPORT</name></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>clear_inheritance_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_TEST_ACL_TYPE_POSIX1E</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_POSIX1E</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><call><name>acl_delete_def_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>setTestAcl</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>ARCHIVE_TEST_ACL_TYPE_NFS4</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_NFS4</name></expr></cpp:if>
<expr_stmt><expr><call><name>setTestAcl</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>path</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_acls</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_nfs4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>acl_a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>acl_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aclcnt_a</name></decl>, <decl><type ref="prev"/><name>aclcnt_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aclent_t</name> <modifier>*</modifier></type><name>aclent_a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aclent_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ace_t</name> <modifier>*</modifier></type><name>ace_a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ace_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name> <operator>||</operator> <name>ARCHIVE_ACL_FREEBSD</name> <operator>||</operator> <name>ARCHIVE_ACL_LIBACL</name></expr></cpp:elif>
<decl_stmt><decl><type><name>acl_t</name></type> <name>acl_a</name></decl>, <decl><type ref="prev"/><name>acl_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_entry_t</name></type> <name>aclent_a</name></decl>, <decl><type ref="prev"/><name>aclent_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>richacl</name></name> <modifier>*</modifier></type><name>richacl_a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>richacl_b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>richacl_a</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>richacl_b</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name> <operator>||</operator> <name>ARCHIVE_ACL_FREEBSD</name> <operator>||</operator> <name>ARCHIVE_ACL_LIBACL</name> <operator>||</operator> <name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>

<expr_stmt><expr><name>acl_a</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>acl_b</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><name>acl_a</name> <operator>=</operator> <call><name>sunacl_get</name><argument_list>(<argument><expr><name>GETACL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclcnt_a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_a</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<expr_stmt><expr><name>is_nfs4</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acl_a</name> <operator>=</operator> <call><name>sunacl_get</name><argument_list>(<argument><expr><name>ACE_GETACL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclcnt_a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get() error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assert</name><argument_list>(<argument><expr><name>acl_a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<expr_stmt><expr><name>acl_b</name> <operator>=</operator> <call><name>sunacl_get</name><argument_list>(<argument><expr><name>ACE_GETACL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclcnt_b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>acl_b</name> <operator>=</operator> <call><name>sunacl_get</name><argument_list>(<argument><expr><name>GETACL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclcnt_b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_b</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>ENOSYS</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOTSUP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>acl_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get() error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assert</name><argument_list>(<argument><expr><name>acl_b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>acl_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aclcnt_a</name> <operator>!=</operator> <name>aclcnt_b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>aclcnt_a</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_nfs4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aclent_a</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>aclent_t</name> <operator>*</operator><operator>)</operator><name>acl_a</name><operator>)</operator><index>[<expr><name>e</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>aclent_b</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>aclent_t</name> <operator>*</operator><operator>)</operator><name>acl_b</name><operator>)</operator><index>[<expr><name>e</name></expr>]</index></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>aclent_a</name><operator>-&gt;</operator><name>a_type</name></name> <operator>!=</operator> <name><name>aclent_b</name><operator>-&gt;</operator><name>a_type</name></name> <operator>||</operator>
<name><name>aclent_a</name><operator>-&gt;</operator><name>a_id</name></name> <operator>!=</operator> <name><name>aclent_b</name><operator>-&gt;</operator><name>a_id</name></name> <operator>||</operator>
<name><name>aclent_a</name><operator>-&gt;</operator><name>a_perm</name></name> <operator>!=</operator> <name><name>aclent_b</name><operator>-&gt;</operator><name>a_perm</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ace_a</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>ace_t</name> <operator>*</operator><operator>)</operator><name>acl_a</name><operator>)</operator><index>[<expr><name>e</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>ace_b</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>ace_t</name> <operator>*</operator><operator>)</operator><name>acl_b</name><operator>)</operator><index>[<expr><name>e</name></expr>]</index></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ace_a</name><operator>-&gt;</operator><name>a_who</name></name> <operator>!=</operator> <name><name>ace_b</name><operator>-&gt;</operator><name>a_who</name></name> <operator>||</operator>
<name><name>ace_a</name><operator>-&gt;</operator><name>a_access_mask</name></name> <operator>!=</operator> <name><name>ace_b</name><operator>-&gt;</operator><name>a_access_mask</name></name> <operator>||</operator>
<name><name>ace_a</name><operator>-&gt;</operator><name>a_flags</name></name> <operator>!=</operator> <name><name>ace_b</name><operator>-&gt;</operator><name>a_flags</name></name> <operator>||</operator>
<name><name>ace_a</name><operator>-&gt;</operator><name>a_type</name></name> <operator>!=</operator> <name><name>ace_b</name><operator>-&gt;</operator><name>a_type</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:if>
<expr_stmt><expr><name>richacl_a</name> <operator>=</operator> <call><name>richacl_get_file</name><argument_list>(<argument><expr><name>path_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_LIBACL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>richacl_a</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>errno</name> <operator>==</operator> <name>ENODATA</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOTSUP</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOSYS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"richacl_get_file() error: %s (%s)"</literal></expr></argument>, <argument><expr><name>path_a</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assert</name><argument_list>(<argument><expr><name>richacl_a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>richacl_a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>richacl_b</name> <operator>=</operator> <call><name>richacl_get_file</name><argument_list>(<argument><expr><name>path_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>richacl_b</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>errno</name> <operator>==</operator> <name>ENODATA</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOTSUP</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOSYS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>richacl_free</name><argument_list>(<argument><expr><name>richacl_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"richacl_get_file() error: %s (%s)"</literal></expr></argument>, <argument><expr><name>path_b</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assert</name><argument_list>(<argument><expr><name>richacl_b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>richacl_free</name><argument_list>(<argument><expr><name>richacl_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>richacl_compare</name><argument_list>(<argument><expr><name>richacl_a</name></expr></argument>, <argument><expr><name>richacl_b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>richacl_free</name><argument_list>(<argument><expr><name>richacl_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>richacl_free</name><argument_list>(<argument><expr><name>richacl_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name> <operator>||</operator> <name>ARCHIVE_ACL_FREEBSD</name> <operator>||</operator> <name>ARCHIVE_ACL_LIBACL</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<expr_stmt><expr><name>is_nfs4</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acl_a</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><name>path_a</name></expr></argument>, <argument><expr><name>ACL_TYPE_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:elif>
<expr_stmt><expr><name>acl_a</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><name>path_a</name></expr></argument>, <argument><expr><name>ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_nfs4</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>acl_a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>acl_a</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><name>path_a</name></expr></argument>, <argument><expr><name>ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_file() error: %s (%s)"</literal></expr></argument>, <argument><expr><name>path_a</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assert</name><argument_list>(<argument><expr><name>acl_a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<expr_stmt><expr><name>acl_b</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><name>path_b</name></expr></argument>, <argument><expr><name>ACL_TYPE_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:elif>
<expr_stmt><expr><name>acl_b</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><name>path_b</name></expr></argument>, <argument><expr><name>ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>acl_b</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_nfs4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>acl_b</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><name>path_b</name></expr></argument>, <argument><expr><name>ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_file() error: %s (%s)"</literal></expr></argument>, <argument><expr><name>path_b</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>assert</name><argument_list>(<argument><expr><name>acl_b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>acl_get_entry</name><argument_list>(<argument><expr><name>acl_a</name></expr></argument>, <argument><expr><name>ACL_FIRST_ENTRY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclent_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>acl_get_entry</name><argument_list>(<argument><expr><name>acl_b</name></expr></argument>, <argument><expr><name>ACL_FIRST_ENTRY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclent_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<while>while <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compare_acl_entry</name><argument_list>(<argument><expr><name>aclent_a</name></expr></argument>, <argument><expr><name>aclent_b</name></expr></argument>, <argument><expr><name>is_nfs4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>acl_get_entry</name><argument_list>(<argument><expr><name>acl_a</name></expr></argument>, <argument><expr><name>ACL_NEXT_ENTRY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclent_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>acl_get_entry</name><argument_list>(<argument><expr><name>acl_b</name></expr></argument>, <argument><expr><name>ACL_NEXT_ENTRY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclent_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>exit_free</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>acl_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>acl_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_option_acls</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_SUPPORT</name></expr></cpp:if>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"ACLs are not supported on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>acltype</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assertMakeFile</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acltype</name> <operator>=</operator> <call><name>setTestAcl</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acltype</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"Can't write ACLs on the filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -c --no-mac-metadata --acls -f acls.tar f &gt;acls.out 2&gt;acls.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -c --no-mac-metadata --no-acls -f noacls.tar f &gt;noacls.out 2&gt;noacls.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"acls_acls"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_inheritance_flags</name><argument_list>(<argument><expr><literal type="string">"acls_acls"</literal></expr></argument>, <argument><expr><name>acltype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -x -C acls_acls --no-same-permissions --acls -f acls.tar &gt;acls_acls.out 2&gt;acls_acls.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compare_acls</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"acls_acls/f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"acls_noacls"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_inheritance_flags</name><argument_list>(<argument><expr><literal type="string">"acls_noacls"</literal></expr></argument>, <argument><expr><name>acltype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -x -C acls_noacls -p --no-acls -f acls.tar &gt;acls_noacls.out 2&gt;acls_noacls.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compare_acls</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"acls_noacls/f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"noacls_acls"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_inheritance_flags</name><argument_list>(<argument><expr><literal type="string">"noacls_acls"</literal></expr></argument>, <argument><expr><name>acltype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -x -C noacls_acls --no-same-permissions --acls -f noacls.tar &gt;noacls_acls.out 2&gt;noacls_acls.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compare_acls</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"noacls_acls/f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"noacls_noacls"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_inheritance_flags</name><argument_list>(<argument><expr><literal type="string">"noacls_noacls"</literal></expr></argument>, <argument><expr><name>acltype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -x -C noacls_noacls -p --no-acls -f noacls.tar &gt;noacls_noacls.out 2&gt;noacls_noacls.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compare_acls</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"noacls_noacls/f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
</unit>
