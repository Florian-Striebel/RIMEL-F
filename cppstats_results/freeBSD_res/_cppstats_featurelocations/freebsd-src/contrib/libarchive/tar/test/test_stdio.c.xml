<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/tar/test/test_stdio.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_stdio</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>filelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assertUmask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>assertMakeFile</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertMakeHardlink</name><argument_list>(<argument><expr><literal type="string">"l"</literal></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>filelist</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"filelist"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>filelist</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>filelist</name></expr></argument>, <argument><expr><literal type="string">"f\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>filelist</name></expr></argument>, <argument><expr><literal type="string">"l\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>filelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s cf archive f l &gt;cf.out 2&gt;cf.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"cf.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"cf.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s cvf archive f l &gt;cvf.out 2&gt;cvf.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"'cv' writes filenames to stderr, nothing to stdout (SUSv2)\n"</literal>
<literal type="string">"Note that GNU tar writes the file list to stdout by default."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"cvf.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s cvf - f l &gt;cvf-.out 2&gt;cvf-.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"cvf - should write archive to stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"cvf - should write file list to stderr (SUSv2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s tf archive &gt;tf.out 2&gt;tf.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tf.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"'t' mode should write results to stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s tvf archive &gt;tvf.out 2&gt;tvf.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tvf.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"'tv' mode should write results to stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s tvf - &lt; archive &gt;tvf-.out 2&gt;tvf-.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tvf-.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s xf archive &gt;xf.out 2&gt;xf.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"xf.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"xf.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s xvf archive &gt;xvf.out 2&gt;xvf.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"xvf.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s xvOf archive &gt;xvOf.out 2&gt;xvOf.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>slurpfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"xvOf.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s xvf - &lt; archive &gt;xvf-.out 2&gt;xvf-.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"xvf-.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
