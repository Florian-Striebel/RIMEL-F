<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/tar/test/test_missing_file.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_missing_file</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>invalid_stderr</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"INTERNAL ERROR"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assertMakeFile</name><argument_list>(<argument><expr><literal type="string">"file1"</literal></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><literal type="string">"file1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertMakeFile</name><argument_list>(<argument><expr><literal type="string">"file2"</literal></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><literal type="string">"file2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -cf archive.tar file1 file2 2&gt;stderr1"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"stderr1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>!=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -cf archive.tar file1 file2 file3 2&gt;stderr2"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileContainsNoInvalidStrings</name><argument_list>(<argument><expr><literal type="string">"stderr2"</literal></expr></argument>, <argument><expr><name>invalid_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>!=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -cf archive.tar 2&gt;stderr3"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileContainsNoInvalidStrings</name><argument_list>(<argument><expr><literal type="string">"stderr3"</literal></expr></argument>, <argument><expr><name>invalid_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>!=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -cf archive.tar file3 file4 2&gt;stderr4"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileContainsNoInvalidStrings</name><argument_list>(<argument><expr><literal type="string">"stderr4"</literal></expr></argument>, <argument><expr><name>invalid_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
