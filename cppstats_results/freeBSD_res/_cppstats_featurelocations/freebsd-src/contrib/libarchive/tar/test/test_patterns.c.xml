<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/tar/test/test_patterns.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_patterns</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reffile2</name> <init>= <expr><literal type="string">"test_patterns_2.tar"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reffile3</name> <init>= <expr><literal type="string">"test_patterns_3.tar"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reffile4</name> <init>= <expr><literal type="string">"test_patterns_4.tar"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>tar2aExpected</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"/tmp/foo/bar/"</literal></expr>,
<expr><literal type="string">"/tmp/foo/bar/baz"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>











<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s cfv tar1.tgz foo &gt; tar1a.out 2&gt; tar1a.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s xv --no-same-owner -f tar1.tgz foo bar &gt; tar1b.out 2&gt; tar1b.err"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"tar should return non-zero because a file was given on the command line that's not in the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><name>reffile2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s tf %s /tmp/foo/bar &gt; tar2a.out 2&gt; tar2a.err"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>, <argument><expr><name>reffile2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileContainsLinesAnyOrder</name><argument_list>(<argument><expr><literal type="string">"tar2a.out"</literal></expr></argument>, <argument><expr><name>tar2aExpected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tar2a.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><name>reffile3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s x --no-same-owner -f %s tmp/foo/bar &gt; tar3a.out 2&gt; tar3a.err"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>, <argument><expr><name>reffile3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tar3a.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertNonEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tar3a.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s x --no-same-owner -f %s /tmp/foo/baz &gt; tar3b.out 2&gt; tar3b.err"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>, <argument><expr><name>reffile3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tar3b.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertNonEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tar3b.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s x --no-same-owner -f %s ./tmp/foo/bar &gt; tar3c.out 2&gt; tar3c.err"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>, <argument><expr><name>reffile3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tar3c.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertNonEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tar3c.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s x --no-same-owner -f %s ./tmp/foo/baz &gt; tar3d.out 2&gt; tar3d.err"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>, <argument><expr><name>reffile3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tar3d.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tar3d.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileExists</name><argument_list>(<argument><expr><literal type="string">"tmp/foo/baz/bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><name>reffile4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s x --no-same-owner -f %s -C tmp &gt; tar4.out 2&gt; tar4.err"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>, <argument><expr><name>reffile4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tar4.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertNonEmptyFile</name><argument_list>(<argument><expr><literal type="string">"tar4.err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;=</operator> <literal type="number">54</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>file_a</name><index>[]</index></name> <init>= <expr><literal type="string">"tmp/fileXX"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>file_b1</name><index>[]</index></name> <init>= <expr><literal type="string">"tmp/server/share/fileXX"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>file_b2</name><index>[]</index></name> <init>= <expr><literal type="string">"tmp/server\\share\\fileXX"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>file_c</name><index>[]</index></name> <init>= <expr><literal type="string">"tmp/../fileXX"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>file_d</name><index>[]</index></name> <init>= <expr><literal type="string">"tmp/../../fileXX"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xsize</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">15</literal></expr>:</case> <case>case <expr><literal type="number">18</literal></expr>:</case>





<expr_stmt><expr><name>filex</name> <operator>=</operator> <name>file_b1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>file_b1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">35</literal></expr>:</case> <case>case <expr><literal type="number">38</literal></expr>:</case> <case>case <expr><literal type="number">52</literal></expr>:</case>






<expr_stmt><expr><name>filex</name> <operator>=</operator> <name>file_b2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>file_b2</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>filex</name> <operator>=</operator> <name>file_a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>file_a</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>filex</name><index>[<expr><name>xsize</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>r</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filex</name><index>[<expr><name>xsize</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>r</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">5</literal></expr>:</case> <case>case <expr><literal type="number">6</literal></expr>:</case> <case>case <expr><literal type="number">17</literal></expr>:</case> <case>case <expr><literal type="number">20</literal></expr>:</case> <case>case <expr><literal type="number">25</literal></expr>:</case>
<case>case <expr><literal type="number">26</literal></expr>:</case> <case>case <expr><literal type="number">37</literal></expr>:</case> <case>case <expr><literal type="number">40</literal></expr>:</case> <case>case <expr><literal type="number">43</literal></expr>:</case> <case>case <expr><literal type="number">54</literal></expr>:</case>













<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><name>filex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">6</literal> <operator>||</operator> <name>r</name> <operator>==</operator> <literal type="number">26</literal> <operator>||</operator> <name>r</name> <operator>==</operator> <literal type="number">43</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filex</name> <operator>=</operator> <name>file_d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>file_d</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>filex</name> <operator>=</operator> <name>file_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>file_c</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>filex</name><index>[<expr><name>xsize</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>r</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filex</name><index>[<expr><name>xsize</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>r</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><name>filex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>assertFileExists</name><argument_list>(<argument><expr><name>filex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block>
</unit>
