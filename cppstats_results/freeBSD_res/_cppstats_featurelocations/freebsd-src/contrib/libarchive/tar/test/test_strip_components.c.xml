<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/tar/test/test_strip_components.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_strip_components</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"d0"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertChdir</name><argument_list>(<argument><expr><literal type="string">"d0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"d1"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"d1/d2"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"d1/d2/d3"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertMakeFile</name><argument_list>(<argument><expr><literal type="string">"d1/d2/f1"</literal></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertMakeHardlink</name><argument_list>(<argument><expr><literal type="string">"l1"</literal></expr></argument>, <argument><expr><literal type="string">"d1/d2/f1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertMakeHardlink</name><argument_list>(<argument><expr><literal type="string">"d1/l2"</literal></expr></argument>, <argument><expr><literal type="string">"d1/d2/f1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>canSymlink</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assertMakeSymlink</name><argument_list>(<argument><expr><literal type="string">"s1"</literal></expr></argument>, <argument><expr><literal type="string">"d1/d2/f1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertMakeSymlink</name><argument_list>(<argument><expr><literal type="string">"d1/s2"</literal></expr></argument>, <argument><expr><literal type="string">"d2/f1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assertChdir</name><argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>canSymlink</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -cf test.tar d0/l1 d0/s1 d0/d1"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -cf test.tar d0/l1 d0/d1"</literal></expr></argument>,
<argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"target"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -x -C target --strip-components 2 "</literal>
<literal type="string">"-f test.tar"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/ is too short and should not get restored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target/d0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/d1/ is too short and should not get restored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target/d1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/s1 is too short and should not get restored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target/s1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/d1/s2 is a symlink to something that won't be extracted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>canSymlink</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertIsSymlink</name><argument_list>(<argument><expr><literal type="string">"target/s2"</literal></expr></argument>, <argument><expr><literal type="string">"d2/f1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target/s2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/d1/d2 should be extracted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertIsDir</name><argument_list>(<argument><expr><literal type="string">"target/d2"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
























<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/l1 is too short and should not get restored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target/l1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/d1/l2 is a hardlink to file whose name was too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target/l2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/d1/d2/f1 is a hardlink to file whose name was too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target/d2/f1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>canSymlink</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s --strip-components 2 -cf test2.tar "</literal>
<literal type="string">"d0/l1 d0/s1 d0/d1"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s --strip-components 2 -cf test2.tar "</literal>
<literal type="string">"d0/l1 d0/d1"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"target2"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>systemf</name><argument_list>(<argument><expr><literal type="string">"%s -x -C target2 -f test2.tar"</literal></expr></argument>, <argument><expr><name>testprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/ is too short and should not have been archived"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target2/d0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/d1/ is too short and should not have been archived"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target2/d1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/s1 is too short and should not get restored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target/s1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>canSymlink</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/d1/s2 is a symlink to something included in archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertIsSymlink</name><argument_list>(<argument><expr><literal type="string">"target2/s2"</literal></expr></argument>, <argument><expr><literal type="string">"d2/f1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/d1/d2 should be archived"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertIsDir</name><argument_list>(<argument><expr><literal type="string">"target2/d2"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/l1 is too short and should not have been archived"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target/l1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/d1/l2 is a hardlink to file whose name was too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target/l2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"d0/d1/d2/f1 is a hardlink to file whose name was too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertFileNotExists</name><argument_list>(<argument><expr><literal type="string">"target/d2/f1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
