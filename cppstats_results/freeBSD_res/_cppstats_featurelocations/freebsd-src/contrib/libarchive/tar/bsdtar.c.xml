<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/tar/bsdtar.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsdtar_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_STAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COPYFILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;copyfile.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PATHS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;paths.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsdtar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"err.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PATH_DEFTAPE</name></cpp:macro> <cpp:value>"/dev/st0"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PATH_DEFTAPE</name></cpp:macro> <cpp:value>"\\\\.\\tape0"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_PATH_DEFTAPE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PATH_DEFTAPE</name></cpp:macro> <cpp:value>"-"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_PATH_DEFTAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PATH_DEFTAPE</name></cpp:macro> <cpp:value>"/dev/tape"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>_CRT_glob</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGACTION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIGINFO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>siginfo_occurred</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>siginfo_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sig</name></expr>;</expr_stmt>
<expr_stmt><expr><name>siginfo_occurred</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>need_report</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>siginfo_occurred</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>siginfo_occurred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type>
<name>need_report</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>long_help</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>__LA_DEAD</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>only_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>opt</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>version</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>__LA_DEAD</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECURITY</name></cpp:macro> <cpp:value>(ARCHIVE_EXTRACT_SECURE_SYMLINKS | ARCHIVE_EXTRACT_SECURE_NODOTDOT)</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>vcs_files</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"CVS"</literal></expr>, <expr><literal type="string">".cvsignore"</literal></expr>,

<expr><literal type="string">"RCS"</literal></expr>,

<expr><literal type="string">"SCCS"</literal></expr>,

<expr><literal type="string">".svn"</literal></expr>,

<expr><literal type="string">".git"</literal></expr>, <expr><literal type="string">".gitignore"</literal></expr>, <expr><literal type="string">".gitattributes"</literal></expr>, <expr><literal type="string">".gitmodules"</literal></expr>,

<expr><literal type="string">".arch-ids"</literal></expr>, <expr><literal type="string">"{arch}"</literal></expr>, <expr><literal type="string">"=RELEASE-ID"</literal></expr>, <expr><literal type="string">"=meta-update"</literal></expr>, <expr><literal type="string">"=update"</literal></expr>,

<expr><literal type="string">".bzr"</literal></expr>, <expr><literal type="string">".bzrignore"</literal></expr>, <expr><literal type="string">".bzrtags"</literal></expr>,

<expr><literal type="string">".hg"</literal></expr>, <expr><literal type="string">".hgignore"</literal></expr>, <expr><literal type="string">".hgtags"</literal></expr>,

<expr><literal type="string">"_darcs"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl>, <decl><type ref="prev"/><name>bsdtar_storage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>compression</name></decl>, <decl><type ref="prev"/><name>compression2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compression_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>compression2_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compress_program</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>possible_help_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>





<expr_stmt><expr><name>bsdtar</name> <operator>=</operator> <operator>&amp;</operator><name>bsdtar_storage</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bsdtar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>compression</name> <operator>=</operator> <name>compression2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>compression_name</name> <operator>=</operator> <name>compression2_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compress_program</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGACTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>siginfo_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"sigaction(SIGINFO) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"sigaction(SIGUSR1) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_IGN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>lafe_setprogname</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">"bsdtar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SETLOCALE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Failed to set default locale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NL_LANGINFO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_D_MD_ORDER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>day_first</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>D_MD_ORDER</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>possible_help_request</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>user_uid</name></name> <operator>=</operator> <call><name>geteuid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TAPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name>_PATH_DEFTAPE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>bytes_per_block</name></name> <operator>=</operator> <name>DEFAULT_BYTES_PER_BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>=</operator> <name>ARCHIVE_EXTRACT_TIME</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>SECURITY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>user_uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_OWNER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_PERM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_ACL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_FFLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_MAC_METADATA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>|=</operator> <name>ARCHIVE_READDISK_MAC_COPYFILE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COPYFILE_DISABLE_VAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><name>COPYFILE_DISABLE_VAR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_READDISK_MAC_COPYFILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>|=</operator> <name>ARCHIVE_READDISK_NO_ACL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name> <operator>=</operator> <call><name>archive_match_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name> <operator>=</operator> <call><name>cset_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>







<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>bsdtar_getopt</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_AUTO_COMPRESS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_ACLS</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_ACL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_READDISK_NO_ACL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_ACLS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <name>t</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>t</name> <operator>&gt;</operator> <literal type="number">8192</literal> <operator>||</operator>
<operator>*</operator><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>tptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>*</operator><name>tptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid or out of range "</literal>
<literal type="string">"(1..8192) argument to -b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>bytes_per_block</name></name> <operator>=</operator> <literal type="number">512</literal> <operator>*</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>bytes_per_block</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_B64ENCODE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>compression2</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Can't specify both --uuencode and "</literal>
<literal type="string">"--b64encode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>compression2</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compression2_name</name> <operator>=</operator> <literal type="string">"b64encode"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Meaningless option: -C ''"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_chdir</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_CHECK_LINKS</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_WARN_LINKS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_CHROOT</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_CHROOT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_CLEAR_NOCHANGE_FFLAGS</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator>
<name>ARCHIVE_EXTRACT_CLEAR_NOCHANGE_FFLAGS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_EXCLUDE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_exclude_pattern</name><argument_list>(
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Couldn't exclude %s\n"</literal></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_EXCLUDE_VCS</name></expr>:</case>
<for>for<control>(<init><expr><name>t</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>vcs_files</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_exclude_pattern</name><argument_list>(
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>,
<argument><expr><name><name>vcs_files</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Couldn't "</literal>
<literal type="string">"exclude %s\n"</literal></expr></argument>, <argument><expr><name><name>vcs_files</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>OPTION_FFLAGS</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_FFLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_READDISK_NO_FFLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_FFLAGS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_FORMAT</name></expr>:</case>
<expr_stmt><expr><call><name>cset_set_format</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_GID</name></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <name>t</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator>
<name>tptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>tptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid argument to --gid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_GNAME</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>gname</name></name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_GRZIP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Can't specify both -%c and -%c"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>,
<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>compression</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compression_name</name> <operator>=</operator> <literal type="string">"grzip"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>symlink_mode</name></name> <operator>=</operator> <literal type="char">'H'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>symlink_mode</name></name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>possible_help_request</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_HELP</name></expr>:</case>
<expr_stmt><expr><call><name>long_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_HFS_COMPRESSION</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator>
<name>ARCHIVE_EXTRACT_HFS_COMPRESSION_FORCED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_IGNORE_ZEROS</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_IGNORE_ZEROS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>










<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>names_from_file</name></name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_INCLUDE</name></expr>:</case>





<if_stmt><if>if <condition>(<expr><call><name>archive_match_include_pattern</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Failed to add %s to inclusion list"</literal></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Can't specify both -%c and -%c"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>,
<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>compression</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compression_name</name> <operator>=</operator> <literal type="string">"bzip2"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Can't specify both -%c and -%c"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>,
<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>compression</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compression_name</name> <operator>=</operator> <literal type="string">"xz"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_NO_OVERWRITE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_KEEP_NEWER_FILES</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>symlink_mode</name></name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_WARN_LINKS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_LRZIP</name></expr>:</case>
<case>case <expr><name>OPTION_LZ4</name></expr>:</case>
<case>case <expr><name>OPTION_LZIP</name></expr>:</case>
<case>case <expr><name>OPTION_LZMA</name></expr>:</case>
<case>case <expr><name>OPTION_LZOP</name></expr>:</case>
<case>case <expr><name>OPTION_ZSTD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Can't specify both -%c and -%c"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>,
<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>compression</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OPTION_LRZIP</name></expr>:</case> <expr_stmt><expr><name>compression_name</name> <operator>=</operator> <literal type="string">"lrzip"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OPTION_LZ4</name></expr>:</case> <expr_stmt><expr><name>compression_name</name> <operator>=</operator> <literal type="string">"lz4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OPTION_LZIP</name></expr>:</case> <expr_stmt><expr><name>compression_name</name> <operator>=</operator> <literal type="string">"lzip"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OPTION_LZMA</name></expr>:</case> <expr_stmt><expr><name>compression_name</name> <operator>=</operator> <literal type="string">"lzma"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OPTION_LZOP</name></expr>:</case> <expr_stmt><expr><name>compression_name</name> <operator>=</operator> <literal type="string">"lzop"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OPTION_ZSTD</name></expr>:</case> <expr_stmt><expr><name>compression_name</name> <operator>=</operator> <literal type="string">"zstd"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_TIME</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_MAC_METADATA</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>|=</operator> <name>ARCHIVE_READDISK_MAC_COPYFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_MAC_METADATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_MAC_METADATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_NO_SUBDIRS</name></expr>;</expr_stmt>
<break>break;</break>






<case>case <expr><name>OPTION_NEWER_CTIME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_include_date</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_MATCH_CTIME</name> <operator>|</operator> <name>ARCHIVE_MATCH_NEWER</name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Error : %s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NEWER_CTIME_THAN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_include_file_time</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_MATCH_CTIME</name> <operator>|</operator> <name>ARCHIVE_MATCH_NEWER</name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Error : %s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NEWER_MTIME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_include_date</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_MATCH_MTIME</name> <operator>|</operator> <name>ARCHIVE_MATCH_NEWER</name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Error : %s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NEWER_MTIME_THAN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_include_file_time</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_MATCH_MTIME</name> <operator>|</operator> <name>ARCHIVE_MATCH_NEWER</name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Error : %s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NODUMP</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>|=</operator> <name>ARCHIVE_READDISK_HONOR_NODUMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NOPRESERVE_HFS_COMPRESSION</name></expr>:</case>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator>
<name>ARCHIVE_EXTRACT_NO_HFS_COMPRESSION</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NO_ACLS</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_ACL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>|=</operator> <name>ARCHIVE_READDISK_NO_ACL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_NO_ACLS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NO_FFLAGS</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_FFLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>|=</operator> <name>ARCHIVE_READDISK_NO_FFLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_NO_FFLAGS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NO_MAC_METADATA</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_READDISK_MAC_COPYFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_MAC_METADATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_NO_MAC_METADATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NO_SAFE_WRITES</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_SAFE_WRITES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NO_SAME_OWNER</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_OWNER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NO_SAME_PERMISSIONS</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_PERM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_ACL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_FFLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_MAC_METADATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NO_XATTRS</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>|=</operator> <name>ARCHIVE_READDISK_NO_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_NO_XATTRS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NULL</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_NUMERIC_OWNER</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>uname</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>gname</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_NUMERIC_OWNER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_STDOUT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_O</name></expr>;</expr_stmt>
<break>break;</break>






<case>case <expr><name>OPTION_OLDER_CTIME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_include_date</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_MATCH_CTIME</name> <operator>|</operator> <name>ARCHIVE_MATCH_OLDER</name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Error : %s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_OLDER_CTIME_THAN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_include_file_time</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_MATCH_CTIME</name> <operator>|</operator> <name>ARCHIVE_MATCH_OLDER</name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Error : %s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_OLDER_MTIME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_include_date</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_MATCH_MTIME</name> <operator>|</operator> <name>ARCHIVE_MATCH_OLDER</name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Error : %s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_OLDER_MTIME_THAN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_include_file_time</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_MATCH_MTIME</name> <operator>|</operator> <name>ARCHIVE_MATCH_OLDER</name></expr></argument>,
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Error : %s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_ONE_FILE_SYSTEM</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>|=</operator>
<name>ARCHIVE_READDISK_NO_TRAVERSE_MOUNTS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_OPTIONS</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>option_options</name></name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>






case 'P':

break;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SECURITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_ABSOLUTE_PATHS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_PERM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_ACL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_FFLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_MAC_METADATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_PASSPHRASE</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>passphrase</name></name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_POSIX</name></expr>:</case>
<expr_stmt><expr><call><name>cset_set_format</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>, <argument><expr><literal type="string">"pax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_FAST_READ</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_SPARSE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_REGEX_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PCREPOSIX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>add_substitution</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"-s is not supported by this version of bsdtar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>OPTION_SAFE_WRITES</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_SAFE_WRITES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_SAME_OWNER</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_OWNER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_STRIP_COMPONENTS</name></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <name>t</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator>
<name>tptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>tptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid argument to "</literal>
<literal type="string">"--strip-components"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>strip_components</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>names_from_file</name></name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>verbose</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_TOTALS</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_TOTALS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_UNLINK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_UNLINK_FIRST</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_UID</name></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <name>t</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator>
<name>tptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>tptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid argument to --uid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_UNAME</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>uname</name></name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_UUENCODE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>compression2</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Can't specify both --uuencode and "</literal>
<literal type="string">"--b64encode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>compression2</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compression2_name</name> <operator>=</operator> <literal type="string">"uuencode"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>verbose</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_VERSION</name></expr>:</case>
<expr_stmt><expr><call><name>version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>




case 'W':
break;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_INTERACTIVE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>archive_match_exclude_pattern_from_file</name><argument_list>(
<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Error : %s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_XATTRS</name></expr>:</case>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>|=</operator> <name>ARCHIVE_EXTRACT_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_READDISK_NO_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_XATTRS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Can't specify both -%c and -%c"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>,
<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>compression</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compression_name</name> <operator>=</operator> <literal type="string">"bzip2"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Can't specify both -%c and -%c"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>,
<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>compression</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compression_name</name> <operator>=</operator> <literal type="string">"compress"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Can't specify both -%c and -%c"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>,
<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>compression</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compression_name</name> <operator>=</operator> <literal type="string">"gzip"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_USE_COMPRESS_PROGRAM</name></expr>:</case>
<expr_stmt><expr><name>compress_program</name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>argument</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>possible_help_request</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>long_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Must specify one of -c, -r, -t, -u, -x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_AUTO_COMPRESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"-a"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_READDISK_NO_TRAVERSE_MOUNTS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--one-file-system"</literal></expr></argument>, <argument><expr><literal type="string">"cru"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_FAST_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--fast-read"</literal></expr></argument>, <argument><expr><literal type="string">"xt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_HFS_COMPRESSION_FORCED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--hfsCompression"</literal></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_NO_HFS_COMPRESSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--nopreserveHFSCompression"</literal></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>readdisk_flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_READDISK_HONOR_NODUMP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--nodump"</literal></expr></argument>, <argument><expr><literal type="string">"cru"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_ACLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--acls"</literal></expr></argument>, <argument><expr><literal type="string">"crux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_NO_ACLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--no-acls"</literal></expr></argument>, <argument><expr><literal type="string">"crux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_XATTRS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--xattrs"</literal></expr></argument>, <argument><expr><literal type="string">"crux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_NO_XATTRS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--no-xattrs"</literal></expr></argument>, <argument><expr><literal type="string">"crux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_FFLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--fflags"</literal></expr></argument>, <argument><expr><literal type="string">"crux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_NO_FFLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--no-fflags"</literal></expr></argument>, <argument><expr><literal type="string">"crux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_MAC_METADATA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--mac-metadata"</literal></expr></argument>, <argument><expr><literal type="string">"crux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_NO_MAC_METADATA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--no-mac-metadata"</literal></expr></argument>, <argument><expr><literal type="string">"crux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_O</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>





<expr_stmt><expr><call><name>cset_set_format</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>, <argument><expr><literal type="string">"ustar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTFLAG_NO_OWNER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>extract_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ARCHIVE_EXTRACT_OWNER</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"-o"</literal></expr></argument>, <argument><expr><literal type="string">"xc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_STDOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"-O"</literal></expr></argument>, <argument><expr><literal type="string">"xt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_UNLINK_FIRST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"-U"</literal></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_WARN_LINKS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--check-links"</literal></expr></argument>, <argument><expr><literal type="string">"cr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_AUTO_COMPRESS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>cset_auto_compress</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>compression</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>compression2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compress_program</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--use-compress-program"</literal></expr></argument>, <argument><expr><literal type="string">"cxt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cset_add_filter_program</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>, <argument><expr><name>compress_program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compression</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>compression2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>compression</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'J'</literal></expr>:</case> <case>case <expr><literal type="char">'j'</literal></expr>:</case> <case>case <expr><literal type="char">'y'</literal></expr>:</case> <case>case <expr><literal type="char">'Z'</literal></expr>:</case> <case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"-?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>compression</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>compression_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"cxt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cset_add_filter</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>, <argument><expr><name>compression_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>compression2</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>compression2_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"cxt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cset_add_filter</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>, <argument><expr><name>compression2_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cset_get_format</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><literal type="string">"--format"</literal></expr></argument>, <argument><expr><literal type="string">"cru"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>symlink_mode</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"-?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>symlink_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"cru"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><call><name>archive_match_set_inclusion_recursion</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>,
<argument><expr><operator>!</operator><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTFLAG_NO_SUBDIRS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>tar_mode_c</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><call><name>tar_mode_r</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><call><name>tar_mode_t</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><call><name>tar_mode_u</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><call><name>tar_mode_x</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>archive_match_free</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>matching</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_REGEX_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PCREPOSIX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cleanup_substitution</name><argument_list>(<argument><expr><name>bsdtar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>cset_free</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>cset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>passphrase_free</name><argument_list>(<argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>ppbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>return_value</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_warnc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Error exit delayed from previous errors."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>bsdtar</name><operator>-&gt;</operator><name>return_value</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bsdtar</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>bsdtar</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>opt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Can't specify both -%c and -%c"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>only_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>valid_modes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>valid_modes</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Option %s is not permitted in mode -%c"</literal></expr></argument>,
<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>bsdtar</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lafe_getprogname</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" List: %s -tf &lt;archive-filename&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" Extract: %s -xf &lt;archive-filename&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" Create: %s -cf &lt;archive-filename&gt; [filenames...]\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" Help: %s --help\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"bsdtar %s - %s \n"</literal></expr></argument>,
<argument><expr><name>BSDTAR_VERSION_STRING</name></expr></argument>,
<argument><expr><call><name>archive_version_details</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_help_msg</name> <init>=
<expr><literal type="string">"First option must be a mode specifier:\n"</literal>
<literal type="string">" -c Create -r Add/Replace -t List -u Update -x Extract\n"</literal>
<literal type="string">"Common Options:\n"</literal>
<literal type="string">" -b #Use #512-byte records per I/O block\n"</literal>
<literal type="string">" -f &lt;filename&gt; Location of archive (default "</literal> <name>_PATH_DEFTAPE</name> <literal type="string">")\n"</literal>
<literal type="string">" -v Verbose\n"</literal>
<literal type="string">" -w Interactive\n"</literal>
<literal type="string">"Create: %p -c [options] [&lt;file&gt; | &lt;dir&gt; | @&lt;archive&gt; | -C &lt;dir&gt; ]\n"</literal>
<literal type="string">" &lt;file&gt;, &lt;dir&gt; add these items to archive\n"</literal>
<literal type="string">" -z, -j, -J, --lzma Compress archive with gzip/bzip2/xz/lzma\n"</literal>
<literal type="string">" --format {ustar|pax|cpio|shar} Select archive format\n"</literal>
<literal type="string">" --exclude &lt;pattern&gt; Skip files that match pattern\n"</literal>
<literal type="string">" -C &lt;dir&gt; Change to &lt;dir&gt; before processing remaining files\n"</literal>
<literal type="string">" @&lt;archive&gt; Add entries from &lt;archive&gt; to output\n"</literal>
<literal type="string">"List: %p -t [options] [&lt;patterns&gt;]\n"</literal>
<literal type="string">" &lt;patterns&gt; If specified, list only entries that match\n"</literal>
<literal type="string">"Extract: %p -x [options] [&lt;patterns&gt;]\n"</literal>
<literal type="string">" &lt;patterns&gt; If specified, extract only entries that match\n"</literal>
<literal type="string">" -k Keep (don't overwrite) existing files\n"</literal>
<literal type="string">" -m Don't restore modification times\n"</literal>
<literal type="string">" -O Write entries to stdout, don't restore to disk\n"</literal>
<literal type="string">" -p Restore permissions (including ACLs, owner, file flags)\n"</literal></expr></init></decl>;</decl_stmt>












<function><type><specifier>static</specifier> <name>void</name></type>
<name>long_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prog</name> <operator>=</operator> <call><name>lafe_getprogname</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>prog</name></expr></argument>,<argument><expr><literal type="string">"bsdtar"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"(bsdtar)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s: manipulate archive files\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>long_help_msg</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
