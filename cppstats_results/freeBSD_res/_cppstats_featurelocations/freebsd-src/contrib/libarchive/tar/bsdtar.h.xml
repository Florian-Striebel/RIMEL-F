<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/tar/bsdtar.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BSDTAR_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSDTAR_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsdtar_platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_BYTES_PER_BLOCK</name></cpp:macro> <cpp:value>(20*512)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENV_READER_OPTIONS</name></cpp:macro> <cpp:value>"TAR_READER_OPTIONS"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENV_WRITER_OPTIONS</name></cpp:macro> <cpp:value>"TAR_WRITER_OPTIONS"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNORE_WRONG_MODULE_NAME</name></cpp:macro> <cpp:value>"__ignore_wrong_module_name__,"</cpp:value></cpp:define>

<struct_decl>struct <name>creation_set</name>;</struct_decl>








<struct>struct <name>bsdtar</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pending_chdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>names_from_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_in_last_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extract_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>readdisk_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strip_components</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passphrase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>symlink_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>day_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type><name>cset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>getopt_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>getopt_word</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argument</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>gs_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>user_uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>return_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>warned_lead_slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>next_line_is_dir</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>diskreader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type><name>resolver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_dir</name></name> <modifier>*</modifier></type><name>archive_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>name_cache</name></name> <modifier>*</modifier></type><name>gname_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buff_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>matching</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>security</name></name> <modifier>*</modifier></type><name>security</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>name_cache</name></name> <modifier>*</modifier></type><name>uname_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>siginfo_data</name></name> <modifier>*</modifier></type><name>siginfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>substitution</name></name> <modifier>*</modifier></type><name>substitution</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ppbuff</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_AUTO_COMPRESS</name></cpp:macro> <cpp:value>(0x00000001)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_ABSOLUTE_PATHS</name></cpp:macro> <cpp:value>(0x00000002)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_CHROOT</name></cpp:macro> <cpp:value>(0x00000004)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_FAST_READ</name></cpp:macro> <cpp:value>(0x00000008)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_IGNORE_ZEROS</name></cpp:macro> <cpp:value>(0x00000010)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_INTERACTIVE</name></cpp:macro> <cpp:value>(0x00000020)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_NO_OWNER</name></cpp:macro> <cpp:value>(0x00000040)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_NO_SUBDIRS</name></cpp:macro> <cpp:value>(0x00000080)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_NULL</name></cpp:macro> <cpp:value>(0x00000100)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_NUMERIC_OWNER</name></cpp:macro> <cpp:value>(0x00000200)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_O</name></cpp:macro> <cpp:value>(0x00000400)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_STDOUT</name></cpp:macro> <cpp:value>(0x00000800)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_TOTALS</name></cpp:macro> <cpp:value>(0x00001000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_UNLINK_FIRST</name></cpp:macro> <cpp:value>(0x00002000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_WARN_LINKS</name></cpp:macro> <cpp:value>(0x00004000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_NO_XATTRS</name></cpp:macro> <cpp:value>(0x00008000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_XATTRS</name></cpp:macro> <cpp:value>(0x00010000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_NO_ACLS</name></cpp:macro> <cpp:value>(0x00020000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_ACLS</name></cpp:macro> <cpp:value>(0x00040000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_NO_FFLAGS</name></cpp:macro> <cpp:value>(0x00080000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_FFLAGS</name></cpp:macro> <cpp:value>(0x00100000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_NO_MAC_METADATA</name></cpp:macro> <cpp:value>(0x00200000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTFLAG_MAC_METADATA</name></cpp:macro> <cpp:value>(0x00400000)</cpp:value></cpp:define>


<enum>enum <block>{
<decl><name>OPTION_ACLS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>OPTION_B64ENCODE</name></decl>,
<decl><name>OPTION_CHECK_LINKS</name></decl>,
<decl><name>OPTION_CHROOT</name></decl>,
<decl><name>OPTION_CLEAR_NOCHANGE_FFLAGS</name></decl>,
<decl><name>OPTION_EXCLUDE</name></decl>,
<decl><name>OPTION_EXCLUDE_VCS</name></decl>,
<decl><name>OPTION_FFLAGS</name></decl>,
<decl><name>OPTION_FORMAT</name></decl>,
<decl><name>OPTION_GID</name></decl>,
<decl><name>OPTION_GNAME</name></decl>,
<decl><name>OPTION_GRZIP</name></decl>,
<decl><name>OPTION_HELP</name></decl>,
<decl><name>OPTION_HFS_COMPRESSION</name></decl>,
<decl><name>OPTION_IGNORE_ZEROS</name></decl>,
<decl><name>OPTION_INCLUDE</name></decl>,
<decl><name>OPTION_KEEP_NEWER_FILES</name></decl>,
<decl><name>OPTION_LRZIP</name></decl>,
<decl><name>OPTION_LZ4</name></decl>,
<decl><name>OPTION_LZIP</name></decl>,
<decl><name>OPTION_LZMA</name></decl>,
<decl><name>OPTION_LZOP</name></decl>,
<decl><name>OPTION_MAC_METADATA</name></decl>,
<decl><name>OPTION_NEWER_CTIME</name></decl>,
<decl><name>OPTION_NEWER_CTIME_THAN</name></decl>,
<decl><name>OPTION_NEWER_MTIME</name></decl>,
<decl><name>OPTION_NEWER_MTIME_THAN</name></decl>,
<decl><name>OPTION_NODUMP</name></decl>,
<decl><name>OPTION_NOPRESERVE_HFS_COMPRESSION</name></decl>,
<decl><name>OPTION_NO_ACLS</name></decl>,
<decl><name>OPTION_NO_FFLAGS</name></decl>,
<decl><name>OPTION_NO_MAC_METADATA</name></decl>,
<decl><name>OPTION_NO_SAFE_WRITES</name></decl>,
<decl><name>OPTION_NO_SAME_OWNER</name></decl>,
<decl><name>OPTION_NO_SAME_PERMISSIONS</name></decl>,
<decl><name>OPTION_NO_XATTRS</name></decl>,
<decl><name>OPTION_NULL</name></decl>,
<decl><name>OPTION_NUMERIC_OWNER</name></decl>,
<decl><name>OPTION_OLDER_CTIME</name></decl>,
<decl><name>OPTION_OLDER_CTIME_THAN</name></decl>,
<decl><name>OPTION_OLDER_MTIME</name></decl>,
<decl><name>OPTION_OLDER_MTIME_THAN</name></decl>,
<decl><name>OPTION_ONE_FILE_SYSTEM</name></decl>,
<decl><name>OPTION_OPTIONS</name></decl>,
<decl><name>OPTION_PASSPHRASE</name></decl>,
<decl><name>OPTION_POSIX</name></decl>,
<decl><name>OPTION_SAFE_WRITES</name></decl>,
<decl><name>OPTION_SAME_OWNER</name></decl>,
<decl><name>OPTION_STRIP_COMPONENTS</name></decl>,
<decl><name>OPTION_TOTALS</name></decl>,
<decl><name>OPTION_UID</name></decl>,
<decl><name>OPTION_UNAME</name></decl>,
<decl><name>OPTION_USE_COMPRESS_PROGRAM</name></decl>,
<decl><name>OPTION_UUENCODE</name></decl>,
<decl><name>OPTION_VERSION</name></decl>,
<decl><name>OPTION_XATTRS</name></decl>,
<decl><name>OPTION_ZSTD</name></decl>,
}</block>;</enum>

<function_decl><type><name>int</name></type> <name>bsdtar_getopt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>do_chdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>edit_pathname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>need_report</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>pathcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>safe_fprintf</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __LA_PRINTF<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>set_chdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newdir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tar_i64toa</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tar_mode_c</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tar_mode_r</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tar_mode_t</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tar_mode_u</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tar_mode_x</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type><name>bsdtar</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>usage</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>__LA_DEAD</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> <name>yes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __LA_PRINTF<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_REGEX_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PCREPOSIX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>add_substitution</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>apply_substitution</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cleanup_substitution</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>cset_add_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cset_add_filter_program</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cset_auto_compress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cset_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>cset_get_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type><name>cset_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cset_read_support_filter_program</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cset_set_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cset_write_add_filters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>creation_set</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>passphrase_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>passphrase_free</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>list_item_verbose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdtar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
