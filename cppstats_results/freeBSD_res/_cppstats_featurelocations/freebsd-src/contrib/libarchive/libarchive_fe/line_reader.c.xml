<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive_fe/line_reader.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lafe_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"line_reader.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strdup</name></cpp:macro> <cpp:value>_strdup</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<struct>struct <name>lafe_line_reader</name> <block>{
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buff_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>line_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>line_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buff_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nullSeparator</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name><name>struct</name> <name>lafe_line_reader</name></name> <modifier>*</modifier></type>
<name>lafe_line_reader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nullSeparator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lafe_line_reader</name></name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Can't open %s"</literal></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>nullSeparator</name></name> <operator>=</operator> <name>nullSeparator</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>pathname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lr</name><operator>-&gt;</operator><name>f</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Couldn't open %s"</literal></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>buff_length</name></name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>line_end</name></name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff_end</name></name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>lr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>lafe_line_reader_find_eol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lafe_line_reader</name></name> <modifier>*</modifier></type><name>lr</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>line_end</name></name> <operator>+=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>line_end</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>lr</name><operator>-&gt;</operator><name>nullSeparator</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\x0d\x0a"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>lr</name><operator>-&gt;</operator><name>line_end</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>lafe_line_reader_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lafe_line_reader</name></name> <modifier>*</modifier></type><name>lr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name></decl>, <decl><type ref="prev"/><name>bytes_read</name></decl>, <decl><type ref="prev"/><name>new_buff_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<while>while <condition>(<expr><name><name>lr</name><operator>-&gt;</operator><name>line_end</name></name> <operator>&lt;</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_start</name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name> <operator>=</operator> <operator>++</operator><name><name>lr</name><operator>-&gt;</operator><name>line_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lafe_line_reader_find_eol</name><argument_list>(<argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lr</name><operator>-&gt;</operator><name>nullSeparator</name></name> <operator>||</operator> <name><name>line_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>line_start</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>lr</name><operator>-&gt;</operator><name>f</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name> <operator>==</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>line_start</name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff_end</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>line_start</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name> <operator>&gt;</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>,
<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>buff_end</name></name> <operator>-</operator> <name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>buff_end</name></name> <operator>-=</operator> <name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name> <operator>-</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>line_end</name></name> <operator>-=</operator> <name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name> <operator>-</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>new_buff_size</name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff_length</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_buff_size</name> <operator>&lt;=</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Line too long in %s"</literal></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>buff_length</name></name> <operator>=</operator> <name>new_buff_size</name></expr>;</expr_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name>new_buff_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Line too long in %s"</literal></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>buff_end</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <operator>(</operator><name><name>lr</name><operator>-&gt;</operator><name>buff_end</name></name> <operator>-</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>line_end</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <operator>(</operator><name><name>lr</name><operator>-&gt;</operator><name>line_end</name></name> <operator>-</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>line_start</name></name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>bytes_wanted</name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff</name></name> <operator>+</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff_length</name></name> <operator>-</operator> <name><name>lr</name><operator>-&gt;</operator><name>buff_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>buff_end</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>buff_end</name></name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>lr</name><operator>-&gt;</operator><name>buff_end</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lafe_line_reader_find_eol</name><argument_list>(<argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lafe_errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't read %s"</literal></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lr</name><operator>-&gt;</operator><name>f</name></name> <operator>!=</operator> <name>stdin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>lafe_line_reader_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lafe_line_reader</name></name> <modifier>*</modifier></type><name>lr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
