<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/xxhash.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_xxhash.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBLZ4</name></expr></argument>)</argument_list></call></expr></cpp:if>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_FEATURE_UNALIGNED</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_USE_UNALIGNED_ACCESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_FORCE_NATIVE_FORMAT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4127</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_INLINE</name></cpp:macro> <cpp:value>__forceinline</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_INLINE</name></cpp:macro> <cpp:value>inline __attribute__((always_inline))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_INLINE</name></cpp:macro> <cpp:value>inline</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_malloc</name></cpp:macro> <cpp:value>malloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_free</name></cpp:macro> <cpp:value>free</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_memcpy</name></cpp:macro> <cpp:value>memcpy</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>XXH32</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>XXH32_init</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>XXH_errorcode</name></type> <name>XXH32_update</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>XXH32_digest</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>XXH_errorcode</name></type> <name>XXH32_resetState</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH32_SIZEOFSTATE</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{ <expr_stmt><expr><name>long</name> <name>long</name> <name><name>ll</name><index>[<expr><operator>(</operator><name>XXH32_SIZEOFSTATE</name><operator>+</operator><operator>(</operator></expr></index></name>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></expr_stmt>)</block></struct></type>)/sizeof(<name>long</name> <name>long</name>)];</typedef> } XXH32_stateSpace_t<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>XXH32_intermediateDigest</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>uint8_t</name></type> <name>BYTE</name>;</typedef>
<typedef>typedef <type><name>uint16_t</name></type> <name>U16</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>U32</name>;</typedef>
<typedef>typedef <type><name>int32_t</name></type> <name>S32</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>U64</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>BYTE</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>U16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>U32</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>int</name></type> <name>S32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>U64</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XXH_USE_UNALIGNED_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PACKED</name></cpp:macro> <cpp:value>__attribute__ ((packed))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PACKED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XXH_USE_UNALIGNED_ACCESS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__IBMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>1</name><name>)</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>1</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>_U32_S</name> <block>{ <decl_stmt><decl><type><name>U32</name></type> <name>v</name></decl>;</decl_stmt> }</block></struct></type> <name>_PACKED</name> <name>U32_S</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XXH_USE_UNALIGNED_ACCESS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCC_VERSION</name></cpp:macro> <cpp:value>((__GNUC__-0) * 100 + (__GNUC_MINOR__ - 0))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GCC_VERSION</name> <operator>&gt;=</operator> <literal type="number">409</literal></expr></cpp:if>
<macro><name>__attribute__</name><argument_list>(<argument>(__no_sanitize_undefined__)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>U32</name></type> <name>A32</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator> <name>x</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <namespace><specifier>inline</specifier> U32 <name>A32</name>(const <name>void</name><modifier>*</modifier> <name>x</name></namespace></decl>)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>U32_S</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>x</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>v</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_rotl32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_rotl(x,r)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_rotl32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &lt;&lt; r) | (x &gt;&gt; (32 - r)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_swap32</name></cpp:macro> <cpp:value>_byteswap_ulong</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GCC_VERSION</name> <operator>&gt;=</operator> <literal type="number">403</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_swap32</name></cpp:macro> <cpp:value>__builtin_bswap32</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>U32</name></type> <name>XXH_swap32</name> <parameter_list>(<parameter><decl><type><name>U32</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff000000</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x000000ff</literal> <operator>)</operator></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_1</name></cpp:macro> <cpp:value>2654435761U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_2</name></cpp:macro> <cpp:value>2246822519U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_3</name></cpp:macro> <cpp:value>3266489917U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_4</name></cpp:macro> <cpp:value>668265263U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_5</name></cpp:macro> <cpp:value>374761393U</cpp:value></cpp:define>





<typedef>typedef <type><enum>enum <block>{ <decl><name>XXH_bigEndian</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><name>XXH_littleEndian</name><init>=<expr><literal type="number">1</literal></expr></init></decl> }</block></enum></type> <name>XXH_endianess</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XXH_CPU_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_CPU_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>(*(const char*)(&amp;one))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_STATIC_ASSERT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ enum { XXH_static_assert = 1/(!!(c)) }; }</cpp:value></cpp:define>





<typedef>typedef <type><enum>enum <block>{ <decl><name>XXH_aligned</name></decl>, <decl><name>XXH_unaligned</name></decl> }</block></enum></type> <name>XXH_alignment</name>;</typedef>

<function><type><specifier>static</specifier>
<name>FORCE_INLINE</name> <name>U32</name></type> <name>XXH_readLE32_align</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U32</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>, <parameter><decl><type><name>XXH_alignment</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>align</name><operator>==</operator><name>XXH_unaligned</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>endian</name><operator>==</operator><name>XXH_littleEndian</name></expr> ?</condition><then> <expr><call><name>A32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>XXH_swap32</name><argument_list>(<argument><expr><call><name>A32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>endian</name><operator>==</operator><name>XXH_littleEndian</name></expr> ?</condition><then> <expr><operator>*</operator><name>ptr</name></expr> </then><else>: <expr><call><name>XXH_swap32</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>FORCE_INLINE</name> <name>U32</name></type> <name>XXH_readLE32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U32</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>XXH_readLE32_align</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>, <argument><expr><name>XXH_unaligned</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>





<function><type><specifier>static</specifier>
<name>FORCE_INLINE</name> <name>U32</name></type> <name>XXH32_endian_align</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>U32</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>, <parameter><decl><type><name>XXH_alignment</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name>input</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>bEnd</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>h32</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_get32bits</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XXH_readLE32_align((const U32*)p, endian, align)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XXH_ACCEPT_NULL_INPUT_POINTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p</name><operator>==</operator><name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>len</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>bEnd</name><operator>=</operator><name>p</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">16</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>len</name><operator>&gt;=</operator><literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>limit</name> <init>= <expr><name>bEnd</name> <operator>-</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>v1</name> <init>= <expr><name>seed</name> <operator>+</operator> <name>PRIME32_1</name> <operator>+</operator> <name>PRIME32_2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>v2</name> <init>= <expr><name>seed</name> <operator>+</operator> <name>PRIME32_2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>v3</name> <init>= <expr><name>seed</name> <operator>+</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>v4</name> <init>= <expr><name>seed</name> <operator>-</operator> <name>PRIME32_1</name></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><name>v1</name> <operator>+=</operator> <call><name>XXH_get32bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v1</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>+=</operator> <call><name>XXH_get32bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v2</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>+=</operator> <call><name>XXH_get32bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v3</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v4</name> <operator>+=</operator> <call><name>XXH_get32bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v4</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>p</name><operator>&lt;=</operator><name>limit</name></expr>)</condition>;</do>

<expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>h32</name> <operator>=</operator> <name>seed</name> <operator>+</operator> <name>PRIME32_5</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>h32</name> <operator>+=</operator> <operator>(</operator><name>U32</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name><operator>&lt;=</operator><name>bEnd</name><operator>-</operator><literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>h32</name> <operator>+=</operator> <call><name>XXH_get32bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>h32</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_4</name></expr> ;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>p</name><operator>&lt;</operator><name>bEnd</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>h32</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>*</operator> <name>PRIME32_5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>h32</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_1</name></expr> ;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h32</name> <operator>*=</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h32</name> <operator>*=</operator> <name>PRIME32_3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<return>return <expr><name>h32</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>U32</name></type> <name>XXH32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>U32</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

void* state = XXH32_init(seed);
XXH32_update(state, input, len);
return XXH32_digest(state);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>XXH_endianess</name></type> <name>endian_detected</name> <init>= <expr><operator>(</operator><name>XXH_endianess</name><operator>)</operator><name>XXH_CPU_LITTLE_ENDIAN</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XXH_USE_UNALIGNED_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>input</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>endian_detected</name><operator>==</operator><name>XXH_littleEndian</name><operator>)</operator> <operator>||</operator> <name>XXH_FORCE_NATIVE_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>XXH32_endian_align</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>XXH_littleEndian</name></expr></argument>, <argument><expr><name>XXH_aligned</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>XXH32_endian_align</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>XXH_bigEndian</name></expr></argument>, <argument><expr><name>XXH_aligned</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>endian_detected</name><operator>==</operator><name>XXH_littleEndian</name><operator>)</operator> <operator>||</operator> <name>XXH_FORCE_NATIVE_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>XXH32_endian_align</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>XXH_littleEndian</name></expr></argument>, <argument><expr><name>XXH_unaligned</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>XXH32_endian_align</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>XXH_bigEndian</name></expr></argument>, <argument><expr><name>XXH_unaligned</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<struct>struct <name>XXH_state32_t</name>
<block>{
<decl_stmt><decl><type><name>U64</name></type> <name>total_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>seed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>v2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>v3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>v4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>memsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>memory</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static
int XXH32_sizeofState(void)
{
XXH_STATIC_ASSERT(XXH32_SIZEOFSTATE &gt;= sizeof(struct XXH_state32_t));
return sizeof(struct XXH_state32_t);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier>
<name>XXH_errorcode</name></type> <name>XXH32_resetState</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>, <parameter><decl><type><name>U32</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>XXH_state32_t</name></name> <modifier>*</modifier></type> <name>state</name> <init>= <expr><operator>(</operator>struct <name>XXH_state32_t</name> <operator>*</operator><operator>)</operator> <name>state_in</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <name>seed</name> <operator>+</operator> <name>PRIME32_1</name> <operator>+</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <name>seed</name> <operator>+</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <name>seed</name> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>=</operator> <name>seed</name> <operator>-</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>total_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>XXH_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name><modifier>*</modifier></type> <name>XXH32_init</name> <parameter_list>(<parameter><decl><type><name>U32</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name> <init>= <expr><call><name>XXH_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>XXH_state32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XXH32_resetState</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>FORCE_INLINE</name> <name>XXH_errorcode</name></type> <name>XXH32_update_endian</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>XXH_state32_t</name></name> <modifier>*</modifier></type> <name>state</name> <init>= <expr><operator>(</operator>struct <name>XXH_state32_t</name> <operator>*</operator><operator>)</operator> <name>state_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name>input</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>bEnd</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XXH_ACCEPT_NULL_INPUT_POINTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>input</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>XXH_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XXH_memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>memory</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>XXH_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XXH_memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>memory</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>-</operator><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>U32</name><modifier>*</modifier></type> <name>p32</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>U32</name><operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>memory</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p32</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p32</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p32</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p32</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p32</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p32</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p32</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p32</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">16</literal><operator>-</operator><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>bEnd</name><operator>-</operator><literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>limit</name> <init>= <expr><name>bEnd</name> <operator>-</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>v1</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>v2</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>v3</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>v4</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><name>v1</name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>U32</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v1</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>U32</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v2</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>U32</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v3</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v4</name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>U32</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v4</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>p</name><operator>&lt;=</operator><name>limit</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>=</operator> <name>v4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>bEnd</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XXH_memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>bEnd</name><operator>-</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>bEnd</name><operator>-</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>XXH_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>XXH_errorcode</name></type> <name>XXH32_update</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XXH_endianess</name></type> <name>endian_detected</name> <init>= <expr><operator>(</operator><name>XXH_endianess</name><operator>)</operator><name>XXH_CPU_LITTLE_ENDIAN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>endian_detected</name><operator>==</operator><name>XXH_littleEndian</name><operator>)</operator> <operator>||</operator> <name>XXH_FORCE_NATIVE_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>XXH32_update_endian</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>XXH_littleEndian</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>XXH32_update_endian</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>XXH_bigEndian</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier>
<name>FORCE_INLINE</name> <name>U32</name></type> <name>XXH32_intermediateDigest_endian</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>XXH_state32_t</name></name> <modifier>*</modifier></type> <name>state</name> <init>= <expr><operator>(</operator>struct <name>XXH_state32_t</name> <operator>*</operator><operator>)</operator> <name>state_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name> <modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>memory</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier></type> <name>bEnd</name> <init>= <expr><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>memory</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U32</name></type> <name>h32</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>total_len</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>h32</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>seed</name></name> <operator>+</operator> <name>PRIME32_5</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>h32</name> <operator>+=</operator> <operator>(</operator><name>U32</name><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name><operator>&lt;=</operator><name>bEnd</name><operator>-</operator><literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>h32</name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>U32</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>h32</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>p</name><operator>&lt;</operator><name>bEnd</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>h32</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>*</operator> <name>PRIME32_5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>h32</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h32</name> <operator>*=</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h32</name> <operator>*=</operator> <name>PRIME32_3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<return>return <expr><name>h32</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>U32</name></type> <name>XXH32_intermediateDigest</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XXH_endianess</name></type> <name>endian_detected</name> <init>= <expr><operator>(</operator><name>XXH_endianess</name><operator>)</operator><name>XXH_CPU_LITTLE_ENDIAN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>endian_detected</name><operator>==</operator><name>XXH_littleEndian</name><operator>)</operator> <operator>||</operator> <name>XXH_FORCE_NATIVE_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>XXH32_intermediateDigest_endian</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>, <argument><expr><name>XXH_littleEndian</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>XXH32_intermediateDigest_endian</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>, <argument><expr><name>XXH_bigEndian</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>U32</name></type> <name>XXH32_digest</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>U32</name></type> <name>h32</name> <init>= <expr><call><name>XXH32_intermediateDigest</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XXH_free</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>h32</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier>
<name><name>struct</name> <name>archive_xxhash</name></name></type> <name>__archive_xxhash</name> <init>= <expr><block>{
<expr><name>XXH32</name></expr>,
<expr><name>XXH32_init</name></expr>,
<expr><name>XXH32_update</name></expr>,
<expr><name>XXH32_digest</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<decl_stmt><decl><type><specifier>const</specifier>
<name><name>struct</name> <name>archive_xxhash</name></name></type> <name>__archive_xxhash</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
