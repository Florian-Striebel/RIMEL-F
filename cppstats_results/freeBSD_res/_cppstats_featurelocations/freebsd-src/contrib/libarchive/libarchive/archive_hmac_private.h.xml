<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_hmac_private.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HMAC_PRIVATE_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_HMAC_PRIVATE_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBARCHIVE_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This header is only to be used internally to libarchive.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function_decl><type><name>int</name></type> <name>__libarchive_hmac_build_hack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AvailabilityMacros.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAC_OS_X_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">1060</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_HMAC_USE_Apple_CommonCrypto</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HMAC_USE_Apple_CommonCrypto</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CommonCrypto/CommonHMAC.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>CCHmacContext</name></type> <name>archive_hmac_sha1_ctx</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BCRYPT_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bcrypt.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>BCRYPT_ALG_HANDLE</name></type> <name>hAlg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BCRYPT_HASH_HANDLE</name></type> <name>hHash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>hash_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PBYTE</name></type> <name>hash</name></decl>;</decl_stmt>

}</block></struct></type> <name>archive_hmac_sha1_ctx</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBMBEDCRYPTO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MBEDTLS_MD_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/md.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>mbedtls_md_context_t</name></type> <name>archive_hmac_sha1_ctx</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBNETTLE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETTLE_HMAC_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/hmac.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>hmac_sha1_ctx</name></name></type> <name>archive_hmac_sha1_ctx</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_openssl_hmac_private.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>HMAC_CTX</name><modifier>*</modifier></type> <name>archive_hmac_sha1_ctx</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>int</name></type> <name>archive_hmac_sha1_ctx</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_hmac_sha1_init</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>key_len</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_hmac.__hmac_sha1_init(ctx, key, key_len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_hmac_sha1_update</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>data_len</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_hmac.__hmac_sha1_update(ctx, data, data_len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_hmac_sha1_final</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>out</name></type></parameter>, <parameter><type><name>out_len</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_hmac.__hmac_sha1_final(ctx, out, out_len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_hmac_sha1_cleanup</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_hmac.__hmac_sha1_cleanup(ctx)</cpp:value></cpp:define>



<struct>struct <name>archive_hmac</name> <block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>__hmac_sha1_init</name>)<parameter_list>(<parameter><decl><type><name>archive_hmac_sha1_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>__hmac_sha1_update</name>)<parameter_list>(<parameter><decl><type><name>archive_hmac_sha1_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>__hmac_sha1_final</name>)<parameter_list>(<parameter><decl><type><name>archive_hmac_sha1_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>__hmac_sha1_cleanup</name>)<parameter_list>(<parameter><decl><type><name>archive_hmac_sha1_ctx</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>archive_hmac</name></name></type> <name>__archive_hmac</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
