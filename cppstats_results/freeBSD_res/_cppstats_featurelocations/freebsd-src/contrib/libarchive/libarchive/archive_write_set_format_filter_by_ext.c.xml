<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_write_set_format_filter_by_ext.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD: head/lib/libarchive/archive_write_set_format_by_name.c 201168 2009-12-29 06:15:32Z kientzle $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>


<struct><specifier>static</specifier> <specifier>const</specifier>
struct <block>{ <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>format</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> }</block> <decl><name><name>names</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">".7z"</literal></expr>, <expr><name>archive_write_set_format_7zip</name></expr>, <expr><name>archive_write_add_filter_none</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">".zip"</literal></expr>, <expr><name>archive_write_set_format_zip</name></expr>, <expr><name>archive_write_add_filter_none</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">".jar"</literal></expr>, <expr><name>archive_write_set_format_zip</name></expr>, <expr><name>archive_write_add_filter_none</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">".cpio"</literal></expr>, <expr><name>archive_write_set_format_cpio</name></expr>, <expr><name>archive_write_add_filter_none</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">".iso"</literal></expr>, <expr><name>archive_write_set_format_iso9660</name></expr>, <expr><name>archive_write_add_filter_none</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD_kernel__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">".a"</literal></expr>, <expr><name>archive_write_set_format_ar_bsd</name></expr>, <expr><name>archive_write_add_filter_none</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">".ar"</literal></expr>, <expr><name>archive_write_set_format_ar_bsd</name></expr>, <expr><name>archive_write_add_filter_none</name></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><literal type="string">".a"</literal></expr>, <expr><name>archive_write_set_format_ar_svr4</name></expr>, <expr><name>archive_write_add_filter_none</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">".ar"</literal></expr>, <expr><name>archive_write_set_format_ar_svr4</name></expr>, <expr><name>archive_write_add_filter_none</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">".tar"</literal></expr>, <expr><name>archive_write_set_format_pax_restricted</name></expr>, <expr><name>archive_write_add_filter_none</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">".tgz"</literal></expr>, <expr><name>archive_write_set_format_pax_restricted</name></expr>, <expr><name>archive_write_add_filter_gzip</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">".tar.gz"</literal></expr>, <expr><name>archive_write_set_format_pax_restricted</name></expr>, <expr><name>archive_write_add_filter_gzip</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">".tar.bz2"</literal></expr>, <expr><name>archive_write_set_format_pax_restricted</name></expr>, <expr><name>archive_write_add_filter_bzip2</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">".tar.xz"</literal></expr>, <expr><name>archive_write_set_format_pax_restricted</name></expr>, <expr><name>archive_write_add_filter_xz</name></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier>
<name>int</name></type> <name>cmpsuff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length_str</name></decl>, <decl><type ref="prev"/><name>length_suffix</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>suffix</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length_str</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length_suffix</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length_str</name> <operator>&gt;=</operator> <name>length_suffix</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <operator>(</operator><name>length_str</name> <operator>-</operator> <name>length_suffix</name><operator>)</operator></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_array_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cmpsuff</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_write_set_format_filter_by_ext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>names_index</name> <init>= <expr><call><name>get_array_index</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>names_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>format_state</name> <init>= <expr><operator>(</operator><name><name>names</name><index>[<expr><name>names_index</name></expr>]</index></name><operator>.</operator><name>format</name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>format_state</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>names</name><index>[<expr><name>names_index</name></expr>]</index></name><operator>.</operator><name>filter</name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>format_state</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"No such format '%s'"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_write_set_format_filter_by_ext_def</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>def_ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>names_index</name> <init>= <expr><call><name>get_array_index</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>names_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>names_index</name> <operator>=</operator> <call><name>get_array_index</name><argument_list>(<argument><expr><name>def_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>names_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>format_state</name> <init>= <expr><operator>(</operator><name><name>names</name><index>[<expr><name>names_index</name></expr>]</index></name><operator>.</operator><name>format</name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>format_state</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>names</name><index>[<expr><name>names_index</name></expr>]</index></name><operator>.</operator><name>filter</name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>format_state</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"No such format '%s'"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




</unit>
