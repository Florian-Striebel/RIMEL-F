<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_write_set_format.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_write_set_format_private.h"</cpp:file></cpp:include>


<struct><specifier>static</specifier> <specifier>const</specifier>
struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt> <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>setter</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> }</block> <decl><name><name>codes</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>ARCHIVE_FORMAT_7ZIP</name></expr>, <expr><name>archive_write_set_format_7zip</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_CPIO</name></expr>, <expr><name>archive_write_set_format_cpio</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_CPIO_BIN_LE</name></expr>, <expr><name>archive_write_set_format_cpio_bin</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_CPIO_PWB</name></expr>, <expr><name>archive_write_set_format_cpio_pwb</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_CPIO_POSIX</name></expr>, <expr><name>archive_write_set_format_cpio_odc</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_CPIO_SVR4_NOCRC</name></expr>, <expr><name>archive_write_set_format_cpio_newc</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_ISO9660</name></expr>, <expr><name>archive_write_set_format_iso9660</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_MTREE</name></expr>, <expr><name>archive_write_set_format_mtree</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_RAW</name></expr>, <expr><name>archive_write_set_format_raw</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_SHAR</name></expr>, <expr><name>archive_write_set_format_shar</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_SHAR_BASE</name></expr>, <expr><name>archive_write_set_format_shar</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_SHAR_DUMP</name></expr>, <expr><name>archive_write_set_format_shar_dump</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_TAR</name></expr>, <expr><name>archive_write_set_format_pax_restricted</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_TAR_GNUTAR</name></expr>, <expr><name>archive_write_set_format_gnutar</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE</name></expr>, <expr><name>archive_write_set_format_pax</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_TAR_PAX_RESTRICTED</name></expr>,
<expr><name>archive_write_set_format_pax_restricted</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_TAR_USTAR</name></expr>, <expr><name>archive_write_set_format_ustar</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_WARC</name></expr>, <expr><name>archive_write_set_format_warc</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_XAR</name></expr>, <expr><name>archive_write_set_format_xar</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_FORMAT_ZIP</name></expr>, <expr><name>archive_write_set_format_zip</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type>
<name>archive_write_set_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>setter</name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"No such format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>__archive_write_entry_filetype_unsupported</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<case>case <expr><name>AE_IFDIR</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"directories"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFLNK</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"symbolic links"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFCHR</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"character devices"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFBLK</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"block devices"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFIFO</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"named pipes"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFSOCK</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"sockets"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"%s: %s format cannot archive %s"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"%s: %s format cannot archive files with mode 0%lo"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
