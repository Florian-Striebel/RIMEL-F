<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_getdate.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LIBARCHIVE_BUILD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_getdate.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPOCH</name></cpp:macro> <cpp:value>1970</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINUTE</name></cpp:macro> <cpp:value>(60L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOUR</name></cpp:macro> <cpp:value>(60L * MINUTE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAY</name></cpp:macro> <cpp:value>(24L * HOUR)</cpp:value></cpp:define>


<enum>enum <name>DSTMODE</name> <block>{ <decl><name>DSTon</name></decl>, <decl><name>DSToff</name></decl>, <decl><name>DSTmaybe</name></decl> }</block>;</enum>

<enum>enum <block>{ <decl><name>tAM</name></decl>, <decl><name>tPM</name></decl> }</block>;</enum>

<enum>enum <block>{ <decl><name>tAGO</name> <init>= <expr><literal type="number">260</literal></expr></init></decl>, <decl><name>tDAY</name></decl>, <decl><name>tDAYZONE</name></decl>, <decl><name>tAMPM</name></decl>, <decl><name>tMONTH</name></decl>, <decl><name>tMONTH_UNIT</name></decl>, <decl><name>tSEC_UNIT</name></decl>,
<decl><name>tUNUMBER</name></decl>, <decl><name>tZONE</name></decl>, <decl><name>tDST</name></decl> }</block>;</enum>
<struct>struct <name>token</name> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>token</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>time_t</name></type> <name>value</name></decl>;</decl_stmt> }</block>;</struct>




<struct>struct <name>gdstate</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>token</name></name> <modifier>*</modifier></type><name>tokenp</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>HaveYear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>HaveMonth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>HaveDay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>HaveWeekDay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>HaveTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>HaveZone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>HaveRel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>Timezone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>Day</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>Hour</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>Minutes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>Month</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>Seconds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>Year</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>DSTMODE</name></name></type> <name>DSTmode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>DayOrdinal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>DayNumber</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>time_t</name></type> <name>RelMonth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>RelSeconds</name></decl>;</decl_stmt>
}</block>;</struct>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>timephrase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gdstate</name></name> <modifier>*</modifier></type><name>gds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">':'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">':'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>gds</name><operator>-&gt;</operator><name>HaveTime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Hour</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Minutes</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Seconds</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">':'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>gds</name><operator>-&gt;</operator><name>HaveTime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Hour</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Minutes</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Seconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tAMPM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>gds</name><operator>-&gt;</operator><name>HaveTime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Hour</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Minutes</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>Seconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tAMPM</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>Hour</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>==</operator> <name>tPM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Hour</name></name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'+'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveZone</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>DSTmode</name></name> <operator>=</operator> <name>DSToff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Timezone</name></name> <operator>=</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <name>HOUR</name>
<operator>+</operator> <operator>(</operator><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <name>MINUTE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'-'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveZone</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>DSTmode</name></name> <operator>=</operator> <name>DSToff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Timezone</name></name> <operator>=</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <name>HOUR</name>
<operator>+</operator> <operator>(</operator><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <name>MINUTE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>zonephrase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gdstate</name></name> <modifier>*</modifier></type><name>gds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tZONE</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tDST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveZone</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Timezone</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>DSTmode</name></name> <operator>=</operator> <name>DSTon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tZONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveZone</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Timezone</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>DSTmode</name></name> <operator>=</operator> <name>DSToff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tDAYZONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveZone</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Timezone</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>DSTmode</name></name> <operator>=</operator> <name>DSTon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>datephrase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gdstate</name></name> <modifier>*</modifier></type><name>gds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'/'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'/'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveYear</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&gt;=</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&gt;=</operator> <literal type="number">13</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&gt;=</operator> <literal type="number">13</literal><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'/'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'-'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'-'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveYear</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'-'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tMONTH</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'-'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveYear</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tMONTH</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">','</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveYear</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tMONTH</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tMONTH</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveYear</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tMONTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>relunitphrase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gdstate</name></name> <modifier>*</modifier></type><name>gds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'-'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tSEC_UNIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveRel</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>RelSeconds</name></name> <operator>-=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>*</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'+'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tSEC_UNIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveRel</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>RelSeconds</name></name> <operator>+=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>*</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tSEC_UNIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveRel</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>RelSeconds</name></name> <operator>+=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>*</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'-'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tMONTH_UNIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveRel</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>RelMonth</name></name> <operator>-=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>*</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">'+'</literal>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tMONTH_UNIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveRel</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>RelMonth</name></name> <operator>+=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>*</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tMONTH_UNIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveRel</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>RelMonth</name></name> <operator>+=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>*</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tSEC_UNIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveRel</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>RelSeconds</name></name> <operator>+=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tMONTH_UNIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveRel</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>RelMonth</name></name> <operator>+=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>dayphrase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gdstate</name></name> <modifier>*</modifier></type><name>gds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tDAY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveWeekDay</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>DayOrdinal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>DayNumber</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name>
<operator>&amp;&amp;</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tDAY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveWeekDay</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>DayOrdinal</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>DayNumber</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>phrase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gdstate</name></name> <modifier>*</modifier></type><name>gds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>timephrase</name><argument_list>(<argument><expr><name>gds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zonephrase</name><argument_list>(<argument><expr><name>gds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>datephrase</name><argument_list>(<argument><expr><name>gds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dayphrase</name><argument_list>(<argument><expr><name>gds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>relunitphrase</name><argument_list>(<argument><expr><name>gds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tAGO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>RelSeconds</name></name> <operator>=</operator> <operator>-</operator><name><name>gds</name><operator>-&gt;</operator><name>RelSeconds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>RelMonth</name></name> <operator>=</operator> <operator>-</operator><name><name>gds</name><operator>-&gt;</operator><name>RelMonth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>token</name> <operator>==</operator> <name>tUNUMBER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>HaveTime</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gds</name><operator>-&gt;</operator><name>HaveYear</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gds</name><operator>-&gt;</operator><name>HaveRel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveYear</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&gt;</operator> <literal type="number">10000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveYear</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name><operator>=</operator> <operator>(</operator><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name><operator>)</operator><operator>%</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name><operator>=</operator> <operator>(</operator><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name><operator>/</operator><literal type="number">100</literal><operator>)</operator><operator>%</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name><operator>/</operator><literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>HaveTime</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Hour</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Minutes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Seconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>/</operator> <literal type="number">100</literal> <operator>&lt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>%</operator> <literal type="number">100</literal> <operator>&lt;</operator> <literal type="number">60</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Hour</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Minutes</name></name> <operator>=</operator> <name><name>gds</name><operator>-&gt;</operator><name>tokenp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>%</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Seconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<struct><specifier>static</specifier> struct <name>LEXICON</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>abbrev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl>const <name><name>TimeWords</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"am"</literal></expr>, <expr><name>tAMPM</name></expr>, <expr><name>tAM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"pm"</literal></expr>, <expr><name>tAMPM</name></expr>, <expr><name>tPM</name></expr> }</block></expr>,


<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"january"</literal></expr>, <expr><name>tMONTH</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"february"</literal></expr>, <expr><name>tMONTH</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"march"</literal></expr>, <expr><name>tMONTH</name></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"april"</literal></expr>, <expr><name>tMONTH</name></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"may"</literal></expr>, <expr><name>tMONTH</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"june"</literal></expr>, <expr><name>tMONTH</name></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"july"</literal></expr>, <expr><name>tMONTH</name></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"august"</literal></expr>, <expr><name>tMONTH</name></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"september"</literal></expr>, <expr><name>tMONTH</name></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"october"</literal></expr>, <expr><name>tMONTH</name></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"november"</literal></expr>, <expr><name>tMONTH</name></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"december"</literal></expr>, <expr><name>tMONTH</name></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>,


<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"sunday"</literal></expr>, <expr><name>tDAY</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"monday"</literal></expr>, <expr><name>tDAY</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"tuesday"</literal></expr>, <expr><name>tDAY</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"wednesday"</literal></expr>, <expr><name>tDAY</name></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"thursday"</literal></expr>, <expr><name>tDAY</name></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"friday"</literal></expr>, <expr><name>tDAY</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"saturday"</literal></expr>, <expr><name>tDAY</name></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,


<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"gmt"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">0</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ut"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">0</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"utc"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">0</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"wet"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">0</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"bst"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><literal type="number">0</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"wat"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">1</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"at"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">2</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,


<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"nft"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">3</literal><operator>*</operator><name>HOUR</name><operator>+</operator><literal type="number">30</literal><operator>*</operator><name>MINUTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"nst"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">3</literal><operator>*</operator><name>HOUR</name><operator>+</operator><literal type="number">30</literal><operator>*</operator><name>MINUTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ndt"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><literal type="number">3</literal><operator>*</operator><name>HOUR</name><operator>+</operator><literal type="number">30</literal><operator>*</operator><name>MINUTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ast"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">4</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"adt"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><literal type="number">4</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"est"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">5</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"edt"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><literal type="number">5</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"cst"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">6</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"cdt"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><literal type="number">6</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"mst"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">7</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"mdt"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><literal type="number">7</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"pst"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">8</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"pdt"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><literal type="number">8</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"yst"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">9</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ydt"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><literal type="number">9</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"hst"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">10</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"hdt"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><literal type="number">10</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"cat"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">10</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ahst"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">10</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"nt"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">11</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"idlw"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">12</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"cet"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"met"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"mewt"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"mest"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"swt"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"sst"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"fwt"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"fst"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"eet"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"bt"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"it"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>HOUR</name><operator>-</operator><literal type="number">30</literal><operator>*</operator><name>MINUTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"zp4"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">4</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"zp5"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">5</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ist"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">5</literal><operator>*</operator><name>HOUR</name><operator>-</operator><literal type="number">30</literal><operator>*</operator><name>MINUTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"zp6"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">6</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,


<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"wast"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">7</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"wadt"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><operator>-</operator><literal type="number">7</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"jt"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">7</literal><operator>*</operator><name>HOUR</name><operator>-</operator><literal type="number">30</literal><operator>*</operator><name>MINUTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"cct"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">8</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"jst"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">9</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"cast"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">9</literal><operator>*</operator><name>HOUR</name><operator>-</operator><literal type="number">30</literal><operator>*</operator><name>MINUTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"cadt"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><operator>-</operator><literal type="number">9</literal><operator>*</operator><name>HOUR</name><operator>-</operator><literal type="number">30</literal><operator>*</operator><name>MINUTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"east"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">10</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"eadt"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><operator>-</operator><literal type="number">10</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"gst"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">10</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"nzt"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">12</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"nzst"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">12</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"nzdt"</literal></expr>, <expr><name>tDAYZONE</name></expr>, <expr><operator>-</operator><literal type="number">12</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"idle"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">12</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"dst"</literal></expr>, <expr><name>tDST</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,


<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"years"</literal></expr>, <expr><name>tMONTH_UNIT</name></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"months"</literal></expr>, <expr><name>tMONTH_UNIT</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="string">"fortnights"</literal></expr>, <expr><name>tSEC_UNIT</name></expr>, <expr><literal type="number">14</literal> <operator>*</operator> <name>DAY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"weeks"</literal></expr>, <expr><name>tSEC_UNIT</name></expr>, <expr><literal type="number">7</literal> <operator>*</operator> <name>DAY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"days"</literal></expr>, <expr><name>tSEC_UNIT</name></expr>, <expr><name>DAY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"hours"</literal></expr>, <expr><name>tSEC_UNIT</name></expr>, <expr><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"minutes"</literal></expr>, <expr><name>tSEC_UNIT</name></expr>, <expr><name>MINUTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"seconds"</literal></expr>, <expr><name>tSEC_UNIT</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,


<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"tomorrow"</literal></expr>, <expr><name>tSEC_UNIT</name></expr>, <expr><name>DAY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"yesterday"</literal></expr>, <expr><name>tSEC_UNIT</name></expr>, <expr><operator>-</operator><name>DAY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"today"</literal></expr>, <expr><name>tSEC_UNIT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"now"</literal></expr>, <expr><name>tSEC_UNIT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"last"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"this"</literal></expr>, <expr><name>tSEC_UNIT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"next"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"first"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"1st"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"2nd"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"third"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"3rd"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"fourth"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"4th"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"fifth"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"5th"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"sixth"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"seventh"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"eighth"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ninth"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"tenth"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"eleventh"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"twelfth"</literal></expr>, <expr><name>tUNUMBER</name></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ago"</literal></expr>, <expr><name>tAGO</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,


<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">1</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">2</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">3</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">4</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">5</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">6</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"g"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">7</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">8</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">9</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"k"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">10</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"l"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">11</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"m"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">12</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"n"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"o"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"p"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"q"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">4</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"r"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">5</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">6</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"t"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">7</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"u"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">8</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"v"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">9</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"w"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">10</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">11</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><operator>-</operator><literal type="number">12</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"z"</literal></expr>, <expr><name>tZONE</name></expr>, <expr><literal type="number">0</literal><operator>*</operator><name>HOUR</name></expr> }</block></expr>,


<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>






<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>Convert</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>Month</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>Day</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>Year</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>Hours</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>Minutes</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>Seconds</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>Timezone</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>DSTMODE</name></name></type> <name>DSTmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name><name>DaysInMonth</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">31</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>Julian</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>ltime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALTIME_R</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmbuf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>errno_t</name></type> <name>terr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__time64_t</name></type> <name>tmptime</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>Year</name> <operator>&lt;</operator> <literal type="number">69</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Year</name> <operator>+=</operator> <literal type="number">2000</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Year</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Year</name> <operator>+=</operator> <literal type="number">1900</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>DaysInMonth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>Year</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>Year</name> <operator>%</operator> <literal type="number">100</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>Year</name> <operator>%</operator> <literal type="number">400</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">29</literal></expr> </then><else>: <expr><literal type="number">28</literal></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>Year</name> <argument_list type="generic">&lt; <argument><expr><name>EPOCH</name> <operator>||</operator> <name>Year</name></expr></argument> &gt;</argument_list></name> <literal type="number">2038</literal>
<operator>||</operator> <name><name>Month</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>Month</name></expr></argument> &gt;</argument_list></name> <literal type="number">12</literal>

<operator>||</operator> <name><name>Day</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>Day</name></expr></argument> &gt;</argument_list></name> <name><name>DaysInMonth</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>--</operator><name>Month</name></expr>]</index></name>
<operator>||</operator> <name><name>Hours</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>Hours</name></expr></argument> &gt;</argument_list></name> <literal type="number">23</literal>
<operator>||</operator> <name><name>Minutes</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>Minutes</name></expr></argument> &gt;</argument_list></name> <literal type="number">59</literal>
<operator>||</operator> <name><name>Seconds</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>Seconds</name></expr></argument> &gt;</argument_list></name> <literal type="number">59</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Julian</name> <operator>=</operator> <name>Day</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Month</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>Julian</name> <operator>+=</operator> <name><name>DaysInMonth</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>EPOCH</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Year</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>Julian</name> <operator>+=</operator> <literal type="number">365</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>Julian</name> <operator>*=</operator> <name>DAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Julian</name> <operator>+=</operator> <name>Timezone</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Julian</name> <operator>+=</operator> <name>Hours</name> <operator>*</operator> <name>HOUR</name> <operator>+</operator> <name>Minutes</name> <operator>*</operator> <name>MINUTE</name> <operator>+</operator> <name>Seconds</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ltime</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Julian</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>tmptime</name> <operator>=</operator> <name>Julian</name></expr>;</expr_stmt>
<expr_stmt><expr><name>terr</name> <operator>=</operator> <call><name>_localtime64_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>terr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ltime</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ltime</name> <operator>=</operator> <operator>&amp;</operator><name>tmbuf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ltime</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Julian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>DSTmode</name> <operator>==</operator> <name>DSTon</name>
<operator>||</operator> <operator>(</operator><name>DSTmode</name> <operator>==</operator> <name>DSTmaybe</name> <operator>&amp;&amp;</operator> <name><name>ltime</name><operator>-&gt;</operator><name>tm_isdst</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Julian</name> <operator>-=</operator> <name>HOUR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>Julian</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>DSTcorrect</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>Start</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>Future</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>StartDay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>FutureDay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>ltime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALTIME_R</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmbuf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>errno_t</name></type> <name>terr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__time64_t</name></type> <name>tmptime</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ltime</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>tmptime</name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>terr</name> <operator>=</operator> <call><name>_localtime64_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>terr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ltime</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ltime</name> <operator>=</operator> <operator>&amp;</operator><name>tmbuf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ltime</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>StartDay</name> <operator>=</operator> <operator>(</operator><name><name>ltime</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ltime</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Future</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>tmptime</name> <operator>=</operator> <name>Future</name></expr>;</expr_stmt>
<expr_stmt><expr><name>terr</name> <operator>=</operator> <call><name>_localtime64_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>terr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ltime</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ltime</name> <operator>=</operator> <operator>&amp;</operator><name>tmbuf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ltime</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Future</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>FutureDay</name> <operator>=</operator> <operator>(</operator><name><name>ltime</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Future</name> <operator>-</operator> <name>Start</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>StartDay</name> <operator>-</operator> <name>FutureDay</name><operator>)</operator> <operator>*</operator> <name>HOUR</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>RelativeDate</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>Start</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>zone</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstmode</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>DayOrdinal</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>DayNumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMTIME_R</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE__GMTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmbuf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__GMTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>errno_t</name></type> <name>terr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__time64_t</name></type> <name>tmptime</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>Start</name> <operator>-</operator> <name>zone</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__GMTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>tmptime</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>terr</name> <operator>=</operator> <call><name>_gmtime64_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>terr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>&amp;</operator><name>tmbuf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>now</name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>now</name> <operator>+=</operator> <name>DAY</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>DayNumber</name> <operator>-</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>now</name> <operator>+=</operator> <literal type="number">7</literal> <operator>*</operator> <name>DAY</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>DayOrdinal</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>DayOrdinal</name></expr> </then><else>: <expr><name>DayOrdinal</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dstmode</name> <operator>==</operator> <name>DSTmaybe</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>DSTcorrect</name><argument_list>(<argument><expr><name>Start</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>now</name> <operator>-</operator> <name>Start</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>RelativeMonth</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>Start</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>Timezone</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>RelMonth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>Month</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>Year</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALTIME_R</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmbuf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>errno_t</name></type> <name>terr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__time64_t</name></type> <name>tmptime</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>RelMonth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>tmptime</name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>terr</name> <operator>=</operator> <call><name>_localtime64_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>terr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>&amp;</operator><name>tmbuf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>Month</name> <operator>=</operator> <literal type="number">12</literal> <operator>*</operator> <operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal><operator>)</operator> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <name>RelMonth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Year</name> <operator>=</operator> <name>Month</name> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Month</name> <operator>=</operator> <name>Month</name> <operator>%</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>DSTcorrect</name><argument_list>(<argument><expr><name>Start</name></expr></argument>,
<argument><expr><call><name>Convert</name><argument_list>(<argument><expr><name>Month</name></expr></argument>, <argument><expr><operator>(</operator><name>time_t</name><operator>)</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name>Year</name></expr></argument>,
<argument><expr><operator>(</operator><name>time_t</name><operator>)</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><operator>(</operator><name>time_t</name><operator>)</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><operator>(</operator><name>time_t</name><operator>)</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>,
<argument><expr><name>Timezone</name></expr></argument>, <argument><expr><name>DSTmaybe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>nexttoken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition>;</condition> <incr/>)</control> <block>{<block_content>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><operator>*</operator><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>in</name></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>in</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>Count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>in</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Count</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>Count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>*</operator><name>in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>LEXICON</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>*</operator><name>src</name> <operator>!=</operator> <literal type="char">'\0'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>isalnum</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>src</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buff</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buff</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>TimeWords</name></expr>;</init> <condition><expr><name><name>tp</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>tp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>abbrev</name> <init>= <expr><name><name>tp</name><operator>-&gt;</operator><name>abbrev</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>abbrev</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>abbrev</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>abbrev</name>
<operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>in</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>tp</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>






<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>in</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><operator>*</operator><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>in</name><operator>)</operator><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <operator>*</operator><name>value</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>in</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>tUNUMBER</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>*</operator><operator>(</operator><operator>*</operator><name>in</name><operator>)</operator><operator>++</operator></expr>;</return>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM_YEAR_ORIGIN</name></cpp:macro> <cpp:value>1900</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>long</name></type>
<name>difftm</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ay</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <operator>(</operator><name>TM_YEAR_ORIGIN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>by</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <operator>(</operator><name>TM_YEAR_ORIGIN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><operator>(</operator>

<name><name>a</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_yday</name></name>

<operator>+</operator> <operator>(</operator><operator>(</operator><name>ay</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>by</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator>
<operator>-</operator> <operator>(</operator><name>ay</name><operator>/</operator><literal type="number">100</literal> <operator>-</operator> <name>by</name><operator>/</operator><literal type="number">100</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name>ay</name><operator>/</operator><literal type="number">100</literal> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>by</name><operator>/</operator><literal type="number">100</literal> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator>

<operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>ay</name><operator>-</operator><name>by</name><operator>)</operator> <operator>*</operator> <literal type="number">365</literal>
<operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>days</name> <operator>*</operator> <name>DAY</name> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_hour</name></name><operator>)</operator> <operator>*</operator> <name>HOUR</name>
<operator>+</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_min</name></name><operator>)</operator> <operator>*</operator> <name>MINUTE</name>
<operator>+</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_sec</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>time_t</name></type>
<name>__archive_get_date</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>token</name></name></type> <name><name>tokens</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gdstate</name></name></type> <name>_gds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>token</name></name> <modifier>*</modifier></type><name>lasttoken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gdstate</name></name> <modifier>*</modifier></type><name>gds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>local</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>gmt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gmt_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>Start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>tod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>tzone</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE__GMTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>errno_t</name></type> <name>terr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__time64_t</name></type> <name>tmptime</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_gds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_gds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gds</name> <operator>=</operator> <operator>&amp;</operator><name>_gds</name></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>tmptime</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name>terr</name> <operator>=</operator> <call><name>_localtime64_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>terr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>&amp;</operator><name>local</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>tm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALTIME_R</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>local</name> <operator>=</operator> <operator>*</operator><name>tm</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gmt_ptr</name> <operator>=</operator> <call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__GMTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>tmptime</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name>terr</name> <operator>=</operator> <call><name>_gmtime64_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>terr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gmt_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>gmt_ptr</name> <operator>=</operator> <operator>&amp;</operator><name>gmt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gmt_ptr</name> <operator>=</operator> <call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gmt_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gmt</name> <operator>=</operator> <operator>*</operator><name>gmt_ptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>gmt_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tzone</name> <operator>=</operator> <call><name>difftm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tzone</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>local</name><operator>.</operator><name>tm_isdst</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tzone</name> <operator>+=</operator> <name>HOUR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>lasttoken</name> <operator>=</operator> <name>tokens</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>lasttoken</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <call><name>nexttoken</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lasttoken</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>lasttoken</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lasttoken</name> <operator>&gt;</operator> <name>tokens</name> <operator>+</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>=</operator> <name>tokens</name></expr>;</expr_stmt>


<while>while <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>tokenp</name></name> <operator>&lt;</operator> <name>lasttoken</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>phrase</name><argument_list>(<argument><expr><name>gds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gds</name><operator>-&gt;</operator><name>HaveZone</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Timezone</name></name> <operator>=</operator> <name>tzone</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>DSTmode</name></name> <operator>=</operator> <name>DSTmaybe</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>HaveZone</name></name> <operator>&amp;&amp;</operator> <name>gmt_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>now</name> <operator>-=</operator> <name><name>gds</name><operator>-&gt;</operator><name>Timezone</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gmt_ptr</name> <operator>=</operator> <call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__GMTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>tmptime</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name>terr</name> <operator>=</operator> <call><name>_gmtime64_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>terr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gmt_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>gmt_ptr</name> <operator>=</operator> <operator>&amp;</operator><name>gmt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>gmt_ptr</name> <operator>=</operator> <call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>gmt_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>local</name> <operator>=</operator> <operator>*</operator><name>gmt_ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>now</name> <operator>+=</operator> <name><name>gds</name><operator>-&gt;</operator><name>Timezone</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gds</name><operator>-&gt;</operator><name>HaveYear</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <name><name>local</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <name><name>local</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name> <operator>=</operator> <name><name>local</name><operator>.</operator><name>tm_mday</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>HaveTime</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>gds</name><operator>-&gt;</operator><name>HaveZone</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>gds</name><operator>-&gt;</operator><name>HaveWeekDay</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <name><name>gds</name><operator>-&gt;</operator><name>HaveYear</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>HaveYear</name></name> <operator>||</operator> <name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name> <operator>||</operator> <name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name>
<operator>||</operator> <name><name>gds</name><operator>-&gt;</operator><name>HaveTime</name></name> <operator>||</operator> <name><name>gds</name><operator>-&gt;</operator><name>HaveWeekDay</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Start</name> <operator>=</operator> <call><name>Convert</name><argument_list>(<argument><expr><name><name>gds</name><operator>-&gt;</operator><name>Month</name></name></expr></argument>, <argument><expr><name><name>gds</name><operator>-&gt;</operator><name>Day</name></name></expr></argument>, <argument><expr><name><name>gds</name><operator>-&gt;</operator><name>Year</name></name></expr></argument>,
<argument><expr><name><name>gds</name><operator>-&gt;</operator><name>Hour</name></name></expr></argument>, <argument><expr><name><name>gds</name><operator>-&gt;</operator><name>Minutes</name></name></expr></argument>, <argument><expr><name><name>gds</name><operator>-&gt;</operator><name>Seconds</name></name></expr></argument>,
<argument><expr><name><name>gds</name><operator>-&gt;</operator><name>Timezone</name></name></expr></argument>, <argument><expr><name><name>gds</name><operator>-&gt;</operator><name>DSTmode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>Start</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gds</name><operator>-&gt;</operator><name>HaveRel</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Start</name> <operator>-=</operator> <name><name>local</name><operator>.</operator><name>tm_hour</name></name> <operator>*</operator> <name>HOUR</name> <operator>+</operator> <name><name>local</name><operator>.</operator><name>tm_min</name></name> <operator>*</operator> <name>MINUTE</name>
<operator>+</operator> <name><name>local</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>Start</name> <operator>+=</operator> <name><name>gds</name><operator>-&gt;</operator><name>RelSeconds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Start</name> <operator>+=</operator> <call><name>RelativeMonth</name><argument_list>(<argument><expr><name>Start</name></expr></argument>, <argument><expr><name><name>gds</name><operator>-&gt;</operator><name>Timezone</name></name></expr></argument>, <argument><expr><name><name>gds</name><operator>-&gt;</operator><name>RelMonth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>gds</name><operator>-&gt;</operator><name>HaveWeekDay</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>gds</name><operator>-&gt;</operator><name>HaveYear</name></name> <operator>||</operator> <name><name>gds</name><operator>-&gt;</operator><name>HaveMonth</name></name> <operator>||</operator> <name><name>gds</name><operator>-&gt;</operator><name>HaveDay</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tod</name> <operator>=</operator> <call><name>RelativeDate</name><argument_list>(<argument><expr><name>Start</name></expr></argument>, <argument><expr><name><name>gds</name><operator>-&gt;</operator><name>Timezone</name></name></expr></argument>,
<argument><expr><name><name>gds</name><operator>-&gt;</operator><name>DSTmode</name></name></expr></argument>, <argument><expr><name><name>gds</name><operator>-&gt;</operator><name>DayOrdinal</name></name></expr></argument>, <argument><expr><name><name>gds</name><operator>-&gt;</operator><name>DayNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Start</name> <operator>+=</operator> <name>tod</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<return>return <expr><ternary><condition><expr><name>Start</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>Start</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>argv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Input: %s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Bad format - couldn't convert.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Output: %s\n"</literal></expr></argument>, <argument><expr><call><name>ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
