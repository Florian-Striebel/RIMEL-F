<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_write_set_format_mtree.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_digest_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_rb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_write_private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENTNAMELEN</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXLINELEN</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_KEYS</name></cpp:macro> <cpp:value>(F_FLAGS | F_GID | F_GNAME | F_MODE | F_TYPE | F_UID | F_UNAME)</cpp:value></cpp:define>


<struct>struct <name>attr_counter</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>m_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>att_counter_set</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>uid_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>gid_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>mode_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>flags_list</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>mtree_chain</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>dir_info</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name></type> <name>rbtree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_chain</name></name></type> <name>children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>chnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>virtual</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>reg_info</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>compute_sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ae_digest</name></name></type> <name>digest</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>mtree_entry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name></type> <name>rbnode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_info</name></name> <modifier>*</modifier></type><name>dir_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reg_info</name></name> <modifier>*</modifier></type><name>reg_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>parentdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>basename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>symlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>uname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>gname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>fflags_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>filetype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mtime_nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fflags_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fflags_clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>rdevmajor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>rdevminor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>devmajor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>devminor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ino</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>mtree_writer</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>mtree_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>cur_dirent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>cur_dirstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_chain</name></name></type> <name>file_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>ebuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>entry_bytes_remaining</name></decl>;</decl_stmt>




<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>processing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fflags_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fflags_clear</name></decl>;</decl_stmt>
}</block> <decl><name>set</name></decl>;</struct>
<decl_stmt><decl><type><name><name>struct</name> <name>att_counter_set</name></name></type> <name>acs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>classic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>compute_sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>crc_len</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>archive_md5_ctx</name></type> <name>md5ctx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_RMD160</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>archive_rmd160_ctx</name></type> <name>rmd160ctx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>archive_sha1_ctx</name></type> <name>sha1ctx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>archive_sha256_ctx</name></type> <name>sha256ctx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>archive_sha384_ctx</name></type> <name>sha384ctx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA512</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>archive_sha512_ctx</name></type> <name>sha512ctx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>keys</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_CKSUM</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_DEV</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_DONE</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_FLAGS</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_GID</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_GNAME</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_IGN</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MAGIC</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MD5</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MODE</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_NLINK</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_NOCHANGE</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_OPT</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_RMD160</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SHA1</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SIZE</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SLINK</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_TAGS</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_TIME</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_TYPE</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_UID</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_UNAME</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_VISIT</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SHA256</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SHA384</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SHA512</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_INO</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_RESDEV</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>



<decl_stmt><decl><type><name>int</name></type> <name>dironly</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output_global_set</name></decl>;</decl_stmt>


}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_KEYS</name></cpp:macro> <cpp:value>(F_DEV | F_FLAGS | F_GID | F_GNAME | F_SLINK | F_MODE| F_NLINK | F_SIZE | F_TIME | F_TYPE | F_UID| F_UNAME)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>attr_counter_set_reset</name></cpp:macro> <cpp:value>attr_counter_set_free</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>attr_counter_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>attr_counter_inc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type> <name>attr_counter_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>attr_counter_set_collect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>attr_counter_set_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_global_set_keys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mtree_entry_add_child_tail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mtree_entry_create_virtual_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mtree_entry_cmp_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mtree_entry_cmp_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mtree_entry_exchange_same_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mtree_entry_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mtree_entry_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mtree_entry_register_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mtree_entry_register_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mtree_entry_setup_filenames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mtree_entry_tree_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sum_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sum_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sum_final</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>reg_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sum_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>reg_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write_mtree_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write_dot_dot_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPUTE_CRC</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(var) = (var) &lt;&lt; 8 ^ crctab[(var) &gt;&gt; 24 ^ (ch)]</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>crctab</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0</literal></expr>,
<expr><literal type="number">0x04c11db7</literal></expr>, <expr><literal type="number">0x09823b6e</literal></expr>, <expr><literal type="number">0x0d4326d9</literal></expr>, <expr><literal type="number">0x130476dc</literal></expr>, <expr><literal type="number">0x17c56b6b</literal></expr>,
<expr><literal type="number">0x1a864db2</literal></expr>, <expr><literal type="number">0x1e475005</literal></expr>, <expr><literal type="number">0x2608edb8</literal></expr>, <expr><literal type="number">0x22c9f00f</literal></expr>, <expr><literal type="number">0x2f8ad6d6</literal></expr>,
<expr><literal type="number">0x2b4bcb61</literal></expr>, <expr><literal type="number">0x350c9b64</literal></expr>, <expr><literal type="number">0x31cd86d3</literal></expr>, <expr><literal type="number">0x3c8ea00a</literal></expr>, <expr><literal type="number">0x384fbdbd</literal></expr>,
<expr><literal type="number">0x4c11db70</literal></expr>, <expr><literal type="number">0x48d0c6c7</literal></expr>, <expr><literal type="number">0x4593e01e</literal></expr>, <expr><literal type="number">0x4152fda9</literal></expr>, <expr><literal type="number">0x5f15adac</literal></expr>,
<expr><literal type="number">0x5bd4b01b</literal></expr>, <expr><literal type="number">0x569796c2</literal></expr>, <expr><literal type="number">0x52568b75</literal></expr>, <expr><literal type="number">0x6a1936c8</literal></expr>, <expr><literal type="number">0x6ed82b7f</literal></expr>,
<expr><literal type="number">0x639b0da6</literal></expr>, <expr><literal type="number">0x675a1011</literal></expr>, <expr><literal type="number">0x791d4014</literal></expr>, <expr><literal type="number">0x7ddc5da3</literal></expr>, <expr><literal type="number">0x709f7b7a</literal></expr>,
<expr><literal type="number">0x745e66cd</literal></expr>, <expr><literal type="number">0x9823b6e0</literal></expr>, <expr><literal type="number">0x9ce2ab57</literal></expr>, <expr><literal type="number">0x91a18d8e</literal></expr>, <expr><literal type="number">0x95609039</literal></expr>,
<expr><literal type="number">0x8b27c03c</literal></expr>, <expr><literal type="number">0x8fe6dd8b</literal></expr>, <expr><literal type="number">0x82a5fb52</literal></expr>, <expr><literal type="number">0x8664e6e5</literal></expr>, <expr><literal type="number">0xbe2b5b58</literal></expr>,
<expr><literal type="number">0xbaea46ef</literal></expr>, <expr><literal type="number">0xb7a96036</literal></expr>, <expr><literal type="number">0xb3687d81</literal></expr>, <expr><literal type="number">0xad2f2d84</literal></expr>, <expr><literal type="number">0xa9ee3033</literal></expr>,
<expr><literal type="number">0xa4ad16ea</literal></expr>, <expr><literal type="number">0xa06c0b5d</literal></expr>, <expr><literal type="number">0xd4326d90</literal></expr>, <expr><literal type="number">0xd0f37027</literal></expr>, <expr><literal type="number">0xddb056fe</literal></expr>,
<expr><literal type="number">0xd9714b49</literal></expr>, <expr><literal type="number">0xc7361b4c</literal></expr>, <expr><literal type="number">0xc3f706fb</literal></expr>, <expr><literal type="number">0xceb42022</literal></expr>, <expr><literal type="number">0xca753d95</literal></expr>,
<expr><literal type="number">0xf23a8028</literal></expr>, <expr><literal type="number">0xf6fb9d9f</literal></expr>, <expr><literal type="number">0xfbb8bb46</literal></expr>, <expr><literal type="number">0xff79a6f1</literal></expr>, <expr><literal type="number">0xe13ef6f4</literal></expr>,
<expr><literal type="number">0xe5ffeb43</literal></expr>, <expr><literal type="number">0xe8bccd9a</literal></expr>, <expr><literal type="number">0xec7dd02d</literal></expr>, <expr><literal type="number">0x34867077</literal></expr>, <expr><literal type="number">0x30476dc0</literal></expr>,
<expr><literal type="number">0x3d044b19</literal></expr>, <expr><literal type="number">0x39c556ae</literal></expr>, <expr><literal type="number">0x278206ab</literal></expr>, <expr><literal type="number">0x23431b1c</literal></expr>, <expr><literal type="number">0x2e003dc5</literal></expr>,
<expr><literal type="number">0x2ac12072</literal></expr>, <expr><literal type="number">0x128e9dcf</literal></expr>, <expr><literal type="number">0x164f8078</literal></expr>, <expr><literal type="number">0x1b0ca6a1</literal></expr>, <expr><literal type="number">0x1fcdbb16</literal></expr>,
<expr><literal type="number">0x018aeb13</literal></expr>, <expr><literal type="number">0x054bf6a4</literal></expr>, <expr><literal type="number">0x0808d07d</literal></expr>, <expr><literal type="number">0x0cc9cdca</literal></expr>, <expr><literal type="number">0x7897ab07</literal></expr>,
<expr><literal type="number">0x7c56b6b0</literal></expr>, <expr><literal type="number">0x71159069</literal></expr>, <expr><literal type="number">0x75d48dde</literal></expr>, <expr><literal type="number">0x6b93dddb</literal></expr>, <expr><literal type="number">0x6f52c06c</literal></expr>,
<expr><literal type="number">0x6211e6b5</literal></expr>, <expr><literal type="number">0x66d0fb02</literal></expr>, <expr><literal type="number">0x5e9f46bf</literal></expr>, <expr><literal type="number">0x5a5e5b08</literal></expr>, <expr><literal type="number">0x571d7dd1</literal></expr>,
<expr><literal type="number">0x53dc6066</literal></expr>, <expr><literal type="number">0x4d9b3063</literal></expr>, <expr><literal type="number">0x495a2dd4</literal></expr>, <expr><literal type="number">0x44190b0d</literal></expr>, <expr><literal type="number">0x40d816ba</literal></expr>,
<expr><literal type="number">0xaca5c697</literal></expr>, <expr><literal type="number">0xa864db20</literal></expr>, <expr><literal type="number">0xa527fdf9</literal></expr>, <expr><literal type="number">0xa1e6e04e</literal></expr>, <expr><literal type="number">0xbfa1b04b</literal></expr>,
<expr><literal type="number">0xbb60adfc</literal></expr>, <expr><literal type="number">0xb6238b25</literal></expr>, <expr><literal type="number">0xb2e29692</literal></expr>, <expr><literal type="number">0x8aad2b2f</literal></expr>, <expr><literal type="number">0x8e6c3698</literal></expr>,
<expr><literal type="number">0x832f1041</literal></expr>, <expr><literal type="number">0x87ee0df6</literal></expr>, <expr><literal type="number">0x99a95df3</literal></expr>, <expr><literal type="number">0x9d684044</literal></expr>, <expr><literal type="number">0x902b669d</literal></expr>,
<expr><literal type="number">0x94ea7b2a</literal></expr>, <expr><literal type="number">0xe0b41de7</literal></expr>, <expr><literal type="number">0xe4750050</literal></expr>, <expr><literal type="number">0xe9362689</literal></expr>, <expr><literal type="number">0xedf73b3e</literal></expr>,
<expr><literal type="number">0xf3b06b3b</literal></expr>, <expr><literal type="number">0xf771768c</literal></expr>, <expr><literal type="number">0xfa325055</literal></expr>, <expr><literal type="number">0xfef34de2</literal></expr>, <expr><literal type="number">0xc6bcf05f</literal></expr>,
<expr><literal type="number">0xc27dede8</literal></expr>, <expr><literal type="number">0xcf3ecb31</literal></expr>, <expr><literal type="number">0xcbffd686</literal></expr>, <expr><literal type="number">0xd5b88683</literal></expr>, <expr><literal type="number">0xd1799b34</literal></expr>,
<expr><literal type="number">0xdc3abded</literal></expr>, <expr><literal type="number">0xd8fba05a</literal></expr>, <expr><literal type="number">0x690ce0ee</literal></expr>, <expr><literal type="number">0x6dcdfd59</literal></expr>, <expr><literal type="number">0x608edb80</literal></expr>,
<expr><literal type="number">0x644fc637</literal></expr>, <expr><literal type="number">0x7a089632</literal></expr>, <expr><literal type="number">0x7ec98b85</literal></expr>, <expr><literal type="number">0x738aad5c</literal></expr>, <expr><literal type="number">0x774bb0eb</literal></expr>,
<expr><literal type="number">0x4f040d56</literal></expr>, <expr><literal type="number">0x4bc510e1</literal></expr>, <expr><literal type="number">0x46863638</literal></expr>, <expr><literal type="number">0x42472b8f</literal></expr>, <expr><literal type="number">0x5c007b8a</literal></expr>,
<expr><literal type="number">0x58c1663d</literal></expr>, <expr><literal type="number">0x558240e4</literal></expr>, <expr><literal type="number">0x51435d53</literal></expr>, <expr><literal type="number">0x251d3b9e</literal></expr>, <expr><literal type="number">0x21dc2629</literal></expr>,
<expr><literal type="number">0x2c9f00f0</literal></expr>, <expr><literal type="number">0x285e1d47</literal></expr>, <expr><literal type="number">0x36194d42</literal></expr>, <expr><literal type="number">0x32d850f5</literal></expr>, <expr><literal type="number">0x3f9b762c</literal></expr>,
<expr><literal type="number">0x3b5a6b9b</literal></expr>, <expr><literal type="number">0x0315d626</literal></expr>, <expr><literal type="number">0x07d4cb91</literal></expr>, <expr><literal type="number">0x0a97ed48</literal></expr>, <expr><literal type="number">0x0e56f0ff</literal></expr>,
<expr><literal type="number">0x1011a0fa</literal></expr>, <expr><literal type="number">0x14d0bd4d</literal></expr>, <expr><literal type="number">0x19939b94</literal></expr>, <expr><literal type="number">0x1d528623</literal></expr>, <expr><literal type="number">0xf12f560e</literal></expr>,
<expr><literal type="number">0xf5ee4bb9</literal></expr>, <expr><literal type="number">0xf8ad6d60</literal></expr>, <expr><literal type="number">0xfc6c70d7</literal></expr>, <expr><literal type="number">0xe22b20d2</literal></expr>, <expr><literal type="number">0xe6ea3d65</literal></expr>,
<expr><literal type="number">0xeba91bbc</literal></expr>, <expr><literal type="number">0xef68060b</literal></expr>, <expr><literal type="number">0xd727bbb6</literal></expr>, <expr><literal type="number">0xd3e6a601</literal></expr>, <expr><literal type="number">0xdea580d8</literal></expr>,
<expr><literal type="number">0xda649d6f</literal></expr>, <expr><literal type="number">0xc423cd6a</literal></expr>, <expr><literal type="number">0xc0e2d0dd</literal></expr>, <expr><literal type="number">0xcda1f604</literal></expr>, <expr><literal type="number">0xc960ebb3</literal></expr>,
<expr><literal type="number">0xbd3e8d7e</literal></expr>, <expr><literal type="number">0xb9ff90c9</literal></expr>, <expr><literal type="number">0xb4bcb610</literal></expr>, <expr><literal type="number">0xb07daba7</literal></expr>, <expr><literal type="number">0xae3afba2</literal></expr>,
<expr><literal type="number">0xaafbe615</literal></expr>, <expr><literal type="number">0xa7b8c0cc</literal></expr>, <expr><literal type="number">0xa379dd7b</literal></expr>, <expr><literal type="number">0x9b3660c6</literal></expr>, <expr><literal type="number">0x9ff77d71</literal></expr>,
<expr><literal type="number">0x92b45ba8</literal></expr>, <expr><literal type="number">0x9675461f</literal></expr>, <expr><literal type="number">0x8832161a</literal></expr>, <expr><literal type="number">0x8cf30bad</literal></expr>, <expr><literal type="number">0x81b02d74</literal></expr>,
<expr><literal type="number">0x857130c3</literal></expr>, <expr><literal type="number">0x5d8a9099</literal></expr>, <expr><literal type="number">0x594b8d2e</literal></expr>, <expr><literal type="number">0x5408abf7</literal></expr>, <expr><literal type="number">0x50c9b640</literal></expr>,
<expr><literal type="number">0x4e8ee645</literal></expr>, <expr><literal type="number">0x4a4ffbf2</literal></expr>, <expr><literal type="number">0x470cdd2b</literal></expr>, <expr><literal type="number">0x43cdc09c</literal></expr>, <expr><literal type="number">0x7b827d21</literal></expr>,
<expr><literal type="number">0x7f436096</literal></expr>, <expr><literal type="number">0x7200464f</literal></expr>, <expr><literal type="number">0x76c15bf8</literal></expr>, <expr><literal type="number">0x68860bfd</literal></expr>, <expr><literal type="number">0x6c47164a</literal></expr>,
<expr><literal type="number">0x61043093</literal></expr>, <expr><literal type="number">0x65c52d24</literal></expr>, <expr><literal type="number">0x119b4be9</literal></expr>, <expr><literal type="number">0x155a565e</literal></expr>, <expr><literal type="number">0x18197087</literal></expr>,
<expr><literal type="number">0x1cd86d30</literal></expr>, <expr><literal type="number">0x029f3d35</literal></expr>, <expr><literal type="number">0x065e2082</literal></expr>, <expr><literal type="number">0x0b1d065b</literal></expr>, <expr><literal type="number">0x0fdc1bec</literal></expr>,
<expr><literal type="number">0x3793a651</literal></expr>, <expr><literal type="number">0x3352bbe6</literal></expr>, <expr><literal type="number">0x3e119d3f</literal></expr>, <expr><literal type="number">0x3ad08088</literal></expr>, <expr><literal type="number">0x2497d08d</literal></expr>,
<expr><literal type="number">0x2056cd3a</literal></expr>, <expr><literal type="number">0x2d15ebe3</literal></expr>, <expr><literal type="number">0x29d4f654</literal></expr>, <expr><literal type="number">0xc5a92679</literal></expr>, <expr><literal type="number">0xc1683bce</literal></expr>,
<expr><literal type="number">0xcc2b1d17</literal></expr>, <expr><literal type="number">0xc8ea00a0</literal></expr>, <expr><literal type="number">0xd6ad50a5</literal></expr>, <expr><literal type="number">0xd26c4d12</literal></expr>, <expr><literal type="number">0xdf2f6bcb</literal></expr>,
<expr><literal type="number">0xdbee767c</literal></expr>, <expr><literal type="number">0xe3a1cbc1</literal></expr>, <expr><literal type="number">0xe760d676</literal></expr>, <expr><literal type="number">0xea23f0af</literal></expr>, <expr><literal type="number">0xeee2ed18</literal></expr>,
<expr><literal type="number">0xf0a5bd1d</literal></expr>, <expr><literal type="number">0xf464a0aa</literal></expr>, <expr><literal type="number">0xf9278673</literal></expr>, <expr><literal type="number">0xfde69bc4</literal></expr>, <expr><literal type="number">0x89b8fd09</literal></expr>,
<expr><literal type="number">0x8d79e0be</literal></expr>, <expr><literal type="number">0x803ac667</literal></expr>, <expr><literal type="number">0x84fbdbd0</literal></expr>, <expr><literal type="number">0x9abc8bd5</literal></expr>, <expr><literal type="number">0x9e7d9662</literal></expr>,
<expr><literal type="number">0x933eb0bb</literal></expr>, <expr><literal type="number">0x97ffad0c</literal></expr>, <expr><literal type="number">0xafb010b1</literal></expr>, <expr><literal type="number">0xab710d06</literal></expr>, <expr><literal type="number">0xa6322bdf</literal></expr>,
<expr><literal type="number">0xa2f33668</literal></expr>, <expr><literal type="number">0xbcb4666d</literal></expr>, <expr><literal type="number">0xb8757bda</literal></expr>, <expr><literal type="number">0xb5365d03</literal></expr>, <expr><literal type="number">0xb1f740b4</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>safe_char</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mtree_quote</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>start</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>str</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>safe_char</name><index>[<expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>str</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">8</literal> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>str</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>str</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>mtree_indent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>fn</name></decl>, <decl><type ref="prev"/><name>nd</name></decl>, <decl><type ref="prev"/><name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>classic</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>indent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pd</name> <operator>=</operator> <name><name>mtree</name><operator>-&gt;</operator><name>depth</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>nd</name> <operator>=</operator> <ternary><condition><expr><name><name>mtree</name><operator>-&gt;</operator><name>depth</name></name></expr>?</condition><then><expr><literal type="number">4</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>pd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nd</name> <operator>=</operator> <name>pd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>r</name> <operator>=</operator> <name><name>mtree</name><operator>-&gt;</operator><name>ebuf</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>r</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nd</name> <operator>+</operator> <name>pd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nd</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>-</operator><name>s</name><operator>)</operator> <operator>&gt;</operator> <name>INDENTNAMELEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">" \\\n"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>INDENTNAMELEN</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>pd</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>r</name> <operator>-</operator><name>s</name> <operator>+</operator> <name>nd</name><operator>)</operator></expr>;</init>
<condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>INDENTNAMELEN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>++</operator><name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pd</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>&lt;=</operator> <name>MAXLINELEN</name> <operator>-</operator> <literal type="number">3</literal> <operator>-</operator> <name>INDENTNAMELEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>r</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">" \\\n"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>INDENTNAMELEN</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>pd</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>r</name> <operator>=</operator> <operator>++</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>fn</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nd</name> <operator>+</operator> <name>pd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pd</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXLINELEN</name> <operator>-</operator> <literal type="number">3</literal> <operator>-</operator> <name>INDENTNAMELEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">" \\\n"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>INDENTNAMELEN</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>pd</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>++</operator><name>x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>ebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_global</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>setstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>unsetstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>att_counter_set</name></name> <modifier>*</modifier></type><name>acs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keys</name></decl>, <decl><type ref="prev"/><name>oldkeys</name></decl>, <decl><type ref="prev"/><name>effkeys</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unsetstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;</operator> <name>SET_KEYS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>oldkeys</name> <operator>=</operator> <name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keys</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>effkeys</name> <operator>=</operator> <name>keys</name></expr>;</expr_stmt>
<expr_stmt><expr><name>acs</name> <operator>=</operator> <operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>acs</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>processing</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>effkeys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_TYPE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>uid_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>effkeys</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>F_UNAME</name> <operator>|</operator> <name>F_UID</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>oldkeys</name> <operator>&amp;</operator> <operator>(</operator><name>F_UNAME</name> <operator>|</operator> <name>F_UID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>uid_list</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name><name>acs</name><operator>-&gt;</operator><name>uid_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>effkeys</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>F_UNAME</name> <operator>|</operator> <name>F_UID</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>gid_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>effkeys</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>F_GNAME</name> <operator>|</operator> <name>F_GID</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>oldkeys</name> <operator>&amp;</operator> <operator>(</operator><name>F_GNAME</name> <operator>|</operator> <name>F_GID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>gid_list</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>gid</name></name> <operator>==</operator> <name><name>acs</name><operator>-&gt;</operator><name>gid_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>gid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>effkeys</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>F_GNAME</name> <operator>|</operator> <name>F_GID</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>mode_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>effkeys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_MODE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>oldkeys</name> <operator>&amp;</operator> <name>F_MODE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>mode_list</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name><name>acs</name><operator>-&gt;</operator><name>mode_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>effkeys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_MODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>flags_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>effkeys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_FLAGS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>oldkeys</name> <operator>&amp;</operator> <name>F_FLAGS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>flags_list</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator>
<operator>(</operator><name><name>acs</name><operator>-&gt;</operator><name>flags_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>fflags_set</name></name> <operator>==</operator>
<name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fflags_set</name></name> <operator>&amp;&amp;</operator>
<name><name>acs</name><operator>-&gt;</operator><name>flags_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>fflags_clear</name></name> <operator>==</operator>
<name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fflags_clear</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>effkeys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>uid_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>F_UNAME</name> <operator>|</operator> <name>F_UID</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>gid_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>F_GNAME</name> <operator>|</operator> <name>F_GID</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>mode_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_MODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>flags_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>effkeys</name> <operator>&amp;</operator> <name>F_TYPE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>dironly</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>, <argument><expr><literal type="string">" type=dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AE_IFDIR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>, <argument><expr><literal type="string">" type=file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AE_IFREG</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>effkeys</name> <operator>&amp;</operator> <name>F_UNAME</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>acs</name><operator>-&gt;</operator><name>uid_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>uname</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>, <argument><expr><literal type="string">" uname="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_quote</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>, <argument><expr><name><name>acs</name><operator>-&gt;</operator><name>uid_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>uname</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_UNAME</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oldkeys</name> <operator>&amp;</operator> <name>F_UNAME</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unsetstr</name></expr></argument>, <argument><expr><literal type="string">" uname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>effkeys</name> <operator>&amp;</operator> <name>F_UID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>acs</name><operator>-&gt;</operator><name>uid_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>, <argument><expr><literal type="string">" uid=%jd"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>effkeys</name> <operator>&amp;</operator> <name>F_GNAME</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>acs</name><operator>-&gt;</operator><name>gid_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>gname</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>, <argument><expr><literal type="string">" gname="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_quote</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>, <argument><expr><name><name>acs</name><operator>-&gt;</operator><name>gid_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>gname</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_GNAME</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oldkeys</name> <operator>&amp;</operator> <name>F_GNAME</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unsetstr</name></expr></argument>, <argument><expr><literal type="string">" gname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>effkeys</name> <operator>&amp;</operator> <name>F_GID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>gid</name></name> <operator>=</operator> <name><name>acs</name><operator>-&gt;</operator><name>gid_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>gid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>, <argument><expr><literal type="string">" gid=%jd"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>effkeys</name> <operator>&amp;</operator> <name>F_MODE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name><name>acs</name><operator>-&gt;</operator><name>mode_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>, <argument><expr><literal type="string">" mode=%o"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>effkeys</name> <operator>&amp;</operator> <name>F_FLAGS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>acs</name><operator>-&gt;</operator><name>flags_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>fflags_text</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>, <argument><expr><literal type="string">" flags="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_quote</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>,
<argument><expr><name><name>acs</name><operator>-&gt;</operator><name>flags_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>fflags_text</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fflags_set</name></name> <operator>=</operator>
<name><name>acs</name><operator>-&gt;</operator><name>flags_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>fflags_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fflags_clear</name></name> <operator>=</operator>
<name><name>acs</name><operator>-&gt;</operator><name>flags_list</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>fflags_clear</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_FLAGS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oldkeys</name> <operator>&amp;</operator> <name>F_FLAGS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unsetstr</name></expr></argument>, <argument><expr><literal type="string">" flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>unsetstr</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"/unset%s\n"</literal></expr></argument>, <argument><expr><name><name>unsetstr</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unsetstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>setstr</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"/set%s\n"</literal></expr></argument>, <argument><expr><name><name>setstr</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keys</name></name> <operator>=</operator> <name>keys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>processing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type>
<name>attr_counter_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>ac</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ac</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ac</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>m_entry</name></name> <operator>=</operator> <name>me</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ac</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>attr_counter_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>ac</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>top</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ac</name> <operator>=</operator> <operator>*</operator><name>top</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ac</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tac</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ac</name> <operator>=</operator> <name>tac</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>top</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>attr_counter_inc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>last</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>pac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>top</name> <operator>==</operator> <name>ac</name> <operator>||</operator> <name><name>ac</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>ac</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>pac</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>prev</name></name></expr>;</init> <condition><expr><name>pac</name></expr>;</condition> <incr><expr><name>pac</name> <operator>=</operator> <name><name>pac</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pac</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>ac</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pac</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>pac</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pac</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pac</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>top</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>top</name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>last</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ac</name> <operator>=</operator> <call><name>attr_counter_new</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>attr_counter_set_collect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_counter</name></name> <modifier>*</modifier></type><name>ac</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>att_counter_set</name></name> <modifier>*</modifier></type><name>acs</name> <init>= <expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>acs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keys</name> <init>= <expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keys</name> <operator>&amp;</operator> <operator>(</operator><name>F_UNAME</name> <operator>|</operator> <name>F_UID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>uid_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>acs</name><operator>-&gt;</operator><name>uid_list</name></name> <operator>=</operator> <call><name>attr_counter_new</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>uid_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ac</name> <operator>=</operator> <name><name>acs</name><operator>-&gt;</operator><name>uid_list</name></name></expr>;</init> <condition><expr><name>ac</name></expr>;</condition> <incr><expr><name>ac</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name><name>me</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>attr_counter_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acs</name><operator>-&gt;</operator><name>uid_list</name></name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keys</name> <operator>&amp;</operator> <operator>(</operator><name>F_GNAME</name> <operator>|</operator> <name>F_GID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>gid_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>acs</name><operator>-&gt;</operator><name>gid_list</name></name> <operator>=</operator> <call><name>attr_counter_new</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>gid_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ac</name> <operator>=</operator> <name><name>acs</name><operator>-&gt;</operator><name>gid_list</name></name></expr>;</init> <condition><expr><name>ac</name></expr>;</condition> <incr><expr><name>ac</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>gid</name></name> <operator>==</operator> <name><name>me</name><operator>-&gt;</operator><name>gid</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>attr_counter_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acs</name><operator>-&gt;</operator><name>gid_list</name></name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keys</name> <operator>&amp;</operator> <name>F_MODE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>mode_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>acs</name><operator>-&gt;</operator><name>mode_list</name></name> <operator>=</operator> <call><name>attr_counter_new</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>mode_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ac</name> <operator>=</operator> <name><name>acs</name><operator>-&gt;</operator><name>mode_list</name></name></expr>;</init> <condition><expr><name>ac</name></expr>;</condition> <incr><expr><name>ac</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name><name>me</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>attr_counter_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acs</name><operator>-&gt;</operator><name>mode_list</name></name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keys</name> <operator>&amp;</operator> <name>F_FLAGS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>flags_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>acs</name><operator>-&gt;</operator><name>flags_list</name></name> <operator>=</operator> <call><name>attr_counter_new</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>acs</name><operator>-&gt;</operator><name>flags_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ac</name> <operator>=</operator> <name><name>acs</name><operator>-&gt;</operator><name>flags_list</name></name></expr>;</init> <condition><expr><name>ac</name></expr>;</condition> <incr><expr><name>ac</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>fflags_set</name></name> <operator>==</operator> <name><name>me</name><operator>-&gt;</operator><name>fflags_set</name></name> <operator>&amp;&amp;</operator>
<name><name>ac</name><operator>-&gt;</operator><name>m_entry</name><operator>-&gt;</operator><name>fflags_clear</name></name> <operator>==</operator>
<name><name>me</name><operator>-&gt;</operator><name>fflags_clear</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>attr_counter_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acs</name><operator>-&gt;</operator><name>flags_list</name></name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>attr_counter_set_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>att_counter_set</name></name> <modifier>*</modifier></type><name>acs</name> <init>= <expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>acs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>attr_counter_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acs</name><operator>-&gt;</operator><name>uid_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attr_counter_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acs</name><operator>-&gt;</operator><name>gid_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attr_counter_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acs</name><operator>-&gt;</operator><name>mode_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attr_counter_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acs</name><operator>-&gt;</operator><name>flags_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_global_set_keys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>keys</name></decl>;</decl_stmt>

<expr_stmt><expr><name>keys</name> <operator>=</operator> <name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keys</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>keys</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keys</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_GNAME</name> <operator>|</operator> <name>F_GID</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>gid</name></name> <operator>==</operator> <name><name>me</name><operator>-&gt;</operator><name>gid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>F_GNAME</name> <operator>|</operator> <name>F_GID</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keys</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_UNAME</name> <operator>|</operator> <name>F_UID</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name><name>me</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>F_UNAME</name> <operator>|</operator> <name>F_UID</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keys</name></name> <operator>&amp;</operator> <name>F_FLAGS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fflags_set</name></name> <operator>==</operator> <name><name>me</name><operator>-&gt;</operator><name>fflags_set</name></name> <operator>&amp;&amp;</operator>
<name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fflags_clear</name></name> <operator>==</operator> <name><name>me</name><operator>-&gt;</operator><name>fflags_clear</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keys</name></name> <operator>&amp;</operator> <name>F_MODE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name><name>me</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_MODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>filetype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AE_IFLNK</name></expr>:</case> <case>case <expr><name>AE_IFSOCK</name></expr>:</case> <case>case <expr><name>AE_IFCHR</name></expr>:</case>
<case>case <expr><name>AE_IFBLK</name></expr>:</case> <case>case <expr><name>AE_IFIFO</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>AE_IFDIR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keys</name></name> <operator>&amp;</operator> <name>F_TYPE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>AE_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_TYPE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFREG</name></expr>:</case>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keys</name></name> <operator>&amp;</operator> <name>F_TYPE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>AE_IFREG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keys</name> <operator>&amp;=</operator> <operator>~</operator><name>F_TYPE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>keys</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mtree_entry_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>m_entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>archive_rb_tree_ops</name></name></type> <name>rb_ops</name> <init>= <expr><block>{
<expr><name>mtree_entry_cmp_node</name></expr>, <expr><name>mtree_entry_cmp_key</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>me</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>me</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for a mtree entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>m_entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mtree_entry_setup_filenames</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>me</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mtree_entry_free</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>m_entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>archive_entry_symlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>nlink</name></name> <operator>=</operator> <call><name>archive_entry_nlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>filetype</name></name> <operator>=</operator> <call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">07777</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>archive_entry_uid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <call><name>archive_entry_gid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>archive_entry_uname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>archive_entry_gname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>gname</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>archive_entry_fflags_text</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>fflags_text</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_fflags</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>fflags_set</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>fflags_clear</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>mtime_nsec</name></name> <operator>=</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>rdevmajor</name></name> <operator>=</operator> <call><name>archive_entry_rdevmajor</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>rdevminor</name></name> <operator>=</operator> <call><name>archive_entry_rdevminor</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>devmajor</name></name> <operator>=</operator> <call><name>archive_entry_devmajor</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>devminor</name></name> <operator>=</operator> <call><name>archive_entry_devminor</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>ino</name></name> <operator>=</operator> <call><name>archive_entry_ino</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>filetype</name></name> <operator>==</operator> <name>AE_IFDIR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>dir_info</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>me</name><operator>-&gt;</operator><name>dir_info</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>dir_info</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mtree_entry_free</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for a mtree entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>m_entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__archive_rb_tree_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>rbtree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>me</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>chnext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>filetype</name></name> <operator>==</operator> <name>AE_IFREG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>reg_info</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>me</name><operator>-&gt;</operator><name>reg_info</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>reg_info</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mtree_entry_free</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for a mtree entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>m_entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>reg_info</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>m_entry</name> <operator>=</operator> <name>me</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mtree_entry_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>parentdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>gname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>fflags_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>me</name><operator>-&gt;</operator><name>dir_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>me</name><operator>-&gt;</operator><name>reg_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_mtree_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name><init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>mtree_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"#mtree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;</operator> <name>SET_KEYS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>output_global_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>dironly</name></name> <operator>&amp;&amp;</operator> <call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AE_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>mtree_entry_new</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtree_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mtree_entry_tree_add</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtree_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mtree_entry_free</name><argument_list>(<argument><expr><name>mtree_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>mtree_entry</name></name> <operator>=</operator> <name>mtree_entry</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>mtree_entry</name><operator>-&gt;</operator><name>reg_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sum_init</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>r2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_mtree_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keys</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>dir_info</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>classic</name></name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mtree</name><operator>-&gt;</operator><name>dironly</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
<argument><expr><literal type="string">"#%s/%s\n"</literal></expr></argument>,
<argument><expr><name><name>me</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>me</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
<argument><expr><literal type="string">"#%s\n"</literal></expr></argument>,
<argument><expr><name><name>me</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>output_global_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_global</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>ebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>indent</name></name> <operator>||</operator> <name><name>mtree</name><operator>-&gt;</operator><name>classic</name></name><operator>)</operator></expr>?</condition><then> <expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>ebuf</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mtree</name><operator>-&gt;</operator><name>classic</name></name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>mtree_quote</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>me</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mtree_quote</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>me</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>get_global_set_keys</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_NLINK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>me</name><operator>-&gt;</operator><name>nlink</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>me</name><operator>-&gt;</operator><name>filetype</name></name> <operator>!=</operator> <name>AE_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" nlink=%u"</literal></expr></argument>, <argument><expr><name><name>me</name><operator>-&gt;</operator><name>nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_GNAME</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>gname</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" gname="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_quote</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>me</name><operator>-&gt;</operator><name>gname</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_UNAME</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" uname="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_quote</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>me</name><operator>-&gt;</operator><name>uname</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_FLAGS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>fflags_text</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" flags="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_quote</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>me</name><operator>-&gt;</operator><name>fflags_text</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>processing</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keys</name></name> <operator>&amp;</operator> <name>F_FLAGS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" flags=none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_TIME</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" time=%jd.%jd"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>mtime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_MODE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" mode=%o"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_GID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" gid=%jd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_UID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" uid=%jd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_INO</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" inode=%jd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_RESDEV</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>,
<argument><expr><literal type="string">" resdevice=native,%ju,%ju"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>filetype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AE_IFLNK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_TYPE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" type=link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_SLINK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" link="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_quote</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>me</name><operator>-&gt;</operator><name>symlink</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFSOCK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_TYPE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" type=socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFCHR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_TYPE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" type=char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_DEV</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>,
<argument><expr><literal type="string">" device=native,%ju,%ju"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>rdevmajor</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>rdevminor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFBLK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_TYPE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" type=block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_DEV</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>,
<argument><expr><literal type="string">" device=native,%ju,%ju"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>rdevmajor</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>rdevminor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFDIR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_TYPE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" type=dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFIFO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_TYPE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" type=fifo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFREG</name></expr>:</case>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_TYPE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" type=file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keys</name> <operator>&amp;</operator> <name>F_SIZE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" size=%jd"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>me</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>reg_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sum_write</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>me</name><operator>-&gt;</operator><name>reg_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>indent</name></name> <operator>||</operator> <name><name>mtree</name><operator>-&gt;</operator><name>classic</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mtree_indent</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_write_output</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>mtree</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>mtree</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_dot_dot_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>indent</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pd</name> <init>= <expr><name><name>mtree</name><operator>-&gt;</operator><name>depth</name></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"#%s/%s\n"</literal></expr></argument>,
<argument><expr><name><name>n</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>indent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>ebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>ebuf</name></name></expr></argument>, <argument><expr><literal type="string">"..\n\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>dironly</name></name><operator>)</operator></expr>?</condition><then><expr><literal type="number">3</literal></expr></then><else>:<expr><literal type="number">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_indent</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"..\n\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>dironly</name></name><operator>)</operator></expr>?</condition><then><expr><literal type="number">3</literal></expr></then><else>:<expr><literal type="number">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_write_output</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>mtree</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>mtree</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_mtree_entry_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>np</name> <init>= <expr><name><name>mtree</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>output_global_set</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>attr_counter_set_reset</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ARCHIVE_RB_TREE_FOREACH</name><argument_list>(<argument>n</argument>, <argument>&amp;(np-&gt;dir_info-&gt;rbtree)</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator>struct <name>mtree_entry</name> <operator>*</operator><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>attr_counter_set_collect</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>np</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>virtual</name></name> <operator>||</operator> <name><name>mtree</name><operator>-&gt;</operator><name>classic</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_mtree_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>output_global_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_global</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>depth</name></name><operator>++</operator></expr>;</expr_stmt>
<macro><name>ARCHIVE_RB_TREE_FOREACH</name><argument_list>(<argument>n</argument>, <argument>&amp;(np-&gt;dir_info-&gt;rbtree)</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator>struct <name>mtree_entry</name> <operator>*</operator><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>dir_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mtree_entry_add_child_tail</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_mtree_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>indent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>depth</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>classic</name></name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_dot_dot_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>np</name> <operator>!=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>chnext</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>indent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>classic</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_dot_dot_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>chnext</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>np</name> <operator>!=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_mtree_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>me</name> <operator>=</operator> <name><name>mtree</name><operator>-&gt;</operator><name>mtree_entry</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>mtree_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>reg_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sum_final</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>, <argument><expr><name><name>me</name><operator>-&gt;</operator><name>reg_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_mtree_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name><init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>root</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_mtree_entry_tree</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_write_set_bytes_in_last_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>__archive_write_output</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>mtree</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>mtree</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>archive_write_mtree_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name><init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>mtree</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>mtree</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>mtree_entry</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>mtree_entry</name><operator>-&gt;</operator><name>filetype</name></name> <operator>==</operator> <name>AE_IFREG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sum_update</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_mtree_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name><init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mtree</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>mtree_entry_register_free</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>cur_dirstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>ebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attr_counter_set_free</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_mtree_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name><init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keybit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"cksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_CKSUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"device"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_DEV</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"dironly"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>dironly</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_GID</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"gname"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_GNAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"indent"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"inode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_INO</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_SLINK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"md5"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"md5digest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_MD5</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_MODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"nlink"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_NLINK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"resdevice"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_RESDEV</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ripemd160digest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"rmd160"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"rmd160digest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_RMD160</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"sha1digest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_SHA1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"sha256digest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_SHA256</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"sha384"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"sha384digest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_SHA384</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"sha512"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"sha512digest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_SHA512</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_TIME</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_TYPE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_UID</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"uname"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>F_UNAME</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"use-set"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>output_global_set</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>keybit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>|=</operator> <name>keybit</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;=</operator> <operator>~</operator><name>keybit</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_set_format_mtree_default</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mtree</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mtree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate mtree data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>mtree_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>set</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mtree</name><operator>-&gt;</operator><name>set</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>=</operator> <name>DEFAULT_KEYS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>dironly</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>ebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_entry_register_init</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name> <operator>=</operator> <name>mtree</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name> <operator>=</operator> <name>archive_write_mtree_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_name</name></name> <operator>=</operator> <literal type="string">"mtree"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_options</name></name> <operator>=</operator> <name>archive_write_mtree_options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_write_header</name></name> <operator>=</operator> <name>archive_write_mtree_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_close</name></name> <operator>=</operator> <name>archive_write_mtree_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_write_data</name></name> <operator>=</operator> <name>archive_write_mtree_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_finish_entry</name></name> <operator>=</operator> <name>archive_write_mtree_finish_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>=</operator> <name>ARCHIVE_FORMAT_MTREE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <literal type="string">"mtree"</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_write_set_format_mtree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_write_set_format_mtree_default</name><argument_list>(<argument><expr><name>_a</name></expr></argument>,
<argument><expr><literal type="string">"archive_write_set_format_mtree"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_write_set_format_mtree_classic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_write_set_format_mtree_default</name><argument_list>(<argument><expr><name>_a</name></expr></argument>,
<argument><expr><literal type="string">"archive_write_set_format_mtree_classic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mtree</name> <operator>=</operator> <operator>(</operator>struct <name>mtree_writer</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>classic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>output_global_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sum_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;</operator> <name>F_CKSUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>|=</operator> <name>F_CKSUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>crc_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;</operator> <name>F_MD5</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_md5_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>md5ctx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>|=</operator> <name>F_MD5</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;=</operator> <operator>~</operator><name>F_MD5</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_RMD160</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;</operator> <name>F_RMD160</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_rmd160_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>rmd160ctx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>|=</operator> <name>F_RMD160</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;=</operator> <operator>~</operator><name>F_RMD160</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;</operator> <name>F_SHA1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_sha1_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>sha1ctx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>|=</operator> <name>F_SHA1</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;=</operator> <operator>~</operator><name>F_SHA1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;</operator> <name>F_SHA256</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>sha256ctx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>|=</operator> <name>F_SHA256</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;=</operator> <operator>~</operator><name>F_SHA256</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;</operator> <name>F_SHA384</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_sha384_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>sha384ctx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>|=</operator> <name>F_SHA384</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;=</operator> <operator>~</operator><name>F_SHA384</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA512</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;</operator> <name>F_SHA512</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_sha512_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>sha512ctx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>|=</operator> <name>F_SHA512</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>keys</name></name> <operator>&amp;=</operator> <operator>~</operator><name>F_SHA512</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sum_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_CKSUM</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nn</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>nn</name> <operator>=</operator> <name>n</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>buff</name></expr>;</init> <condition><expr><name>nn</name><operator>--</operator></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>COMPUTE_CRC</name><argument_list>(<argument><expr><name><name>mtree</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>crc_len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_MD5</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_md5_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>md5ctx</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_RMD160</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_RMD160</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_rmd160_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>rmd160ctx</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_SHA1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_sha1_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>sha1ctx</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_SHA256</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>sha256ctx</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_SHA384</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_sha384_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>sha384ctx</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA512</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_SHA512</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_sha512_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>sha512ctx</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sum_final</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>reg_info</name></name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_CKSUM</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <name><name>mtree</name><operator>-&gt;</operator><name>crc_len</name></name></expr>;</init> <condition><expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>len</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>COMPUTE_CRC</name><argument_list>(<argument><expr><name><name>mtree</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><name>len</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <operator>~</operator><name><name>mtree</name><operator>-&gt;</operator><name>crc</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_MD5</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_md5_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>md5ctx</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>md5</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_RMD160</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_RMD160</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_rmd160_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>rmd160ctx</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>rmd160</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_SHA1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_sha1_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>sha1ctx</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>sha1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_SHA256</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_sha256_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>sha256ctx</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>sha256</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_SHA384</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_sha384_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>sha384ctx</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>sha384</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA512</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_SHA512</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_sha512_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtree</name><operator>-&gt;</operator><name>sha512ctx</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>sha512</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>=</operator> <name><name>mtree</name><operator>-&gt;</operator><name>compute_sum</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_MD5</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_RMD160</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA256</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA384</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA512</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>strappend_bin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>hex</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>hex</name><index>[<expr><name><name>bin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>hex</name><index>[<expr><name><name>bin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sum_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>reg_info</name></name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_CKSUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" cksum=%ju"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>reg</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>append_digest</name><parameter_list>(<parameter><type><name>_s</name></type></parameter>, <parameter><type><name>_r</name></type></parameter>, <parameter><type><name>_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strappend_bin(_s, _r-&gt;digest._t, sizeof(_r-&gt;digest._t))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_MD5</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" md5digest="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_digest</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_RMD160</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_RMD160</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" rmd160digest="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_digest</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>rmd160</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_SHA1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" sha1digest="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_digest</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_SHA256</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" sha256digest="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_digest</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>sha256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_SHA384</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" sha384digest="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_digest</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>sha384</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA512</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>compute_sum</name></name> <operator>&amp;</operator> <name>F_SHA512</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" sha512digest="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_digest</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>sha512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>append_digest</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mtree_entry_cmp_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>e1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>mtree_entry</name> <operator>*</operator><operator>)</operator><name>n1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>e2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>mtree_entry</name> <operator>*</operator><operator>)</operator><name>n2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>e2</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>e1</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mtree_entry_cmp_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>mtree_entry</name> <operator>*</operator><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cleanup_backslash_1</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb</name></decl>, <decl><type ref="prev"/><name>dos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <name>dos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb</name> <operator>||</operator> <operator>!</operator><name>dos</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cleanup_backslash_2</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>L</name><literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>mtree_entry_setup_filenames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dirname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>cleanup_backslash_1</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>archive_entry_pathname_w</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_wstring</name></name></type> <name>ws</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cleanup_backslash_2</name><argument_list>(<argument><expr><name><name>ws</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_string_append_from_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>ws</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>ws</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstring_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>pathname</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dirname</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>




<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>dirname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dirname</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ll</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
<name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ll</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>p</name> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>rp</name> <operator>&gt;=</operator> <name>dirname</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>rp</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>&gt;</operator> <name>dirname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dirname</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dirname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"./"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>as</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>, <argument><expr><literal type="string">"./"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>slash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>slash</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>slash</name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>, <argument><expr><name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mtree_entry_create_virtual_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>m_entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>m_entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>AE_IFDIR</name> <operator>|</operator> <literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mtree_entry_new</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>m_entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>virtual</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>m_entry</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mtree_entry_register_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>mtree</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mtree_entry_register_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mtree_entry_register_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>file</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>file_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>mtree</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file_next</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_entry_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>file_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mtree_entry_add_child_tail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>chnext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>parent</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>child</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>chnext</name></name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type>
<name>mtree_entry_find_child</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>child_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <operator>(</operator>struct <name>mtree_entry</name> <operator>*</operator><operator>)</operator><call><name>__archive_rb_tree_find_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><name>child_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>np</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_path_component</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>fn</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>n</name> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>l</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>mtree_entry_tree_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>filep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>_MAX_FNAME</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NAME_MAX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NAME_MAX</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr></cpp:elif>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>NAME_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_writer</name></name> <modifier>*</modifier></type><name>mtree</name> <init>= <expr><operator>(</operator>struct <name>mtree_writer</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>dent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>file</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <operator>*</operator><name>filep</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mtree</name><operator>-&gt;</operator><name>root</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>mtree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<goto>goto <name>same_entry</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_entry_register_add</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Internal programming error "</literal>
<literal type="string">"in generating canonical name for %s"</literal></expr></argument>,
<argument><expr><name><name>file</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fn</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>)</argument_list></call>
<operator>==</operator> <call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>mtree</name><operator>-&gt;</operator><name>cur_dirstr</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__archive_rb_tree_insert_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>cur_dirent</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator>struct <name>archive_rb_node</name> <operator>*</operator><operator>)</operator><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <operator>(</operator>struct <name>mtree_entry</name> <operator>*</operator><operator>)</operator><call><name>__archive_rb_tree_find_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>cur_dirent</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>same_entry</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>mtree</name><operator>-&gt;</operator><name>cur_dirent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_entry_register_add</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dent</name> <operator>=</operator> <name><name>mtree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>get_path_component</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"A name buffer is too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>dent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name>dent</name> <operator>==</operator> <name><name>mtree</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fn</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fn</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>mtree_entry_find_child</name><argument_list>(<argument><expr><name>dent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>np</name><operator>-&gt;</operator><name>dir_info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"`%s' is not directory, we cannot insert `%s' "</literal></expr></argument>,
<argument><expr><name><name>np</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fn</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fn</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dent</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<while>while <condition>(<expr><name><name>fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>as</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>fn</name> <operator>-</operator> <name>p</name> <operator>+</operator> <name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>as</name><operator>.</operator><name>s</name><index>[<expr><name><name>as</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>as</name><operator>.</operator><name>s</name><index>[<expr><name><name>as</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>.</operator><name>length</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mtree_entry_create_virtual_dir</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>as</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>vp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>vp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>__archive_rb_tree_insert_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator>struct <name>archive_rb_node</name> <operator>*</operator><operator>)</operator><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>dent</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>mtree_entry_register_add</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name>vp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fn</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fn</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>get_path_component</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"A name buffer is too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dent</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>cur_dirent</name></name> <operator>=</operator> <name>dent</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mtree</name><operator>-&gt;</operator><name>cur_dirstr</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mtree</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__archive_rb_tree_insert_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator>struct <name>archive_rb_node</name> <operator>*</operator><operator>)</operator><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <operator>(</operator>struct <name>mtree_entry</name> <operator>*</operator><operator>)</operator><call><name>__archive_rb_tree_find_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>same_entry</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>dent</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_entry_register_add</name><argument_list>(<argument><expr><name>mtree</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>same_entry</name>:</label>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mtree_entry_exchange_same_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>np</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>dir_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>dir_info</name><operator>-&gt;</operator><name>virtual</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>filep</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mtree_entry_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mtree_entry_exchange_same_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>np</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>mtree_entry</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Found duplicate entries `%s' and its file type is "</literal>
<literal type="string">"different"</literal></expr></argument>,
<argument><expr><name><name>np</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>gname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>gname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>gname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>fflags_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>fflags_text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>fflags_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>nlink</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>nlink</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>filetype</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>filetype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>gid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>fflags_set</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>fflags_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>fflags_clear</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>fflags_clear</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>mtime_nsec</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>mtime_nsec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>rdevmajor</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>rdevmajor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>rdevminor</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>rdevminor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>devmajor</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>devmajor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>devminor</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>devminor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>ino</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>ino</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
