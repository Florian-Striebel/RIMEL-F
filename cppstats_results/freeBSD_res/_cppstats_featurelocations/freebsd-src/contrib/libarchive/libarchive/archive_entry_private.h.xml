<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_entry_private.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_ENTRY_PRIVATE_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_ENTRY_PRIVATE_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBARCHIVE_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This header is only to be used internally to libarchive.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_acl_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_string.h"</cpp:file></cpp:include>

<struct>struct <name>ae_xattr</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ae_xattr</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ae_sparse</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ae_sparse</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>length</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ae_digest</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md5</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rmd160</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sha1</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sha256</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sha384</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sha512</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>





















<struct>struct <name>archive_entry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>archive</name></decl>;</decl_stmt>





















<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stat_valid</name></decl>;</decl_stmt>

<struct>struct <name>aest</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>aest_atime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>aest_atime_nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>aest_ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>aest_ctime_nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>aest_mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>aest_mtime_nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>aest_birthtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>aest_birthtime_nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>aest_gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>aest_ino</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>aest_nlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>aest_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>aest_uid</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>int</name></type> <name>aest_dev_is_broken_down</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>aest_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>aest_devmajor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>aest_devminor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aest_rdev_is_broken_down</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>aest_rdev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>aest_rdevmajor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>aest_rdevminor</name></decl>;</decl_stmt>
}</block> <decl><name>ae_stat</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>ae_set</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE_SET_HARDLINK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE_SET_SYMLINK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE_SET_ATIME</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE_SET_CTIME</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE_SET_MTIME</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE_SET_BIRTHTIME</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE_SET_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE_SET_INO</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE_SET_DEV</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>




<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>ae_fflags_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ae_fflags_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ae_fflags_clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>ae_gname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>ae_hardlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>ae_pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>ae_symlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>ae_uname</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>ae_sourcepath</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE_ENCRYPTION_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE_ENCRYPTION_DATA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE_ENCRYPTION_METADATA</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name>encryption</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mac_metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mac_metadata_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>ae_digest</name></name></type> <name>digest</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>archive_acl</name></name></type> <name>acl</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>ae_xattr</name></name> <modifier>*</modifier></type><name>xattr_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ae_xattr</name></name> <modifier>*</modifier></type><name>xattr_p</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>ae_sparse</name></name> <modifier>*</modifier></type><name>sparse_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ae_sparse</name></name> <modifier>*</modifier></type><name>sparse_tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ae_sparse</name></name> <modifier>*</modifier></type><name>sparse_p</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>strmode</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>ae_symlink_type</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>int</name></type>
<name>archive_entry_set_digest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
