<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_entry_strmode.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_STAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_private.h"</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_strmode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mode_t</name></type> <name><name>permbits</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0400</literal></expr>, <expr><literal type="number">0200</literal></expr>, <expr><literal type="number">0100</literal></expr>, <expr><literal type="number">0040</literal></expr>, <expr><literal type="number">0020</literal></expr>, <expr><literal type="number">0010</literal></expr>, <expr><literal type="number">0004</literal></expr>, <expr><literal type="number">0002</literal></expr>, <expr><literal type="number">0001</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>strmode</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"?rwxrwxrwx "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AE_IFREG</name></expr>:</case> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AE_IFBLK</name></expr>:</case> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AE_IFCHR</name></expr>:</case> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AE_IFDIR</name></expr>:</case> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AE_IFLNK</name></expr>:</case> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AE_IFSOCK</name></expr>:</case> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AE_IFIFO</name></expr>:</case> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_hardlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'h'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name><name>permbits</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>S_ISUID</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <literal type="number">0100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>S_ISGID</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <literal type="number">0010</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>S_ISVTX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <literal type="number">0001</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'T'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_acl_types</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>bp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
