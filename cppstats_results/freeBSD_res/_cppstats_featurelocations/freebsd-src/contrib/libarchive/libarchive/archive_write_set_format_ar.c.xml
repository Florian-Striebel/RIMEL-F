<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_write_set_format_ar.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_write_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_write_set_format_private.h"</cpp:file></cpp:include>

<struct>struct <name>ar_w</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>entry_bytes_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>entry_padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_strtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_strtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>wrote_global_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strtab</name></decl>;</decl_stmt>
}</block>;</struct>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_name_offset</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_name_size</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_date_offset</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_date_size</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_uid_offset</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_uid_size</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_gid_offset</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_gid_size</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_mode_offset</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_mode_size</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_size_offset</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_size_size</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_fmag_offset</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_fmag_size</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_write_set_format_ar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_write_ar_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>archive_write_ar_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_write_ar_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_write_ar_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_write_ar_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ar_basename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>format_octal</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>format_decimal</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>archive_write_set_format_ar_bsd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_write_set_format_ar_bsd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_write_set_format_ar</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>=</operator> <name>ARCHIVE_FORMAT_AR_BSD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <literal type="string">"ar (BSD)"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_write_set_format_ar_svr4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_write_set_format_ar_svr4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_write_set_format_ar</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>=</operator> <name>ARCHIVE_FORMAT_AR_GNU</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <literal type="string">"ar (GNU/SVR4)"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_set_format_ar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_w</name></name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ar</name> <operator>=</operator> <operator>(</operator>struct <name>ar_w</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ar</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate ar data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name> <operator>=</operator> <name>ar</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_name</name></name> <operator>=</operator> <literal type="string">"ar"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_write_header</name></name> <operator>=</operator> <name>archive_write_ar_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_write_data</name></name> <operator>=</operator> <name>archive_write_ar_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_close</name></name> <operator>=</operator> <name>archive_write_ar_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name> <operator>=</operator> <name>archive_write_ar_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_finish_entry</name></name> <operator>=</operator> <name>archive_write_ar_finish_entry</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_ar_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>append_fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ss</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>se</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_w</name></name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>append_fn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ar</name> <operator>=</operator> <operator>(</operator>struct <name>ar_w</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>is_strtab</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>pathname</name> <operator>=</operator> <call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pathname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pathname</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><literal type="string">"Invalid filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ar</name><operator>-&gt;</operator><name>wrote_global_header</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_write_output</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"!&lt;arch&gt;\n"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>wrote_global_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buff</name><index>[<expr><name>AR_fmag_offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"`\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buff</name><index>[<expr><name>AR_name_offset</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<goto>goto <name>stat</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="string">"/SYM64/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>AR_name_offset</name></expr></argument>, <argument><expr><literal type="string">"/SYM64/"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>stat</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="string">"__.SYMDEF"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>AR_name_offset</name></expr></argument>, <argument><expr><literal type="string">"__.SYMDEF"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>stat</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>is_strtab</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr><name>AR_name_offset</name></expr>]</index></name> <operator>=</operator> <name><name>buff</name><index>[<expr><name>AR_name_offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>




<goto>goto <name>size</name>;</goto>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>filename</name> <operator>=</operator> <call><name>ar_basename</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><literal type="string">"Invalid filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>==</operator> <name>ARCHIVE_FORMAT_AR_GNU</name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buff</name><index>[<expr><name>AR_name_offset</name></expr>]</index></name></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr><name>AR_name_offset</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>has_strtab</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><literal type="string">"Can't find string table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>se</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>se</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate filename buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>se</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>se</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>strtab</name></name></expr></argument>, <argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ss</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><literal type="string">"Invalid string table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name><name>buff</name><index>[<expr><name>AR_name_offset</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>format_decimal</name><argument_list>(<argument><expr><name>ss</name> <operator>-</operator> <name><name>ar</name><operator>-&gt;</operator><name>strtab</name></name></expr></argument>,
<argument><expr><name>buff</name> <operator>+</operator> <name>AR_name_offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>AR_name_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>,
<argument><expr><literal type="string">"string table offset too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>==</operator> <name>ARCHIVE_FORMAT_AR_BSD</name></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buff</name><index>[<expr><name>AR_name_offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr><name>AR_name_offset</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>AR_name_offset</name></expr></argument>, <argument><expr><literal type="string">"#1/"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>format_decimal</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>buff</name> <operator>+</operator> <name>AR_name_offset</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><name>AR_name_size</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>,
<argument><expr><literal type="string">"File name too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>append_fn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>stat</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>format_decimal</name><argument_list>(<argument><expr><call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buff</name> <operator>+</operator> <name>AR_date_offset</name></expr></argument>, <argument><expr><name>AR_date_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>,
<argument><expr><literal type="string">"File modification time too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>format_decimal</name><argument_list>(<argument><expr><call><name>archive_entry_uid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buff</name> <operator>+</operator> <name>AR_uid_offset</name></expr></argument>, <argument><expr><name>AR_uid_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>,
<argument><expr><literal type="string">"Numeric user ID too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>format_decimal</name><argument_list>(<argument><expr><call><name>archive_entry_gid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buff</name> <operator>+</operator> <name>AR_gid_offset</name></expr></argument>, <argument><expr><name>AR_gid_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>,
<argument><expr><literal type="string">"Numeric group ID too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>format_octal</name><argument_list>(<argument><expr><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buff</name> <operator>+</operator> <name>AR_mode_offset</name></expr></argument>, <argument><expr><name>AR_mode_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>,
<argument><expr><literal type="string">"Numeric mode too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AE_IFREG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><literal type="string">"Regular file required for non-pseudo member"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>size</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>format_decimal</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>buff</name> <operator>+</operator> <name>AR_size_offset</name></expr></argument>, <argument><expr><name>AR_size_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>,
<argument><expr><literal type="string">"File size out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_write_output</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>entry_padding</name></name> <operator>=</operator> <name><name>ar</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>append_fn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_write_output</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>-=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>archive_write_ar_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_w</name></name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ar</name> <operator>=</operator> <operator>(</operator>struct <name>ar_w</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name><name>ar</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>is_strtab</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>has_strtab</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><literal type="string">"More than one string tables exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>strtab</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>strtab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate strtab buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>strtab</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>strtab</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>has_strtab</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_write_output</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_ar_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_w</name></name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ar</name> <operator>=</operator> <operator>(</operator>struct <name>ar_w</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ar</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>has_strtab</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>strtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>strtab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_ar_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_w</name></name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>





<expr_stmt><expr><name>ar</name> <operator>=</operator> <operator>(</operator>struct <name>ar_w</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ar</name><operator>-&gt;</operator><name>wrote_global_header</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>wrote_global_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_write_output</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"!&lt;arch&gt;\n"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_ar_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_w</name></name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ar</name> <operator>=</operator> <operator>(</operator>struct <name>ar_w</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Entry remaining bytes larger than 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>entry_padding</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>entry_padding</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Padding wrong size: %ju should be 1 or 0"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>entry_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_write_output</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>format_octal</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'7'</literal></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>format_decimal</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>v</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'9'</literal></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ar_basename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>startp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>path</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>startp</name> <operator>=</operator> <name>endp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>startp</name> <operator>&gt;</operator> <name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>startp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>startp</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><operator>(</operator><name>startp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
