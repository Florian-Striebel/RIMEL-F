<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_match.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_getdate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_pathmatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_rb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_string.h"</cpp:file></cpp:include>

<struct>struct <name>match</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>pattern</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>match_list</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unmatched_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>unmatched_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unmatched_eof</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>match_file</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name></type> <name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mtime_nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>ctime_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ctime_nsec</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>entry_list</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>id_array</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ids</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATTERN_IS_SET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_IS_SET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_IS_SET</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<struct>struct <name>archive_match</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name></type> <name>archive</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>setflag</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>recursive_include</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>match_list</name></name></type> <name>exclusions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match_list</name></name></type> <name>inclusions</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newer_mtime_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>newer_mtime_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>newer_mtime_nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newer_ctime_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>newer_ctime_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>newer_ctime_nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>older_mtime_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>older_mtime_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>older_mtime_nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>older_ctime_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>older_ctime_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>older_ctime_nsec</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name></type> <name>exclusion_tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>entry_list</name></name></type> <name>exclusion_entry_list</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>id_array</name></name></type> <name>inclusion_uids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>id_array</name></name></type> <name>inclusion_gids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match_list</name></name></type> <name>inclusion_unames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match_list</name></name></type> <name>inclusion_gnames</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_pattern_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_owner_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>id_array</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_owner_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_pattern_mbs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_pattern_wcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cmp_key_mbs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cmp_key_wcs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cmp_node_mbs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cmp_node_wcs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entry_list_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>entry_list</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entry_list_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>entry_list</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entry_list_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>entry_list</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>error_nomem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>match_list_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>match_list_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>match_list_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>match_list_unmatched_inclusions_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>match_owner_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>id_array</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>match_owner_name_mbs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>match_owner_name_wcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>match_path_exclusion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>match_path_inclusion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>owner_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>path_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_timefilter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>,
<parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_timefilter_pathname_mbs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_timefilter_pathname_wcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_timefilter_date</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_timefilter_date_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>time_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>validate_time_flag</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_date</name></cpp:macro> <cpp:value>__archive_get_date</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>archive_rb_tree_ops</name></name></type> <name>rb_ops_mbs</name> <init>= <expr><block>{
<expr><name>cmp_node_mbs</name></expr>, <expr><name>cmp_key_mbs</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>archive_rb_tree_ops</name></name></type> <name>rb_ops_wcs</name> <init>= <expr><block>{
<expr><name>cmp_node_wcs</name></expr>, <expr><name>cmp_key_wcs</name></expr>
}</block></expr></init></decl>;</decl_stmt>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>error_nomem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type>
<name>archive_match_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>ARCHIVE_MATCH_MAGIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_NEW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>recursive_include</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>match_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusions</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>match_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusions</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_rb_tree_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusion_tree</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_ops_mbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>entry_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusion_entry_list</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>match_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_unames</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>match_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_gnames</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>now</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_match_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>_a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name> <operator>|</operator> <name>ARCHIVE_STATE_FATAL</name></expr></argument>, <argument><expr><literal type="string">"archive_match_free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>match_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusions</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>match_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusions</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>entry_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusion_entry_list</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>inclusion_uids</name><operator>.</operator><name>ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>inclusion_gids</name><operator>.</operator><name>ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>match_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_unames</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>match_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_gnames</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>archive_match_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_excluded_ae"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"entry is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>PATTERN_IS_SET</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>path_excluded</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_entry_pathname_w</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>path_excluded</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>TIME_IS_SET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>time_excluded</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>ID_IS_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>owner_excluded</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>archive_match_exclude_pattern</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_exclude_pattern"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pattern</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"pattern is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>add_pattern_mbs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusions</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_exclude_pattern_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_exclude_pattern_w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pattern</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pattern</name> <operator>==</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"pattern is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>add_pattern_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusions</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_exclude_pattern_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nullSeparator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_exclude_pattern_from_file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>

<return>return <expr><call><name>add_pattern_from_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusions</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pathname</name></expr></argument>,
<argument><expr><name>nullSeparator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_exclude_pattern_from_file_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nullSeparator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_exclude_pattern_from_file_w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>

<return>return <expr><call><name>add_pattern_from_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusions</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pathname</name></expr></argument>,
<argument><expr><name>nullSeparator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_pattern</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_pattern"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pattern</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"pattern is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>add_pattern_mbs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusions</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_pattern_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_pattern_w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pattern</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pattern</name> <operator>==</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"pattern is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>add_pattern_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusions</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_pattern_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nullSeparator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_pattern_from_file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>

<return>return <expr><call><name>add_pattern_from_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusions</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pathname</name></expr></argument>,
<argument><expr><name>nullSeparator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_pattern_from_file_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nullSeparator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_pattern_from_file_w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>

<return>return <expr><call><name>add_pattern_from_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusions</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pathname</name></expr></argument>,
<argument><expr><name>nullSeparator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>archive_match_path_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_path_excluded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"entry is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>PATTERN_IS_SET</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><call><name>path_excluded</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_entry_pathname_w</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><call><name>path_excluded</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>











<function><type><name>int</name></type>
<name>archive_match_set_inclusion_recursion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_set_inclusion_recursion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>recursive_include</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_match_path_unmatched_inclusions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_unmatched_inclusions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusions</name><operator>.</operator><name>unmatched_count</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_path_unmatched_inclusions_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_unmatched_inclusions_next"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>match_list_unmatched_inclusions_next</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusions</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>_p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>v</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_path_unmatched_inclusions_next_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_unmatched_inclusions_next_w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>match_list_unmatched_inclusions_next</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusions</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>_p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><operator>)</operator><name>v</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_pattern_mbs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>match</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs_len</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>match</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>match_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>|=</operator> <name>PATTERN_IS_SET</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_pattern_wcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>match</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs_len</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>match</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>match_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>|=</operator> <name>PATTERN_IS_SET</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_pattern_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type><name>mlist</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mbs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nullSeparator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ar</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_support_format_raw</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_support_format_empty</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_copy_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mbs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_open_filename</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="number">512</literal><operator>*</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_open_filename_w</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="number">512</literal><operator>*</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_copy_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_copy_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>archive_read_data_block</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_separator</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>length</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nullSeparator</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found_separator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b</name> <operator>==</operator> <literal type="number">0x0d</literal> <operator>||</operator> <operator>*</operator><name>b</name> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found_separator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_separator</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>add_pattern_mbs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>mlist</name></expr></argument>, <argument><expr><name><name>as</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_copy_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_EOF</name> <operator>&amp;&amp;</operator> <call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>add_pattern_mbs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>mlist</name></expr></argument>, <argument><expr><name><name>as</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>path_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mbs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>matched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>match</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>inclusions</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>match</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>match</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>matches</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>r</name> <operator>=</operator> <call><name>match_path_inclusion</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>mbs</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>inclusions</name><operator>.</operator><name>unmatched_count</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>matches</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>match</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>exclusions</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>match</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>match</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>match_path_exclusion</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>mbs</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>matched</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>match</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>inclusions</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>match</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>match</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>matches</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>r</name> <operator>=</operator> <call><name>match_path_inclusion</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>mbs</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>matches</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>inclusions</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>match_path_exclusion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mbs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mbs</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>archive_pathmatch</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pn</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>archive_pathmatch_w</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><operator>)</operator><name>pn</name></expr></argument>,
<argument><expr><name>flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>match_path_inclusion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mbs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>recursive_include</name></name></expr> ?</condition><then>
<expr><name>PATHMATCH_NO_ANCHOR_END</name></expr> </then><else>:
<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mbs</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>archive_pathmatch</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pn</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>archive_pathmatch_w</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><operator>)</operator><name>pn</name></expr></argument>,
<argument><expr><name>flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>match_list_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>match_list_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>match_list_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>unmatched_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>match_list_unmatched_inclusions_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mbs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>unmatched_eof</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>unmatched_eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>unmatched_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>unmatched_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>unmatched_next</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>unmatched_next</name></name></expr>;</init> <condition><expr><name>m</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>matches</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mbs</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">L""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>unmatched_next</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>unmatched_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>unmatched_eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></for>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>unmatched_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_match_include_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>sec</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>nsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>validate_time_flag</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>set_timefilter</name><argument_list>(<argument><expr><operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>,
<argument><expr><name>sec</name></expr></argument>, <argument><expr><name>nsec</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_date</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>datestr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>validate_time_flag</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>set_timefilter_date</name><argument_list>(<argument><expr><operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_date_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>datestr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>validate_time_flag</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_date_w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>set_timefilter_date_w</name><argument_list>(<argument><expr><operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_file_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>validate_time_flag</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_file_time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>set_timefilter_pathname_mbs</name><argument_list>(<argument><expr><operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></argument>,
<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_file_time_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>validate_time_flag</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_file_time_w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>set_timefilter_pathname_wcs</name><argument_list>(<argument><expr><operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></argument>,
<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_exclude_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_time_include_entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"entry is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>validate_time_flag</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="string">"archive_match_exclude_entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>add_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>archive_match_time_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_time_excluded_ae"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"entry is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>TIME_IS_SET</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>time_excluded</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>validate_time_flag</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><name>_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator>
<operator>(</operator><operator>(</operator><operator>~</operator><operator>(</operator><name>ARCHIVE_MATCH_MTIME</name> <operator>|</operator> <name>ARCHIVE_MATCH_CTIME</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid time flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <operator>(</operator><name>ARCHIVE_MATCH_MTIME</name> <operator>|</operator> <name>ARCHIVE_MATCH_CTIME</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"No time flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator>
<operator>(</operator><operator>(</operator><operator>~</operator><operator>(</operator><name>ARCHIVE_MATCH_NEWER</name> <operator>|</operator> <name>ARCHIVE_MATCH_OLDER</name>
<operator>|</operator> <name>ARCHIVE_MATCH_EQUAL</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00ff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid comparison flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <operator>(</operator><name>ARCHIVE_MATCH_NEWER</name> <operator>|</operator> <name>ARCHIVE_MATCH_OLDER</name>
<operator>|</operator> <name>ARCHIVE_MATCH_EQUAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"No comparison flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUST_EQUAL</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((t) &amp; (ARCHIVE_MATCH_EQUAL |ARCHIVE_MATCH_NEWER | ARCHIVE_MATCH_OLDER)) == ARCHIVE_MATCH_EQUAL)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_timefilter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timetype</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>mtime_sec</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>mtime_nsec</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>ctime_sec</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ctime_nsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>timetype</name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_MTIME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>timetype</name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_NEWER</name><operator>)</operator> <operator>||</operator> <call><name>JUST_EQUAL</name><argument_list>(<argument><expr><name>timetype</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>newer_mtime_filter</name></name> <operator>=</operator> <name>timetype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>newer_mtime_sec</name></name> <operator>=</operator> <name>mtime_sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>newer_mtime_nsec</name></name> <operator>=</operator> <name>mtime_nsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>|=</operator> <name>TIME_IS_SET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>timetype</name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_OLDER</name><operator>)</operator> <operator>||</operator> <call><name>JUST_EQUAL</name><argument_list>(<argument><expr><name>timetype</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>older_mtime_filter</name></name> <operator>=</operator> <name>timetype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>older_mtime_sec</name></name> <operator>=</operator> <name>mtime_sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>older_mtime_nsec</name></name> <operator>=</operator> <name>mtime_nsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>|=</operator> <name>TIME_IS_SET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>timetype</name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_CTIME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>timetype</name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_NEWER</name><operator>)</operator> <operator>||</operator> <call><name>JUST_EQUAL</name><argument_list>(<argument><expr><name>timetype</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>newer_ctime_filter</name></name> <operator>=</operator> <name>timetype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>newer_ctime_sec</name></name> <operator>=</operator> <name>ctime_sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>newer_ctime_nsec</name></name> <operator>=</operator> <name>ctime_nsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>|=</operator> <name>TIME_IS_SET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>timetype</name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_OLDER</name><operator>)</operator> <operator>||</operator> <call><name>JUST_EQUAL</name><argument_list>(<argument><expr><name>timetype</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>older_ctime_filter</name></name> <operator>=</operator> <name>timetype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>older_ctime_sec</name></name> <operator>=</operator> <name>ctime_sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>older_ctime_nsec</name></name> <operator>=</operator> <name>ctime_nsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>|=</operator> <name>TIME_IS_SET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_timefilter_date</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timetype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>datestr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>datestr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>datestr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"date is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_date</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>now</name></name></expr></argument>, <argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"invalid date string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>set_timefilter</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>timetype</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_timefilter_date_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timetype</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>datestr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>datestr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>datestr</name> <operator>==</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"date is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_append_from_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>, <argument><expr><name>datestr</name></expr></argument>, <argument><expr><call><name>wcslen</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Failed to convert WCS to MBS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_date</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>now</name></name></expr></argument>, <argument><expr><name><name>as</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"invalid date string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>set_timefilter</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>timetype</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPOC_TIME</name></cpp:macro> <cpp:value>ARCHIVE_LITERAL_ULL(116444736000000000)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_timefilter_find_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timetype</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>ftLastWriteTime_dwHighDateTime</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>ftLastWriteTime_dwLowDateTime</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>ftCreationTime_dwHighDateTime</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>ftCreationTime_dwLowDateTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>utc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>ctime_sec</name></decl>, <decl><type ref="prev"/><name>mtime_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ctime_ns</name></decl>, <decl><type ref="prev"/><name>mtime_ns</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>utc</name><operator>.</operator><name>HighPart</name></name> <operator>=</operator> <name>ftCreationTime_dwHighDateTime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>utc</name><operator>.</operator><name>LowPart</name></name> <operator>=</operator> <name>ftCreationTime_dwLowDateTime</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>utc</name><operator>.</operator><name>QuadPart</name></name> <operator>&gt;=</operator> <name>EPOC_TIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>utc</name><operator>.</operator><name>QuadPart</name></name> <operator>-=</operator> <name>EPOC_TIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctime_sec</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name><name>utc</name><operator>.</operator><name>QuadPart</name></name> <operator>/</operator> <literal type="number">10000000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ctime_ns</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>utc</name><operator>.</operator><name>QuadPart</name></name> <operator>%</operator> <literal type="number">10000000</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ctime_sec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ctime_ns</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>utc</name><operator>.</operator><name>HighPart</name></name> <operator>=</operator> <name>ftLastWriteTime_dwHighDateTime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>utc</name><operator>.</operator><name>LowPart</name></name> <operator>=</operator> <name>ftLastWriteTime_dwLowDateTime</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>utc</name><operator>.</operator><name>QuadPart</name></name> <operator>&gt;=</operator> <name>EPOC_TIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>utc</name><operator>.</operator><name>QuadPart</name></name> <operator>-=</operator> <name>EPOC_TIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mtime_sec</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name><name>utc</name><operator>.</operator><name>QuadPart</name></name> <operator>/</operator> <literal type="number">10000000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mtime_ns</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>utc</name><operator>.</operator><name>QuadPart</name></name> <operator>%</operator> <literal type="number">10000000</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mtime_sec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mtime_ns</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>set_timefilter</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>timetype</name></expr></argument>,
<argument><expr><name>mtime_sec</name></expr></argument>, <argument><expr><name>mtime_ns</name></expr></argument>, <argument><expr><name>ctime_sec</name></expr></argument>, <argument><expr><name>ctime_ns</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_timefilter_pathname_mbs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timetype</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATAA</name></type> <name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"pathname is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FindFirstFileA</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>la_dosmaperr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to FindFirstFileA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>set_timefilter_find_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>timetype</name></expr></argument>,
<argument><expr><name><name>d</name><operator>.</operator><name>ftLastWriteTime</name><operator>.</operator><name>dwHighDateTime</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>ftLastWriteTime</name><operator>.</operator><name>dwLowDateTime</name></name></expr></argument>,
<argument><expr><name><name>d</name><operator>.</operator><name>ftCreationTime</name><operator>.</operator><name>dwHighDateTime</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>ftCreationTime</name><operator>.</operator><name>dwLowDateTime</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_timefilter_pathname_wcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timetype</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"pathname is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>la_dosmaperr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to FindFirstFile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>set_timefilter_find_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>timetype</name></expr></argument>,
<argument><expr><name><name>d</name><operator>.</operator><name>ftLastWriteTime</name><operator>.</operator><name>dwHighDateTime</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>ftLastWriteTime</name><operator>.</operator><name>dwLowDateTime</name></name></expr></argument>,
<argument><expr><name><name>d</name><operator>.</operator><name>ftCreationTime</name><operator>.</operator><name>dwHighDateTime</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>ftCreationTime</name><operator>.</operator><name>dwLowDateTime</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_timefilter_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timetype</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>ctime_sec</name></decl>, <decl><type ref="prev"/><name>mtime_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ctime_ns</name></decl>, <decl><type ref="prev"/><name>mtime_ns</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ae</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_stat</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctime_sec</name> <operator>=</operator> <call><name>archive_entry_ctime</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctime_ns</name> <operator>=</operator> <call><name>archive_entry_ctime_nsec</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mtime_sec</name> <operator>=</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mtime_ns</name> <operator>=</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>set_timefilter</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>timetype</name></expr></argument>, <argument><expr><name>mtime_sec</name></expr></argument>, <argument><expr><name>mtime_ns</name></expr></argument>,
<argument><expr><name>ctime_sec</name></expr></argument>, <argument><expr><name>ctime_ns</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_timefilter_pathname_mbs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timetype</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"pathname is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>la_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed to stat()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>set_timefilter_stat</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>timetype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_timefilter_pathname_wcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timetype</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"pathname is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_append_from_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>wcslen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Failed to convert WCS to MBS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_timefilter_pathname_mbs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>timetype</name></expr></argument>, <argument><expr><name><name>as</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_node_mbs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>f1</name> <init>= <expr><operator>(</operator>struct <name>match_file</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>n1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>f2</name> <init>= <expr><operator>(</operator>struct <name>match_file</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>n2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f1</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f2</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_key_mbs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator>struct <name>match_file</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_node_wcs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>f1</name> <init>= <expr><operator>(</operator>struct <name>match_file</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>n1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>f2</name> <init>= <expr><operator>(</operator>struct <name>match_file</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>n2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f1</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f2</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>wcscmp</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_key_wcs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator>struct <name>match_file</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>wcscmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>entry_list_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>entry_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>entry_list_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>entry_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>entry_list_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>entry_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pathname</name> <operator>=</operator> <call><name>archive_entry_pathname_w</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pathname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"pathname is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>exclusion_tree</name><operator>.</operator><name>rbt_ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>rb_ops_wcs</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>rb_ops_wcs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pathname</name> <operator>=</operator> <call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pathname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"pathname is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>exclusion_tree</name><operator>.</operator><name>rbt_ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>rb_ops_mbs</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>mtime_sec</name></name> <operator>=</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>mtime_nsec</name></name> <operator>=</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ctime_sec</name></name> <operator>=</operator> <call><name>archive_entry_ctime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ctime_nsec</name></name> <operator>=</operator> <call><name>archive_entry_ctime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>__archive_rb_tree_insert_node</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusion_tree</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>node</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>f2</name></decl>;</decl_stmt>


<expr_stmt><expr><name>f2</name> <operator>=</operator> <operator>(</operator>struct <name>match_file</name> <operator>*</operator><operator>)</operator><call><name>__archive_rb_tree_find_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusion_tree</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name>f2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f2</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f2</name><operator>-&gt;</operator><name>mtime_sec</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>mtime_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f2</name><operator>-&gt;</operator><name>mtime_nsec</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>mtime_nsec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f2</name><operator>-&gt;</operator><name>ctime_sec</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>ctime_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f2</name><operator>-&gt;</operator><name>ctime_nsec</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>ctime_nsec</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>entry_list_add</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusion_entry_list</name></name><operator>)</operator></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>|=</operator> <name>TIME_IS_SET</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>time_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match_file</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>nsec</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>newer_ctime_filter</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>archive_entry_ctime_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>archive_entry_ctime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>newer_ctime_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>newer_ctime_sec</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_ctime_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>archive_entry_ctime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nsec</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>newer_ctime_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nsec</name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>newer_ctime_nsec</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>newer_ctime_filter</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_EQUAL</name><operator>)</operator>
<operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>older_ctime_filter</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>archive_entry_ctime_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>archive_entry_ctime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>older_ctime_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>older_ctime_sec</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_ctime_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>archive_entry_ctime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nsec</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>older_ctime_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nsec</name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>older_ctime_nsec</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>older_ctime_filter</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_EQUAL</name><operator>)</operator>
<operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>newer_mtime_filter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>newer_mtime_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>newer_mtime_sec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nsec</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>newer_mtime_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nsec</name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>newer_mtime_nsec</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>newer_mtime_filter</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_EQUAL</name><operator>)</operator>
<operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>older_mtime_filter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>older_mtime_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>older_mtime_sec</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nsec</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>older_mtime_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nsec</name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>older_mtime_nsec</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>older_mtime_filter</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_EQUAL</name><operator>)</operator>
<operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>exclusion_entry_list</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pathname</name> <operator>=</operator> <call><name>archive_entry_pathname_w</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>exclusion_tree</name><operator>.</operator><name>rbt_ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>rb_ops_wcs</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>rb_ops_wcs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pathname</name> <operator>=</operator> <call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>exclusion_tree</name><operator>.</operator><name>rbt_ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>rb_ops_mbs</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>pathname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator>struct <name>match_file</name> <operator>*</operator><operator>)</operator><call><name>__archive_rb_tree_find_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exclusion_tree</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_CTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>archive_entry_ctime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ctime_sec</name></name> <operator>&gt;</operator> <name>sec</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_OLDER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ctime_sec</name></name> <operator>&lt;</operator> <name>sec</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_NEWER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>archive_entry_ctime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ctime_nsec</name></name> <operator>&gt;</operator> <name>nsec</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_OLDER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ctime_nsec</name></name> <operator>&lt;</operator> <name>nsec</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_NEWER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_EQUAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_MTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>mtime_sec</name></name> <operator>&gt;</operator> <name>sec</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_OLDER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>mtime_sec</name></name> <operator>&lt;</operator> <name>sec</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_NEWER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>mtime_nsec</name></name> <operator>&gt;</operator> <name>nsec</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_OLDER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>mtime_nsec</name></name> <operator>&lt;</operator> <name>nsec</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_NEWER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ARCHIVE_MATCH_EQUAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>archive_match_include_uid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_uid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>add_owner_id</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_uids</name></name><operator>)</operator></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_gid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_gid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>add_owner_id</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_gids</name></name><operator>)</operator></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_uname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_uname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>add_owner_name</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_unames</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>uname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_uname_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>uname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_uname_w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>add_owner_name</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_unames</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_gname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_gname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>add_owner_name</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_gnames</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>gname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_match_include_gname_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>gname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_include_gname_w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>add_owner_name</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_gnames</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>archive_match_owner_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_MATCH_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_match_id_excluded_ae"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_match</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"entry is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>ID_IS_SET</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>owner_excluded</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_owner_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>id_array</name></name> <modifier>*</modifier></type><name>ids</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ids</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>ids</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ids</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ids</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ids</name><operator>-&gt;</operator><name>size</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>ids</name><operator>-&gt;</operator><name>ids</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ids</name><operator>-&gt;</operator><name>ids</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>ids</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ids</name><operator>-&gt;</operator><name>ids</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ids</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ids</name><operator>-&gt;</operator><name>ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>ids</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ids</name><operator>-&gt;</operator><name>ids</name><index>[<expr><name><name>ids</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ids</name><operator>-&gt;</operator><name>ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ids</name><operator>-&gt;</operator><name>ids</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ids</name><operator>-&gt;</operator><name>ids</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name><name>ids</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ids</name><operator>-&gt;</operator><name>ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ids</name><operator>-&gt;</operator><name>ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ids</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>|=</operator> <name>ID_IS_SET</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>match_owner_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>id_array</name></name> <modifier>*</modifier></type><name>ids</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ids</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>+</operator> <name>b</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ids</name><operator>-&gt;</operator><name>ids</name><index>[<expr><name>m</name></expr>]</index></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ids</name><operator>-&gt;</operator><name>ids</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&lt;</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_owner_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mbs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>match</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mbs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>match</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>match</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>match_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>setflag</name></name> <operator>|=</operator> <name>ID_IS_SET</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>match_owner_name_mbs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>m</name></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>matches</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>match_owner_name_wcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>match_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>m</name></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>pattern</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>error_nomem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>wcscmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>matches</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>owner_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_match</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>inclusion_uids</name><operator>.</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>match_owner_id</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_uids</name></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>archive_entry_uid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>inclusion_gids</name><operator>.</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>match_owner_id</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_gids</name></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>archive_entry_gid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>inclusion_unames</name><operator>.</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>match_owner_name_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_unames</name></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>archive_entry_uname_w</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>match_owner_name_mbs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_unames</name></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>archive_entry_uname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>inclusion_gnames</name><operator>.</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>match_owner_name_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_gnames</name></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>archive_entry_gname_w</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>match_owner_name_mbs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>inclusion_gnames</name></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>archive_entry_gname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
