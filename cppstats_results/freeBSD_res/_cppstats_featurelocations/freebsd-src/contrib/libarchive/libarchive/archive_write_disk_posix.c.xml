<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_write_disk_posix.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_ACL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/acl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_EXTATTR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/extattr.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_XATTR_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/xattr.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_ATTR_XATTR_H</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;attr/xattr.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_EA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ea.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_STAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utime.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COPYFILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;copyfile.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GRP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_FS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/fs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_EXT2_FS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/ext2_fs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXT2FS_EXT2_FS_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext2fs/ext2_fs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PWD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utime.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>F_GETTIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/fcntl1.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>to_int64_time</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t) &lt; 0 ? (int64_t)(t) : (uint64_t)(t) &gt; (uint64_t)INT64_MAX ? INT64_MAX : (int64_t)(t))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;TargetConditionals.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_MAC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>TARGET_OS_EMBEDDED</name> <operator>&amp;&amp;</operator> <name>HAVE_QUARANTINE_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;quarantine.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_QUARANTINE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_acl_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_write_disk_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BINARY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CLOEXEC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>O_NOFOLLOW</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>INT_MIN</name> <operator>&lt;=</operator> <name>O_NOFOLLOW</name> <operator>&amp;&amp;</operator> <name>O_NOFOLLOW</name> <operator>&lt;=</operator> <name>INT_MAX</name><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>O_NOFOLLOW</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_NOFOLLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_NOFOLLOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_FDCWD</name></cpp:macro> <cpp:value>-100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>fixup_entry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_acl</name></name></type> <name>acl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_MODE_T</name></type> <name>filetype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>atime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>birthtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>atime_nanos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>birthtime_nanos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mtime_nanos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ctime_nanos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fflags_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mac_metadata_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mac_metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fixup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_MODE_FORCE</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_MODE_BASE</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_SUID</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_SUID_CHECK</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_SGID</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_SGID_CHECK</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_APPLEDOUBLE</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_MODE</name></cpp:macro> <cpp:value>(TODO_MODE_BASE|TODO_SUID|TODO_SGID)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_TIMES</name></cpp:macro> <cpp:value>ARCHIVE_EXTRACT_TIME</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_OWNER</name></cpp:macro> <cpp:value>ARCHIVE_EXTRACT_OWNER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_FFLAGS</name></cpp:macro> <cpp:value>ARCHIVE_EXTRACT_FFLAGS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_ACLS</name></cpp:macro> <cpp:value>ARCHIVE_EXTRACT_ACL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_XATTR</name></cpp:macro> <cpp:value>ARCHIVE_EXTRACT_XATTR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_MAC_METADATA</name></cpp:macro> <cpp:value>ARCHIVE_EXTRACT_MAC_METADATA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_HFS_COMPRESSION</name></cpp:macro> <cpp:value>ARCHIVE_EXTRACT_HFS_COMPRESSION_FORCED</cpp:value></cpp:define>

<struct>struct <name>archive_write_disk</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name></type> <name>archive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mode_t</name></type> <name>user_umask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>fixup_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>current_fixup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>user_uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_file_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skip_file_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skip_file_ino</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>start_time</name></decl>;</decl_stmt>

<function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>lookup_gid</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gname</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>gid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cleanup_gid</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lookup_gid_data</name></decl>;</decl_stmt>
<function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>lookup_uid</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uname</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cleanup_uid</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lookup_uid_data</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>path_safe</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>pst</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>_name_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>_tmpname_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>deferred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>fd_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>total_bytes_written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>filesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>restore_pwd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>gid</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>decmpfs_attr_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>decmpfs_header_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rsrc_xattr_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>resource_fork</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>resource_fork_allocated_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>decmpfs_block_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>decmpfs_block_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>compressed_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>compressed_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>compressed_buffer_remaining</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>compressed_rsrc_position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>compressed_rsrc_position_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uncompressed_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_remaining_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>file_remaining_bytes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>z_stream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decmpfs_compression_level</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_DIR_MODE</name></cpp:macro> <cpp:value>0777</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIMUM_DIR_MODE</name></cpp:macro> <cpp:value>0700</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXIMUM_DIR_MODE</name></cpp:macro> <cpp:value>0775</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DECMPFS_BLOCK_SIZE</name></cpp:macro> <cpp:value>(64 * 1024)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_XATTR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_RESOURCE_FORK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSRC_H_SIZE</name></cpp:macro> <cpp:value>260</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSRC_F_SIZE</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPRESSED_W_SIZE</name></cpp:macro> <cpp:value>(64 * 1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DECMPFS_XATTR_SIZE</name></cpp:macro> <cpp:value>3802</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DECMPFS_XATTR_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECMPFS_XATTR_NAME</name></cpp:macro> <cpp:value>"com.apple.decmpfs"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECMPFS_MAGIC</name></cpp:macro> <cpp:value>0x636d7066</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECMPFS_COMPRESSION_MAGIC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECMPFS_COMPRESSION_TYPE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECMPFS_UNCOMPRESSED_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECMPFS_HEADER_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HFS_BLOCKS</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s) &gt;&gt; 12)</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>la_opendirat</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>la_mktemp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>la_verify_filetype</name><parameter_list>(<parameter><decl><type><name>mode_t</name></type></decl></parameter>, <parameter><decl><type><name>__LA_MODE_T</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fsobj_error</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_symlinks_fsobj</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_symlinks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>create_filesystem_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>current_fixup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCHDIR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>edit_deep_directories</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cleanup_pathname_fsobj</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cleanup_pathname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>create_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>create_parent_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>hfs_write_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fixup_appledouble</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>older</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>restore_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_mac_metadata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_xattrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>clear_nochange_fflags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_fflags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_fflags_platform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>fflags_set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>fflags_clear</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_ownership</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_time</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_times</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_times_from_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>sort_dir_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>write_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_vtable</name></name> <modifier>*</modifier></type><name>archive_write_disk_vtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_write_disk_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_write_disk_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_write_disk_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>_archive_write_disk_filter_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_write_disk_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_archive_write_disk_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_archive_write_disk_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>la_mktemp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>oerrno</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>_tmpname_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>_tmpname_data</name></name></expr></argument>, <argument><expr><literal type="string">"%s.XXXXXX"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>tmpname</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>_tmpname_data</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>__archive_mkstemp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tmpname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0777</literal> <operator>&amp;</operator> <operator>~</operator><name><name>a</name><operator>-&gt;</operator><name>user_umask</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fchmod</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oerrno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>oerrno</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>la_opendirat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><name>O_CLOEXEC</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>O_BINARY</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_DIRECTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>O_DIRECTORY</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>O_PATH</name>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<operator>|</operator> <name>O_SEARCH</name>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>O_EXEC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<operator>|</operator> <name>O_EXEC</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<operator>|</operator> <name>O_RDONLY</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>AT_FDCWD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><call><name>openat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>la_verify_filetype</name><parameter_list>(<parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>__LA_MODE_T</name></type> <name>filetype</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>filetype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AE_IFREG</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFDIR</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFLNK</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>S_ISLNK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFSOCK</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>S_ISSOCK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFCHR</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>S_ISCHR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFBLK</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>S_ISBLK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFIFO</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>S_ISFIFO</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>lazy_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSTAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>fstat</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>st</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>st</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Couldn't stat file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>archive_vtable</name></name> <modifier>*</modifier></type>
<name>archive_write_disk_vtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_vtable</name></name></type> <name>av</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>inited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inited</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_close</name></name> <operator>=</operator> <name>_archive_write_disk_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_filter_bytes</name></name> <operator>=</operator> <name>_archive_write_disk_filter_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_free</name></name> <operator>=</operator> <name>_archive_write_disk_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_write_header</name></name> <operator>=</operator> <name>_archive_write_disk_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_write_finish_entry</name></name>
<operator>=</operator> <name>_archive_write_disk_finish_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_write_data</name></name> <operator>=</operator> <name>_archive_write_disk_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_write_data_block</name></name> <operator>=</operator> <name>_archive_write_disk_data_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name>av</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>_archive_write_disk_filter_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>total_bytes_written</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>archive_write_disk_set_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_write_disk_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linkname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_DISK_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_HEADER</name> <operator>|</operator> <name>ARCHIVE_STATE_DATA</name></expr></argument>,
<argument><expr><literal type="string">"archive_write_disk_header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>&amp;</operator> <name>ARCHIVE_STATE_DATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_archive_write_disk_finish_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>current_fixup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <call><name>archive_entry_clone</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fd_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>restore_pwd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>user_uid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>archive_entry_mode</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_size_is_set</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <call><name>archive_entry_size</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>_name_data</name></name><operator>)</operator></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>_name_data</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cleanup_pathname</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>linkname</name> <operator>=</operator> <call><name>archive_entry_hardlink</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linkname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>linkname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Skipping hardlink pointing to itself: %s"</literal></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>user_umask</name></name> <operator>=</operator> <call><name>umask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>=</operator> <name>TODO_MODE_BASE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_PERM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|=</operator> <name>TODO_MODE_FORCE</name></expr>;</expr_stmt>














<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>S_ISGID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|=</operator> <name>TODO_SGID</name> <operator>|</operator> <name>TODO_SGID_CHECK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>S_ISUID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|=</operator> <name>TODO_SUID</name> <operator>|</operator> <name>TODO_SUID_CHECK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>S_ISUID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>S_ISGID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>S_ISVTX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>a</name><operator>-&gt;</operator><name>user_umask</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_OWNER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|=</operator> <name>TODO_OWNER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_TIME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|=</operator> <name>TODO_TIMES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_ACL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>





<decl_stmt><decl><type><name>size_t</name></type> <name>metadata_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_MAC_METADATA</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>archive_entry_mac_metadata</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>metadata_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>metadata_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:if>





<decl_stmt><decl><type><name>short</name></type> <name>extract_acls</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_XATTR</name> <operator>&amp;&amp;</operator> <operator>(</operator>
<call><name>archive_entry_acl_types</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator>
<name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>attr_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>attr_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>archive_entry_xattr_reset</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_xattr_next</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_name</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>attr_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>attr_value</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name>attr_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>attr_name</name></expr></argument>,
<argument><expr><literal type="string">"trusted.richacl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extract_acls</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>extract_acls</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name> <operator>||</operator> <name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:if>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>deferred</name></name> <operator>|=</operator> <name>TODO_ACLS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|=</operator> <name>TODO_ACLS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name> <operator>||</operator> <name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:if>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_MAC_METADATA</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>deferred</name></name> <operator>|=</operator> <name>TODO_MAC_METADATA</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|=</operator> <name>TODO_MAC_METADATA</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UF_COMPRESSED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_NO_HFS_COMPRESSION</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>set</name></decl>, <decl><type ref="prev"/><name>clear</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_entry_fflags</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>set</name> <operator>&amp;</operator> <operator>~</operator><name>clear</name><operator>)</operator> <operator>&amp;</operator> <name>UF_COMPRESSED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|=</operator> <name>TODO_HFS_COMPRESSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_block_count</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_HFS_COMPRESSION_FORCED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>==</operator> <name>AE_IFREG</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|=</operator> <name>TODO_HFS_COMPRESSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_block_count</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>



<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TODO_HFS_COMPRESSION</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|=</operator> <name>TODO_APPLEDOUBLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_XATTR</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_XATTR_DARWIN</name></expr></cpp:if>





<decl_stmt><decl><type><name>size_t</name></type> <name>metadata_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_MAC_METADATA</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>archive_entry_mac_metadata</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>metadata_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>metadata_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|=</operator> <name>TODO_XATTR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_FFLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|=</operator> <name>TODO_FFLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_SECURE_SYMLINKS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_symlinks</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCHDIR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>edit_deep_directories</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>restore_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UF_COMPRESSED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>|</operator> <name>TODO_HFS_COMPRESSION</name></expr>)</condition> <block>{<block_content>








<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>fchflags</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>UF_COMPRESSED</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TODO_HFS_COMPRESSION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCHDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>restore_pwd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fchdir</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>restore_pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"chdir() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>restore_pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>restore_pwd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>deferred</name></name> <operator>&amp;</operator> <name>TODO_MODE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>current_fixup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>filetype</name></name> <operator>=</operator> <call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fixup</name></name> <operator>|=</operator> <name>TODO_MODE_BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>deferred</name></name> <operator>&amp;</operator> <name>TODO_TIMES</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>archive_entry_mtime_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>archive_entry_atime_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>current_fixup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>filetype</name></name> <operator>=</operator> <call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fixup</name></name> <operator>|=</operator> <name>TODO_TIMES</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_atime_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <call><name>archive_entry_atime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>atime_nanos</name></name> <operator>=</operator> <call><name>archive_entry_atime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>atime_nanos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_mtime_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mtime_nanos</name></name> <operator>=</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mtime_nanos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_birthtime_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>birthtime</name></name> <operator>=</operator> <call><name>archive_entry_birthtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>birthtime_nanos</name></name> <operator>=</operator> <call><name>archive_entry_birthtime_nsec</name><argument_list>(
<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>birthtime</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>birthtime_nanos</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>mtime_nanos</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>deferred</name></name> <operator>&amp;</operator> <name>TODO_ACLS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>current_fixup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>filetype</name></name> <operator>=</operator> <call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fixup</name></name> <operator>|=</operator> <name>TODO_ACLS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_acl_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><call><name>archive_entry_acl</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>deferred</name></name> <operator>&amp;</operator> <name>TODO_MAC_METADATA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>metadata_size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>metadata</name> <operator>=</operator> <call><name>archive_entry_mac_metadata</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>metadata</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>metadata_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>current_fixup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>filetype</name></name> <operator>=</operator> <call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mac_metadata</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>metadata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mac_metadata</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>mac_metadata</name></name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>,
<argument><expr><name>metadata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mac_metadata_size</name></name> <operator>=</operator> <name>metadata_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fixup</name></name> <operator>|=</operator> <name>TODO_MAC_METADATA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>deferred</name></name> <operator>&amp;</operator> <name>TODO_FFLAGS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>current_fixup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>filetype</name></name> <operator>=</operator> <call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fixup</name></name> <operator>|=</operator> <name>TODO_FFLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_write_disk_set_skip_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_DISK_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name></expr></argument>, <argument><expr><literal type="string">"archive_write_disk_set_skip_file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>skip_file_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>skip_file_dev</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>skip_file_ino</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>write_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start_size</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>block_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bytes_to_write</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Attempt to write to an empty file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_SPARSE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRUCT_STAT_ST_BLKSIZE</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>lazy_stat</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>block_size</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>pst</name><operator>-&gt;</operator><name>st_blksize</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<expr_stmt><expr><name>block_size</name> <operator>=</operator> <literal type="number">16</literal><operator>*</operator><literal type="number">1024</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>filesize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start_size</name> <operator>=</operator> <name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>block_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_to_write</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>block_end</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>buff</name></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name>buff</name> <operator>+</operator> <name>size</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>p</name> <operator>-</operator> <name>buff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>p</name> <operator>-</operator> <name>buff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buff</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>block_end</name>
<operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>/</operator> <name>block_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>block_size</name></expr>;</expr_stmt>



<expr_stmt><expr><name>bytes_to_write</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>bytes_to_write</name> <operator>&gt;</operator> <name>block_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_to_write</name> <operator>=</operator> <name>block_end</name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>a</name><operator>-&gt;</operator><name>fd_offset</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Seek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fd_offset</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>bytes_to_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buff</name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>total_bytes_written</name></name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fd_offset</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>start_size</name> <operator>-</operator> <name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UF_COMPRESSED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_XATTR_H</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>hfs_set_compressed_fflag</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>lazy_stat</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_flags</name></name> <operator>|=</operator> <name>UF_COMPRESSED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fchflags</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_flags</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to set UF_COMPRESSED file flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>























<function><type><specifier>static</specifier> <name>int</name></type>
<name>hfs_write_decmpfs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>compression_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fsetxattr</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>DECMPFS_XATTR_NAME</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_header_p</name></name></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_attr_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Cannot restore xattr:%s"</literal></expr></argument>, <argument><expr><name>DECMPFS_XATTR_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>compression_type</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>decmpfs_header_p</name><index>[<expr><name>DECMPFS_COMPRESSION_TYPE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>compression_type</name> <operator>==</operator> <name>CMP_RESOURCE_FORK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fremovexattr</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>XATTR_RESOURCEFORK_NAME</name></expr></argument>,
<argument><expr><name>XATTR_SHOWCOMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





































<function><type><specifier>static</specifier> <name>int</name></type>
<name>hfs_write_resource_fork</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fsetxattr</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>XATTR_RESOURCEFORK_NAME</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>,
<argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>rsrc_xattr_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Cannot restore xattr: %s at %u pos %u bytes"</literal></expr></argument>,
<argument><expr><name>XATTR_RESOURCEFORK_NAME</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>position</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>rsrc_xattr_options</name></name> <operator>&amp;=</operator> <operator>~</operator><name>XATTR_CREATE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hfs_write_compressed_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes_compressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hfs_write_resource_fork</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name></expr></argument>,
<argument><expr><name>bytes_compressed</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_rsrc_position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_rsrc_position</name></name> <operator>+=</operator> <name>bytes_compressed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hfs_write_resource_fork_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rsrc_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rsrc_header_bytes</name></decl>;</decl_stmt>




<expr_stmt><expr><name>buff</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>resource_fork</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rsrc_bytes</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_rsrc_position</name></name> <operator>-</operator> <name>RSRC_F_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rsrc_header_bytes</name> <operator>=</operator>
<name>RSRC_H_SIZE</name> <operator>+</operator>
<literal type="number">4</literal> <operator>+</operator>
<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>decmpfs_block_count</name></name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be32enc</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be32enc</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>rsrc_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be32enc</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>rsrc_bytes</name> <operator>-</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be32enc</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be32enc</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><name>rsrc_bytes</name> <operator>-</operator> <literal type="number">260</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>hfs_write_resource_fork</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>rsrc_header_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>hfs_set_resource_fork_footer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buff_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>rsrc_footer</name><index>[<expr><name>RSRC_F_SIZE</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'m'</literal></expr>,
<expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buff_size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rsrc_footer</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>rsrc_footer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rsrc_footer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>rsrc_footer</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hfs_reset_compressor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>stream_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>deflateReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>deflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_compression_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to initialize compressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>stream_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hfs_decompress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>block_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>block_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_pos</name></decl>, <decl><type ref="prev"/><name>data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>, <decl><type ref="prev"/><name>bytes_to_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>block_info</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>resource_fork</name></name> <operator>+</operator> <name>RSRC_H_SIZE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>block_count</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>block_info</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>block_count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data_pos</name> <operator>=</operator> <name>RSRC_H_SIZE</name> <operator>+</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>block_info</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>block_info</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fgetxattr</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>XATTR_RESOURCEFORK_NAME</name></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>data_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>data_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><name>errno</name></expr></then><else>:<expr><name>ARCHIVE_ERRNO_MISC</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">"Failed to read resource fork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_to_write</name> <operator>=</operator> <name>data_size</name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uLong</name></type> <name>dest_len</name> <init>= <expr><name>MAX_DECMPFS_BLOCK_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zr</name> <operator>=</operator> <call><name>uncompress</name><argument_list>(<argument><expr><operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dest_len</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zr</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to decompress resource fork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes_to_write</name> <operator>=</operator> <name>dest_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bytes_to_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes_to_write</name> <operator>-=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>bytes_to_write</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></while>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fremovexattr</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>XATTR_RESOURCEFORK_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to remove resource fork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hfs_drive_compressor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer_compressed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_compressed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hfs_reset_compressor</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <name>COMPRESSED_W_SIZE</name> <operator>+</operator> <name>RSRC_F_SIZE</name> <operator>+</operator>
<operator>+</operator> <call><name>compressBound</name><argument_list>(<argument><expr><name>MAX_DECMPFS_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for Resource Fork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_size</name></name> <operator>=</operator> <name>block_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_remaining</name></name> <operator>=</operator> <name>block_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer_compressed</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name> <operator>+</operator>
<name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_size</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>buff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>buffer_compressed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_remaining</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_OK</name></expr>:</case>
<case>case <expr><name>Z_STREAM_END</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to compress data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>==</operator> <name>Z_OK</name></expr>)</condition>;</do>
<expr_stmt><expr><name>bytes_compressed</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_remaining</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>bytes_compressed</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer_compressed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer_compressed</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_compressed</name> <operator>=</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_remaining</name></name> <operator>-=</operator> <name>bytes_compressed</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_block_count</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>decmpfs_attr_size</name></name> <operator>+</operator> <name>bytes_compressed</name><operator>)</operator>
<operator>&lt;=</operator> <name>MAX_DECMPFS_XATTR_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>decmpfs_header_p</name><index>[<expr><name>DECMPFS_COMPRESSION_TYPE</name></expr>]</index></name></expr></argument>,
<argument><expr><name>CMP_XATTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_header_p</name></name> <operator>+</operator> <name>DECMPFS_HEADER_SIZE</name></expr></argument>,
<argument><expr><name>buffer_compressed</name></expr></argument>, <argument><expr><name>bytes_compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_attr_size</name></name> <operator>+=</operator> <name>bytes_compressed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_remaining</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_size</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hfs_write_decmpfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hfs_set_compressed_fflag</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_block_info</name></name><operator>++</operator></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_rsrc_position_v</name></name> <operator>-</operator> <name>RSRC_H_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_block_info</name></name><operator>++</operator></expr></argument>, <argument><expr><name>bytes_compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_rsrc_position_v</name></name> <operator>+=</operator> <name>bytes_compressed</name></expr>;</expr_stmt>




<expr_stmt><expr><name>bytes_used</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_size</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_remaining</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>bytes_used</name> <operator>&gt;=</operator> <name>COMPRESSED_W_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hfs_write_compressed_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>COMPRESSED_W_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bytes_used</name> <operator>-=</operator> <name>COMPRESSED_W_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_used</name> <operator>&gt;</operator> <name>COMPRESSED_W_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name> <operator>+</operator> <name>COMPRESSED_W_SIZE</name></expr></argument>,
<argument><expr><name>bytes_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name> <operator>+</operator> <name>COMPRESSED_W_SIZE</name></expr></argument>,
<argument><expr><name>bytes_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_remaining</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_size</name></name> <operator>-</operator> <name>bytes_used</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>file_remaining_bytes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>rsrc_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bk</name></decl>;</decl_stmt>


<expr_stmt><expr><name>rsrc_size</name> <operator>=</operator> <call><name>hfs_set_resource_fork_footer</name><argument_list>(
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name> <operator>+</operator> <name>bytes_used</name></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hfs_write_compressed_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bytes_used</name> <operator>+</operator> <name>rsrc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_remaining</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_size</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>bk</name> <operator>=</operator> <call><name>HFS_BLOCKS</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_rsrc_position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bk</name> <operator>+=</operator> <name>bk</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bk</name> <operator>&gt;</operator> <call><name>HFS_BLOCKS</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>hfs_decompress</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hfs_write_resource_fork_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hfs_write_decmpfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hfs_set_compressed_fflag</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>hfs_write_decmpfs_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer_to_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_to_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_block_count</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>block_count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_header_p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_block</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>MAX_DECMPFS_XATTR_SIZE</name>
<operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for decmpfs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_header_p</name></name> <operator>=</operator> <name>new_block</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_attr_size</name></name> <operator>=</operator> <name>DECMPFS_HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>decmpfs_header_p</name><index>[<expr><name>DECMPFS_COMPRESSION_MAGIC</name></expr>]</index></name></expr></argument>,
<argument><expr><name>DECMPFS_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>decmpfs_header_p</name><index>[<expr><name>DECMPFS_COMPRESSION_TYPE</name></expr>]</index></name></expr></argument>,
<argument><expr><name>CMP_RESOURCE_FORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le64enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>decmpfs_header_p</name><index>[<expr><name>DECMPFS_UNCOMPRESSED_SIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>block_count</name> <operator>=</operator>
<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>+</operator> <name>MAX_DECMPFS_BLOCK_SIZE</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator>
<name>MAX_DECMPFS_BLOCK_SIZE</name></expr>;</expr_stmt>




<expr_stmt><expr><name>new_size</name> <operator>=</operator>
<name>RSRC_H_SIZE</name> <operator>+</operator>
<literal type="number">4</literal> <operator>+</operator>
<operator>(</operator><name>block_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>
<name>RSRC_F_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>resource_fork_allocated_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_block</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>resource_fork</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for ResourceFork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>resource_fork_allocated_size</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>resource_fork</name></name> <operator>=</operator> <name>new_block</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_block</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>MAX_DECMPFS_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for decmpfs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>=</operator> <name>new_block</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>block_remaining_bytes</name></name> <operator>=</operator> <name>MAX_DECMPFS_BLOCK_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>file_remaining_bytes</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>filesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_remaining</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_buffer_size</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>rsrc_xattr_options</name></name> <operator>=</operator> <name>XATTR_CREATE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_block_info</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>resource_fork</name></name> <operator>+</operator> <name>RSRC_H_SIZE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_block_info</name></name><operator>++</operator></expr></argument>, <argument><expr><name>block_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_rsrc_position</name></name> <operator>=</operator>
<name>RSRC_H_SIZE</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>block_count</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_rsrc_position_v</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>compressed_rsrc_position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_block_count</name></name> <operator>=</operator> <name>block_count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>file_remaining_bytes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name>size</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>block_remaining_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_to_write</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>block_remaining_bytes</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_to_write</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_to_write</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>file_remaining_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_to_write</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>file_remaining_bytes</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>bytes_to_write</name> <operator>==</operator> <name>MAX_DECMPFS_BLOCK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buffer_to_write</name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>+</operator>
<name>MAX_DECMPFS_BLOCK_SIZE</name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>block_remaining_bytes</name></name></expr></argument>,
<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>bytes_to_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_to_write</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>block_remaining_bytes</name></name> <operator>-=</operator> <name>bytes_to_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>file_remaining_bytes</name></name> <operator>-=</operator> <name>bytes_to_write</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>block_remaining_bytes</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>file_remaining_bytes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hfs_drive_compressor</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buffer_to_write</name></expr></argument>,
<argument><expr><name>MAX_DECMPFS_BLOCK_SIZE</name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>block_remaining_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>block_remaining_bytes</name></name> <operator>=</operator> <name>MAX_DECMPFS_BLOCK_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>file_remaining_bytes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name>size</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>bytes_to_write</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>hfs_write_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start_size</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_to_write</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Attempt to write to an empty file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>filesize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start_size</name> <operator>=</operator> <name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_to_write</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>fd_offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Seek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>fd_offset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skip</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>fd_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>nullblock</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nullblock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nullblock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>skip</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&gt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>nullblock</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>hfs_write_decmpfs_block</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><name>nullblock</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nullblock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>hfs_write_decmpfs_block</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><name>nullblock</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>skip</name> <operator>-=</operator> <name>bytes_written</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fd_offset</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator>
<call><name>hfs_write_decmpfs_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>bytes_to_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>bytes_written</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buff</name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>total_bytes_written</name></name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fd_offset</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>start_size</name> <operator>-</operator> <name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>hfs_write_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>write_data_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>_archive_write_disk_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_DISK_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_DATA</name></expr></argument>, <argument><expr><literal type="string">"archive_write_data_block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_HFS_COMPRESSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>hfs_write_data_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>write_data_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>r</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Too much data: Truncating file at %ju bytes"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">3999000</literal></expr></cpp:if>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>size</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>_archive_write_disk_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_DISK_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_DATA</name></expr></argument>, <argument><expr><literal type="string">"archive_write_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_HFS_COMPRESSION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>hfs_write_data_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>write_data_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_write_disk_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_DISK_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_HEADER</name> <operator>|</operator> <name>ARCHIVE_STATE_DATA</name></expr></argument>,
<argument><expr><literal type="string">"archive_write_finish_entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>&amp;</operator> <name>ARCHIVE_STATE_HEADER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>fd_offset</name></name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>filesize</name></name></expr>)</condition> <block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UF_COMPRESSED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_HFS_COMPRESSION</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>null_d</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>file_remaining_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>null_d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>null_d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>file_remaining_bytes</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>file_remaining_bytes</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>null_d</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>hfs_write_data_block</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><name>null_d</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>null_d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>hfs_write_data_block</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><name>null_d</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>file_remaining_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FTRUNCATE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"File size could not be restored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>lazy_stat</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>filesize</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>nul</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Seek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nul</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Write to restore size failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>








<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_APPLEDOUBLE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><call><name>fixup_appledouble</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr>)</condition> <block>{<block_content>



<goto>goto <name>finish_metadata</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <operator>(</operator><name>TODO_OWNER</name> <operator>|</operator> <name>TODO_SUID</name> <operator>|</operator> <name>TODO_SGID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>archive_write_disk_uid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><call><name>archive_entry_uname</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>archive_entry_uid</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <operator>(</operator><name>TODO_OWNER</name> <operator>|</operator> <name>TODO_SGID</name> <operator>|</operator> <name>TODO_SUID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <call><name>archive_write_disk_gid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><call><name>archive_entry_gname</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>archive_entry_gid</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_OWNER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><call><name>set_ownership</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>user_uid</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_XATTR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><call><name>set_xattrs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_MODE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><call><name>set_mode</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>user_uid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_XATTR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><call><name>set_xattrs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_FFLAGS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><call><name>set_fflags</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_TIMES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><call><name>set_times_from_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_MAC_METADATA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>metadata_size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>metadata</name> <operator>=</operator> <call><name>archive_entry_mac_metadata</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>metadata</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>metadata_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><call><name>set_mac_metadata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>metadata_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_ACLS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>archive_write_disk_set_acls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>archive_entry_acl</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>finish_metadata</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>tmpname</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tmpname</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to rename temporary file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tmpname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>tmpname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_HEADER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_write_disk_set_group_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>,
<parameter><function_decl><type><name>la_int64_t</name></type> (<modifier>*</modifier><name>lookup_gid</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gname</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>gid</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cleanup_gid</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_DISK_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name></expr></argument>, <argument><expr><literal type="string">"archive_write_disk_set_group_lookup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cleanup_gid</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>lookup_gid_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>cleanup_gid</name></name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>lookup_gid_data</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>lookup_gid</name></name> <operator>=</operator> <name>lookup_gid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>cleanup_gid</name></name> <operator>=</operator> <name>cleanup_gid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>lookup_gid_data</name></name> <operator>=</operator> <name>private_data</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_write_disk_set_user_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>,
<parameter><function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>lookup_uid</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uname</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cleanup_uid</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_DISK_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name></expr></argument>, <argument><expr><literal type="string">"archive_write_disk_set_user_lookup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cleanup_uid</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>lookup_uid_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>cleanup_uid</name></name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>lookup_uid_data</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>lookup_uid</name></name> <operator>=</operator> <name>lookup_uid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>cleanup_uid</name></name> <operator>=</operator> <name>cleanup_uid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>lookup_uid_data</name></name> <operator>=</operator> <name>private_data</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type>
<name>archive_write_disk_gid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_DISK_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name></expr></argument>, <argument><expr><literal type="string">"archive_write_disk_gid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>lookup_gid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>lookup_gid</name></name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>lookup_gid_data</name></name><operator>,</operator> <name>name</name><operator>,</operator> <name>id</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>id</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type>
<name>archive_write_disk_uid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_DISK_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name></expr></argument>, <argument><expr><literal type="string">"archive_write_disk_uid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>lookup_uid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>lookup_uid</name></name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>lookup_uid_data</name></name><operator>,</operator> <name>name</name><operator>,</operator> <name>id</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>id</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type>
<name>archive_write_disk_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>ARCHIVE_WRITE_DISK_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <call><name>archive_write_disk_vtable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>user_umask</name></name> <operator>=</operator> <call><name>umask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETEUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>user_uid</name></name> <operator>=</operator> <call><name>geteuid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>path_safe</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_compression_level</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCHDIR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>edit_deep_directories</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>PATH_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>restore_pwd</name></name> <operator>=</operator> <call><name>la_opendirat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_ensure_cloexec_flag</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>restore_pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>restore_pwd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<while>while <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>PATH_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tail</name> <operator>+=</operator> <name>PATH_MAX</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tail</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tail</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tail</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>tail</name> <operator>&lt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_dir</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name> <operator>&amp;&amp;</operator> <call><name>chdir</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tail</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>restore_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>, <decl><type ref="prev"/><name>en</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_UNLINK</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>








<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_CLEAR_NOCHANGE_FFLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>clear_nochange_fflags</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>rmdir</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Could not unlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>en</name> <operator>=</operator> <call><name>create_filesystem_object</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>en</name> <operator>==</operator> <name>ENOTDIR</name> <operator>||</operator> <name>en</name> <operator>==</operator> <name>ENOENT</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_NO_AUTODIR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>create_parent_dir</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>en</name> <operator>=</operator> <call><name>create_filesystem_object</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>en</name> <operator>==</operator> <name>ENOENT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>archive_entry_hardlink</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>en</name></expr></argument>,
<argument><expr><literal type="string">"Hard-link target '%s' does not exist."</literal></expr></argument>,
<argument><expr><call><name>archive_entry_hardlink</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>en</name> <operator>==</operator> <name>EISDIR</name> <operator>||</operator> <name>en</name> <operator>==</operator> <name>EEXIST</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_NO_OVERWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_unset_size</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>en</name> <operator>==</operator> <name>EISDIR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rmdir</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't remove already-existing dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>en</name> <operator>=</operator> <call><name>create_filesystem_object</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>en</name> <operator>==</operator> <name>EEXIST</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>la_stat</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lstat</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't stat existing object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>older</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>st</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_unset_size</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>skip_file_set</name></name> <operator>&amp;&amp;</operator>
<name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_dev</name></name> <operator>==</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>skip_file_dev</name></name> <operator>&amp;&amp;</operator>
<name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_ino</name></name> <operator>==</operator> <operator>(</operator><name>ino_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>skip_file_ino</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Refusing to overwrite archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_CLEAR_NOCHANGE_FFLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>clear_nochange_fflags</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_SAFE_WRITES</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>la_mktemp</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't create temporary file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>en</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't unlink already-existing "</literal>
<literal type="string">"object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>en</name> <operator>=</operator> <call><name>create_filesystem_object</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_CLEAR_NOCHANGE_FFLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>clear_nochange_fflags</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rmdir</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't replace existing directory with non-directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>en</name> <operator>=</operator> <call><name>create_filesystem_object</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_mode</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_MODE_FORCE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>deferred</name></name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_MODE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>en</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>en</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator><operator>-&gt;</operator><name>error</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>en</name></expr></argument>, <argument><expr><literal type="string">"Can't create '%s'"</literal></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_filesystem_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linkname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>final_mode</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linkname_copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>error_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_number</name></decl>;</decl_stmt>



<expr_stmt><expr><name>linkname</name> <operator>=</operator> <call><name>archive_entry_hardlink</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linkname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_LINK</name></expr></cpp:if>
<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linkname_copy</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linkname_copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>cleanup_pathname_fsobj</name><argument_list>(<argument><expr><name>linkname_copy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_number</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>error_number</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>error_string</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>linkname_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>check_symlinks_fsobj</name><argument_list>(<argument><expr><name>linkname_copy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_number</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>error_number</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>error_string</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>linkname_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>linkname_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_SAFE_WRITES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINKAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><call><name>linkat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>linkname</name></expr></argument>, <argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><call><name>link</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LSTAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lstat</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>la_stat</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>==</operator> <name>AE_IFREG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator>
<name>O_BINARY</name> <operator>|</operator> <name>O_CLOEXEC</name> <operator>|</operator> <name>O_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_ensure_cloexec_flag</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>linkname</name> <operator>=</operator> <call><name>archive_entry_symlink</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linkname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYMLINK</name></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_SAFE_WRITES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><call><name>symlink</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>final_mode</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">07777</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>final_mode</name> <operator>&amp;</operator> <literal type="number">0777</literal> <operator>&amp;</operator> <operator>~</operator><name><name>a</name><operator>-&gt;</operator><name>user_umask</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>user_uid</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <operator>(</operator><name>TODO_HFS_COMPRESSION</name> <operator>|</operator> <name>TODO_XATTR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <literal type="number">0200</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name></expr>)</condition> <block>{<block_content>
<default>default:</default>


<case>case <expr><name>AE_IFREG</name></expr>:</case>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>tmpname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>O_BINARY</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_ensure_cloexec_flag</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFCHR</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MKNOD</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mknod</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>mode</name> <operator>|</operator> <name>S_IFCHR</name></expr></argument>,
<argument><expr><call><name>archive_entry_rdev</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>AE_IFBLK</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MKNOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mknod</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>mode</name> <operator>|</operator> <name>S_IFBLK</name></expr></argument>,
<argument><expr><call><name>archive_entry_rdev</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>AE_IFDIR</name></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>mode</name> <operator>|</operator> <name>MINIMUM_DIR_MODE</name><operator>)</operator> <operator>&amp;</operator> <name>MAXIMUM_DIR_MODE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mkdir</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>deferred</name></name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_TIMES</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TODO_TIMES</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>!=</operator> <name>final_mode</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_PERM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>deferred</name></name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_MODE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TODO_MODE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AE_IFIFO</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MKFIFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mkfifo</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>final_mode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TODO_MODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>























<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_write_disk_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>openflags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_DISK_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_HEADER</name> <operator>|</operator> <name>ARCHIVE_STATE_DATA</name></expr></argument>,
<argument><expr><literal type="string">"archive_write_disk_close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_archive_write_disk_finish_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sort_dir_list</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fixup_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name>c</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fixup</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_fixup_entry</name>;</goto></block_content></block></if>
<else>else <block>{<block_content>





<expr_stmt><expr><name>openflags</name> <operator>=</operator> <name>O_BINARY</name> <operator>|</operator> <name>O_NOFOLLOW</name> <operator>|</operator> <name>O_RDONLY</name>
<operator>|</operator> <name>O_CLOEXEC</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_DIRECTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>filetype</name></name> <operator>==</operator> <name>AE_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>openflags</name> <operator>|=</operator> <name>O_DIRECTORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>openflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_DIRECTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>






<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>filetype</name></name> <operator>!=</operator> <name>AE_IFDIR</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FSTAT</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator>
<call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>la_verify_filetype</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>filetype</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>skip_fixup_entry</name>;</goto>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>la_verify_filetype</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>filetype</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>skip_fixup_entry</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FSTAT</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator>
<call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>la_verify_filetype</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>filetype</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>skip_fixup_entry</name>;</goto>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>la_verify_filetype</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>filetype</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>skip_fixup_entry</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fixup</name></name> <operator>&amp;</operator> <name>TODO_TIMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_times</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>atime</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>atime_nanos</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>birthtime</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>birthtime_nanos</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mtime_nanos</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ctime</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ctime_nanos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fixup</name></name> <operator>&amp;</operator> <name>TODO_MODE_BASE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCHMOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fchmod</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">07777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LCHMOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>lchmod</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">07777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>chmod</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">07777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fixup</name></name> <operator>&amp;</operator> <name>TODO_ACLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_write_disk_set_acls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fixup</name></name> <operator>&amp;</operator> <name>TODO_FFLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_fflags_platform</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fflags_set</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fixup</name></name> <operator>&amp;</operator> <name>TODO_MAC_METADATA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_mac_metadata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mac_metadata</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mac_metadata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>skip_fixup_entry</name>:</label>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_acl_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mac_metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fixup_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_write_disk_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>_a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_DISK_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name> <operator>|</operator> <name>ARCHIVE_STATE_FATAL</name></expr></argument>, <argument><expr><literal type="string">"archive_write_disk_free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_write_disk</name> <operator>*</operator><operator>)</operator><name>_a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_archive_write_disk_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_write_disk_set_group_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_write_disk_set_user_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>_name_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>_tmpname_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>error_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>path_safe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>decmpfs_header_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>resource_fork</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>compressed_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UF_COMPRESSED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_XATTR_H</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>stream_valid</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up compressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type>
<name>sort_dir_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>t</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>


<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>sort_dir_list</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>sort_dir_list</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<while>while <condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type>
<name>new_fixup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator>struct <name>fixup_entry</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fixup_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for a fixup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>fixup_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fixup_list</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fixup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>filetype</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>fe</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type>
<name>current_fixup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>current_fixup</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>current_fixup</name></name> <operator>=</operator> <call><name>new_fixup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>current_fixup</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fsobj_error</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a_eno</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>a_estr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a_eno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>a_eno</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a_estr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>a_estr</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>errstr</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_symlinks_fsobj</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a_eno</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>a_estr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>checking_linkname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LSTAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSTATAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNLINKAT</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>error_number</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>error_string</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>checking_linkname</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chdir_fd</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSTATAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNLINKAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
















<expr_stmt><expr><name>chdir_fd</name> <operator>=</operator> <call><name>la_opendirat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_ensure_cloexec_flag</name><argument_list>(<argument><expr><name>chdir_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chdir_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Could not open "</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>head</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>tail</name> <operator>==</operator> <name>path</name> <operator>&amp;&amp;</operator> <name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>tail</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<while>while <condition>(<expr><operator>!</operator><name>last</name></expr>)</condition> <block>{<block_content>



<while>while <condition>(<expr><operator>*</operator><name>tail</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>tail</name></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><operator>*</operator><name>tail</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>tail</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>tail</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>tail</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSTATAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNLINKAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fstatat</name><argument_list>(<argument><expr><name>chdir_fd</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lstat</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>












<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Could not stat "</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSTATAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNLINKAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>la_opendirat</name><argument_list>(<argument><expr><name>chdir_fd</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>chdir_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chdir_fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>chdir</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Could not chdir "</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>head</name> <operator>=</operator> <name>tail</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&amp;&amp;</operator> <name>checking_linkname</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINKAT</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><name>res</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Cannot write hardlink to symlink "</literal></expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else
if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSTATAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNLINKAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>unlinkat</name><argument_list>(<argument><expr><name>chdir_fd</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>unlink</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Could not remove symlink "</literal></expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>











<expr_stmt><expr><name>res</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_UNLINK</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSTATAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNLINKAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>unlinkat</name><argument_list>(<argument><expr><name>chdir_fd</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>unlink</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Cannot remove intervening "</literal>
<literal type="string">"symlink "</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator>
<name>ARCHIVE_EXTRACT_SECURE_SYMLINKS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSTATAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNLINKAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fstatat</name><argument_list>(<argument><expr><name>chdir_fd</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>la_stat</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Could not stat "</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSTATAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNLINKAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>la_opendirat</name><argument_list>(<argument><expr><name>chdir_fd</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>chdir_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chdir_fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>chdir</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Could not chdir "</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>head</name> <operator>=</operator> <name>tail</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Cannot extract through "</literal>
<literal type="string">"symlink "</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Cannot extract through symlink "</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tail</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSTATAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNLINKAT</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>chdir_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>chdir_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_FCHDIR</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name>chdir_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fchdir</name><argument_list>(<argument><expr><name>chdir_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"chdir() failure"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>chdir_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chdir_fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>res</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_symlinks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>error_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>check_symlinks_fsobj</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>error_number</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>error_string</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>cleanup_pathname_win</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>wc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alen</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb</name></decl>, <decl><type ref="prev"/><name>complete</name></decl>, <decl><type ref="prev"/><name>utf8</name></decl>;</decl_stmt>

<expr_stmt><expr><name>alen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>complete</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>path</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>alen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>utf8</name> <operator>||</operator> <operator>!</operator><name>mb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>complete</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator>
<operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>complete</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>alen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>mbtowc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>wc</name> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alen</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>cleanup_pathname_fsobj</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a_eno</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>a_estr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>separator</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>src</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid empty "</literal></expr></argument>, <argument><expr><literal type="string">"pathname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cleanup_pathname_win</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Path is "</literal></expr></argument>, <argument><expr><literal type="string">"absolute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>separator</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name>
<operator>&amp;</operator> <name>ARCHIVE_EXTRACT_SECURE_NODOTDOT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fsobj_error</name><argument_list>(<argument><expr><name>a_eno</name></expr></argument>, <argument><expr><name>a_estr</name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Path contains "</literal></expr></argument>, <argument><expr><literal type="string">"'..'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>







</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>separator</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>src</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>src</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>separator</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>path</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>separator</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cleanup_pathname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>error_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>cleanup_pathname_fsobj</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>error_number</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>error_string</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_parent_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>


<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>create_dir</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode_final</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>


<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator>
<operator>(</operator><name><name>base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>base</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>base</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>base</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>slash</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>create_dir</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>la_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_NO_OVERWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>EEXIST</name></expr></argument>,
<argument><expr><literal type="string">"Can't create directory '%s'"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't create directory '%s': "</literal>
<literal type="string">"Conflicting file cannot be removed"</literal></expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOTDIR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't test directory '%s'"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>slash</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>create_dir</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><name>mode_final</name> <operator>=</operator> <name>DEFAULT_DIR_MODE</name> <operator>&amp;</operator> <operator>~</operator><name><name>a</name><operator>-&gt;</operator><name>user_umask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>mode_final</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>MINIMUM_DIR_MODE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>&amp;=</operator> <name>MAXIMUM_DIR_MODE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mkdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>mode_final</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>le</name> <operator>=</operator> <call><name>new_fixup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>le</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>fixup</name></name> <operator>|=</operator><name>TODO_MODE_BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode_final</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>la_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed to create dir '%s'"</literal></expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_ownership</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>






<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>user_uid</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>user_uid</name></name> <operator>!=</operator> <name><name>a</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't set UID=%jd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCHOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>fchown</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>TODO_OWNER</name> <operator>|</operator> <name>TODO_SGID_CHECK</name> <operator>|</operator> <name>TODO_SUID_CHECK</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LCHOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>lchown</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>TODO_OWNER</name> <operator>|</operator> <name>TODO_SGID_CHECK</name> <operator>|</operator> <name>TODO_SUID_CHECK</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_CHOWN</name></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>chown</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>TODO_OWNER</name> <operator>|</operator> <name>TODO_SGID_CHECK</name> <operator>|</operator> <name>TODO_SUID_CHECK</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't set user=%jd/group=%jd for %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_time</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>atime</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>atime_nsec</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>mtime</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>mtime_nsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTIMENSAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FUTIMENS</name></expr></argument>)</argument_list></call></expr></cpp:if>





<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name><name>ts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name>atime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name>atime_nsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name>mtime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name>mtime_nsec</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>futimens</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>utimensat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_UTIMES</name></expr></cpp:elif>






<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name><name>times</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name>atime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_usec</name> <operator>=</operator> <name>atime_nsec</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name>mtime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_usec</name> <operator>=</operator> <name>mtime_nsec</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FUTIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>futimes</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>times</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fd</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LUTIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>lutimes</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>times</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>utimes</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>times</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTIME</name></expr></argument>)</argument_list></call></expr></cpp:elif>




<decl_stmt><decl><type><name><name>struct</name> <name>utimbuf</name></name></type> <name>times</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>atime_nsec</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mtime_nsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>times</name><operator>.</operator><name>actime</name></name> <operator>=</operator> <name>atime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>times</name><operator>.</operator><name>modtime</name></name> <operator>=</operator> <name>mtime</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>utime</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>times</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>atime_nsec</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mtime_nsec</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>F_SETTIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_time_tru64</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>atime</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>atime_nsec</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>mtime</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>mtime_nsec</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>ctime</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ctime_nsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_timbuf</name></name></type> <name>tstamp</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tstamp</name><operator>.</operator><name>atime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>atime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstamp</name><operator>.</operator><name>mtime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>mtime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstamp</name><operator>.</operator><name>ctime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>ctime</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__ia64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tstamp</name><operator>.</operator><name>atime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name>atime_nsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstamp</name><operator>.</operator><name>mtime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name>mtime_nsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstamp</name><operator>.</operator><name>ctime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name>ctime_nsec</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>tstamp</name><operator>.</operator><name>atime</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>atime_nsec</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstamp</name><operator>.</operator><name>mtime</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>mtime_nsec</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstamp</name><operator>.</operator><name>ctime</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>ctime_nsec</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>F_SETTIMES</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>tstamp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_times</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>atime</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>atime_nanos</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>birthtime</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>birthtime_nanos</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>mtime</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>mtime_nanos</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>cctime</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ctime_nanos</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>F_SETTIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>user_uid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>set_time_tru64</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>atime</name></expr></argument>, <argument><expr><name>atime_nanos</name></expr></argument>, <argument><expr><name>mtime</name></expr></argument>,
<argument><expr><name>mtime_nanos</name></expr></argument>, <argument><expr><name>cctime</name></expr></argument>, <argument><expr><name>ctime_nanos</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cctime</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctime_nanos</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_STAT_ST_BIRTHTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>








<if_stmt><if>if <condition>(<expr><name>birthtime</name> <operator>&lt;</operator> <name>mtime</name>
<operator>||</operator> <operator>(</operator><name>birthtime</name> <operator>==</operator> <name>mtime</name> <operator>&amp;&amp;</operator> <name>birthtime_nanos</name> <operator>&lt;</operator> <name>mtime_nanos</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>set_time</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>atime</name></expr></argument>, <argument><expr><name>atime_nanos</name></expr></argument>,
<argument><expr><name>birthtime</name></expr></argument>, <argument><expr><name>birthtime_nanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>birthtime</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>birthtime_nanos</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>set_time</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>atime</name></expr></argument>, <argument><expr><name>atime_nanos</name></expr></argument>,
<argument><expr><name>mtime</name></expr></argument>, <argument><expr><name>mtime_nanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>r2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't restore time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_times_from_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>atime</name></decl>, <decl><type ref="prev"/><name>birthtime</name></decl>, <decl><type ref="prev"/><name>mtime</name></decl>, <decl><type ref="prev"/><name>cctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>atime_nsec</name></decl>, <decl><type ref="prev"/><name>birthtime_nsec</name></decl>, <decl><type ref="prev"/><name>mtime_nsec</name></decl>, <decl><type ref="prev"/><name>ctime_nsec</name></decl>;</decl_stmt>


<expr_stmt><expr><name>atime</name> <operator>=</operator> <name>birthtime</name> <operator>=</operator> <name>mtime</name> <operator>=</operator> <name>cctime</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>atime_nsec</name> <operator>=</operator> <name>birthtime_nsec</name> <operator>=</operator> <name>mtime_nsec</name> <operator>=</operator> <name>ctime_nsec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>archive_entry_atime_is_set</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRUCT_STAT_ST_BIRTHTIME</name></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>archive_entry_birthtime_is_set</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>archive_entry_mtime_is_set</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_entry_atime_is_set</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>atime</name> <operator>=</operator> <call><name>archive_entry_atime</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>atime_nsec</name> <operator>=</operator> <call><name>archive_entry_atime_nsec</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_birthtime_is_set</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>birthtime</name> <operator>=</operator> <call><name>archive_entry_birthtime</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>birthtime_nsec</name> <operator>=</operator> <call><name>archive_entry_birthtime_nsec</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_mtime_is_set</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mtime</name> <operator>=</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mtime_nsec</name> <operator>=</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_ctime_is_set</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cctime</name> <operator>=</operator> <call><name>archive_entry_ctime</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctime_nsec</name> <operator>=</operator> <call><name>archive_entry_ctime_nsec</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>set_times</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>atime</name></expr></argument>, <argument><expr><name>atime_nsec</name></expr></argument>,
<argument><expr><name>birthtime</name></expr></argument>, <argument><expr><name>birthtime_nsec</name></expr></argument>,
<argument><expr><name>mtime</name></expr></argument>, <argument><expr><name>mtime_nsec</name></expr></argument>,
<argument><expr><name>cctime</name></expr></argument>, <argument><expr><name>ctime_nsec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mode</name> <operator>&amp;=</operator> <literal type="number">07777</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_SGID_CHECK</name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>lazy_stat</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>pst</name><operator>-&gt;</operator><name>st_gid</name></name> <operator>!=</operator> <name><name>a</name><operator>-&gt;</operator><name>gid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>&amp;=</operator> <operator>~</operator> <name>S_ISGID</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_OWNER</name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Can't restore SGID bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>pst</name><operator>-&gt;</operator><name>st_uid</name></name> <operator>!=</operator> <name><name>a</name><operator>-&gt;</operator><name>uid</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_SUID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>&amp;=</operator> <operator>~</operator> <name>S_ISUID</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_OWNER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Can't restore SUID bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TODO_SGID_CHECK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TODO_SUID_CHECK</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_SUID_CHECK</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>user_uid</name></name> <operator>!=</operator> <name><name>a</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>&amp;=</operator> <operator>~</operator> <name>S_ISUID</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARCHIVE_EXTRACT_OWNER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Can't make file SUID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TODO_SUID_CHECK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LCHMOD</name></expr></argument>)</argument_list></call></expr></cpp:if>








<if_stmt><if>if <condition>(<expr><call><name>lchmod</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENOTSUP</name></expr>:</case>
<case>case <expr><name>ENOSYS</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENOTSUP</name> <operator>!=</operator> <name>EOPNOTSUPP</name></expr></cpp:if>
<case>case <expr><name>EOPNOTSUPP</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't set permissions to 0%o"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCHMOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>fchmod</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>chmod</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't set permissions to 0%o"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_fflags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fixup_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>set</name></decl>, <decl><type ref="prev"/><name>clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name> <init>= <expr><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>















<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>critical_flags</name> <init>= <expr><literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_IMMUTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>SF_IMMUTABLE</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_IMMUTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>UF_IMMUTABLE</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_APPEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>SF_APPEND</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_APPEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>UF_APPEND</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_APPEND_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>FS_APPEND_FL</name>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_APPEND_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<operator>|</operator> <name>EXT2_APPEND_FL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_IMMUTABLE_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>FS_IMMUTABLE_FL</name>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_IMMUTABLE_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<operator>|</operator> <name>EXT2_IMMUTABLE_FL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_JOURNAL_DATA_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>FS_JOURNAL_DATA_FL</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_FFLAGS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_fflags</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>critical_flags</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>set</name> <operator>&amp;</operator> <name>critical_flags</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>le</name> <operator>=</operator> <call><name>current_fixup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>le</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>filetype</name></name> <operator>=</operator> <call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>fixup</name></name> <operator>|=</operator> <name>TODO_FFLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>fflags_set</name></name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>le</name><operator>-&gt;</operator><name>fixup</name></name> <operator>&amp;</operator> <name>TODO_MODE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_fflags_platform</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>clear_nochange_fflags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name> <init>= <expr><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nochange_flags</name> <init>= <expr><literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_IMMUTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>SF_IMMUTABLE</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_IMMUTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>UF_IMMUTABLE</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_APPEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>SF_APPEND</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_APPEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>UF_APPEND</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_APPEND_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>EXT2_APPEND_FL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_IMMUTABLE_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>EXT2_IMMUTABLE_FL</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>set_fflags_platform</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>nochange_flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LCHFLAGS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHFLAGS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCHFLAGS</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_STAT_ST_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_fflags_platform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>clear</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sf_mask</name> <init>= <expr><literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_APPEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>SF_APPEND</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_ARCHIVED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>SF_ARCHIVED</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_IMMUTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>SF_IMMUTABLE</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_NOUNLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>SF_NOUNLINK</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>clear</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>lazy_stat</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>clear</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_flags</name></name> <operator>|=</operator> <name>set</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>user_uid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>sf_mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCHFLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>fchflags</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_flags</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LCHFLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>lchflags</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_flags</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CHFLAGS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't set file flags on symlink."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>chflags</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_flags</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to set file flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FS_IOC_GETFLAGS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FS_IOC_SETFLAGS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WORKING_FS_IOC_GETFLAGS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_IOC_GETFLAGS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EXT2_IOC_SETFLAGS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WORKING_EXT2_IOC_GETFLAGS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_fflags_platform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>clear</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>myfd</name> <init>= <expr><name>fd</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newflags</name></decl>, <decl><type ref="prev"/><name>oldflags</name></decl>;</decl_stmt>







<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sf_mask</name> <init>= <expr><literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_IMMUTABLE_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>FS_IMMUTABLE_FL</name>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_IMMUTABLE_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<operator>|</operator> <name>EXT2_IMMUTABLE_FL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_APPEND_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>FS_APPEND_FL</name>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_APPEND_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<operator>|</operator> <name>EXT2_APPEND_FL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_JOURNAL_DATA_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>FS_JOURNAL_DATA_FL</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>clear</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>myfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>myfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_NONBLOCK</name> <operator>|</operator> <name>O_BINARY</name> <operator>|</operator>
<name>O_CLOEXEC</name> <operator>|</operator> <name>O_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_ensure_cloexec_flag</name><argument_list>(<argument><expr><name>myfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>myfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>myfd</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_IOC_GETFLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>FS_IOC_GETFLAGS</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><name>EXT2_IOC_GETFLAGS</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><operator>&amp;</operator><name>oldflags</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>newflags</name> <operator>=</operator> <operator>(</operator><name>oldflags</name> <operator>&amp;</operator> <operator>~</operator><name>clear</name><operator>)</operator> <operator>|</operator> <name>set</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>myfd</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_IOC_SETFLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>FS_IOC_SETFLAGS</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><name>EXT2_IOC_SETFLAGS</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><operator>&amp;</operator><name>newflags</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EPERM</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>newflags</name> <operator>&amp;=</operator> <operator>~</operator><name>sf_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>oldflags</name> <operator>&amp;=</operator> <name>sf_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newflags</name> <operator>|=</operator> <name>oldflags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>myfd</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_IOC_SETFLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>FS_IOC_SETFLAGS</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><name>EXT2_IOC_SETFLAGS</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><operator>&amp;</operator><name>newflags</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>


<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to set file flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>myfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_fflags_platform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>clear</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>set</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>clear</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COPYFILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_mac_metadata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>metadata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>metadata_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pathname</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>metadata</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>metadata_size</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fixup_appledouble</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pathname</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_XATTR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_xattrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tmpfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dffd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>xattr_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xattr_names</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xattr_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>, <decl><type ref="prev"/><name>xattr_i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xattr_size</name> <operator>=</operator> <call><name>flistxattr</name><argument_list>(<argument><expr><name>tmpfd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xattr_size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to read metadata(xattr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<goto>goto <name>exit_xattr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>xattr_names</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>xattr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xattr_names</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for metadata(xattr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<goto>goto <name>exit_xattr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>xattr_size</name> <operator>=</operator> <call><name>flistxattr</name><argument_list>(<argument><expr><name>tmpfd</name></expr></argument>, <argument><expr><name>xattr_names</name></expr></argument>, <argument><expr><name>xattr_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xattr_size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to read metadata(xattr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<goto>goto <name>exit_xattr</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>xattr_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>xattr_i</name> <operator>&lt;</operator> <name>xattr_size</name></expr>;</condition>
<incr><expr><name>xattr_i</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>xattr_names</name> <operator>+</operator> <name>xattr_i</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xattr_val_saved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>fgetxattr</name><argument_list>(<argument><expr><name>tmpfd</name></expr></argument>, <argument><expr><name>xattr_names</name> <operator>+</operator> <name>xattr_i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get metadata(xattr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<goto>goto <name>exit_xattr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>xattr_val_saved</name> <operator>=</operator> <name>xattr_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xattr_val</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>xattr_val</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xattr_val</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get metadata(xattr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xattr_val_saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit_xattr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>fgetxattr</name><argument_list>(<argument><expr><name>tmpfd</name></expr></argument>, <argument><expr><name>xattr_names</name> <operator>+</operator> <name>xattr_i</name></expr></argument>, <argument><expr><name>xattr_val</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get metadata(xattr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<goto>goto <name>exit_xattr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fsetxattr</name><argument_list>(<argument><expr><name>dffd</name></expr></argument>, <argument><expr><name>xattr_names</name> <operator>+</operator> <name>xattr_i</name></expr></argument>, <argument><expr><name>xattr_val</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get metadata(xattr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<goto>goto <name>exit_xattr</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<label><name>exit_xattr</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xattr_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xattr_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_acls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tmpfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dffd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_ACL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>acl_t</name></type> <name>acl</name></decl>, <decl><type ref="prev"/><name>dfacl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acl_r</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_fd</name><argument_list>(<argument><expr><name>tmpfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get metadata(acl)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<goto>goto <name>exit_acl</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dfacl</name> <operator>=</operator> <call><name>acl_dup</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acl_r</name> <operator>=</operator> <call><name>acl_set_fd</name><argument_list>(<argument><expr><name>dffd</name></expr></argument>, <argument><expr><name>dfacl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get metadata(acl)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<goto>goto <name>exit_acl</name>;</goto>
</block_content>}</block></if></if_stmt>
<label><name>exit_acl</name>:</label>
<if_stmt><if>if <condition>(<expr><name>acl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dfacl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>dfacl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_tempdatafork</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>tmpdatafork</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmpfd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpdatafork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpdatafork</name></expr></argument>, <argument><expr><literal type="string">"tar.md.XXXXXX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpfd</name> <operator>=</operator> <call><name>mkstemp</name><argument_list>(<argument><expr><name><name>tmpdatafork</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to mkstemp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpdatafork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>copyfile</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name><name>tmpdatafork</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>COPYFILE_UNPACK</name> <operator>|</operator> <name>COPYFILE_NOFOLLOW</name>
<operator>|</operator> <name>COPYFILE_ACL</name> <operator>|</operator> <name>COPYFILE_XATTR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to restore metadata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpfd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>tmpdatafork</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpdatafork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>tmpfd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_metadata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>metadata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>datafork</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datafork_compressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>datafork_compressed</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dffd</name></decl>, <decl><type ref="prev"/><name>tmpfd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmpfd</name> <operator>=</operator> <call><name>create_tempdatafork</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><name>dffd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>datafork</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dffd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to open the data fork for metadata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_XATTR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>copy_xattrs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>tmpfd</name></expr></argument>, <argument><expr><name>dffd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>copy_acls</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>tmpfd</name></expr></argument>, <argument><expr><name>dffd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>dffd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>copyfile</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>datafork</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>COPYFILE_UNPACK</name> <operator>|</operator> <name>COPYFILE_NOFOLLOW</name>
<operator>|</operator> <name>COPYFILE_ACL</name> <operator>|</operator> <name>COPYFILE_XATTR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to restore metadata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_mac_metadata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>metadata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>metadata_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="string">".XXXXXX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mkstemp</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to restore metadata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>metadata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>written</name> <operator>!=</operator> <name>metadata_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to restore metadata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>compressed</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_COMPRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>todo</name></name> <operator>&amp;</operator> <name>TODO_HFS_COMPRESSION</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>lazy_stat</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>compressed</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_flags</name></name> <operator>&amp;</operator> <name>UF_COMPRESSED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>compressed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>copy_metadata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fixup_appledouble</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>datafork</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>datafork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>pathname</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_appledouble</name>;</goto></block_content></block></if></if_stmt>






<expr_stmt><expr><call><name>archive_strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>datafork</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>datafork</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>datafork</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>AE_IFREG</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_appledouble</name>;</goto></block_content></block></if></if_stmt>




<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_BINARY</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_ensure_cloexec_flag</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to open a restoring file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<goto>goto <name>skip_appledouble</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to read a restoring file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<goto>goto <name>skip_appledouble</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_be32dec</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x00051607</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_appledouble</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_be32dec</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x00020000</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_appledouble</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>copy_metadata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name><name>datafork</name><operator>.</operator><name>s</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_COMPRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name><name>st</name><operator>.</operator><name>st_flags</name></name> <operator>&amp;</operator> <name>UF_COMPRESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><literal type="number">0</literal></expr></expr_stmt>)</block_content></block>;</function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_EOF</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>skip_appledouble</name>:</label>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>datafork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_XATTR_LINUX</name> <operator>||</operator> <name>ARCHIVE_XATTR_DARWIN</name> <operator>||</operator> <name>ARCHIVE_XATTR_AIX</name></expr></cpp:if>




static <function><type><name>int</name></type>
<name>set_xattrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>errlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>archive_entry_xattr_reset</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_entry_xattr_next</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_XATTR_LINUX</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"system."</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"posix_acl_access"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"posix_acl_default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"trusted.SGI_"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"ACL_DEFAULT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"ACL_FILE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"xfsroot."</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errlist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errlist</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_XATTR_LINUX</name></expr></cpp:if>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>fsetxattr</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_XATTR_DARWIN</name></expr></cpp:elif>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>fsetxattr</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_XATTR_AIX</name></expr></cpp:elif>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>fsetea</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_XATTR_LINUX</name></expr></cpp:if>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>lsetxattr</name><argument_list>(<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_XATTR_DARWIN</name></expr></cpp:elif>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>setxattr</name><argument_list>(<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XATTR_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_XATTR_AIX</name></expr></cpp:elif>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>lsetea</name><argument_list>(<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errlist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errlist</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOTSUP</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOSYS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fail</name> <operator>&amp;&amp;</operator> <name><name>errlist</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>errlist</name><operator>.</operator><name>length</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errlist</name><operator>.</operator><name>s</name><index>[<expr><name><name>errlist</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Cannot restore extended attributes: %s"</literal></expr></argument>,
<argument><expr><name><name>errlist</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Cannot restore extended "</literal>
<literal type="string">"attributes on this file system."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_XATTR_FREEBSD</name></expr></cpp:elif>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_xattrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>errlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>archive_entry_xattr_reset</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_entry_xattr_next</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>namespace</name></decl>;</decl_stmt>

<expr_stmt><expr><name>namespace</name> <operator>=</operator> <name>EXTATTR_NAMESPACE_USER</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"user."</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>namespace</name> <operator>=</operator> <name>EXTATTR_NAMESPACE_USER</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"system."</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>namespace</name> <operator>=</operator> <name>EXTATTR_NAMESPACE_SYSTEM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"nfs4.acl"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"posix1e.acl_access"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"posix1e.acl_default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errlist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errlist</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

















<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>extattr_set_fd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>namespace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>extattr_set_link</name><argument_list>(
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>namespace</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errlist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errlist</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOTSUP</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOSYS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fail</name> <operator>&amp;&amp;</operator> <name><name>errlist</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>errlist</name><operator>.</operator><name>length</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errlist</name><operator>.</operator><name>s</name><index>[<expr><name><name>errlist</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Cannot restore extended attributes: %s"</literal></expr></argument>,
<argument><expr><name><name>errlist</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Cannot restore extended "</literal>
<literal type="string">"attributes on this file system."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_xattrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warning_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>archive_entry_xattr_count</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>warning_done</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>warning_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Cannot restore extended attributes on this system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>older</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>to_int64_time</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>to_int64_time</name><argument_list>(<argument><expr><call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>to_int64_time</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>to_int64_time</name><argument_list>(<argument><expr><call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>st_mtimespec</name><operator>.</operator><name>tv_nsec</name></name> <operator>&lt;</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>st_mtim</name><operator>.</operator><name>tv_nsec</name></name> <operator>&lt;</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_STRUCT_STAT_ST_MTIME_N</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>st_mtime_n</name></name> <operator>&lt;</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_STRUCT_STAT_ST_UMTIME</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>st_umtime</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>&lt;</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_STRUCT_STAT_ST_MTIME_USEC</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>st_mtime_usec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>&lt;</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_ACL_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>archive_write_disk_set_acls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>abstract_acl</name></decl></parameter>, <parameter><decl><type><name>__LA_MODE_T</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>abstract_acl</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
