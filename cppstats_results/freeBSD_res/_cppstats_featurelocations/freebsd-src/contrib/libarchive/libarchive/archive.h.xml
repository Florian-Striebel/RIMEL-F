<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_H_INCLUDED</name></cpp:macro></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_VERSION_NUMBER</name></cpp:macro> <cpp:value>3005002</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__BORLANDC__</name> <operator>&gt;=</operator> <literal type="number">0x560</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__INTERIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_SCO_DS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__osf__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LA_INT64_T_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">4000000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_INT64_T</name></cpp:macro> <cpp:value>la_int64_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_INT64_T_DEFINED</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__int64</name></type> <name>la_int64_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SCO_DS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__osf__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>la_int64_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>int64_t</name></type> <name>la_int64_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LA_SSIZE_T_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">4000000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_SSIZE_T</name></cpp:macro> <cpp:value>la_ssize_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_SSIZE_T_DEFINED</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SSIZE_T_DEFINED</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_SSIZE_T_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>ssize_t</name></type> <name>la_ssize_t</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>__int64</name></type> <name>la_ssize_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>long</name></type> <name>la_ssize_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>ssize_t</name></type> <name>la_ssize_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"android_lf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>defined</name> <name>__WIN32__</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>defined</name> <name>_WIN32</name><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>defined</name> <name>LIBARCHIVE_STATIC</name><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LIBARCHIVE_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_DECL</name></cpp:macro> <cpp:value>__attribute__((dllexport)) extern</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_DECL</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_DECL</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_DECL</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_DECL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_PRINTF</name><parameter_list>(<parameter><type><name>fmtarg</name></type></parameter>, <parameter><type><name>firstvararg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__format__ (__printf__, fmtarg, firstvararg)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_PRINTF</name><parameter_list>(<parameter><type><name>fmtarg</name></type></parameter>, <parameter><type><name>firstvararg</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_DEPRECATED</name></cpp:macro> <cpp:value>__attribute__((deprecated))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LA_DEPRECATED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_version_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_VERSION_ONLY_STRING</name></cpp:macro> <cpp:value>"3.5.2"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_VERSION_STRING</name></cpp:macro> <cpp:value>"libarchive " ARCHIVE_VERSION_ONLY_STRING</cpp:value></cpp:define>
<function_decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>archive_version_string</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>archive_version_details</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>archive_zlib_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>archive_liblzma_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>archive_bzlib_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>archive_liblz4_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>archive_libzstd_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<struct_decl>struct <name>archive</name>;</struct_decl>
<struct_decl>struct <name>archive_entry</name>;</struct_decl>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EOF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_RETRY</name></cpp:macro> <cpp:value>(-10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_WARN</name></cpp:macro> <cpp:value>(-20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FAILED</name></cpp:macro> <cpp:value>(-25)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FATAL</name></cpp:macro> <cpp:value>(-30)</cpp:value></cpp:define>























<typedef>typedef <function_decl><type><name>la_ssize_t</name></type> <name>archive_read_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>_buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>






<typedef>typedef <function_decl><type><name>la_int64_t</name></type> <name>archive_skip_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





<typedef>typedef <function_decl><type><name>la_int64_t</name></type> <name>archive_seek_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <function_decl><type><name>la_ssize_t</name></type> <name>archive_write_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>archive_open_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>archive_close_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>archive_free_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





<typedef>typedef <function_decl><type><name>int</name></type> <name>archive_switch_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data1</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archive_passphrase_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_GZIP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_BZIP2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_COMPRESS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_PROGRAM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_LZMA</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_XZ</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_UU</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_RPM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_LZIP</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_LRZIP</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_LZOP</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_GRZIP</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_LZ4</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FILTER_ZSTD</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">4000000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_COMPRESSION_NONE</name></cpp:macro> <cpp:value>ARCHIVE_FILTER_NONE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_COMPRESSION_GZIP</name></cpp:macro> <cpp:value>ARCHIVE_FILTER_GZIP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_COMPRESSION_BZIP2</name></cpp:macro> <cpp:value>ARCHIVE_FILTER_BZIP2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_COMPRESSION_COMPRESS</name></cpp:macro> <cpp:value>ARCHIVE_FILTER_COMPRESS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_COMPRESSION_PROGRAM</name></cpp:macro> <cpp:value>ARCHIVE_FILTER_PROGRAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_COMPRESSION_LZMA</name></cpp:macro> <cpp:value>ARCHIVE_FILTER_LZMA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_COMPRESSION_XZ</name></cpp:macro> <cpp:value>ARCHIVE_FILTER_XZ</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_COMPRESSION_UU</name></cpp:macro> <cpp:value>ARCHIVE_FILTER_UU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_COMPRESSION_RPM</name></cpp:macro> <cpp:value>ARCHIVE_FILTER_RPM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_COMPRESSION_LZIP</name></cpp:macro> <cpp:value>ARCHIVE_FILTER_LZIP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_COMPRESSION_LRZIP</name></cpp:macro> <cpp:value>ARCHIVE_FILTER_LRZIP</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_BASE_MASK</name></cpp:macro> <cpp:value>0xff0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_CPIO</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_CPIO_POSIX</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_CPIO | 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_CPIO_BIN_LE</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_CPIO | 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_CPIO_BIN_BE</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_CPIO | 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_CPIO_SVR4_NOCRC</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_CPIO | 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_CPIO_SVR4_CRC</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_CPIO | 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_CPIO_AFIO_LARGE</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_CPIO | 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_CPIO_PWB</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_CPIO | 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_SHAR</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_SHAR_BASE</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_SHAR | 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_SHAR_DUMP</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_SHAR | 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_TAR</name></cpp:macro> <cpp:value>0x30000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_TAR_USTAR</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_TAR | 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_TAR | 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_TAR_PAX_RESTRICTED</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_TAR | 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_TAR_GNUTAR</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_TAR | 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_ISO9660</name></cpp:macro> <cpp:value>0x40000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_ISO9660_ROCKRIDGE</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_ISO9660 | 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_ZIP</name></cpp:macro> <cpp:value>0x50000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_EMPTY</name></cpp:macro> <cpp:value>0x60000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_AR</name></cpp:macro> <cpp:value>0x70000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_AR_GNU</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_AR | 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_AR_BSD</name></cpp:macro> <cpp:value>(ARCHIVE_FORMAT_AR | 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_MTREE</name></cpp:macro> <cpp:value>0x80000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_RAW</name></cpp:macro> <cpp:value>0x90000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_XAR</name></cpp:macro> <cpp:value>0xA0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_LHA</name></cpp:macro> <cpp:value>0xB0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_CAB</name></cpp:macro> <cpp:value>0xC0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_RAR</name></cpp:macro> <cpp:value>0xD0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_7ZIP</name></cpp:macro> <cpp:value>0xE0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_WARC</name></cpp:macro> <cpp:value>0xF0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_FORMAT_RAR_V5</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READ_FORMAT_CAPS_NONE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_DATA</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_METADATA</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>













<function_decl><type><name>__LA_DECL</name> <name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>archive_read_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">4000000</literal></expr></cpp:if>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_compression_all</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_compression_bzip2</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_compression_compress</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_compression_gzip</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_compression_lzip</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_compression_lzma</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_compression_none</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_compression_program</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>command</name></expr></argument>)</argument_list> <name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_compression_program_signature</name>
<argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument> , <argument><expr><name>size_t</name></expr></argument>)</argument_list> <name>__LA_DEPRECATED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_compression_rpm</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_compression_uu</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_compression_xz</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_by_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_bzip2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_compress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_gzip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_grzip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_lrzip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_lz4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_lzip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_lzma</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_lzop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_none</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_program</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_program_signature</name>
<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> ,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_rpm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_uu</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_xz</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_filter_zstd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_7zip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_ar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_by_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_cab</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_cpio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_gnutar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_iso9660</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_lha</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_mtree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_rar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_rar5</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_tar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_warc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_xar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_zip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_zip_streamable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_support_format_zip_seekable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_append_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_append_filter_program</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_append_filter_program_signature</name>
<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_open_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>archive_open_callback</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_read_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>archive_read_callback</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_seek_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>archive_seek_callback</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_skip_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>archive_skip_callback</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_close_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>archive_close_callback</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_switch_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>archive_switch_callback</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_callback_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_callback_data2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_add_callback_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_append_callback_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_prepend_callback_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_open1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data</name></decl></parameter>,
<parameter><decl><type><name>archive_open_callback</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>archive_read_callback</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>archive_close_callback</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_open2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data</name></decl></parameter>,
<parameter><decl><type><name>archive_open_callback</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>archive_read_callback</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>archive_skip_callback</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>archive_close_callback</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_open_filename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_filename</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_block_size</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_open_filenames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_filenames</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_block_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_open_filename_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>_filename</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_block_size</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_open_file</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>_filename</name></expr></argument>, <argument><expr><name>size_t</name> <name>_block_size</name></expr></argument>)</argument_list> <name>__LA_DEPRECATED</name></decl>;</decl_stmt>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_open_memory</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_open_memory2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>read_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_open_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_fd</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>_block_size</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_open_FILE</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>_file</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_next_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_next_header2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>__LA_DECL</name> <name>la_int64_t</name></type> <name>archive_read_header_position</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_has_encrypted_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_format_capabilities</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>la_ssize_t</name></type> <name>archive_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>la_int64_t</name></type> <name>archive_seek_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_data_into_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_format_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_filter_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_add_passphrase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_set_passphrase_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>, <parameter><decl><type><name>archive_passphrase_callback</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_OWNER</name></cpp:macro> <cpp:value>(0x0001)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_PERM</name></cpp:macro> <cpp:value>(0x0002)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_TIME</name></cpp:macro> <cpp:value>(0x0004)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_NO_OVERWRITE</name></cpp:macro> <cpp:value>(0x0008)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_UNLINK</name></cpp:macro> <cpp:value>(0x0010)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_ACL</name></cpp:macro> <cpp:value>(0x0020)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_FFLAGS</name></cpp:macro> <cpp:value>(0x0040)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_XATTR</name></cpp:macro> <cpp:value>(0x0080)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_SECURE_SYMLINKS</name></cpp:macro> <cpp:value>(0x0100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_SECURE_NODOTDOT</name></cpp:macro> <cpp:value>(0x0200)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_NO_AUTODIR</name></cpp:macro> <cpp:value>(0x0400)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER</name></cpp:macro> <cpp:value>(0x0800)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_SPARSE</name></cpp:macro> <cpp:value>(0x1000)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_MAC_METADATA</name></cpp:macro> <cpp:value>(0x2000)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_NO_HFS_COMPRESSION</name></cpp:macro> <cpp:value>(0x4000)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_HFS_COMPRESSION_FORCED</name></cpp:macro> <cpp:value>(0x8000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS</name></cpp:macro> <cpp:value>(0x10000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_CLEAR_NOCHANGE_FFLAGS</name></cpp:macro> <cpp:value>(0x20000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_EXTRACT_SAFE_WRITES</name></cpp:macro> <cpp:value>(0x40000)</cpp:value></cpp:define>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_extract</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_extract2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>void</name></type> <name>archive_read_extract_set_progress_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>_progress_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_user_data</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>__LA_DECL</name> <name>void</name></type> <name>archive_read_extract_set_skip_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>la_int64_t</name></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">4000000</literal></expr></cpp:if>

<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_finish</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list> <name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<function_decl><type><name>__LA_DECL</name> <name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>archive_write_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_bytes_per_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bytes_per_block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_get_bytes_per_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_bytes_in_last_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bytes_in_last_block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_get_bytes_in_last_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_skip_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>la_int64_t</name></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">4000000</literal></expr></cpp:if>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_compression_bzip2</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_compression_compress</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_compression_gzip</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_compression_lzip</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_compression_lzma</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_compression_none</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_compression_program</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>cmd</name></expr></argument>)</argument_list> <name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_compression_xz</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_code</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_by_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_b64encode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_bzip2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_compress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_grzip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_gzip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_lrzip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_lz4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_lzip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_lzma</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_lzop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_none</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_program</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_uuencode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_xz</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_add_filter_zstd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format_code</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_by_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_7zip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_ar_bsd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_ar_svr4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_cpio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_cpio_bin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_cpio_newc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_cpio_odc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_cpio_pwb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_gnutar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_iso9660</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_mtree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_mtree_classic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_pax</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_pax_restricted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_shar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_shar_dump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_ustar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_v7tar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_warc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_xar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_zip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_filter_by_ext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_filter_by_ext_def</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>def_ext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_zip_set_compression_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_zip_set_compression_store</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>archive_open_callback</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>archive_write_callback</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>archive_close_callback</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_open2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>archive_open_callback</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>archive_write_callback</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>archive_close_callback</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>archive_free_callback</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_open_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_open_filename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_open_filename_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>_file</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_open_file</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>_file</name></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_open_FILE</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_open_memory</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_buffSize</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_used</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>la_ssize_t</name></type> <name>archive_write_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>la_ssize_t</name></type> <name>archive_write_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_fail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">4000000</literal></expr></cpp:if>

<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_finish</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list> <name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_format_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_filter_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_passphrase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_set_passphrase_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>, <parameter><decl><type><name>archive_passphrase_callback</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>__LA_DECL</name> <name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>archive_write_disk_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_disk_set_skip_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>la_int64_t</name></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_disk_set_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_disk_set_standard_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_disk_set_group_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> ,
<parameter><function_decl><type><name>la_int64_t</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier> )<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_write_disk_set_user_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> ,
<parameter><function_decl><type><name>la_int64_t</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier> )<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>la_int64_t</name></type> <name>archive_write_disk_gid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>la_int64_t</name></type> <name>archive_write_disk_uid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>__LA_DECL</name> <name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>archive_read_disk_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_set_symlink_logical</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_set_symlink_physical</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_set_symlink_hybrid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_entry_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archive_read_disk_gname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archive_read_disk_uname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_set_standard_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_set_gname_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> ,
<parameter><function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier> )<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier> )<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_set_uname_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> ,
<parameter><function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier> )<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier> )<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_open_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_descend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_can_descend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_current_filesystem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_current_filesystem_is_synthetic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_current_filesystem_is_remote</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_set_atime_restored</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READDISK_RESTORE_ATIME</name></cpp:macro> <cpp:value>(0x0001)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READDISK_HONOR_NODUMP</name></cpp:macro> <cpp:value>(0x0002)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READDISK_MAC_COPYFILE</name></cpp:macro> <cpp:value>(0x0004)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READDISK_NO_TRAVERSE_MOUNTS</name></cpp:macro> <cpp:value>(0x0008)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READDISK_NO_XATTR</name></cpp:macro> <cpp:value>(0x0010)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READDISK_NO_ACL</name></cpp:macro> <cpp:value>(0x0020)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READDISK_NO_FFLAGS</name></cpp:macro> <cpp:value>(0x0040)</cpp:value></cpp:define>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_set_behavior</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_set_matching</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_matching</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>_excluded_func</name>)
<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_read_disk_set_metadata_filter_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_metadata_filter_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_client_data</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_filter_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>la_int64_t</name></type> <name>archive_filter_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_filter_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>archive_filter_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">4000000</literal></expr></cpp:if>



<decl_stmt><decl><type><name>__LA_DECL</name> <name>la_int64_t</name></type> <name>archive_position_compressed</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__LA_DECL</name> <name>la_int64_t</name></type> <name>archive_position_uncompressed</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archive_compression_name</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_compression</name><argument_list>(<argument><expr>struct <name>archive</name> <operator>*</operator></expr></argument>)</argument_list>
<name>__LA_DEPRECATED</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_errno</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archive_error_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archive_format_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>void</name></type> <name>archive_clear_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>void</name></type> <name>archive_set_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_err</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __LA_PRINTF<parameter_list>(</parameter_list>3<operator>,</operator> 4</function_decl>)</block_content></block><empty_stmt>;</empty_stmt></extern>
<function_decl><type><name>__LA_DECL</name> <name>void</name></type> <name>archive_copy_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_file_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>__LA_DECL</name> <name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>archive_match_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_path_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_set_inclusion_recursion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_exclude_pattern</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_exclude_pattern_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_exclude_pattern_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_nullSeparator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_exclude_pattern_from_file_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_nullSeparator</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_pattern</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_pattern_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_pattern_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_nullSeparator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_pattern_from_file_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_nullSeparator</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_path_unmatched_inclusions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_path_unmatched_inclusions_next</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_path_unmatched_inclusions_next_w</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_time_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_MATCH_MTIME</name></cpp:macro> <cpp:value>(0x0100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_MATCH_CTIME</name></cpp:macro> <cpp:value>(0x0200)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_MATCH_NEWER</name></cpp:macro> <cpp:value>(0x0001)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_MATCH_OLDER</name></cpp:macro> <cpp:value>(0x0002)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_MATCH_EQUAL</name></cpp:macro> <cpp:value>(0x0010)</cpp:value></cpp:define>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_flag</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>_sec</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_nsec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_date</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_datestr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_date_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>_datestr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_file_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>_flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_pathname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_file_time_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>_flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>_pathname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_exclude_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>_flag</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_owner_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_uid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_gid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_uname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_uname_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_gname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_match_include_gname_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>__LA_DECL</name> <name>int</name></type> <name>archive_utility_string_sort</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__LA_DECL</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
