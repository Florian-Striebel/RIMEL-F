<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_read.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_read_private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minimum</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a &lt; b ? a : b)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>choose_filters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>choose_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>close_filters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_vtable</name></name> <modifier>*</modifier></type><name>archive_read_vtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>_archive_filter_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_filter_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_archive_filter_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_filter_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_read_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_read_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_read_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_read_next_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_read_next_header2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>advance_file_pointer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>archive_vtable</name></name> <modifier>*</modifier></type>
<name>archive_read_vtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_vtable</name></name></type> <name>av</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>inited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inited</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_filter_bytes</name></name> <operator>=</operator> <name>_archive_filter_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_filter_code</name></name> <operator>=</operator> <name>_archive_filter_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_filter_name</name></name> <operator>=</operator> <name>_archive_filter_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_filter_count</name></name> <operator>=</operator> <name>_archive_filter_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_read_data_block</name></name> <operator>=</operator> <name>_archive_read_data_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_read_next_header</name></name> <operator>=</operator> <name>_archive_read_next_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_read_next_header2</name></name> <operator>=</operator> <name>_archive_read_next_header2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_free</name></name> <operator>=</operator> <name>_archive_read_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_close</name></name> <operator>=</operator> <name>_archive_read_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name>av</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type>
<name>archive_read_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>ARCHIVE_READ_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_NEW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <call><name>archive_entry_new2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <call><name>archive_read_vtable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>passphrases</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>passphrases</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>archive_read_extract_set_skip_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>d</name></decl></parameter>,
<parameter><decl><type><name>la_int64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>__archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name></expr></argument>, <argument><expr><literal type="string">"archive_read_extract_set_skip_file"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>skip_file_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>skip_file_dev</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>skip_file_ino</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_read_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>,
<parameter><decl><type><name>archive_open_callback</name> <modifier>*</modifier></type><name>client_opener</name></decl></parameter>, <parameter><decl><type><name>archive_read_callback</name> <modifier>*</modifier></type><name>client_reader</name></decl></parameter>,
<parameter><decl><type><name>archive_close_callback</name> <modifier>*</modifier></type><name>client_closer</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>archive_read_set_open_callback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>client_opener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_set_read_callback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>client_reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_set_close_callback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>client_closer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_set_callback_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>client_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>archive_read_open1</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>archive_read_open2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>,
<parameter><decl><type><name>archive_open_callback</name> <modifier>*</modifier></type><name>client_opener</name></decl></parameter>,
<parameter><decl><type><name>archive_read_callback</name> <modifier>*</modifier></type><name>client_reader</name></decl></parameter>,
<parameter><decl><type><name>archive_skip_callback</name> <modifier>*</modifier></type><name>client_skipper</name></decl></parameter>,
<parameter><decl><type><name>archive_close_callback</name> <modifier>*</modifier></type><name>client_closer</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>archive_read_set_callback_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>client_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_set_open_callback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>client_opener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_set_read_callback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>client_reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_set_skip_callback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>client_skipper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_set_close_callback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>client_closer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>archive_read_open1</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>client_read_proxy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>reader</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator>
<name><name>self</name><operator>-&gt;</operator><name>data</name></name><operator>,</operator> <name>buff</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>client_skip_proxy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>request</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Negative skip requested."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>request</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>skipper</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>int64_t</name></type> <name>skip_limit</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>get</name></decl>, <decl><type ref="prev"/><name>ask</name> <init>= <expr><name>request</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ask</name> <operator>&gt;</operator> <name>skip_limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ask</name> <operator>=</operator> <name>skip_limit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>get</name> <operator>=</operator> <operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>skipper</name></name><operator>)</operator>
<operator>(</operator><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator> <name><name>self</name><operator>-&gt;</operator><name>data</name></name><operator>,</operator> <name>ask</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>get</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>get</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>get</name> <operator>==</operator> <name>request</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>total</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>get</name> <operator>&gt;</operator> <name>request</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>request</name> <operator>-=</operator> <name>get</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>seeker</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>request</name> <operator>&gt;</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>











<decl_stmt><decl><type><name>int64_t</name></type> <name>before</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>position</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>after</name> <init>= <expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>seeker</name></name><operator>)</operator>
<operator>(</operator><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name>, <name><name>self</name><operator>-&gt;</operator><name>data</name></name>, <name>request</name>, <name>SEEK_CUR</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>after</name> <operator>!=</operator> <name>before</name> <operator>+</operator> <name>request</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>after</name> <operator>-</operator> <name>before</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>client_seek_proxy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>seeker</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Current client reader does not support seeking a device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>seeker</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator>
<name><name>self</name><operator>-&gt;</operator><name>data</name></name><operator>,</operator> <name>offset</name><operator>,</operator> <name>whence</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>client_close_proxy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>closer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>nodes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>closer</name></name><operator>)</operator>
<operator>(</operator><operator>(</operator>struct <name>archive</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator>
<name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>r2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>client_open_proxy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>opener</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>opener</name></name><operator>)</operator><operator>(</operator>
<operator>(</operator>struct <name>archive</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator> <name><name>self</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>client_switch_proxy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>, <decl><type ref="prev"/><name>r2</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <name>iindex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>iindex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data2</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>switcher</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name> <operator>=</operator> <operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>switcher</name></name><operator>)</operator>
<operator>(</operator><operator>(</operator>struct <name>archive</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator> <name><name>self</name><operator>-&gt;</operator><name>data</name></name><operator>,</operator> <name>data2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>closer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>closer</name></name><operator>)</operator>
<operator>(</operator><operator>(</operator>struct <name>archive</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator> <name><name>self</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>opener</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>opener</name></name><operator>)</operator>
<operator>(</operator><operator>(</operator>struct <name>archive</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator> <name><name>self</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>r1</name> <operator>&lt;</operator> <name>r2</name><operator>)</operator></expr> ?</condition><then> <expr><name>r1</name></expr> </then><else>: <expr><name>r2</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_set_open_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><name>archive_open_callback</name> <modifier>*</modifier></type><name>client_opener</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_set_open_callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>opener</name></name> <operator>=</operator> <name>client_opener</name></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_set_read_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><name>archive_read_callback</name> <modifier>*</modifier></type><name>client_reader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_set_read_callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>client_reader</name></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_set_skip_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><name>archive_skip_callback</name> <modifier>*</modifier></type><name>client_skipper</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_set_skip_callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>skipper</name></name> <operator>=</operator> <name>client_skipper</name></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_set_seek_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><name>archive_seek_callback</name> <modifier>*</modifier></type><name>client_seeker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_set_seek_callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>seeker</name></name> <operator>=</operator> <name>client_seeker</name></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_set_close_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><name>archive_close_callback</name> <modifier>*</modifier></type><name>client_closer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_set_close_callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>closer</name></name> <operator>=</operator> <name>client_closer</name></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_set_switch_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><name>archive_switch_callback</name> <modifier>*</modifier></type><name>client_switcher</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_set_switch_callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>switcher</name></name> <operator>=</operator> <name>client_switcher</name></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_set_callback_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_read_set_callback_data2</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>client_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_set_callback_data2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_set_callback_data2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>nodes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name></name> <operator>=</operator> <operator>(</operator>struct <name>archive_read_data_node</name> <operator>*</operator><operator>)</operator>
<call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>nodes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iindex</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>nodes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><literal type="string">"Invalid index specified."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name>iindex</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>client_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name>iindex</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name>iindex</name></expr>]</index></name><operator>.</operator><name>total_size</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_add_callback_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_add_callback_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iindex</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>nodes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><literal type="string">"Invalid index specified."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name></name></expr></argument>)</argument_list></sizeof>
<operator>*</operator> <operator>(</operator><operator>++</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>nodes</name></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name></name> <operator>=</operator> <operator>(</operator>struct <name>archive_read_data_node</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>nodes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>iindex</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_size</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name>iindex</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>client_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name>iindex</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name>iindex</name></expr>]</index></name><operator>.</operator><name>total_size</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_append_callback_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>archive_read_add_callback_data</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>client_data</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_prepend_callback_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_read_add_callback_data</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>client_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_open1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slot</name></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>reader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><literal type="string">"No reader function provided to archive_read_open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>opener</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>opener</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator> <name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>closer</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>nodes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>closer</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator>
<name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>e</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>bidder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>upstream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>archive</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>client_open_proxy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>client_read_proxy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name>client_skip_proxy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <name>client_seek_proxy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>client_close_proxy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>sswitch</name></name> <operator>=</operator> <name>client_switch_proxy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"none"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>ARCHIVE_FILTER_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>filter</name></name> <operator>||</operator> <operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>bypass_filter_bidding</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>choose_filters</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>filter</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>upstream</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>upstream</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>upstream</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>choose_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_filters</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>slot</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_HEADER</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>client_switch_proxy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>e</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NUMBER_FILTERS</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>choose_filters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>number_bidders</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>bid</name></decl>, <decl><type ref="prev"/><name>best_bid</name></decl>, <decl><type ref="prev"/><name>number_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type><name>bidder</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>best_bidder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>number_filters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>number_filters</name> <operator>&lt;</operator> <name>MAX_NUMBER_FILTERS</name></expr>;</condition> <incr><expr><operator>++</operator><name>number_filters</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>number_bidders</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bidders</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bidders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>best_bid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>best_bidder</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bidder</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>bidders</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number_bidders</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>bidder</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bidder</name><operator>-&gt;</operator><name>bid</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bid</name> <operator>=</operator> <operator>(</operator><name><name>bidder</name><operator>-&gt;</operator><name>bid</name></name><operator>)</operator><operator>(</operator><name>bidder</name><operator>,</operator> <name><name>a</name><operator>-&gt;</operator><name>filter</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bid</name> <operator>&gt;</operator> <name>best_bid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_bid</name> <operator>=</operator> <name>bid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_bidder</name> <operator>=</operator> <name>bidder</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>best_bidder</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_read_free_filters</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>compression_name</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>compression_code</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filter</name>
<operator>=</operator> <operator>(</operator>struct <name>archive_read_filter</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>bidder</name></name> <operator>=</operator> <name>best_bidder</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>archive</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>upstream</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>filter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>best_bidder</name><operator>-&gt;</operator><name>init</name></name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>filter</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_read_free_filters</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Input requires too many filters for decoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>__archive_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>read_header</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>a</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>read_header</name></name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_read_next_header2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_HEADER</name> <operator>|</operator> <name>ARCHIVE_STATE_DATA</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_next_header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_entry_clear</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>ARCHIVE_STATE_DATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>archive_read_data_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>EIO</name></expr></argument>,
<argument><expr><literal type="string">"Premature end-of-file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>==</operator> <name>ARCHIVE_EOF</name> <operator>||</operator> <name>r1</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>header_position</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>_a</name><operator>-&gt;</operator><name>file_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>read_header</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>,</operator> <name>entry</name><operator>)</operator></expr>;</expr_stmt>






<switch>switch <condition>(<expr><name>r2</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_EOF</name></expr>:</case>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_EOF</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>_a</name><operator>-&gt;</operator><name>file_count</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_OK</name></expr>:</case>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_DATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_WARN</name></expr>:</case>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_DATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_RETRY</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>ARCHIVE_FATAL</name></expr>:</case>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>__archive_reset_read_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>data_start_node</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>r2</name> <operator>&lt;</operator> <name>r1</name> <operator>||</operator> <name>r2</name> <operator>==</operator> <name>ARCHIVE_EOF</name><operator>)</operator></expr> ?</condition><then> <expr><name>r2</name></expr> </then><else>: <expr><name>r1</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_read_next_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>entryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>entryp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_archive_read_next_header2</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>entryp</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>choose_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>slots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bid</name></decl>, <decl><type ref="prev"/><name>best_bid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>best_bid_slot</name></decl>;</decl_stmt>

<expr_stmt><expr><name>slots</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>best_bid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>best_bid_slot</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slots</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>a</name><operator>-&gt;</operator><name>format</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>bid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bid</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>bid</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>,</operator> <name>best_bid</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bid</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>position</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_read_seek</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bid</name> <operator>&gt;</operator> <name>best_bid</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>best_bid_slot</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_bid</name> <operator>=</operator> <name>bid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_bid_slot</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><name>best_bid_slot</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"No formats registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>best_bid</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unrecognized archive format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>best_bid_slot</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>la_int64_t</name></type>
<name>archive_read_header_position</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name></expr></argument>, <argument><expr><literal type="string">"archive_read_header_position"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>header_position</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



















<function><type><name>int</name></type>
<name>archive_read_has_encrypted_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format_supports_encryption</name> <init>= <expr><call><name>archive_read_format_capabilities</name><argument_list>(<argument><expr><name>_a</name></expr></argument>)</argument_list></call>
<operator>&amp;</operator> <operator>(</operator><name>ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_DATA</name> <operator>|</operator> <name>ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_METADATA</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_a</name> <operator>||</operator> <operator>!</operator><name>format_supports_encryption</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><name>ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>archive_read_format_capabilities</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>format</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>format_capabilties</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>format_capabilties</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ARCHIVE_READ_FORMAT_CAPS_NONE</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>la_ssize_t</name></type>
<name>archive_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>read_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buff</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>read_data_offset</name></name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>read_data_output_offset</name></name> <operator>&amp;&amp;</operator>
<name><name>a</name><operator>-&gt;</operator><name>read_data_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>read_buf</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>read_data_block</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_is_posix_read</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_requested</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_data_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_buf</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>read_data_remaining</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>read_data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_block</name></name> <operator>=</operator> <name>read_buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>bytes_read</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>read_data_offset</name></name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>read_data_output_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Encountered out-of-order sparse blocks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_RETRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>read_data_output_offset</name></name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>s</name> <operator>&lt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>read_data_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>read_data_output_offset</name></name> <operator>&lt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>read_data_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>read_data_offset</name></name> <operator>-</operator>
<name><name>a</name><operator>-&gt;</operator><name>read_data_output_offset</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_output_offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>read_data_remaining</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_block</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_block</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_remaining</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_output_offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_is_posix_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_requested</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>bytes_read</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>__archive_reset_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_output_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_is_posix_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_requested</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>read_data_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_DATA</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_data_skip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>read_data_skip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>read_data_skip</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>archive_read_data_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>buff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_HEADER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>la_int64_t</name></type>
<name>archive_seek_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_DATA</name></expr></argument>,
<argument><expr><literal type="string">"archive_seek_data_block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>seek_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Internal error: "</literal>
<literal type="string">"No format_seek_data_block function registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>seek_data</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>,</operator> <name>offset</name><operator>,</operator> <name>whence</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_read_data_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_DATA</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_data_block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>read_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Internal error: "</literal>
<literal type="string">"No format-&gt;read_data function registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>read_data</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>,</operator> <name>buff</name><operator>,</operator> <name>size</name><operator>,</operator> <name>offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>close_filters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>upstream</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>closed</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>close</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>close</name></name><operator>)</operator><operator>(</operator><name>f</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>&lt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>__archive_read_free_filters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>close_filters</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>upstream</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_filter_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>upstream</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_read_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>, <decl><type ref="prev"/><name>r1</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name> <operator>|</operator> <name>ARCHIVE_STATE_FATAL</name></expr></argument>, <argument><expr><literal type="string">"archive_read_close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>ARCHIVE_STATE_CLOSED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_CLOSED</name></expr>;</expr_stmt>




<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>close_filters</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>&lt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_read_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_passphrase</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>_a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name> <operator>|</operator> <name>ARCHIVE_STATE_FATAL</name></expr></argument>, <argument><expr><literal type="string">"archive_read_free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>ARCHIVE_STATE_CLOSED</name>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cleanup_archive_extract</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>cleanup_archive_extract</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>slots</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slots</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cleanup</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cleanup</name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>__archive_read_free_filters</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bidders</name></name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bidders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bidders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>free</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bidders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>free</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>bidders</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>&lt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>passphrases</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_passphrase</name></name> <modifier>*</modifier></type><name>np</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>error_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>dataset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type>
<name>get_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name>f</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>upstream</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>upstream</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>last</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>upstream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>f</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_filter_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>get_filter</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>f</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>_archive_filter_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>get_filter</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>_archive_filter_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>get_filter</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>f</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>position</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>__archive_read_register_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>format_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>bid</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>options</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_header</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_data</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_data_skip</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>seek_data</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cleanup</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>format_capabilities</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>has_encrypted_entries</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>number_slots</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>,
<argument><expr><literal type="string">"__archive_read_register_format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>number_slots</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number_slots</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bid</name> <operator>==</operator> <name>bid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bid</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bid</name> <operator>=</operator> <name>bid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>read_header</name> <operator>=</operator> <name>read_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>read_data</name> <operator>=</operator> <name>read_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>read_data_skip</name> <operator>=</operator> <name>read_data_skip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>seek_data</name> <operator>=</operator> <name>seek_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cleanup</name> <operator>=</operator> <name>cleanup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>format_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format_capabilties</name> <operator>=</operator> <name>format_capabilities</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>has_encrypted_entries</name> <operator>=</operator> <name>has_encrypted_entries</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Not enough slots for format registration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>__archive_read_get_bidder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>bidder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>number_slots</name></decl>;</decl_stmt>

<expr_stmt><expr><name>number_slots</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bidders</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bidders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number_slots</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bidders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bid</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bidders</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bidders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bidder</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bidders</name></name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Not enough slots for filter registration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




















































<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>__archive_read_ahead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>avail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>avail</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>__archive_read_filter_ahead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>avail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tocopy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fatal</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>avail</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>avail</name></name> <operator>&gt;=</operator> <name>min</name> <operator>&amp;&amp;</operator> <name><name>filter</name><operator>-&gt;</operator><name>avail</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>avail</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>client_total</name></name> <operator>&gt;=</operator> <name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name> <operator>+</operator> <name><name>filter</name><operator>-&gt;</operator><name>avail</name></name>
<operator>&amp;&amp;</operator> <name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name> <operator>+</operator> <name><name>filter</name><operator>-&gt;</operator><name>avail</name></name> <operator>&gt;=</operator> <name>min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name> <operator>+=</operator> <name><name>filter</name><operator>-&gt;</operator><name>avail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_next</name></name> <operator>-=</operator> <name><name>filter</name><operator>-&gt;</operator><name>avail</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>client_next</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>next</name></name> <operator>&gt;</operator> <name><name>filter</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&amp;&amp;</operator>
<name><name>filter</name><operator>-&gt;</operator><name>next</name></name> <operator>+</operator> <name>min</name> <operator>&gt;</operator> <name><name>filter</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>filter</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>avail</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>next</name></name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>avail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>end_of_file</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>read</name></name><operator>)</operator><operator>(</operator><name>filter</name><operator>,</operator>
<operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>client_buff</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_total</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_next</name></name> <operator>=</operator>
<name><name>filter</name><operator>-&gt;</operator><name>client_buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>fatal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator>
<name><name>filter</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>nodes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>client_switch_proxy</name><argument_list>(<argument><expr><name>filter</name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cursor</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_total</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_next</name></name> <operator>=</operator>
<name><name>filter</name><operator>-&gt;</operator><name>client_buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>end_of_file</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>avail</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_total</name></name> <operator>=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>client_total</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_next</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>client_buff</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>








<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <name><name>filter</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <name>t</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;=</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Unable to allocate copy"</literal>
<literal type="string">" buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>fatal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Unable to allocate copy buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>fatal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>avail</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>avail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>tocopy</name> <operator>=</operator> <operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>filter</name><operator>-&gt;</operator><name>buffer_size</name></name><operator>)</operator>
<operator>-</operator> <operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>next</name></name> <operator>+</operator> <name><name>filter</name><operator>-&gt;</operator><name>avail</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tocopy</name> <operator>+</operator> <name><name>filter</name><operator>-&gt;</operator><name>avail</name></name> <operator>&gt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tocopy</name> <operator>=</operator> <name>min</name> <operator>-</operator> <name><name>filter</name><operator>-&gt;</operator><name>avail</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tocopy</name> <operator>&gt;</operator> <name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tocopy</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>next</name></name> <operator>+</operator> <name><name>filter</name><operator>-&gt;</operator><name>avail</name></name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>client_next</name></name></expr></argument>, <argument><expr><name>tocopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_next</name></name> <operator>+=</operator> <name>tocopy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name> <operator>-=</operator> <name>tocopy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>avail</name></name> <operator>+=</operator> <name>tocopy</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>int64_t</name></type>
<name>__archive_read_consume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>__archive_read_filter_consume</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type>
<name>__archive_read_filter_consume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type> <name>filter</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skipped</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>request</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>request</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>skipped</name> <operator>=</operator> <call><name>advance_file_pointer</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skipped</name> <operator>==</operator> <name>request</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>skipped</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skipped</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>skipped</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Truncated input file (needed %jd bytes, only %jd available)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>request</name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>skipped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>advance_file_pointer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes_skipped</name></decl>, <decl><type ref="prev"/><name>total_bytes_skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>min</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fatal</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>avail</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>minimum</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>filter</name><operator>-&gt;</operator><name>avail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>next</name></name> <operator>+=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>avail</name></name> <operator>-=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name>request</name> <operator>-=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>position</name></name> <operator>+=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_bytes_skipped</name> <operator>+=</operator> <name>min</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>minimum</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_next</name></name> <operator>+=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name> <operator>-=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name>request</name> <operator>-=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>position</name></name> <operator>+=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_bytes_skipped</name> <operator>+=</operator> <name>min</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>request</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>total_bytes_skipped</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>skip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_skipped</name> <operator>=</operator> <operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>skip</name></name><operator>)</operator><operator>(</operator><name>filter</name><operator>,</operator> <name>request</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_skipped</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>fatal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>bytes_skipped</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>position</name></name> <operator>+=</operator> <name>bytes_skipped</name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_bytes_skipped</name> <operator>+=</operator> <name>bytes_skipped</name></expr>;</expr_stmt>
<expr_stmt><expr><name>request</name> <operator>-=</operator> <name>bytes_skipped</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>request</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>total_bytes_skipped</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>read</name></name><operator>)</operator><operator>(</operator><name>filter</name><operator>,</operator> <operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>client_buff</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>fatal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>bytes_read</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator>
<name><name>filter</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>nodes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>client_switch_proxy</name><argument_list>(<argument><expr><name>filter</name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cursor</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>end_of_file</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>total_bytes_skipped</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>&gt;=</operator> <name>request</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_next</name></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>filter</name><operator>-&gt;</operator><name>client_buff</name></name><operator>)</operator> <operator>+</operator> <name>request</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bytes_read</name> <operator>-</operator> <name>request</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>client_total</name></name> <operator>=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_bytes_skipped</name> <operator>+=</operator> <name>request</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>position</name></name> <operator>+=</operator> <name>request</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>total_bytes_skipped</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>position</name></name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_bytes_skipped</name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name>request</name> <operator>-=</operator> <name>bytes_read</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>int64_t</name></type>
<name>__archive_read_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__archive_read_filter_seek</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type>
<name>__archive_read_filter_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_client</name></name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cursor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>closed</name></name> <operator>||</operator> <name><name>filter</name><operator>-&gt;</operator><name>fatal</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>seek</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>client</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>client</name></name><operator>)</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEEK_CUR</name></expr>:</case>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>filter</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>__LA_FALLTHROUGH</name></expr>;</expr_stmt>
<case>case <expr><name>SEEK_SET</name></expr>:</case>
<expr_stmt><expr><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>+</operator>
<name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>offset</name> <operator>||</operator>
<name>cursor</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>client</name><operator>-&gt;</operator><name>nodes</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>+</operator>
<name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><operator>++</operator><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>client_switch_proxy</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>client_seek_proxy</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>+</operator>
<name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>offset</name> <operator>||</operator>
<name>cursor</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>client</name><operator>-&gt;</operator><name>nodes</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>+</operator>
<name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><operator>++</operator><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal>
<operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>client_seek_proxy</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SEEK_END</name></expr>:</case>
<expr_stmt><expr><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name>cursor</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>client</name><operator>-&gt;</operator><name>nodes</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>+</operator>
<name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><operator>++</operator><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>client_switch_proxy</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>client_seek_proxy</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>+</operator>
<name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>client</name><operator>-&gt;</operator><name>nodes</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><operator>++</operator><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>offset</name> <operator>&gt;=</operator>
<name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cursor</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name> <operator>+</operator>
<name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>total_size</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>-</operator> <name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>client_switch_proxy</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>client_seek_proxy</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>client</name><operator>-&gt;</operator><name>dataset</name><index>[<expr><name>cursor</name></expr>]</index></name><operator>.</operator><name>begin_position</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

















<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>client_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>end_of_file</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
</unit>
