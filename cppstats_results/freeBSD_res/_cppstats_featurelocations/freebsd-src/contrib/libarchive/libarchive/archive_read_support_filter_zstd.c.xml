<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_read_support_filter_zstd.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ZSTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zstd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_read_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ZSTD_H</name> <operator>&amp;&amp;</operator> <name>HAVE_LIBZSTD</name></expr></cpp:if>

<struct>struct <name>private_data</name> <block>{
<decl_stmt><decl><type><name>ZSTD_DStream</name> <modifier>*</modifier></type><name>dstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>out_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>total_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>in_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>eof</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>zstd_filter_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>zstd_filter_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>zstd_bidder_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>zstd_bidder_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>archive_read_support_filter_zstd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type><name>bidder</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_read_support_filter_zstd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__archive_read_get_bidder</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bidder</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bidder</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bidder</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"zstd"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bidder</name><operator>-&gt;</operator><name>bid</name></name> <operator>=</operator> <name>zstd_bidder_bid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bidder</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>zstd_bidder_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bidder</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bidder</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ZSTD_H</name> <operator>&amp;&amp;</operator> <name>HAVE_LIBZSTD</name></expr></cpp:if>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Using external zstd program for zstd decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>zstd_bidder_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>prefix</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>zstd_magic</name> <init>= <expr><literal type="number">0xFD2FB528U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>zstd_magic_skippable_start</name> <init>= <expr><literal type="number">0x184D2A50U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>zstd_magic_skippable_mask</name> <init>= <expr><literal type="number">0xFFFFFFF0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>self</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>==</operator> <name>zstd_magic</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">32</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prefix</name> <operator>&amp;</operator> <name>zstd_magic_skippable_mask</name><operator>)</operator> <operator>==</operator> <name>zstd_magic_skippable_start</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">32</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>HAVE_ZSTD_H</name> <operator>&amp;&amp;</operator> <name>HAVE_LIBZSTD</name><operator>)</operator></expr></cpp:if>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>zstd_bidder_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>__archive_read_program</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"zstd -d -qq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>ARCHIVE_FILTER_ZSTD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"zstd"</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>zstd_bidder_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>private_data</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_block_size</name> <init>= <expr><call><name>ZSTD_DStreamOutSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>out_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ZSTD_DStream</name> <modifier>*</modifier></type><name>dstream</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>ARCHIVE_FILTER_ZSTD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"zstd"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator>struct <name>private_data</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_block</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>out_block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dstream</name> <operator>=</operator> <call><name>ZSTD_createDStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>out_block</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ZSTD_freeDStream</name><argument_list>(<argument><expr><name>dstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate data for zstd decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>out_block_size</name></name> <operator>=</operator> <name>out_block_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>out_block</name></name> <operator>=</operator> <name>out_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dstream</name></name> <operator>=</operator> <name>dstream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>zstd_filter_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>zstd_filter_close</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>in_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>zstd_filter_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>private_data</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>decompressed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>avail_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ZSTD_outBuffer</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ZSTD_inBuffer</name></type> <name>in</name></decl>;</decl_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator>struct <name>private_data</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>ZSTD_outBuffer</name><operator>)</operator> <block>{ <expr><name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr>, <expr><name><name>state</name><operator>-&gt;</operator><name>out_block_size</name></name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>


<while>while <condition>(<expr><name><name>out</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>out</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>in_frame</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>ZSTD_initDStream</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>dstream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Error initializing zstd decompressor: %s"</literal></expr></argument>,
<argument><expr><call><name>ZSTD_getErrorName</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>src</name></name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>avail_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avail_in</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>avail_in</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>src</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>avail_in</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>in_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Truncated zstd input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>avail_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ret</name> <init>=
<expr><call><name>ZSTD_decompressStream</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>dstream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Zstd decompression failed: %s"</literal></expr></argument>,
<argument><expr><call><name>ZSTD_getErrorName</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>__archive_read_filter_consume</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>in_frame</name></name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></while>

<expr_stmt><expr><name>decompressed</name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>total_out</name></name> <operator>+=</operator> <name>decompressed</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>decompressed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>decompressed</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>zstd_filter_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>private_data</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator>struct <name>private_data</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZSTD_freeDStream</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>dstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
