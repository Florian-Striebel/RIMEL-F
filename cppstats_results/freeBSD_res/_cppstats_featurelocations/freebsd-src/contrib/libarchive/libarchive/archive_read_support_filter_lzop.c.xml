<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_read_support_filter_lzop.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZO_LZOCONF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lzo/lzoconf.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZO_LZO1X_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lzo/lzo1x.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZO_LZOCONF_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZO_LZO1X_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_crc32.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_read_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>adler32</name></cpp:macro> <cpp:value>lzo_adler32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZOP_HEADER_MAGIC</name></cpp:macro> <cpp:value>"\x89\x4c\x5a\x4f\x00\x0d\x0a\x1a\x0a"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZOP_HEADER_MAGIC_LEN</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZO_LZOCONF_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZO_LZO1X_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>read_lzop</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>out_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>total_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>compressed_cksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uncompressed_cksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>compressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>unconsumed_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>in_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>eof</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRC32_HEADER</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA_FIELD</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADLER32_UNCOMPRESSED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADLER32_COMPRESSED</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRC32_UNCOMPRESSED</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRC32_COMPRESSED</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BLOCK_SIZE</name></cpp:macro> <cpp:value>(64 * 1024 * 1024)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>lzop_filter_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lzop_filter_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lzop_bidder_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lzop_bidder_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>archive_read_support_filter_lzop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type><name>reader</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_read_support_filter_lzop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__archive_read_get_bidder</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>bid</name></name> <operator>=</operator> <name>lzop_bidder_bid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>lzop_bidder_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZO_LZOCONF_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZO_LZO1X_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Using external lzop program for lzop decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzop_bidder_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>avail</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>self</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>LZOP_HEADER_MAGIC_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>avail</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LZOP_HEADER_MAGIC</name></expr></argument>, <argument><expr><name>LZOP_HEADER_MAGIC_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>LZOP_HEADER_MAGIC_LEN</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZO_LZOCONF_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZO_LZO1X_H</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzop_bidder_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>__archive_read_program</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"lzop -d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>ARCHIVE_FILTER_LZOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"lzop"</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzop_bidder_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>read_lzop</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>ARCHIVE_FILTER_LZOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"lzop"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator>struct <name>read_lzop</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate data for lzop decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>lzop_filter_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>lzop_filter_close</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>consume_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>read_lzop</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator>struct <name>read_lzop</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>checksum</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>method</name></decl>, <decl><type ref="prev"/><name>version</name></decl>;</decl_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>,
<argument><expr><name>LZOP_HEADER_MAGIC_LEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LZOP_HEADER_MAGIC</name></expr></argument>, <argument><expr><name>LZOP_HEADER_MAGIC_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>__archive_read_filter_consume</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>,
<argument><expr><name>LZOP_HEADER_MAGIC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>_p</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>archive_be16dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">0x940</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>reqversion</name> <init>= <expr><call><name>archive_be16dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reqversion</name> <operator>&lt;</operator> <literal type="number">0x900</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"Invalid required version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>method</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>method</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>method</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">0x940</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>level</name> <init>= <expr><operator>*</operator><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
unsigned default_level[] = {0, 3, 1, 9};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

level = default_level[method];
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<empty_stmt>;</empty_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"Invalid level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>archive_be32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FILTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">0x940</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>p</name> <operator>-</operator> <name>_p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CRC32_HEADER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>checksum</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>checksum</name> <operator>=</operator> <call><name>adler32</name><argument_list>(<argument><expr><call><name>adler32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_be32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>checksum</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupted</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>__archive_read_filter_consume</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EXTRA_FIELD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>archive_be32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_filter_consume</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>in_stream</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<label><name>truncated</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"Truncated lzop data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
<label><name>corrupted</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"Corrupted lzop header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>consume_block_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>read_lzop</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator>struct <name>read_lzop</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <call><name>archive_be32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_filter_consume</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>&gt;</operator> <name>MAX_BLOCK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupted</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>=</operator> <call><name>archive_be32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_filter_consume</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupted</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>CRC32_UNCOMPRESSED</name> <operator>|</operator> <name>ADLER32_UNCOMPRESSED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>compressed_cksum</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>uncompressed_cksum</name></name> <operator>=</operator>
<call><name>archive_be32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_filter_consume</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>CRC32_COMPRESSED</name> <operator>|</operator> <name>ADLER32_COMPRESSED</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>state</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>compressed_cksum</name></name> <operator>=</operator> <call><name>archive_be32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_filter_consume</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<label><name>truncated</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"Truncated lzop data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
<label><name>corrupted</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"Corrupted lzop header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>lzop_filter_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>read_lzop</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator>struct <name>read_lzop</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzo_uint</name></type> <name>out_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>unconsumed_bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_read_filter_consume</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>unconsumed_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>unconsumed_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>in_stream</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>consume_header</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>consume_block_info</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>in_stream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>out_block</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>state</name><operator>-&gt;</operator><name>out_block_size</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_block</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_block</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate data for lzop decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>out_block</name></name> <operator>=</operator> <name>new_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>out_block_size</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"Truncated lzop data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CRC32_COMPRESSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cksum</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADLER32_COMPRESSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cksum</name> <operator>=</operator> <call><name>adler32</name><argument_list>(<argument><expr><call><name>adler32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cksum</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>compressed_cksum</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cksum</name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>compressed_cksum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"Corrupted data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>total_out</name></name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>unconsumed_bytes</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>out_size</name> <operator>=</operator> <operator>(</operator><name>lzo_uint</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzo1x_decompress_safe</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>lzo_uint</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LZO_E_OK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"Corrupted data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
<case>case <expr><name>LZO_E_OUT_OF_MEMORY</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"lzop decompression failed: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"lzop decompression failed: %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CRC32_UNCOMPRESSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cksum</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADLER32_UNCOMPRESSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cksum</name> <operator>=</operator> <call><name>adler32</name><argument_list>(<argument><expr><call><name>adler32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cksum</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>uncompressed_cksum</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cksum</name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>uncompressed_cksum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"Corrupted data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__archive_read_filter_consume</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>total_out</name></name> <operator>+=</operator> <name>out_size</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name>out_size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzop_filter_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>read_lzop</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator>struct <name>read_lzop</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
