<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_read_support_format_rar.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_crc32.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_ppmd7_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_read_private.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAR_SIGNATURE</name></cpp:macro> <cpp:value>"\x52\x61\x72\x21\x1A\x07\x00"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARK_HEAD</name></cpp:macro> <cpp:value>0x72</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAIN_HEAD</name></cpp:macro> <cpp:value>0x73</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_HEAD</name></cpp:macro> <cpp:value>0x74</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMM_HEAD</name></cpp:macro> <cpp:value>0x75</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_HEAD</name></cpp:macro> <cpp:value>0x76</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB_HEAD</name></cpp:macro> <cpp:value>0x77</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTECT_HEAD</name></cpp:macro> <cpp:value>0x78</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_HEAD</name></cpp:macro> <cpp:value>0x79</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEWSUB_HEAD</name></cpp:macro> <cpp:value>0x7a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENDARC_HEAD</name></cpp:macro> <cpp:value>0x7b</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHD_VOLUME</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHD_COMMENT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHD_LOCK</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHD_SOLID</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHD_NEWNUMBERING</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHD_AV</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHD_PROTECT</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHD_PASSWORD</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHD_FIRSTVOLUME</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHD_ENCRYPTVER</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HD_MARKDELETION</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HD_ADD_SIZE_PRESENT</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FHD_SPLIT_BEFORE</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FHD_SPLIT_AFTER</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FHD_PASSWORD</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FHD_COMMENT</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FHD_SOLID</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FHD_LARGE</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FHD_UNICODE</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FHD_SALT</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FHD_VERSION</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FHD_EXTTIME</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FHD_EXTFLAGS</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_SIZE_64</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_SIZE_128</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_SIZE_256</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_SIZE_512</name></cpp:macro> <cpp:value>0x60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_SIZE_1024</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_SIZE_2048</name></cpp:macro> <cpp:value>0xA0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_SIZE_4096</name></cpp:macro> <cpp:value>0xC0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_IS_DIRECTORY</name></cpp:macro> <cpp:value>0xE0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_MASK</name></cpp:macro> <cpp:value>FILE_IS_DIRECTORY</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_MSDOS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_OS2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_WIN32</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_UNIX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_MAC_OS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_BEOS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPRESS_METHOD_STORE</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPRESS_METHOD_FASTEST</name></cpp:macro> <cpp:value>0x31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPRESS_METHOD_FAST</name></cpp:macro> <cpp:value>0x32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPRESS_METHOD_NORMAL</name></cpp:macro> <cpp:value>0x33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPRESS_METHOD_GOOD</name></cpp:macro> <cpp:value>0x34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPRESS_METHOD_BEST</name></cpp:macro> <cpp:value>0x35</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRC_POLYNOMIAL</name></cpp:macro> <cpp:value>0xEDB88320</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_UNIT</name></cpp:macro> <cpp:value>10000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_MAX_SIZE</name></cpp:macro> <cpp:value>0x400000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAINCODE_SIZE</name></cpp:macro> <cpp:value>299</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSETCODE_SIZE</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWOFFSETCODE_SIZE</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LENGTHCODE_SIZE</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUFFMAN_TABLE_SIZE</name></cpp:macro> <cpp:value>MAINCODE_SIZE + OFFSETCODE_SIZE + LOWOFFSETCODE_SIZE + LENGTHCODE_SIZE</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SYMBOL_LENGTH</name></cpp:macro> <cpp:value>0xF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SYMBOLS</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNP_BUFFER_SIZE</name></cpp:macro> <cpp:value>(128 * 1024)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WIN32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__WIN32</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_ATTRIBUTE_DIRECTORY</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>minimum</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minimum</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;(b)?(a):(b))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_COMPRESS_DEPTH</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>


<struct>struct <name>rar_header</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>crc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>flags</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>rar_file_header</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>pack_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>unp_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>host_os</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>file_crc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>file_time</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>unp_ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>file_attr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>huffman_tree_node</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name><name>branches</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>huffman_table_entry</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>huffman_code</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>huffman_tree_node</name></name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numentries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numallocatedentries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minlength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxlength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tablesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>huffman_table_entry</name></name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>lzss</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>position</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>data_block_offsets</name>
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>end_offset</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>rar</name>
<block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>main_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>file_crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>encryptver</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name>compression_method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>file_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>packed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>unp_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mnsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>filename_save_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>filename_allocated</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>salt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>atime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ansec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>cnsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>arctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arcnsec</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes_unconsumed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes_uncopied</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset_outgoing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset_seek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>unp_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>unp_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>unp_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dictionary_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>start_new_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>entry_eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc_calculated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_first_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>has_endarc_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>data_block_offsets</name></name> <modifier>*</modifier></type><name>dbo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>filename_must_match</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>huffman_code</name></name></type> <name>maincode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>huffman_code</name></name></type> <name>offsetcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>huffman_code</name></name></type> <name>lowoffsetcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>huffman_code</name></name></type> <name>lengthcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>lengthtable</name><index>[<expr><name>HUFFMAN_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lzss</name></name></type> <name>lzss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>output_last_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lastlength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lastoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>oldoffset</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lastlowoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>numlowoffsetrepeats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>filterstart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>start_new_table</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name>ppmd_valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ppmd_eod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>is_ppmd_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ppmd_escape</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd7</name></type> <name>ppmd7_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd7z_RangeDec</name></type> <name>range_dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IByteIn</name></type> <name>bytein</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>init_default_conversion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv_default</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>opt_sconv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv_utf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv_utf16be</name></decl>;</decl_stmt>




<struct>struct <name>rar_br</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_TYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_BITS</name></cpp:macro> <cpp:value>(8 * sizeof(CACHE_TYPE))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>CACHE_TYPE</name></type> <name>cache_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cache_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>avail_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next_in</name></decl>;</decl_stmt>
}</block> <decl><name>br</name></decl>;</struct>




<decl_stmt><decl><type><name>int</name></type> <name>has_encrypted_entries</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_support_format_rar_capabilities</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_rar_has_encrypted_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_rar_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_rar_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_rar_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_rar_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_rar_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>archive_read_format_rar_seek_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_rar_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>time_t</name></type> <name>get_time</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_exttime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_symlink_stored</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_data_stored</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_data_compressed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rar_br_preparation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar_br</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_codes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_codes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_next_symbol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>huffman_code</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>create_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>huffman_code</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>huffman_code</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>new_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>huffman_code</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>make_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>huffman_code</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>make_table_recurse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>huffman_code</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>huffman_table_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>expand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>copy_from_lzss_window</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rar_read_ahead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rar_br_has</name><parameter_list>(<parameter><type><name>br</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((br)-&gt;cache_avail &gt;= n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rar_br_bits</name><parameter_list>(<parameter><type><name>br</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint32_t)((br)-&gt;cache_buffer &gt;&gt; ((br)-&gt;cache_avail - (n)))) &amp; cache_masks[n])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rar_br_bits_forced</name><parameter_list>(<parameter><type><name>br</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint32_t)((br)-&gt;cache_buffer &lt;&lt; ((n) - (br)-&gt;cache_avail))) &amp; cache_masks[n])</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rar_br_read_ahead</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>br</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((rar_br_has(br, (n)) || rar_br_fillup(a, br)) || rar_br_has(br, (n)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rar_br_consume</name><parameter_list>(<parameter><type><name>br</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((br)-&gt;cache_avail -= (n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rar_br_consume_unalined_bits</name><parameter_list>(<parameter><type><name>br</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((br)-&gt;cache_avail &amp;= ~7)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>cache_masks</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x00000003</literal></expr>, <expr><literal type="number">0x00000007</literal></expr>,
<expr><literal type="number">0x0000000F</literal></expr>, <expr><literal type="number">0x0000001F</literal></expr>, <expr><literal type="number">0x0000003F</literal></expr>, <expr><literal type="number">0x0000007F</literal></expr>,
<expr><literal type="number">0x000000FF</literal></expr>, <expr><literal type="number">0x000001FF</literal></expr>, <expr><literal type="number">0x000003FF</literal></expr>, <expr><literal type="number">0x000007FF</literal></expr>,
<expr><literal type="number">0x00000FFF</literal></expr>, <expr><literal type="number">0x00001FFF</literal></expr>, <expr><literal type="number">0x00003FFF</literal></expr>, <expr><literal type="number">0x00007FFF</literal></expr>,
<expr><literal type="number">0x0000FFFF</literal></expr>, <expr><literal type="number">0x0001FFFF</literal></expr>, <expr><literal type="number">0x0003FFFF</literal></expr>, <expr><literal type="number">0x0007FFFF</literal></expr>,
<expr><literal type="number">0x000FFFFF</literal></expr>, <expr><literal type="number">0x001FFFFF</literal></expr>, <expr><literal type="number">0x003FFFFF</literal></expr>, <expr><literal type="number">0x007FFFFF</literal></expr>,
<expr><literal type="number">0x00FFFFFF</literal></expr>, <expr><literal type="number">0x01FFFFFF</literal></expr>, <expr><literal type="number">0x03FFFFFF</literal></expr>, <expr><literal type="number">0x07FFFFFF</literal></expr>,
<expr><literal type="number">0x0FFFFFFF</literal></expr>, <expr><literal type="number">0x1FFFFFFF</literal></expr>, <expr><literal type="number">0x3FFFFFFF</literal></expr>, <expr><literal type="number">0x7FFFFFFF</literal></expr>,
<expr><literal type="number">0xFFFFFFFF</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr>
}</block></expr></init></decl>;</decl_stmt>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>rar_br_fillup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar_br</name></name> <modifier>*</modifier></type><name>br</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name> <init>= <expr><operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>CACHE_BITS</name> <operator>-</operator> <name><name>br</name><operator>-&gt;</operator><name>cache_avail</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_avail</name></name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>=</operator>
<operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_avail</name></name> <operator>+=</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>=</operator>
<operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_avail</name></name> <operator>+=</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>


<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <call><name>rar_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>=</operator>
<operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_avail</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rar_br_preparation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar_br</name></name> <modifier>*</modifier></type><name>br</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name> <init>= <expr><operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <call><name>rar_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated RAR file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>br</name><operator>-&gt;</operator><name>cache_avail</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rar_br_fillup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>rar_fls</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>word</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>word</name> <operator>|=</operator> <operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>word</name> <operator>|=</operator> <operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>word</name> <operator>|=</operator> <operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>word</name> <operator>|=</operator> <operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>word</name> <operator>|=</operator> <operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>word</name> <operator>-</operator> <operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type>
<name>lzss_position</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzss</name></name> <modifier>*</modifier></type><name>lzss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>lzss</name><operator>-&gt;</operator><name>position</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>lzss_mask</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzss</name></name> <modifier>*</modifier></type><name>lzss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>lzss</name><operator>-&gt;</operator><name>mask</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>lzss_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzss</name></name> <modifier>*</modifier></type><name>lzss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>lzss</name><operator>-&gt;</operator><name>mask</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>lzss_offset_for_position</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzss</name></name> <modifier>*</modifier></type><name>lzss</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pos</name> <operator>&amp;</operator> <name><name>lzss</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>lzss_pointer_for_position</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzss</name></name> <modifier>*</modifier></type><name>lzss</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>lzss</name><operator>-&gt;</operator><name>window</name><index>[<expr><call><name>lzss_offset_for_position</name><argument_list>(<argument><expr><name>lzss</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>lzss_current_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzss</name></name> <modifier>*</modifier></type><name>lzss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lzss_offset_for_position</name><argument_list>(<argument><expr><name>lzss</name></expr></argument>, <argument><expr><name><name>lzss</name><operator>-&gt;</operator><name>position</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name> <modifier>*</modifier></type>
<name>lzss_current_pointer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzss</name></name> <modifier>*</modifier></type><name>lzss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lzss_pointer_for_position</name><argument_list>(<argument><expr><name>lzss</name></expr></argument>, <argument><expr><name><name>lzss</name><operator>-&gt;</operator><name>position</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>lzss_emit_literal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>literal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>lzss_current_pointer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>literal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>position</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>lzss_emit_match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dstoffs</name> <init>= <expr><call><name>lzss_current_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srcoffs</name> <init>= <expr><operator>(</operator><name>dstoffs</name> <operator>-</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <call><name>lzss_mask</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>li</name></decl>, <decl><type ref="prev"/><name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>remaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>remaining</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dstoffs</name> <operator>&gt;</operator> <name>srcoffs</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <call><name>lzss_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>dstoffs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>lzss_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>dstoffs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <call><name>lzss_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>srcoffs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>lzss_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>srcoffs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>window</name><index>[<expr><name>dstoffs</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>window</name><index>[<expr><name>srcoffs</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dstoffs</name> <operator>+</operator> <name>l</name> <operator>&lt;</operator> <name>srcoffs</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>srcoffs</name> <operator>+</operator> <name>l</name> <operator>&lt;</operator> <name>dstoffs</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>li</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>li</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>li</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>li</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>li</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstoffs</name> <operator>=</operator> <operator>(</operator><name>dstoffs</name> <operator>+</operator> <name>l</name><operator>)</operator> <operator>&amp;</operator> <call><name>lzss_mask</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcoffs</name> <operator>=</operator> <operator>(</operator><name>srcoffs</name> <operator>+</operator> <name>l</name><operator>)</operator> <operator>&amp;</operator> <call><name>lzss_mask</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>position</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Byte</name></type>
<name>ppmd_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><operator>(</operator><name>IByteIn</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name> <init>= <expr><operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar_br</name></name> <modifier>*</modifier></type><name>br</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>br</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name></type> <name>b</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated RAR file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_support_format_rar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_support_format_rar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rar</name> <operator>=</operator> <operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rar</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rar</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate rar data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <name>ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>__archive_read_register_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name>rar</name></expr></argument>,
<argument><expr><literal type="string">"rar"</literal></expr></argument>,
<argument><expr><name>archive_read_format_rar_bid</name></expr></argument>,
<argument><expr><name>archive_read_format_rar_options</name></expr></argument>,
<argument><expr><name>archive_read_format_rar_read_header</name></expr></argument>,
<argument><expr><name>archive_read_format_rar_read_data</name></expr></argument>,
<argument><expr><name>archive_read_format_rar_read_data_skip</name></expr></argument>,
<argument><expr><name>archive_read_format_rar_seek_data</name></expr></argument>,
<argument><expr><name>archive_read_format_rar_cleanup</name></expr></argument>,
<argument><expr><name>archive_read_support_format_rar_capabilities</name></expr></argument>,
<argument><expr><name>archive_read_format_rar_has_encrypted_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_support_format_rar_capabilities</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_DATA</name>
<operator>|</operator> <name>ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_METADATA</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_rar_has_encrypted_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>_a</name> <operator>&amp;&amp;</operator> <name><name>_a</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type> <name>rar</name> <init>= <expr><operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><name><name>_a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rar</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>rar</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_rar_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>best_bid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>best_bid</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>RAR_SIGNATURE</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">30</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\x7F\x45LF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0x10000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>window</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>+</operator> <name>window</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">128</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buff</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>window</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>&lt;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buff</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">7</literal> <operator>&lt;</operator> <name>buff</name> <operator>+</operator> <name>bytes_avail</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>RAR_SIGNATURE</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">30</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buff</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>skip_sfx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>skip</name></decl>, <decl><type ref="prev"/><name>total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>window</name></decl>;</decl_stmt>

<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>window</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>total</name> <operator>+</operator> <name>window</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">128</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>window</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>&lt;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fatal</name>;</goto></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fatal</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>bytes</name></expr>;</expr_stmt>





<while>while <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">7</literal> <operator>&lt;</operator> <name>q</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>RAR_SIGNATURE</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>
</block_content>}</block></while>
<label><name>fatal</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't find out RAR header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_rar_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_FAILED</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rar</name> <operator>=</operator> <operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"hdrcharset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"rar: hdrcharset option needs a character-set name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>opt_sconv</name></name> <operator>=</operator>
<call><name>archive_string_conversion_from_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>opt_sconv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_rar_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>skip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>head_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc32_expected</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>=</operator> <name>ARCHIVE_FORMAT_RAR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <literal type="string">"RAR"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rar</name> <operator>=</operator> <operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>==</operator> <name>ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>found_first_header</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\x7F\x45LF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>skip_sfx</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>found_first_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc32_val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>head_type</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>head_type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>MARK_HEAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>RAR_SIGNATURE</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid marker header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MAIN_HEAD</name></expr>:</case>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>main_flags</name></name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&lt;</operator> <literal type="number">7</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>reserved1</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>reserved2</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid header size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>reserved1</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>reserved1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>reserved2</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>reserved1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>reserved2</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>main_flags</name></name> <operator>&amp;</operator> <name>MHD_ENCRYPTVER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&lt;</operator> <literal type="number">7</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>reserved1</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>reserved2</name></name></expr></argument>)</argument_list></sizeof><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid header size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>encryptver</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>reserved1</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>reserved2</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>main_flags</name></name> <operator>&amp;</operator> <name>MHD_PASSWORD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_is_metadata_encrypted</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_is_data_encrypted</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"RAR encryption support unavailable."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc32_val</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>skip</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>crc32_val</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>!=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Header CRC error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_HEAD</name></expr>:</case>
<return>return <expr><call><name>read_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>head_type</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>COMM_HEAD</name></expr>:</case>
<case>case <expr><name>AV_HEAD</name></expr>:</case>
<case>case <expr><name>SUB_HEAD</name></expr>:</case>
<case>case <expr><name>PROTECT_HEAD</name></expr>:</case>
<case>case <expr><name>SIGN_HEAD</name></expr>:</case>
<case>case <expr><name>ENDARC_HEAD</name></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid header size too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HD_ADD_SIZE_PRESENT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&lt;</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid header size too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skip</name> <operator>+=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>crc32_expected</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skip</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>crc32_val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>skip</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>to_read</name> <init>= <expr><name>skip</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>to_read</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to_read</name> <operator>=</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Bad RAR file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>crc32_val</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name>crc32_val</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skip</name> <operator>-=</operator> <name>to_read</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>crc32_val</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>!=</operator> <name>crc32_expected</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Header CRC error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>head_type</name> <operator>==</operator> <name>ENDARC_HEAD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NEWSUB_HEAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>head_type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Bad RAR file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_rar_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name> <init>= <expr><operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>==</operator> <name>ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>entry_eof</name></name> <operator>||</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset_seek</name></name> <operator>&gt;=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>&lt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>compression_method</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>COMPRESS_METHOD_STORE</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_data_stored</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>COMPRESS_METHOD_FASTEST</name></expr>:</case>
<case>case <expr><name>COMPRESS_METHOD_FAST</name></expr>:</case>
<case>case <expr><name>COMPRESS_METHOD_NORMAL</name></expr>:</case>
<case>case <expr><name>COMPRESS_METHOD_GOOD</name></expr>:</case>
<case>case <expr><name>COMPRESS_METHOD_BEST</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_data_compressed</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Free</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>start_new_table</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>ppmd_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported compression method for RAR file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_rar_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes_skipped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rar</name> <operator>=</operator> <operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_skipped</name> <operator>=</operator> <call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_skipped</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>main_flags</name></name> <operator>&amp;</operator> <name>MHD_VOLUME</name> <operator>&amp;&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>file_flags</name></name> <operator>&amp;</operator> <name>FHD_SPLIT_AFTER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>archive_read_format_rar_read_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>archive_read_format_rar_read_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>archive_read_format_rar_read_data_skip</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>archive_read_format_rar_seek_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>client_offset</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name> <init>= <expr><operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>compression_method</name></name> <operator>==</operator> <name>COMPRESS_METHOD_STORE</name></expr>)</condition>
<block>{<block_content>

<switch>switch <condition>(<expr><name>whence</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SEEK_CUR</name></expr>:</case>
<expr_stmt><expr><name>client_offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset_seek</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEEK_END</name></expr>:</case>
<expr_stmt><expr><name>client_offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEEK_SET</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>client_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>client_offset</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>client_offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>client_offset</name> <operator>&gt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>offset_seek</name></name> <operator>=</operator> <name>client_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>client_offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>client_offset</name> <operator>+=</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>client_offset</name> <operator>+=</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>-</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end_offset</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>main_flags</name></name> <operator>&amp;</operator> <name>MHD_VOLUME</name></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>client_offset</name> <operator>&lt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>&amp;&amp;</operator>
<name><name>rar</name><operator>-&gt;</operator><name>file_flags</name></name> <operator>&amp;</operator> <name>FHD_SPLIT_BEFORE</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Attempt to seek past beginning of RAR data block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>client_offset</name> <operator>-=</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>-</operator>
<name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>end_offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>client_offset</name> <operator>&lt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>start_offset</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_read_seek</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>-</operator>
<name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>header_size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>archive_read_format_rar_read_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Error during seek of RAR file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>client_offset</name> <operator>&gt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>end_offset</name> <operator>&amp;&amp;</operator>
<name><name>rar</name><operator>-&gt;</operator><name>file_flags</name></name> <operator>&amp;</operator> <name>FHD_SPLIT_AFTER</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>nodes</name></name> <operator>&amp;&amp;</operator>
<name>client_offset</name> <operator>&gt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>end_offset</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>client_offset</name> <operator>+=</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>-</operator>
<name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end_offset</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_read_seek</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>end_offset</name></expr></argument>,
<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>archive_read_format_rar_read_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>has_endarc_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>archive_read_format_rar_read_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Error during seek of RAR file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>client_offset</name> <operator>+=</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>-</operator>
<name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end_offset</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_read_seek</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>client_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>end_offset</name> <operator>-</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>-=</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>-</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_offset</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>ret</name> <operator>-=</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_offset</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>__archive_reset_read_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name> <operator>&amp;&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset_seek</name></name> <operator>&gt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>rar</name><operator>-&gt;</operator><name>offset_seek</name></name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>offset_seek</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<return>return <expr><name><name>rar</name><operator>-&gt;</operator><name>offset_seek</name></name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Seeking of compressed RAR files is unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_rar_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rar</name> <operator>=</operator> <operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_codes</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>filename_save</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Free</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>head_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar_header</name></name></type> <name>rar_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar_file_header</name></name></type> <name>file_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>filename_size</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>packed_size</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>unp_size</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ttime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fn_sconv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc32_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>ret2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rar</name> <operator>=</operator> <operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>sconv</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>opt_sconv</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sconv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>init_default_conversion</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>sconv_default</name></name> <operator>=</operator>
<call><name>archive_string_default_conversion_for_read</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>init_default_conversion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sconv</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>sconv_default</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rar_header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rar_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file_flags</name></name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name><name>rar_header</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>header_size</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name><name>rar_header</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>header_size</name> <operator>&lt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>file_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid header size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>crc32_val</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>file_flags</name></name> <operator>&amp;</operator> <name>FHD_SOLID</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>compression_method</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>packed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>arctime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>ansec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cnsec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>mnsec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>arctime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>arcnsec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"RAR solid archive support unavailable."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>header_size</name> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>crc32_val</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name>crc32_val</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>header_size</name> <operator>-</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>crc32_val</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>!=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name><name>rar_header</name><operator>.</operator><name>crc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Header CRC error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>header_size</name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file_header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>file_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>file_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>compression_method</name></name> <operator>=</operator> <name><name>file_header</name><operator>.</operator><name>method</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ttime</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name><name>file_header</name><operator>.</operator><name>file_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>get_time</name><argument_list>(<argument><expr><name>ttime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file_crc</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name><name>file_header</name><operator>.</operator><name>file_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file_flags</name></name> <operator>&amp;</operator> <name>FHD_PASSWORD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_is_data_encrypted</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"RAR encryption support unavailable."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file_flags</name></name> <operator>&amp;</operator> <name>FHD_LARGE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>packed_size</name></expr></argument>, <argument><expr><name><name>file_header</name><operator>.</operator><name>pack_size</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>packed_size</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>unp_size</name></expr></argument>, <argument><expr><name><name>file_header</name><operator>.</operator><name>unp_size</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>unp_size</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>packed_size</name></name> <operator>=</operator> <call><name>archive_le64dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name> <operator>=</operator> <call><name>archive_le64dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>packed_size</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name><name>file_header</name><operator>.</operator><name>pack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name><name>file_header</name><operator>.</operator><name>unp_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>packed_size</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid sizes specified."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>packed_size</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>head_type</name> <operator>==</operator> <name>NEWSUB_HEAD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>distance</name> <init>= <expr><name>p</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>h</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>header_size</name> <operator>+=</operator> <name><name>rar</name><operator>-&gt;</operator><name>packed_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>header_size</name> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>header_size</name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>distance</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filename_size</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name><name>file_header</name><operator>.</operator><name>name_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>filename_size</name> <operator>&gt;</operator> <name>endp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid filename size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>filename_allocated</name></name> <operator>&lt;</operator> <name>filename_size</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><name>filename_size</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>newptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't allocate memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name>newptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>filename_allocated</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>filename</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>filename_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filename</name><index>[<expr><name>filename_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file_flags</name></name> <operator>&amp;</operator> <name>FHD_UNICODE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>filename_size</name> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>highbyte</name></decl>, <decl><type ref="prev"/><name>flagbits</name></decl>, <decl><type ref="prev"/><name>flagbyte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>fn_end</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>filename_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fn_end</name> <operator>=</operator> <name>filename_size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>filename_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>highbyte</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>offset</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flagbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flagbyte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>filename_size</name> <operator>&lt;</operator> <name>fn_end</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flagbits</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flagbyte</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>offset</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flagbits</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flagbits</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><operator>(</operator><name>flagbyte</name> <operator>&gt;&gt;</operator> <name>flagbits</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>filename</name><index>[<expr><name>filename_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filename</name><index>[<expr><name>filename_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>offset</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>filename</name><index>[<expr><name>filename_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>highbyte</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filename</name><index>[<expr><name>filename_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>offset</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>filename</name><index>[<expr><name>filename_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filename</name><index>[<expr><name>filename_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>extra</name></decl>, <decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>length</name> <init>= <expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>offset</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extra</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>offset</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>high</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>highbyte</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>extra</name> <operator>=</operator> <name>high</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>length</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>length</name> <operator>&amp;&amp;</operator> <name>filename_size</name> <operator>&lt;</operator> <name>fn_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cp</name> <init>= <expr><name>filename_size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>filename</name><index>[<expr><name>filename_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>high</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filename</name><index>[<expr><name>filename_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>cp</name></expr>]</index></name> <operator>+</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>filename_size</name> <operator>&gt;</operator> <name>fn_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>filename</name><index>[<expr><name>filename_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<expr_stmt><expr><name><name>filename</name><index>[<expr><name>filename_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>sconv_utf16be</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>sconv_utf16be</name></name> <operator>=</operator> <call><name>archive_string_conversion_from_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>sconv_utf16be</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fn_sconv</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>sconv_utf16be</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>strp</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>strp</name></expr></argument>, <argument><expr><literal type="string">"\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>strp</name></expr></argument>, <argument><expr><literal type="string">"\x00\\"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>strp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>strp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>sconv_utf8</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>sconv_utf8</name></name> <operator>=</operator> <call><name>archive_string_conversion_from_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>sconv_utf8</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fn_sconv</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>sconv_utf8</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>strp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>filename_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>fn_sconv</name> <operator>=</operator> <name>sconv</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>strp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>filename_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>filename_save</name></name> <operator>&amp;&amp;</operator>
<name>filename_size</name> <operator>==</operator> <name><name>rar</name><operator>-&gt;</operator><name>filename_save_size</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>filename_save</name></name></expr></argument>, <argument><expr><name>filename_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>header_size</name> <operator>-</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&gt;=</operator> <name><name>rar</name><operator>-&gt;</operator><name>nodes</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>nodes</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>dbo</name></name> <operator>=</operator>
<call><name>realloc</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>rar</name><operator>-&gt;</operator><name>dbo</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>rar</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Couldn't allocate memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>header_size</name> <operator>=</operator> <name>header_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>end_offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>end_offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>+</operator>
<name><name>rar</name><operator>-&gt;</operator><name>packed_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>filename_must_match</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Mismatch of file parts split across multi-volume archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>filename_save</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>filename_save</name></name></expr></argument>,
<argument><expr><name>filename_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>filename_save</name></name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>filename_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>filename_save_size</name></name> <operator>=</operator> <name>filename_size</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>dbo</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>rar</name><operator>-&gt;</operator><name>dbo</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Couldn't allocate memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>header_size</name> <operator>=</operator> <name>header_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file_flags</name></name> <operator>&amp;</operator> <name>FHD_SALT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name>endp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid header size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file_flags</name></name> <operator>&amp;</operator> <name>FHD_EXTTIME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_exttime</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name>endp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid header size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>header_size</name> <operator>-</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>dbo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_offset</name> <operator>+</operator> <name><name>rar</name><operator>-&gt;</operator><name>packed_size</name></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>file_header</name><operator>.</operator><name>host_os</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>OS_MSDOS</name></expr>:</case>
<case>case <expr><name>OS_OS2</name></expr>:</case>
<case>case <expr><name>OS_WIN32</name></expr>:</case>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name><name>file_header</name><operator>.</operator><name>file_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>AE_IFDIR</name> <operator>|</operator> <name>S_IXUSR</name> <operator>|</operator> <name>S_IXGRP</name> <operator>|</operator> <name>S_IXOTH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>AE_IFREG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name> <operator>|</operator> <name>S_IRGRP</name> <operator>|</operator> <name>S_IROTH</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>OS_UNIX</name></expr>:</case>
<case>case <expr><name>OS_MAC_OS</name></expr>:</case>
<case>case <expr><name>OS_BEOS</name></expr>:</case>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name><name>file_header</name><operator>.</operator><name>file_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unknown file attributes from RAR file's host OS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>offset_seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dictionary_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>offset_outgoing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>br</name><operator>.</operator><name>cache_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>br</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>crc_calculated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>entry_eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>is_ppmd_block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>start_new_table</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer_size</name></name> <operator>=</operator> <name>UNP_BUFFER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Free</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>ppmd_valid</name></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>ppmd_eod</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>head_type</name> <operator>==</operator> <name>NEWSUB_HEAD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>mnsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_ctime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>ctime</name></name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cnsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_atime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>atime</name></name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>ansec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_entry_copy_pathname_l</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>filename_size</name></expr></argument>, <argument><expr><name>fn_sconv</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for Pathname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Pathname cannot be converted from %s to current locale."</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>fn_sconv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>mode</name></name><operator>)</operator> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>==</operator> <name>AE_IFLNK</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret2</name> <operator>=</operator> <call><name>read_symlink_stored</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sconv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret2</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <name>ret2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ret2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>entry_eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>get_time</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ttime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>ttime</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <operator>(</operator><name>ttime</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <operator>(</operator><name>ttime</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <operator>(</operator><name>ttime</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ttime</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ttime</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>+</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_exttime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>rmode</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>rem</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ttime</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>nsec</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALTIME_R</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmbuf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>errno_t</name></type> <name>terr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__time64_t</name></type> <name>tmptime</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>mtime</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rmode</name> <operator>=</operator> <name>flags</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rmode</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ttime</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_time</name><argument_list>(<argument><expr><name>ttime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>rmode</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>count</name> <operator>&gt;</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>rem</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>tmptime</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>terr</name> <operator>=</operator> <call><name>_localtime64_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>terr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>&amp;</operator><name>tmbuf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>+</operator> <name>rem</name> <operator>/</operator> <name>NS_UNIT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rmode</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>mnsec</name></name> <operator>=</operator> <name>nsec</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cnsec</name></name> <operator>=</operator> <name>nsec</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>ansec</name></name> <operator>=</operator> <name>nsec</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>arctime</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>arcnsec</name></name> <operator>=</operator> <name>nsec</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_symlink_stored</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rar</name> <operator>=</operator> <operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>rar_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>rar</name><operator>-&gt;</operator><name>packed_size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_entry_copy_symlink_l</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>rar</name><operator>-&gt;</operator><name>packed_size</name></name></expr></argument>, <argument><expr><name>sconv</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"link cannot be converted from %s to current locale."</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>sconv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>packed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_data_stored</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rar</name> <operator>=</operator> <operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>main_flags</name></name> <operator>&amp;</operator> <name>MHD_VOLUME</name> <operator>&amp;&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>file_flags</name></name> <operator>&amp;</operator> <name>FHD_SPLIT_AFTER</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file_crc</name></name> <operator>!=</operator> <name><name>rar</name><operator>-&gt;</operator><name>crc_calculated</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"File CRC error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>entry_eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>rar_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated RAR file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>offset_seek</name></name> <operator>+=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>-=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_unconsumed</name></name> <operator>=</operator> <name>bytes_avail</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>crc_calculated</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>crc_calculated</name></name></expr></argument>, <argument><expr><operator>*</operator><name>buff</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>bytes_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_data_compressed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>looper</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>looper</name><operator>++</operator> <operator>&gt;</operator> <name>MAX_COMPRESS_DEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>actualend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>sym</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>lzss_offset</name></decl>, <decl><type ref="prev"/><name>length</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rar</name> <operator>=</operator> <operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>ppmd_eod</name></name> <operator>||</operator>
<operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>dictionary_size</name></name> <operator>&amp;&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset_outgoing</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>offset_outgoing</name></name> <operator>+=</operator> <operator>*</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>crc_calculated</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>crc_calculated</name></name></expr></argument>, <argument><expr><operator>*</operator><name>buff</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file_crc</name></name> <operator>!=</operator> <name><name>rar</name><operator>-&gt;</operator><name>crc_calculated</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"File CRC error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>entry_eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>is_ppmd_block</name></name> <operator>&amp;&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>dictionary_size</name></name> <operator>&amp;&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer_size</name></name> <operator>-</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_buffer_size</name></name> <operator>-</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>copy_from_lzss_window</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>bs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name> <operator>-=</operator> <name>bs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buff</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_buffer_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset_outgoing</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>offset_outgoing</name></name> <operator>+=</operator> <operator>*</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>crc_calculated</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>crc_calculated</name></name></expr></argument>, <argument><expr><operator>*</operator><name>buff</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>br</name><operator>.</operator><name>next_in</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rar_br_preparation</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>br</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>start_new_table</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_codes</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>is_ppmd_block</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sym</name> <operator>=</operator> <call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_DecodeSymbol</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>range_dec</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid symbol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sym</name> <operator>!=</operator> <name><name>rar</name><operator>-&gt;</operator><name>ppmd_escape</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lzss_emit_literal</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_DecodeSymbol</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>range_dec</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid symbol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>code</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>start_new_table</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>read_data_compressed</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>looper</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>ppmd_eod</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Parsing filters is unsupported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>lzss_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_DecodeSymbol</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>range_dec</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid symbol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lzss_offset</name> <operator>|=</operator> <name>code</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>length</name> <operator>=</operator> <call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_DecodeSymbol</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>range_dec</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid symbol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lzss_emit_match</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>lzss_offset</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name> <operator>+=</operator> <name>length</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>length</name> <operator>=</operator> <call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_DecodeSymbol</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>range_dec</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid symbol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lzss_emit_match</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name> <operator>+=</operator> <name>length</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>lzss_emit_literal</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name><name>rar</name><operator>-&gt;</operator><name>dictionary_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>filterstart</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>actualend</name> <operator>=</operator> <call><name>expand</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>actualend</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name> <operator>=</operator> <name>actualend</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Internal error extracting RAR file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer_size</name></name> <operator>-</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_buffer_size</name></name> <operator>-</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>copy_from_lzss_window</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>bs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytes_uncopied</name></name> <operator>-=</operator> <name>bs</name></expr>;</expr_stmt>




</block_content>}</block> while <condition>(<expr><operator>*</operator><name>buff</name> <operator>==</operator> <name>NULL</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_buffer_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>offset_outgoing</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>offset_outgoing</name></name> <operator>+=</operator> <operator>*</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>crc_calculated</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>crc_calculated</name></name></expr></argument>, <argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_codes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bitlengths</name><index>[<expr><name>MAX_SYMBOLS</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>zerocount</name></decl>, <decl><type ref="prev"/><name>ppmd_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>huffman_code</name></name></type> <name>precode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name> <init>= <expr><operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar_br</name></name> <modifier>*</modifier></type><name>br</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>br</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free_codes</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rar_br_consume_unalined_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>is_ppmd_block</name></name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ppmd_flags</name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ppmd_flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dictionary_size</name></name> <operator>=</operator> <operator>(</operator><call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ppmd_flags</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>ppmd_escape</name></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name><operator>.</operator><name>InitEsc</name></name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>ppmd_escape</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ppmd_flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>maxorder</name> <operator>=</operator> <operator>(</operator><name>ppmd_flags</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>maxorder</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxorder</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>maxorder</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>maxorder</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated RAR file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Free</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytein</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bytein</name><operator>.</operator><name>Read</name></name> <operator>=</operator> <operator>&amp;</operator><name>ppmd_read</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>PpmdRAR_RangeDec_CreateVTable</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>range_dec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>range_dec</name><operator>.</operator><name>Stream</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>bytein</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Construct</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>dictionary_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid zero dictionary size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Alloc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>dictionary_size</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>PpmdRAR_RangeDec_Init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>range_dec</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unable to initialize PPMd range decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>, <argument><expr><name>maxorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>ppmd_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>ppmd_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid PPMd sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>PpmdRAR_RangeDec_Init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>range_dec</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unable to initialize PPMd range decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitlengths</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bitlengths</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SYMBOLS</name></expr>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bitlengths</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bitlengths</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xF</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>zerocount</name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zerocount</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>zerocount</name> <operator>+</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAX_SYMBOLS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bitlengths</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>precode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>precode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>create_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>precode</name></expr></argument>, <argument><expr><name>bitlengths</name></expr></argument>, <argument><expr><name>MAX_SYMBOLS</name></expr></argument>, <argument><expr><name>MAX_SYMBOL_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HUFFMAN_TABLE_SIZE</name></expr>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <call><name>read_next_symbol</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>precode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>val</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Internal error extracting RAR file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>truncated_data</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>truncated_data</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>HUFFMAN_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>truncated_data</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>truncated_data</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>HUFFMAN_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>precode</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>create_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>maincode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MAINCODE_SIZE</name></expr></argument>,
<argument><expr><name>MAX_SYMBOL_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>create_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>offsetcode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name><index>[<expr><name>MAINCODE_SIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><name>OFFSETCODE_SIZE</name></expr></argument>, <argument><expr><name>MAX_SYMBOL_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>create_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lowoffsetcode</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name><index>[<expr><name>MAINCODE_SIZE</name> <operator>+</operator> <name>OFFSETCODE_SIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><name>LOWOFFSETCODE_SIZE</name></expr></argument>, <argument><expr><name>MAX_SYMBOL_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>create_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lengthcode</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lengthtable</name><index>[<expr><name>MAINCODE_SIZE</name> <operator>+</operator> <name>OFFSETCODE_SIZE</name> <operator>+</operator>
<name>LOWOFFSETCODE_SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>LENGTHCODE_SIZE</name></expr></argument>, <argument><expr><name>MAX_SYMBOL_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>dictionary_size</name></name> <operator>||</operator> <operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>window</name></name></expr>)</condition>
<block>{<block_content>



<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>new_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name> <operator>&gt;=</operator> <name>DICTIONARY_MAX_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>DICTIONARY_MAX_SIZE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <call><name>rar_fls</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>rar</name><operator>-&gt;</operator><name>unp_size</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Zero window size is invalid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_window</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_window</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Unable to allocate memory for uncompressed data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>window</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>new_window</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>dictionary_size</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>dictionary_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>dictionary_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>start_new_table</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<label><name>truncated_data</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated RAR file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_codes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name> <init>= <expr><operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>maincode</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>offsetcode</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lowoffsetcode</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lengthcode</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>maincode</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>offsetcode</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lowoffsetcode</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lengthcode</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>maincode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>maincode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>offsetcode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>offsetcode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lowoffsetcode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lowoffsetcode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lengthcode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lengthcode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_next_symbol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>huffman_code</name></name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>value</name></decl>, <decl><type ref="prev"/><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar_br</name></name> <modifier>*</modifier></type><name>br</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>code</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>make_table</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rar</name> <operator>=</operator> <operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>br</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>br</name></name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>code</name><operator>-&gt;</operator><name>tablesize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated RAR file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>code</name><operator>-&gt;</operator><name>tablesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>code</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>bits</name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>code</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>bits</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid prefix code in bitstream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <name><name>code</name><operator>-&gt;</operator><name>tablesize</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>code</name><operator>-&gt;</operator><name>tablesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator>
<name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated RAR file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid prefix code in bitstream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><name>bit</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>huffman_code</name></name> <modifier>*</modifier></type><name>code</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lengths</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numsymbols</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>maxlength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>codebits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>symbolsleft</name> <init>= <expr><name>numsymbols</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>numentries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>numallocatedentries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>new_node</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Unable to allocate memory for node data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>numentries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>minlength</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>maxlength</name></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>codebits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxlength</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numsymbols</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lengths</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_value</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>codebits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>codebits</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>symbolsleft</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>symbolsleft</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>codebits</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>huffman_code</name></name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>codebits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lastnode</name></decl>, <decl><type ref="prev"/><name>bitpos</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>code</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&gt;</operator> <name><name>code</name><operator>-&gt;</operator><name>maxlength</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>maxlength</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;</operator> <name><name>code</name><operator>-&gt;</operator><name>minlength</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>minlength</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>















<expr_stmt><expr><name>lastnode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bitpos</name> <operator>=</operator> <name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>bitpos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>bitpos</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><name>codebits</name> <operator>&gt;&gt;</operator> <name>bitpos</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>lastnode</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator>
<name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>lastnode</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Prefix found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





































<if_stmt><if>if <condition>(<expr><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>lastnode</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>new_node</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Unable to allocate memory for node data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>lastnode</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>=</operator> <name><name>code</name><operator>-&gt;</operator><name>numentries</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>lastnode</name> <operator>=</operator> <name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>lastnode</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><name>bit</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>lastnode</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>lastnode</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Prefix found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>lastnode</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>lastnode</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>new_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>huffman_code</name></name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_tree</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>code</name><operator>-&gt;</operator><name>numallocatedentries</name></name> <operator>==</operator> <name><name>code</name><operator>-&gt;</operator><name>numentries</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_num_entries</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>code</name><operator>-&gt;</operator><name>numentries</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_num_entries</name> <operator>=</operator> <name><name>code</name><operator>-&gt;</operator><name>numentries</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_tree</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>code</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>new_num_entries</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>code</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_tree</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>tree</name></name> <operator>=</operator> <operator>(</operator>struct <name>huffman_tree_node</name> <operator>*</operator><operator>)</operator><name>new_tree</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>numallocatedentries</name></name> <operator>=</operator> <name>new_num_entries</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name><name>code</name><operator>-&gt;</operator><name>numentries</name></name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name><name>code</name><operator>-&gt;</operator><name>numentries</name></name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>huffman_code</name></name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>code</name><operator>-&gt;</operator><name>maxlength</name></name> <operator>&lt;</operator> <name><name>code</name><operator>-&gt;</operator><name>minlength</name></name> <operator>||</operator> <name><name>code</name><operator>-&gt;</operator><name>maxlength</name></name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>tablesize</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>tablesize</name></name> <operator>=</operator> <name><name>code</name><operator>-&gt;</operator><name>maxlength</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator>
<operator>(</operator>struct <name>huffman_table_entry</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>code</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></sizeof>
<operator>*</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>code</name><operator>-&gt;</operator><name>tablesize</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>make_table_recurse</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>code</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>code</name><operator>-&gt;</operator><name>tablesize</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_table_recurse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>huffman_code</name></name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>huffman_table_entry</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maxdepth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>currtablesize</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>code</name><operator>-&gt;</operator><name>tree</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Huffman tree was not created."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>node</name> <operator>&gt;=</operator> <name><name>code</name><operator>-&gt;</operator><name>numentries</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid location to Huffman tree specified."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>currtablesize</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>maxdepth</name> <operator>-</operator> <name>depth</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator>
<name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>currtablesize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>









<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>==</operator> <name>maxdepth</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>maxdepth</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>make_table_recurse</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>table</name></expr></argument>,
<argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>maxdepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>make_table_recurse</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>code</name><operator>-&gt;</operator><name>tree</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name><name>branches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>table</name> <operator>+</operator> <name>currtablesize</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>maxdepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>expand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>lengthbases</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>,
<expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>,
<expr><literal type="number">80</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">224</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>lengthbits</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>lengthb_min</name> <init>= <expr><call><name>minimum</name><argument_list>(
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>lengthbases</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>lengthbases</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>lengthbits</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>lengthbits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>offsetbases</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>,
<expr><literal type="number">64</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">384</literal></expr>,
<expr><literal type="number">512</literal></expr>, <expr><literal type="number">768</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">1536</literal></expr>, <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">3072</literal></expr>,
<expr><literal type="number">4096</literal></expr>, <expr><literal type="number">6144</literal></expr>, <expr><literal type="number">8192</literal></expr>, <expr><literal type="number">12288</literal></expr>, <expr><literal type="number">16384</literal></expr>, <expr><literal type="number">24576</literal></expr>,
<expr><literal type="number">32768</literal></expr>, <expr><literal type="number">49152</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">98304</literal></expr>, <expr><literal type="number">131072</literal></expr>, <expr><literal type="number">196608</literal></expr>,
<expr><literal type="number">262144</literal></expr>, <expr><literal type="number">327680</literal></expr>, <expr><literal type="number">393216</literal></expr>, <expr><literal type="number">458752</literal></expr>, <expr><literal type="number">524288</literal></expr>, <expr><literal type="number">589824</literal></expr>,
<expr><literal type="number">655360</literal></expr>, <expr><literal type="number">720896</literal></expr>, <expr><literal type="number">786432</literal></expr>, <expr><literal type="number">851968</literal></expr>, <expr><literal type="number">917504</literal></expr>, <expr><literal type="number">983040</literal></expr>,
<expr><literal type="number">1048576</literal></expr>, <expr><literal type="number">1310720</literal></expr>, <expr><literal type="number">1572864</literal></expr>, <expr><literal type="number">1835008</literal></expr>, <expr><literal type="number">2097152</literal></expr>, <expr><literal type="number">2359296</literal></expr>,
<expr><literal type="number">2621440</literal></expr>, <expr><literal type="number">2883584</literal></expr>, <expr><literal type="number">3145728</literal></expr>, <expr><literal type="number">3407872</literal></expr>, <expr><literal type="number">3670016</literal></expr>, <expr><literal type="number">3932160</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>offsetbits</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>,
<expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>offsetb_min</name> <init>= <expr><call><name>minimum</name><argument_list>(
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>offsetbases</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>offsetbases</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>offsetbits</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>offsetbits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>shortbases</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">192</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>shortbits</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>symbol</name></decl>, <decl><type ref="prev"/><name>offs</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>offsindex</name></decl>, <decl><type ref="prev"/><name>lensymbol</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>offssymbol</name></decl>, <decl><type ref="prev"/><name>lowoffsetsymbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>newfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name> <init>= <expr><operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar_br</name></name> <modifier>*</modifier></type><name>br</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>br</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>filterstart</name></name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>filterstart</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>output_last_match</name></name> <operator>&amp;&amp;</operator>
<call><name>lzss_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>rar</name><operator>-&gt;</operator><name>lastlength</name></name> <operator>&lt;=</operator> <name>end</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lzss_emit_match</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lastoffset</name></name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>lastlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>output_last_match</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>is_ppmd_block</name></name> <operator>||</operator> <name><name>rar</name><operator>-&gt;</operator><name>output_last_match</name></name> <operator>||</operator>
<call><name>lzss_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>lzss_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>symbol</name> <operator>=</operator> <call><name>read_next_symbol</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>maincode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>output_last_match</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lzss_emit_literal</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>symbol</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>newfile</name> <operator>=</operator> <operator>!</operator><call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>newfile</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>start_new_block</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>start_new_table</name></name> <operator>=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>lzss_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_codes</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>symbol</name><operator>==</operator><literal type="number">257</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Parsing filters is unsupported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>symbol</name><operator>==</operator><literal type="number">258</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>lastlength</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offs</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>lastoffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>lastlength</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>symbol</name> <operator>&lt;=</operator> <literal type="number">262</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>offsindex</name> <operator>=</operator> <name>symbol</name> <operator>-</operator> <literal type="number">259</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offs</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>oldoffset</name><index>[<expr><name>offsindex</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lensymbol</name> <operator>=</operator> <call><name>read_next_symbol</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lengthcode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_data</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lensymbol</name> <operator>&gt;</operator> <name>lengthb_min</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>lengthbases</name><index>[<expr><name>lensymbol</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lengthbits</name><index>[<expr><name>lensymbol</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>lengthbits</name><index>[<expr><name>lensymbol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>lengthbits</name><index>[<expr><name>lensymbol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>lengthbits</name><index>[<expr><name>lensymbol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>offsindex</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>oldoffset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>oldoffset</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>oldoffset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>offs</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>symbol</name><operator>&lt;=</operator><literal type="number">270</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>offs</name> <operator>=</operator> <name><name>shortbases</name><index>[<expr><name>symbol</name><operator>-</operator><literal type="number">263</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>shortbits</name><index>[<expr><name>symbol</name><operator>-</operator><literal type="number">263</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>shortbits</name><index>[<expr><name>symbol</name><operator>-</operator><literal type="number">263</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offs</name> <operator>+=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>shortbits</name><index>[<expr><name>symbol</name><operator>-</operator><literal type="number">263</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>shortbits</name><index>[<expr><name>symbol</name><operator>-</operator><literal type="number">263</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>oldoffset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>oldoffset</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>oldoffset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>offs</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>symbol</name><operator>-</operator><literal type="number">271</literal> <operator>&gt;</operator> <name>lengthb_min</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>lengthbases</name><index>[<expr><name>symbol</name><operator>-</operator><literal type="number">271</literal></expr>]</index></name><operator>+</operator><literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>lengthbits</name><index>[<expr><name>symbol</name><operator>-</operator><literal type="number">271</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>lengthbits</name><index>[<expr><name>symbol</name><operator>-</operator><literal type="number">271</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>lengthbits</name><index>[<expr><name>symbol</name><operator>-</operator><literal type="number">271</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>lengthbits</name><index>[<expr><name>symbol</name><operator>-</operator><literal type="number">271</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offssymbol</name> <operator>=</operator> <call><name>read_next_symbol</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>offsetcode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_data</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offssymbol</name> <operator>&gt;</operator> <name>offsetb_min</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offs</name> <operator>=</operator> <name><name>offsetbases</name><index>[<expr><name>offssymbol</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>offsetbits</name><index>[<expr><name>offssymbol</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>offssymbol</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>offsetbits</name><index>[<expr><name>offssymbol</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>offsetbits</name><index>[<expr><name>offssymbol</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offs</name> <operator>+=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>offsetbits</name><index>[<expr><name>offssymbol</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>offsetbits</name><index>[<expr><name>offssymbol</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>numlowoffsetrepeats</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>numlowoffsetrepeats</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offs</name> <operator>+=</operator> <name><name>rar</name><operator>-&gt;</operator><name>lastlowoffset</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lowoffsetsymbol</name> <operator>=</operator>
<call><name>read_next_symbol</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lowoffsetcode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>lowoffsetsymbol</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>numlowoffsetrepeats</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offs</name> <operator>+=</operator> <name><name>rar</name><operator>-&gt;</operator><name>lastlowoffset</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>offs</name> <operator>+=</operator> <name>lowoffsetsymbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>lastlowoffset</name></name> <operator>=</operator> <name>lowoffsetsymbol</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rar_br_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>offsetbits</name><index>[<expr><name>offssymbol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>truncated_data</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offs</name> <operator>+=</operator> <call><name>rar_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>offsetbits</name><index>[<expr><name>offssymbol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rar_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>offsetbits</name><index>[<expr><name>offssymbol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offs</name> <operator>&gt;=</operator> <literal type="number">0x40000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offs</name> <operator>&gt;=</operator> <literal type="number">0x2000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>oldoffset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>oldoffset</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>oldoffset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>offs</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>lastoffset</name></name> <operator>=</operator> <name>offs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>lastlength</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>output_last_match</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<label><name>truncated_data</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated RAR file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
<label><name>bad_data</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Bad RAR file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_from_lzss_window</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>startpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>windowoffs</name></decl>, <decl><type ref="prev"/><name>firstpart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name> <init>= <expr><operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Unable to allocate memory for uncompressed data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>windowoffs</name> <operator>=</operator> <call><name>lzss_offset_for_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>, <argument><expr><name>startpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>windowoffs</name> <operator>+</operator> <name>length</name> <operator>&lt;=</operator> <call><name>lzss_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>window</name><index>[<expr><name>windowoffs</name></expr>]</index></name></expr></argument>,
<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <call><name>lzss_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>firstpart</name> <operator>=</operator> <call><name>lzss_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>windowoffs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>firstpart</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Bad RAR file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>firstpart</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>window</name><index>[<expr><name>windowoffs</name></expr>]</index></name></expr></argument>, <argument><expr><name>firstpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name> <operator>+</operator> <name>firstpart</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name>firstpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>unp_buffer</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>lzss</name><operator>.</operator><name>window</name><index>[<expr><name>windowoffs</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Bad RAR file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>unp_offset</name></name> <operator>&gt;=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>unp_buffer</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>rar_read_ahead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>avail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar</name></name> <modifier>*</modifier></type><name>rar</name> <init>= <expr><operator>(</operator>struct <name>rar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>avail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>read_data_is_posix_read</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>avail</name> <operator>&gt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>read_data_requested</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>read_data_requested</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>avail</name> <operator>&gt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>rar</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>avail</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>avail</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>main_flags</name></name> <operator>&amp;</operator> <name>MHD_VOLUME</name> <operator>&amp;&amp;</operator>
<name><name>rar</name><operator>-&gt;</operator><name>file_flags</name></name> <operator>&amp;</operator> <name>FHD_SPLIT_AFTER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>filename_must_match</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>archive_read_format_rar_read_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>has_endarc_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>archive_read_format_rar_read_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>filename_must_match</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rar_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>avail</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>
</unit>
