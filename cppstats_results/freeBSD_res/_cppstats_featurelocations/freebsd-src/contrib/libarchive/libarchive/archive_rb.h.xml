<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_rb.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_RB_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_RB_H_INCLUDED</name></cpp:macro></cpp:define>

<struct>struct <name>archive_rb_node</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name><name>rb_nodes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uintptr_t</name></type> <name>rb_info</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_RB_DIR_LEFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_RB_DIR_RIGHT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_RB_TREE_MIN</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__archive_rb_tree_iterate((T), NULL, ARCHIVE_RB_DIR_LEFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_RB_TREE_MAX</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__archive_rb_tree_iterate((T), NULL, ARCHIVE_RB_DIR_RIGHT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_RB_TREE_NEXT</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__archive_rb_tree_iterate((T), (N), ARCHIVE_RB_DIR_RIGHT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_RB_TREE_PREV</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__archive_rb_tree_iterate((T), (N), ARCHIVE_RB_DIR_LEFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_RB_TREE_FOREACH</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((N) = ARCHIVE_RB_TREE_MIN(T); (N); (N) = ARCHIVE_RB_TREE_NEXT((T), (N)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_RB_TREE_FOREACH_REVERSE</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((N) = ARCHIVE_RB_TREE_MAX(T); (N); (N) = ARCHIVE_RB_TREE_PREV((T), (N)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_RB_TREE_FOREACH_SAFE</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>T</name></type></parameter>, <parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((N) = ARCHIVE_RB_TREE_MIN(T); (N) &amp;&amp; ((S) = ARCHIVE_RB_TREE_NEXT((T), (N)), 1); (N) = (S))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_RB_TREE_FOREACH_REVERSE_SAFE</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>T</name></type></parameter>, <parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((N) = ARCHIVE_RB_TREE_MAX(T); (N) &amp;&amp; ((S) = ARCHIVE_RB_TREE_PREV((T), (N)), 1); (N) = (S))</cpp:value></cpp:define>
















<typedef>typedef <type><name>signed</name></type> <name>int</name> <argument_list>(<argument><expr><operator>*</operator><specifier>const</specifier> <name>archive_rbto_compare_nodes_fn</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> struct <name>archive_rb_node</name> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> struct <name>archive_rb_node</name> <operator>*</operator></expr></argument>)</argument_list>;</typedef>
<typedef>typedef <type><name>signed</name></type> <name>int</name> <argument_list>(<argument><expr><operator>*</operator><specifier>const</specifier> <name>archive_rbto_compare_key_fn</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> struct <name>archive_rb_node</name> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list>;</typedef>

<struct>struct <name>archive_rb_tree_ops</name> <block>{
<decl_stmt><decl><type><name>archive_rbto_compare_nodes_fn</name></type> <name>rbto_compare_nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>archive_rbto_compare_key_fn</name></type> <name>rbto_compare_key</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>archive_rb_tree</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>rbt_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_tree_ops</name></name> <modifier>*</modifier></type><name>rbt_ops</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>__archive_rb_tree_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_tree_ops</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>__archive_rb_tree_insert_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type>
<name>__archive_rb_tree_find_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type>
<name>__archive_rb_tree_find_node_geq</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type>
<name>__archive_rb_tree_find_node_leq</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__archive_rb_tree_remove_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type>
<name>__archive_rb_tree_iterate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
