<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_write.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_WAIT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_write_private.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_vtable</name></name> <modifier>*</modifier></type><name>archive_write_vtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_filter_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_archive_filter_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>_archive_filter_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_write_filter_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_write_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_write_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_write_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_archive_write_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_archive_write_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>archive_none</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>archive_vtable</name></name> <modifier>*</modifier></type>
<name>archive_write_vtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_vtable</name></name></type> <name>av</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>inited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inited</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_close</name></name> <operator>=</operator> <name>_archive_write_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_filter_bytes</name></name> <operator>=</operator> <name>_archive_filter_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_filter_code</name></name> <operator>=</operator> <name>_archive_filter_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_filter_name</name></name> <operator>=</operator> <name>_archive_filter_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_filter_count</name></name> <operator>=</operator> <name>_archive_write_filter_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_free</name></name> <operator>=</operator> <name>_archive_write_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_write_header</name></name> <operator>=</operator> <name>_archive_write_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_write_finish_entry</name></name> <operator>=</operator> <name>_archive_write_finish_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><operator>.</operator><name>archive_write_data</name></name> <operator>=</operator> <name>_archive_write_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name>av</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type>
<name>archive_write_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>ARCHIVE_WRITE_MAGIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_NEW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <call><name>archive_write_vtable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>bytes_per_block</name></name> <operator>=</operator> <literal type="number">10240</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>null_length</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nulls</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>null_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nulls</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>nulls</name></name> <operator>=</operator> <name>nulls</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_write_set_bytes_per_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes_per_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_write_set_bytes_per_block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>bytes_per_block</name></name> <operator>=</operator> <name>bytes_per_block</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_write_get_bytes_per_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name></expr></argument>, <argument><expr><literal type="string">"archive_write_get_bytes_per_block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bytes_per_block</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>archive_write_set_bytes_in_last_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name></expr></argument>, <argument><expr><literal type="string">"archive_write_set_bytes_in_last_block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_write_get_bytes_in_last_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name></expr></argument>, <argument><expr><literal type="string">"archive_write_get_bytes_in_last_block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>archive_write_set_skip_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name></expr></argument>, <argument><expr><literal type="string">"archive_write_set_skip_file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>skip_file_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>skip_file_dev</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>skip_file_ino</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type>
<name>__archive_write_allocate_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>archive</name></name> <operator>=</operator> <name>_a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_WRITE_FILTER_STATE_NEW</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>filter_first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>filter_first</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>filter_last</name><operator>-&gt;</operator><name>next_filter</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>filter_last</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>__archive_write_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ARCHIVE_WRITE_FILTER_STATE_OPEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>write</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>


<return>return<expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>write</name></name><operator>)</operator><operator>(</operator><name>f</name><operator>,</operator> <name>buff</name><operator>,</operator> <name>length</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>bytes_written</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>__archive_write_open_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>next_filter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_write_open_filter</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>next_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ARCHIVE_WRITE_FILTER_STATE_NEW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>open</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_WRITE_FILTER_STATE_OPEN</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>open</name></name><operator>)</operator><operator>(</operator><name>f</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_WRITE_FILTER_STATE_OPEN</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_WRITE_FILTER_STATE_FATAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>__archive_write_filters_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>__archive_write_open_filter</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filter_first</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>__archive_write_filters_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>ret1</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>filter_first</name></name></expr>;</init> <condition><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next_filter</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ARCHIVE_WRITE_FILTER_STATE_OPEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>close</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret1</name> <operator>=</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>close</name></name><operator>)</operator><operator>(</operator><name>f</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret1</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ret1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret1</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator>
<name>ARCHIVE_WRITE_FILTER_STATE_CLOSED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator>
<name>ARCHIVE_WRITE_FILTER_STATE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_WRITE_FILTER_STATE_CLOSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>__archive_write_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>__archive_write_filter</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filter_first</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>__archive_write_nulls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>to_write</name> <init>= <expr><ternary><condition><expr><name>length</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>null_length</name></name></expr> ?</condition><then> <expr><name>length</name></expr> </then><else>: <expr><name><name>a</name><operator>-&gt;</operator><name>null_length</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>__archive_write_output</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><name>to_write</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>-=</operator> <name>to_write</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_client_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>archive</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_none</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>bytes_per_block</name></name> <operator>=</operator> <call><name>archive_write_get_bytes_per_block</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name> <operator>=</operator>
<call><name>archive_write_get_bytes_in_last_block</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_size</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>bytes_per_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator>struct <name>archive_none</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate data for output buffering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>buffer_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>client_opener</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>a</name><operator>-&gt;</operator><name>client_opener</name></name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>client_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_client_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>archive</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_none</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator>struct <name>archive_none</name> <operator>*</operator><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_buff</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>remaining</name></decl>, <decl><type ref="prev"/><name>to_copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>remaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>client_writer</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator>
<name><name>a</name><operator>-&gt;</operator><name>client_data</name></name><operator>,</operator> <name>buff</name><operator>,</operator> <name>remaining</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buff</name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>avail</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>to_copy</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>remaining</name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>avail</name></name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>state</name><operator>-&gt;</operator><name>avail</name></name></expr> </then><else>: <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>remaining</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>next</name></name> <operator>+=</operator> <name>to_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>avail</name></name> <operator>-=</operator> <name>to_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buff</name> <operator>+=</operator> <name>to_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>to_copy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>avail</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>to_write</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>to_write</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>client_writer</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator>
<name><name>a</name><operator>-&gt;</operator><name>client_data</name></name><operator>,</operator> <name>p</name><operator>,</operator> <name>to_write</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytes_written</name> <operator>&gt;</operator> <name>to_write</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"write overrun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name>to_write</name> <operator>-=</operator> <name>bytes_written</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>remaining</name> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>client_writer</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator>
<name><name>a</name><operator>-&gt;</operator><name>client_data</name></name><operator>,</operator> <name>buff</name><operator>,</operator> <name><name>state</name><operator>-&gt;</operator><name>buffer_size</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buff</name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>bytes_written</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>next</name></name> <operator>+=</operator> <name>remaining</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>avail</name></name> <operator>-=</operator> <name>remaining</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_client_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>archive</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>client_freer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>a</name><operator>-&gt;</operator><name>client_freer</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>client_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>passphrase</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>passphrase</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_write_client_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>archive</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_none</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator>struct <name>archive_none</name> <operator>*</operator><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>block_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>target_block_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>to_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_length</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>avail</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>target_block_length</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>bytes_per_block</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>target_block_length</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name> <operator>*</operator>
<operator>(</operator> <operator>(</operator><name>block_length</name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator>
<name><name>a</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>target_block_length</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>bytes_per_block</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>target_block_length</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>bytes_per_block</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>block_length</name> <operator>&lt;</operator> <name>target_block_length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>target_block_length</name> <operator>-</operator> <name>block_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>block_length</name> <operator>=</operator> <name>target_block_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to_write</name> <operator>=</operator> <name>block_length</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>to_write</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>client_writer</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>,</operator>
<name><name>a</name><operator>-&gt;</operator><name>client_data</name></name><operator>,</operator> <name>p</name><operator>,</operator> <name>to_write</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytes_written</name> <operator>&gt;</operator> <name>to_write</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"write overrun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name>to_write</name> <operator>-=</operator> <name>bytes_written</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>client_closer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>a</name><operator>-&gt;</operator><name>client_closer</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>client_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_WRITE_FILTER_STATE_CLOSED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_write_open2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>,
<parameter><decl><type><name>archive_open_callback</name> <modifier>*</modifier></type><name>opener</name></decl></parameter>, <parameter><decl><type><name>archive_write_callback</name> <modifier>*</modifier></type><name>writer</name></decl></parameter>,
<parameter><decl><type><name>archive_close_callback</name> <modifier>*</modifier></type><name>closer</name></decl></parameter>, <parameter><decl><type><name>archive_free_callback</name> <modifier>*</modifier></type><name>freer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>client_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_write_open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client_writer</name></name> <operator>=</operator> <name>writer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client_opener</name></name> <operator>=</operator> <name>opener</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client_closer</name></name> <operator>=</operator> <name>closer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client_freer</name></name> <operator>=</operator> <name>freer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client_data</name></name> <operator>=</operator> <name>client_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>client_filter</name> <operator>=</operator> <call><name>__archive_write_allocate_filter</name><argument_list>(<argument><expr><name>_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client_filter</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>archive_write_client_open</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client_filter</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>archive_write_client_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client_filter</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>archive_write_client_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client_filter</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>archive_write_client_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_write_filters_open</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>__archive_write_filters_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_write_filters_free</name><argument_list>(<argument><expr><name>_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>r1</name> <operator>&lt;</operator> <name>ret</name></expr> ?</condition><then> <expr><name>r1</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_HEADER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format_init</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format_init</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_write_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>,
<parameter><decl><type><name>archive_open_callback</name> <modifier>*</modifier></type><name>opener</name></decl></parameter>, <parameter><decl><type><name>archive_write_callback</name> <modifier>*</modifier></type><name>writer</name></decl></parameter>,
<parameter><decl><type><name>archive_close_callback</name> <modifier>*</modifier></type><name>closer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_write_open2</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>client_data</name></expr></argument>, <argument><expr><name>opener</name></expr></argument>, <argument><expr><name>writer</name></expr></argument>,
<argument><expr><name>closer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_write_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>, <decl><type ref="prev"/><name>r1</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name> <operator>|</operator> <name>ARCHIVE_STATE_FATAL</name></expr></argument>,
<argument><expr><literal type="string">"archive_write_close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>ARCHIVE_STATE_NEW</name>
<operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>ARCHIVE_STATE_CLOSED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>ARCHIVE_STATE_DATA</name>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>format_finish_entry</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format_finish_entry</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format_close</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format_close</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>&lt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>__archive_write_filters_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>&lt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_CLOSED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_write_filter_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>filter_first</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next_filter</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>__archive_write_filters_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>, <decl><type ref="prev"/><name>r1</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>filter_first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>next</name>
<init>= <expr><name><name>a</name><operator>-&gt;</operator><name>filter_first</name><operator>-&gt;</operator><name>next_filter</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>filter_first</name><operator>-&gt;</operator><name>free</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>a</name><operator>-&gt;</operator><name>filter_first</name><operator>-&gt;</operator><name>free</name></name>)<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filter_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>r1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>filter_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>filter_first</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>filter_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_write_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>, <decl><type ref="prev"/><name>r1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>_a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_ANY</name> <operator>|</operator> <name>ARCHIVE_STATE_FATAL</name></expr></argument>, <argument><expr><literal type="string">"archive_write_free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_write_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>&lt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__archive_write_filters_free</name><argument_list>(<argument><expr><name>_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>error_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>passphrase</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_write_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_DATA</name> <operator>|</operator> <name>ARCHIVE_STATE_HEADER</name></expr></argument>, <argument><expr><literal type="string">"archive_write_header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format_write_header</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Format must be set before you can write to an archive."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>archive_write_finish_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>ARCHIVE_OK</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>skip_file_set</name></name> <operator>&amp;&amp;</operator>
<call><name>archive_entry_dev_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>archive_entry_ino_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>archive_entry_dev</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>skip_file_dev</name></name> <operator>&amp;&amp;</operator>
<call><name>archive_entry_ino64</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>skip_file_ino</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Can't add archive to itself"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format_write_header</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>,</operator> <name>entry</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>==</operator> <name>ARCHIVE_FAILED</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_DATA</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_write_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_HEADER</name> <operator>|</operator> <name>ARCHIVE_STATE_DATA</name></expr></argument>,
<argument><expr><literal type="string">"archive_write_finish_entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>&amp;</operator> <name>ARCHIVE_STATE_DATA</name>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>format_finish_entry</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format_finish_entry</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_HEADER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>_archive_write_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_write</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_DATA</name></expr></argument>, <argument><expr><literal type="string">"archive_write_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>max_write</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>max_write</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format_write_data</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>,</operator> <name>buff</name><operator>,</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type>
<name>filter_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>filter_first</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>filter_last</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next_filter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_archive_filter_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>filter_lookup</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>f</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>_archive_filter_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>filter_lookup</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>_archive_filter_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>filter_lookup</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>f</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>bytes_written</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
