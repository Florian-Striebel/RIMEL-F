<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_write_set_format_iso9660.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UTSNAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_rb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_write_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getuid</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getgid</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPAT_MKISOFS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGICAL_BLOCK_BITS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGICAL_BLOCK_SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_TABLE_BLOCK_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_AREA_BLOCK</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIMARY_VOLUME_DESCRIPTOR_BLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPPLEMENTARY_VOLUME_DESCRIPTOR_BLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOT_RECORD_DESCRIPTOR_BLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOLUME_DESCRIPTOR_SET_TERMINATOR_BLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NON_ISO_FILE_SYSTEM_INFORMATION_BLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RRIP_ER_BLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDING_BLOCK</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_1_2M_SIZE</name></cpp:macro> <cpp:value>(1024 * 1200)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_1_44M_SIZE</name></cpp:macro> <cpp:value>(1024 * 1440)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_2_88M_SIZE</name></cpp:macro> <cpp:value>(1024 * 2880)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTI_EXTENT_SIZE</name></cpp:macro> <cpp:value>(ARCHIVE_LITERAL_LL(1) &lt;&lt; 32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RR_CE_SIZE</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FLAG_EXISTENCE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FLAG_DIRECTORY</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FLAG_ASSOCIATED</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FLAG_RECORD</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FLAG_PROTECTION</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FLAG_MULTI_EXTENT</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>rrip_identifier</name><index>[]</index></name> <init>=
<expr><literal type="string">"RRIP_1991A"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>rrip_descriptor</name><index>[]</index></name> <init>=
<expr><literal type="string">"THE ROCK RIDGE INTERCHANGE PROTOCOL PROVIDES SUPPORT FOR "</literal>
<literal type="string">"POSIX FILE SYSTEM SEMANTICS"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>rrip_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"PLEASE CONTACT DISC PUBLISHER FOR SPECIFICATION SOURCE. "</literal>
<literal type="string">"SEE PUBLISHER IDENTIFIER IN PRIMARY VOLUME DESCRIPTOR FOR "</literal>
<literal type="string">"CONTACT INFORMATION."</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RRIP_ER_ID_SIZE</name></cpp:macro> <cpp:value>(sizeof(rrip_identifier)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RRIP_ER_DSC_SIZE</name></cpp:macro> <cpp:value>(sizeof(rrip_descriptor)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RRIP_ER_SRC_SIZE</name></cpp:macro> <cpp:value>(sizeof(rrip_source)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RRIP_ER_SIZE</name></cpp:macro> <cpp:value>(8 + RRIP_ER_ID_SIZE + RRIP_ER_DSC_SIZE + RRIP_ER_SRC_SIZE)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>zisofs_magic</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x07</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZF_HEADER_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZF_LOG2_BS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZF_BLOCK_SIZE</name></cpp:macro> <cpp:value>(1UL &lt;&lt; ZF_LOG2_BS)</cpp:value></cpp:define>




<struct>struct <name>extr_rec</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>LOGICAL_BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>extr_rec</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ctl_extr_rec</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>use_extr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ce_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dr_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extr_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extr_loc</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_SAFETY</name></cpp:macro> <cpp:value>RR_CE_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_LIMIT</name></cpp:macro> <cpp:value>(254 - DR_SAFETY)</cpp:value></cpp:define>















<struct>struct <name>isofile</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>allnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>datanext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>hlnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>hardlink_target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>parentdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>basename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>basename_utf16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>symlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dircnt</name></decl>;</decl_stmt>





<struct>struct <name>content</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset_of_temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>location</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>content</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block> <decl><name>content</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur_content</name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>write_content</name></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>NO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>BOOT_CATALOG</name></decl>,
<decl><name>BOOT_IMAGE</name></decl>
}</block> <decl><name>boot</name></decl>;</enum>




<struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>log2_bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>
}</block> <decl><name>zisofs</name></decl>;</struct>
}</block>;</struct>

<struct>struct <name>isoent</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name></type> <name>rbnode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
}</block> <decl><name>children</name></decl>;</struct>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name></type> <name>rbtree</name></decl>;</decl_stmt>


<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
}</block> <decl><name>subdirs</name></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>children_sorted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>chnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>drnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>ptnext</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>dir_number</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>vd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>normal</name></decl>;</decl_stmt>
}</block> <decl><name>dr_len</name></decl>;</struct>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dir_location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dir_block</name></decl>;</decl_stmt>














<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>identifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ext_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ext_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_len</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>rr_parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>rr_child</name></decl>;</decl_stmt>







<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>extr_rec</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>extr_rec</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>extr_rec</name></name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>
}</block> <decl><name>extr_rec_list</name></decl>;</struct>

<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>virtual</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>dir</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>hardlink</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name></type> <name>rbnode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlink</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block> <decl><name>file_list</name></decl>;</struct>
}</block>;</struct>




<struct>struct <name>iso_option</name> <block>{










<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>abstract_file</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_ABSTRACT_FILE_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSTRACT_FILE_SIZE</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>














<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>application_id</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_APPLICATION_ID_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLICATION_IDENTIFIER_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>










<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>allow_vernum</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_ALLOW_VERNUM_DEFAULT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>











<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>biblio_file</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BIBLIO_FILE_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIBLIO_FILE_SIZE</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>










<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>boot</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOT_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>









<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>boot_catalog</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOT_CATALOG_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>












<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>boot_info_table</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOT_INFO_TABLE_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>










<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>boot_load_seg</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOT_LOAD_SEG_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>










<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>boot_load_size</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOT_LOAD_SIZE_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>






















<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>boot_type</name><range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOT_TYPE_AUTO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOT_TYPE_NO_EMU</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOT_TYPE_FD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOT_TYPE_HARD_DISK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOT_TYPE_DEFAULT</name></cpp:macro> <cpp:value>OPT_BOOT_TYPE_AUTO</cpp:value></cpp:define>









<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>compression_level</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_COMPRESSION_LEVEL_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>











<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>copyright_file</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_COPYRIGHT_FILE_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYRIGHT_FILE_SIZE</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>









<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>gid</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_GID_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>








































<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iso_level</name><range>:<expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_ISO_LEVEL_DEFAULT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>



















<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>joliet</name><range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_JOLIET_DISABLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_JOLIET_ENABLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_JOLIET_LONGNAME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_JOLIET_DEFAULT</name></cpp:macro> <cpp:value>OPT_JOLIET_ENABLE</cpp:value></cpp:define>










<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>limit_depth</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_LIMIT_DEPTH_DEFAULT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>












<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>limit_dirs</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_LIMIT_DIRS_DEFAULT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>









<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pad</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PAD_DEFAULT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>













<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>publisher</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PUBLISHER_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUBLISHER_IDENTIFIER_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>























<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rr</name><range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_RR_DISABLED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_RR_STRICT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_RR_USEFUL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_RR_DEFAULT</name></cpp:macro> <cpp:value>OPT_RR_USEFUL</cpp:value></cpp:define>









<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>volume_id</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_VOLUME_ID_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOLUME_IDENTIFIER_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>



















<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>zisofs</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_ZISOFS_DISABLED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_ZISOFS_DIRECT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_ZISOFS_DEFAULT</name></cpp:macro> <cpp:value>OPT_ZISOFS_DISABLED</cpp:value></cpp:define>

}</block>;</struct>

<struct>struct <name>iso9660</name> <block>{

<decl_stmt><decl><type><name>time_t</name></type> <name>birth_time</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>temp_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>cur_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>cur_dirent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>cur_dirstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bytes_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_multi_extent</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>utf16be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>mbs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv_to_utf16be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv_from_utf16be</name></decl>;</decl_stmt>


<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block> <decl><name>all_file_list</name></decl>;</struct>




<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block> <decl><name>data_file_list</name></decl>;</struct>


<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name></type> <name>hardlink_rbtree</name></decl>;</decl_stmt>


<struct>struct <name>vdd</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>rootent</name></decl>;</decl_stmt>
<enum>enum <name>vdd_type</name> <block>{
<decl><name>VDD_PRIMARY</name></decl>,
<decl><name>VDD_JOLIET</name></decl>,
<decl><name>VDD_ENHANCED</name></decl>
}</block> <decl><name>vdd_type</name></decl>;</enum>

<struct>struct <name>path_table</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sorted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>pathtbl</name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>max_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>path_table_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>path_table_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>location_type_L_path_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>location_type_M_path_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_dir_block</name></decl>;</decl_stmt>
}</block> <decl><name>primary</name></decl>, <decl><type ref="prev"/><name>joliet</name></decl>;</struct>


<decl_stmt><decl><type><name>int</name></type> <name>volume_space_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>volume_sequence_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_file_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>volume_identifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>publisher_identifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>data_preparer_identifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>application_identifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>copyright_file_identifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>abstract_file_identifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>bibliographic_file_identifier</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>location_rrip_er</name></decl>;</decl_stmt>


<struct>struct <block>{
<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>detect_magic</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>making</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>allzero</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>magic_buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>magic_cnt</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>










<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>block_pointers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_pointers_allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_pointers_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_pointers_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>total_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>block_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_stream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compression_level</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>zisofs</name></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>directories_too_deep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dircnt_max</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wb_buffmax</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(LOGICAL_BLOCK_SIZE * 32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wb_remaining</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((struct iso9660 *)(a)-&gt;format_data)-&gt;wbuff_remaining)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wb_offset</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((struct iso9660 *)(a)-&gt;format_data)-&gt;wbuff_offset + wb_buffmax() - wb_remaining(a))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>wbuff</name><index>[<expr><name>LOGICAL_BLOCK_SIZE</name> <operator>*</operator> <literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>wbuff_remaining</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>WB_TO_STREAM</name></decl>,
<decl><name>WB_TO_TEMP</name></decl>
}</block> <decl><name>wbuff_type</name></decl>;</enum>
<decl_stmt><decl><type><name>int64_t</name></type> <name>wbuff_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>wbuff_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>wbuff_tail</name></decl>;</decl_stmt>


<struct>struct <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>catalog_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>catalog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>boot_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>boot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>platform_id</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOT_PLATFORM_X86</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOT_PLATFORM_PPC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOT_PLATFORM_MAC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>media_type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOT_MEDIA_NO_EMULATION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOT_MEDIA_1_2M_DISKETTE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOT_MEDIA_1_44M_DISKETTE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOT_MEDIA_2_88M_DISKETTE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOT_MEDIA_HARD_DISK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>system_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>boot_load_seg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>boot_load_size</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOT_LOAD_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
}</block> <decl><name>el_torito</name></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>iso_option</name></name></type> <name>opt</name></decl>;</decl_stmt>
}</block>;</struct>




<enum>enum <name>VD_type</name> <block>{
<decl><name>VDT_BOOT_RECORD</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VDT_PRIMARY</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VDT_SUPPLEMENTARY</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VDT_TERMINATOR</name><init>=<expr><literal type="number">255</literal></expr></init></decl>
}</block>;</enum>




<enum>enum <name>dir_rec_type</name> <block>{
<decl><name>DIR_REC_VD</name></decl>,
<decl><name>DIR_REC_SELF</name></decl>,
<decl><name>DIR_REC_PARENT</name></decl>,
<decl><name>DIR_REC_NORMAL</name></decl>
}</block>;</enum>




<enum>enum <name>vdc</name> <block>{
<decl><name>VDC_STD</name></decl>,
<decl><name>VDC_LOWERCASE</name></decl>,
<decl><name>VDC_UCS2</name></decl>,
<decl><name>VDC_UCS2_DIRECT</name></decl>
}</block>;</enum>





<struct>struct <name>idr</name> <block>{
<struct>struct <name>idrent</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name></type> <name>rbnode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>wnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>avail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>weight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>noff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rename_num</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>idrent_pool</name></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name></type> <name>rbtree</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block> <decl><name>wait_list</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>pool_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pool_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>null_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>char_map</name><index>[<expr><literal type="number">0x80</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>char_type</name> <block>{
<decl><name>A_CHAR</name></decl>,
<decl><name>D_CHAR</name></decl>
}</block>;</enum>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iso9660_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iso9660_write_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>iso9660_write_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iso9660_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iso9660_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iso9660_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_system_identitier</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_str</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>joliet_allowed_char</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_str_utf16be</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vdc</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_str_a_characters_bp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vdc</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_str_d_characters_bp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vdc</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_VD_bp</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>VD_type</name></name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_unused_field_bp</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>extra_open_record</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ctl_extr_rec</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extra_close_record</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctl_extr_rec</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>extra_next_record</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctl_extr_rec</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>extra_get_record</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extra_tell_used_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctl_extr_rec</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>extra_setup_location</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_directory_record_rr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dir_rec_type</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_directory_record</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dir_rec_type</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vdd_type</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_dir_rec_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>dir_rec_type</name></name></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vdd_type</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>wb_buffptr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>wb_write_out</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>wb_consume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>wb_set_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write_null</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write_VD_terminator</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_file_identifier</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vdc</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>char_type</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write_VD</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write_VD_boot_record</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write_information_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write_path_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write_directory_descriptors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write_file_descriptors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write_rr_ER</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>calculate_path_table_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isofile_init_entry_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isofile_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isofile_free_all_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isofile_init_entry_data_file_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isofile_add_data_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type> <name>isofile_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isofile_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isofile_gen_utility_names</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isofile_register_hardlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isofile_connect_hardlink_files</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isofile_init_hardlinks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isofile_free_hardlinks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_clone_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_isoent_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isoent_free_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type> <name>isoent_create_virtual_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_cmp_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_cmp_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_add_child_head</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_add_child_tail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isoent_remove_child</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isoent_setup_directory_location</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>isoent_setup_file_location</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_path_component</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent_find_child</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent_find_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idr_relaxed_filenames</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idr_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idr_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>idr_ensure_poolsize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>idr_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_tree_ops</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idr_register</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idr_extend_identifier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idr_resolve</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idr_set_num</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idr_set_num_beutf16</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_gen_iso9660_identifier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_gen_joliet_identifier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_cmp_iso9660_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_cmp_node_iso9660</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_cmp_key_iso9660</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_cmp_joliet_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_cmp_node_joliet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_cmp_key_joliet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>path_table_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>path_table</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type> <name>path_table_last_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>path_table</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_make_path_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_find_out_boot_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isoent_create_boot_catalog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>fd_boot_image_size</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>make_boot_catalog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>setup_boot_information</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>zisofs_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zisofs_detect_magic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>zisofs_write_to_temp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>zisofs_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>zisofs_rewind_boot_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>zisofs_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>archive_write_set_format_iso9660</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_write_set_format_iso9660"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iso9660</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iso9660</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate iso9660 data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>max_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>vdd_type</name></name> <operator>=</operator> <name>VDD_PRIMARY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>pathtbl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>rootent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>max_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>vdd_type</name></name> <operator>=</operator> <name>VDD_JOLIET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>pathtbl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>isofile_init_entry_list</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>isofile_init_entry_data_file_list</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>isofile_init_hardlinks</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>directories_too_deep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>dircnt_max</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>=</operator> <call><name>wb_buffmax</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_type</name></name> <operator>=</operator> <name>WB_TO_TEMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_tail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>mbs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>volume_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>volume_identifier</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"CDROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>publisher_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>data_preparer_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>application_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>application_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>archive_version_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>copyright_file_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>abstract_file_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>bibliographic_file_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>catalog_filename</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>catalog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>catalog_filename</name></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"boot.catalog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_filename</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>platform_id</name></name> <operator>=</operator> <name>BOOT_PLATFORM_X86</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_load_seg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_load_size</name></name> <operator>=</operator> <name>BOOT_LOAD_SIZE</name></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>compression_level</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>abstract_file</name></name> <operator>=</operator> <name>OPT_ABSTRACT_FILE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>application_id</name></name> <operator>=</operator> <name>OPT_APPLICATION_ID_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>allow_vernum</name></name> <operator>=</operator> <name>OPT_ALLOW_VERNUM_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>biblio_file</name></name> <operator>=</operator> <name>OPT_BIBLIO_FILE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot</name></name> <operator>=</operator> <name>OPT_BOOT_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_catalog</name></name> <operator>=</operator> <name>OPT_BOOT_CATALOG_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_info_table</name></name> <operator>=</operator> <name>OPT_BOOT_INFO_TABLE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_load_seg</name></name> <operator>=</operator> <name>OPT_BOOT_LOAD_SEG_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_load_size</name></name> <operator>=</operator> <name>OPT_BOOT_LOAD_SIZE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_type</name></name> <operator>=</operator> <name>OPT_BOOT_TYPE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>compression_level</name></name> <operator>=</operator> <name>OPT_COMPRESSION_LEVEL_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>copyright_file</name></name> <operator>=</operator> <name>OPT_COPYRIGHT_FILE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name> <operator>=</operator> <name>OPT_ISO_LEVEL_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name> <operator>=</operator> <name>OPT_JOLIET_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>limit_depth</name></name> <operator>=</operator> <name>OPT_LIMIT_DEPTH_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>limit_dirs</name></name> <operator>=</operator> <name>OPT_LIMIT_DIRS_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>pad</name></name> <operator>=</operator> <name>OPT_PAD_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>publisher</name></name> <operator>=</operator> <name>OPT_PUBLISHER_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>=</operator> <name>OPT_RR_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>volume_id</name></name> <operator>=</operator> <name>OPT_VOLUME_ID_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>zisofs</name></name> <operator>=</operator> <name>OPT_ZISOFS_DEFAULT</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name> <operator>=</operator>
<call><name>isoent_create_virtual_dir</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirent</name></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirstr</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_to_utf16be</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_from_utf16be</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name> <operator>=</operator> <name>iso9660</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_name</name></name> <operator>=</operator> <literal type="string">"iso9660"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_options</name></name> <operator>=</operator> <name>iso9660_options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_write_header</name></name> <operator>=</operator> <name>iso9660_write_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_write_data</name></name> <operator>=</operator> <name>iso9660_write_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_finish_entry</name></name> <operator>=</operator> <name>iso9660_finish_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_close</name></name> <operator>=</operator> <name>iso9660_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name> <operator>=</operator> <name>iso9660_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>=</operator> <name>ARCHIVE_FORMAT_ISO9660</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <literal type="string">"ISO9660"</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_str_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>maxsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>maxsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Value is longer than %zu characters "</literal>
<literal type="string">"for option ``%s''"</literal></expr></argument>, <argument><expr><name>maxsize</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_num_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>low</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>neg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid value(empty) for option ``%s''"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>neg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>data</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid value for option ``%s''"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&gt;</operator> <name>high</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid value(over %d) for "</literal>
<literal type="string">"option ``%s''"</literal></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <name>low</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid value(under %d) for "</literal>
<literal type="string">"option ``%s''"</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>data</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso9660_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"abstract-file"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>get_str_opt</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>abstract_file_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ABSTRACT_FILE_SIZE</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>abstract_file</name></name> <operator>=</operator> <name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"application-id"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>get_str_opt</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>application_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>APPLICATION_IDENTIFIER_SIZE</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>application_id</name></name> <operator>=</operator> <name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"allow-vernum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>allow_vernum</name></name> <operator>=</operator> <name>value</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"biblio-file"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>get_str_opt</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>bibliographic_file_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>BIBLIO_FILE_SIZE</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>biblio_file</name></name> <operator>=</operator> <name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"boot"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_filename</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"boot-catalog"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>get_str_opt</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>catalog_filename</name></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_catalog</name></name> <operator>=</operator> <name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"boot-info-table"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_info_table</name></name> <operator>=</operator> <name>value</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"boot-load-seg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>seg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_load_seg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid_value</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>seg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>seg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>seg</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>seg</name> <operator>+=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">0x0a</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>seg</name> <operator>+=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">0x0a</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>seg</name> <operator>+=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>invalid_value</name>;</goto></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>seg</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid value(over 0xffff) for "</literal>
<literal type="string">"option ``%s''"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_load_seg</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>seg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_load_seg</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"boot-load-size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>get_num_opt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_load_size</name></name> <operator>=</operator> <name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_load_size</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>num</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"boot-type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid_value</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"no-emulation"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_type</name></name> <operator>=</operator> <name>OPT_BOOT_TYPE_NO_EMU</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"fd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_type</name></name> <operator>=</operator> <name>OPT_BOOT_TYPE_FD</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"hard-disk"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_type</name></name> <operator>=</operator> <name>OPT_BOOT_TYPE_HARD_DISK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>invalid_value</name>;</goto></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"compression-level"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
<name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid_value</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>compression_level</name></name> <operator>=</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>compression_level</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Option ``%s'' "</literal>
<literal type="string">"is not supported on this platform."</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"copyright-file"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>get_str_opt</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>copyright_file_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>COPYRIGHT_FILE_SIZE</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>copyright_file</name></name> <operator>=</operator> <name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"creation"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid_value</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"iso-level"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'4'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name> <operator>=</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<goto>goto <name>invalid_value</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"joliet"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name> <operator>=</operator> <name>OPT_JOLIET_DISABLE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name> <operator>=</operator> <name>OPT_JOLIET_ENABLE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name> <operator>=</operator> <name>OPT_JOLIET_LONGNAME</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>invalid_value</name>;</goto></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"limit-depth"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>limit_depth</name></name> <operator>=</operator> <name>value</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"limit-dirs"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>limit_dirs</name></name> <operator>=</operator> <name>value</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"pad"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>pad</name></name> <operator>=</operator> <name>value</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>get_str_opt</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>publisher_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>PUBLISHER_IDENTIFIER_SIZE</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>publisher</name></name> <operator>=</operator> <name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"rockridge"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Rockridge"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>=</operator> <name>OPT_RR_DISABLED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>=</operator> <name>OPT_RR_USEFUL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"strict"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>=</operator> <name>OPT_RR_STRICT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"useful"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>=</operator> <name>OPT_RR_USEFUL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>invalid_value</name>;</goto></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"volume-id"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>get_str_opt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>volume_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>VOLUME_IDENTIFIER_SIZE</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>volume_id</name></name> <operator>=</operator> <name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"zisofs"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>zisofs</name></name> <operator>=</operator> <name>OPT_ZISOFS_DISABLED</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>zisofs</name></name> <operator>=</operator> <name>OPT_ZISOFS_DIRECT</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"``zisofs'' "</literal>
<literal type="string">"is not supported on this platform."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>




<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>

<label><name>invalid_value</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid value for option ``%s''"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso9660_write_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>need_multi_extent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFLNK</name>
<operator>&amp;&amp;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>==</operator> <name>OPT_RR_DISABLED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Ignore symlink file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFREG</name> <operator>&amp;&amp;</operator>
<call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MULTI_EXTENT_SIZE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Ignore over %lld bytes file. "</literal>
<literal type="string">"This file too large."</literal></expr></argument>,
<argument><expr><name>MULTI_EXTENT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>need_multi_extent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>isofile_new</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isofile_gen_utility_names</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>isofile_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>isofile_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>isofile_add_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>isoent</name> <operator>=</operator> <call><name>isoent_new</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isoent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>dircnt</name></name> <operator>&gt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>dircnt_max</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>dircnt_max</name></name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>dircnt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isoent_tree</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isoent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name></name> <operator>!=</operator> <name>file</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AE_IFREG</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_entry_nlink</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isofile_register_hardlink</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name> <operator>=</operator> <call><name>__archive_mktemp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't create temporary file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>offset_of_temp</name></name> <operator>=</operator> <call><name>wb_offset</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>content</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>zisofs_init</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>=</operator> <call><name>archive_entry_size</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_to_temp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't write to temporary file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>-=</operator> <name>written</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wb_write_to_temp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xp</name> <init>= <expr><name>buff</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>xs</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>wb_buffmax</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>s</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>xs</name> <operator>=</operator> <name>s</name> <operator>%</operator> <name>LOGICAL_BLOCK_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name> <operator>+=</operator> <name>s</name> <operator>-</operator> <name>xs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>s</name> <operator>-</operator> <name>xs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>xs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>xp</name> <operator>+=</operator> <name>s</name> <operator>-</operator> <name>xs</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>xs</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>xs</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>xs</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xp</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wb_write_padding_to_temp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>csize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ns</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>csize</name> <operator>%</operator> <name>LOGICAL_BLOCK_SIZE</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ns</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_null</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name> <operator>-</operator> <name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>write_iso9660_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ws</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't create temporary file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ws</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>need_multi_extent</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>ws</name><operator>)</operator> <operator>&gt;=</operator>
<operator>(</operator><name>MULTI_EXTENT_SIZE</name> <operator>-</operator> <name>LOGICAL_BLOCK_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>content</name></name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>MULTI_EXTENT_SIZE</name> <operator>-</operator> <name>LOGICAL_BLOCK_SIZE</name> <operator>-</operator>
<name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>detect_magic</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zisofs_detect_magic</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>making</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>zisofs_write_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>wb_write_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>ts</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>wb_write_padding_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator>
<operator>(</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name>
<operator>+</operator> <name>LOGICAL_BLOCK_SIZE</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>LOGICAL_BLOCK_BITS</name><operator>)</operator></expr>;</expr_stmt>




<expr_stmt><expr><name>ws</name> <operator>-=</operator> <name>ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buff</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name><operator>)</operator> <operator>+</operator> <name>ts</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>con</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate content data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>offset_of_temp</name></name> <operator>=</operator> <call><name>wb_offset</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>detect_magic</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zisofs_detect_magic</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>making</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>zisofs_write_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>wb_write_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>ws</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>iso9660_write_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AE_IFREG</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>write_iso9660_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>-=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso9660_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AE_IFREG</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>null_length</name></name><operator>)</operator></expr>?</condition><then>
<expr><name><name>a</name><operator>-&gt;</operator><name>null_length</name></name></expr></then><else>: <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_iso9660_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>making</name></name> <operator>&amp;&amp;</operator> <call><name>zisofs_finish_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>wb_write_padding_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator>
<operator>(</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name>
<operator>+</operator> <name>LOGICAL_BLOCK_SIZE</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>LOGICAL_BLOCK_BITS</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>isofile_add_data_file</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso9660_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>blocks</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wb_write_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>isoent_find_out_boot_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>zisofs_rewind_boot_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wb_write_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>isoent_create_boot_catalog</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>isoent_clone_tree</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>rootent</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_to_utf16be</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_to_utf16be</name></name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_to_utf16be</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_from_utf16be</name></name> <operator>=</operator>
<call><name>archive_string_conversion_from_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_from_utf16be</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>isoent_make_path_table</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>blocks</name> <operator>=</operator> <name>SYSTEM_AREA_BLOCK</name>
<operator>+</operator> <name>PRIMARY_VOLUME_DESCRIPTOR_BLOCK</name>
<operator>+</operator> <name>VOLUME_DESCRIPTOR_SET_TERMINATOR_BLOCK</name>
<operator>+</operator> <name>NON_ISO_FILE_SYSTEM_INFORMATION_BLOCK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name>BOOT_RECORD_DESCRIPTOR_BLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name>SUPPLEMENTARY_VOLUME_DESCRIPTOR_BLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name>SUPPLEMENTARY_VOLUME_DESCRIPTOR_BLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>location_type_L_path_table</name></name> <operator>=</operator> <name>blocks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>path_table_block</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>location_type_M_path_table</name></name> <operator>=</operator> <name>blocks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>path_table_block</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>location_type_L_path_table</name></name> <operator>=</operator> <name>blocks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>path_table_block</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>location_type_M_path_table</name></name> <operator>=</operator> <name>blocks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>path_table_block</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>isoent_setup_directory_location</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>total_dir_block</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>isoent_setup_directory_location</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>total_dir_block</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>location_rrip_er</name></name> <operator>=</operator> <name>blocks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name>RRIP_ER_BLOCK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>isoent_setup_file_location</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>total_file_block</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot</name></name> <operator>&amp;&amp;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_info_table</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>setup_boot_information</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>volume_space_size</name></name> <operator>=</operator> <name>blocks</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>pad</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>volume_space_size</name></name> <operator>+=</operator> <name>PADDING_BLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>volume_sequence_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>







<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>=</operator> <call><name>wb_buffmax</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_type</name></name> <operator>=</operator> <name>WB_TO_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_tail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_null</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>SYSTEM_AREA_BLOCK</name> <operator>*</operator> <name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_VD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_VD_boot_record</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>vdd_type</name></name> <operator>=</operator> <name>VDD_ENHANCED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_VD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>vdd_type</name></name> <operator>=</operator> <name>VDD_PRIMARY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_VD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_VD_terminator</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_information_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_path_table</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_path_table</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_path_table</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_path_table</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_directory_descriptors</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_directory_descriptors</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_rr_ER</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_file_descriptors</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>pad</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_null</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>PADDING_BLOCK</name> <operator>*</operator> <name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>directories_too_deep</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"%s: Directories too deep."</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>directories_too_deep</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wb_write_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso9660_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>zisofs_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>isoent_free_all</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>max_depth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>pathtbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sorted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>pathtbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>isoent_free_all</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>rootent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>max_depth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>pathtbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sorted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>pathtbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>isofile_free_all_entries</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>isofile_free_hardlinks</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>volume_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>publisher_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>data_preparer_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>application_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>copyright_file_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>abstract_file_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>bibliographic_file_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>catalog_filename</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_filename</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>mbs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_system_identitier</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>system_id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UTSNAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>system_id</name></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>sysname</name></name></expr></argument>, <argument><expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_id</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>system_id</name></expr></argument>, <argument><expr><literal type="string">"Windows"</literal></expr></argument>, <argument><expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_id</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>system_id</name></expr></argument>, <argument><expr><literal type="string">"Unknown"</literal></expr></argument>, <argument><expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_id</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_str</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>||</operator> <name><name>map</name><index>[<expr><name>c</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x5f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument> , <argument><expr><name>f</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>joliet_allowed_char</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>low</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>utf16</name> <init>= <expr><operator>(</operator><name>high</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>low</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>utf16</name> <operator>&lt;=</operator> <literal type="number">0x001F</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>utf16</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x002A</literal></expr>:</case>
<case>case <expr><literal type="number">0x002F</literal></expr>:</case>
<case>case <expr><literal type="number">0x003A</literal></expr>:</case>
<case>case <expr><literal type="number">0x003B</literal></expr>:</case>
<case>case <expr><literal type="number">0x003F</literal></expr>:</case>
<case>case <expr><literal type="number">0x005C</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_str_utf16be</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>uf</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vdc</name></name></type> <name>vdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>onepad</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>onepad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>onepad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vdc</name> <operator>==</operator> <name>VDC_UCS2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_strncpy_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_to_utf16be</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for UTF-16BE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>utf16be</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>u16</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>u16</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>joliet_allowed_char</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0x005F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>l</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>uf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>onepad</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>a_characters_map</name><index>[<expr><literal type="number">0x80</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>a1_characters_map</name><index>[<expr><literal type="number">0x80</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>d_characters_map</name><index>[<expr><literal type="number">0x80</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>d1_characters_map</name><index>[<expr><literal type="number">0x80</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_str_a_characters_bp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vdc</name></name></type> <name>vdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>vdc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VDC_STD</name></expr>:</case>
<expr_stmt><expr><call><name>set_str</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><name>from</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>,
<argument><expr><name>a_characters_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VDC_LOWERCASE</name></expr>:</case>
<expr_stmt><expr><call><name>set_str</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><name>from</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>,
<argument><expr><name>a1_characters_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VDC_UCS2</name></expr>:</case>
<case>case <expr><name>VDC_UCS2_DIRECT</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_str_utf16be</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bp</name><operator>+</operator><name>from</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="number">0x0020</literal></expr></argument>, <argument><expr><name>vdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_str_d_characters_bp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vdc</name></name></type> <name>vdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>vdc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VDC_STD</name></expr>:</case>
<expr_stmt><expr><call><name>set_str</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><name>from</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>,
<argument><expr><name>d_characters_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VDC_LOWERCASE</name></expr>:</case>
<expr_stmt><expr><call><name>set_str</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><name>from</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>,
<argument><expr><name>d1_characters_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VDC_UCS2</name></expr>:</case>
<case>case <expr><name>VDC_UCS2_DIRECT</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_str_utf16be</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bp</name><operator>+</operator><name>from</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="number">0x0020</literal></expr></argument>, <argument><expr><name>vdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_VD_bp</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>VD_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>ver</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"CD001"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>set_unused_field_bp</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bp</name> <operator>+</operator> <name>from</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>set_num_711</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>set_num_712</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>set_num_721</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>set_num_722</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_num_723</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>set_num_731</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>set_num_732</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_be32enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>set_num_733</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be32enc</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_digit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<while>while <condition>(<expr><name>s</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TM_TM_GMTOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_gmoffset</name><parameter_list>(<parameter><type><name>tm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tm)-&gt;tm_gmtoff)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TM___TM_GMTOFF</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_gmoffset</name><parameter_list>(<parameter><type><name>tm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tm)-&gt;__tm_gmtoff)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>get_gmoffset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__GET_TIMEZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_get_timezone</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>_timezone</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>timezone</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>offset</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">3600</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_tmfromtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LOCALTIME_R</name></expr></cpp:if>
<expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE__LOCALTIME64_S</name></expr></cpp:elif>
<decl_stmt><decl><type><name>__time64_t</name></type> <name>tmp_t</name> <init>= <expr><operator>(</operator><name>__time64_t</name><operator>)</operator> <operator>*</operator><name>t</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_localtime64_s</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_date_time</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_tmfromtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_digit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_digit</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_digit</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_digit</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_digit</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_digit</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_digit</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_712</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><call><name>get_gmoffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call><operator>/</operator><operator>(</operator><literal type="number">60</literal><operator>*</operator><literal type="number">15</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_date_time_null</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_time_915</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_tmfromtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_712</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><call><name>get_gmoffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call><operator>/</operator><operator>(</operator><literal type="number">60</literal><operator>*</operator><literal type="number">15</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_SUSP_CE</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>p</name> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
















<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>RR_CE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">13</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">21</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>RR_CE_SIZE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>extra_open_record</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dr_len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ctl_extr_rec</name></name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>dr_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>use_extr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>isoent</name></name> <operator>=</operator> <name>isoent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>ce_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>cur_len</name></name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>dr_len</name></name> <operator>=</operator> <name>dr_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>DR_LIMIT</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>bp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>extra_close_record</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctl_extr_rec</name></name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ce_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ce_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>ce_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>cur_len</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>cur_len</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>bp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>bp</name><index>[<expr><name><name>ctl</name><operator>-&gt;</operator><name>cur_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>use_extr</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>ce_ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_SUSP_CE</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>ce_ptr</name></name></expr></argument>, <argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>extr_loc</name></name></expr></argument>,
<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>extr_off</name></name></expr></argument>, <argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>cur_len</name></name> <operator>-</operator> <name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>dr_len</name></name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>cur_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extra_space</name><parameter_list>(<parameter><type><name>ctl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ctl)-&gt;limit - (ctl)-&gt;cur_len)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>extra_next_record</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctl_extr_rec</name></name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cur_len</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>cur_len</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>extra_close_record</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>RR_CE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>use_extr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>bp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>ce_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>bp</name><index>[<expr><name>cur_len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>extra_get_record</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>isoent</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>extr_off</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>extr_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>extra_get_record</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>isoent</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>cur_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>extra_next_record</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ctl</name><operator>-&gt;</operator><name>bp</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>extr_rec</name></name> <modifier>*</modifier></type>
<name>extra_last_record</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator>struct <name>extr_rec</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>last</name></name><operator>)</operator>
<operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>extr_rec</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>extra_get_record</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>space</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>off</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>extr_rec</name></name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>isoent</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rec</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>current</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>DR_SAFETY</name> <operator>&gt;</operator> <name>LOGICAL_BLOCK_SIZE</name> <operator>-</operator> <name><name>rec</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name>extra_last_record</name><argument_list>(<argument><expr><name>isoent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rec</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>DR_SAFETY</name> <operator>&gt;</operator> <name>LOGICAL_BLOCK_SIZE</name> <operator>-</operator> <name><name>rec</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rec</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>last</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>last</name></name> <operator>=</operator>
<operator>&amp;</operator><operator>(</operator><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>rec</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>space</name> <operator>=</operator> <name>LOGICAL_BLOCK_SIZE</name> <operator>-</operator> <name><name>rec</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name>DR_SAFETY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>space</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>space</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>off</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>loc</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>location</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>extra_tell_used_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctl_extr_rec</name></name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>extr_rec</name></name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>use_extr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>isoent</name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>isoent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>current</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>cur_len</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>extra_setup_location</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>extr_rec</name></name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>cnt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_directory_record_rr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dr_len</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dir_rec_type</name></name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>rr_flag</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RR_USE_PX</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RR_USE_PN</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RR_USE_SL</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RR_USE_NM</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RR_USE_CL</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RR_USE_PL</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RR_USE_RE</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RR_USE_TF</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ctl_extr_rec</name></name></type> <name>ctl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>rr_parent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pxent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_open_record</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>dr_len</name></expr></argument>, <argument><expr><name>isoent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>DIR_REC_PARENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rr_parent</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>rr_parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pxent</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rr_parent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>isoent</name> <operator>=</operator> <name>rr_parent</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>isoent</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rr_parent</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pxent</name> <operator>=</operator> <name>isoent</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>DIR_REC_NORMAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rr_flag</name> <operator>=</operator> <name>RR_USE_PX</name> <operator>|</operator> <name>RR_USE_TF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rr_parent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rr_flag</name> <operator>|=</operator> <name>RR_USE_PL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rr_flag</name> <operator>=</operator> <name>RR_USE_PX</name> <operator>|</operator> <name>RR_USE_NM</name> <operator>|</operator> <name>RR_USE_TF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFLNK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rr_flag</name> <operator>|=</operator> <name>RR_USE_SL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>rr_parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rr_flag</name> <operator>|=</operator> <name>RR_USE_RE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>rr_child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rr_flag</name> <operator>|=</operator> <name>RR_USE_CL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFCHR</name> <operator>||</operator>
<call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFBLK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rr_flag</name> <operator>|=</operator> <name>RR_USE_PN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPAT_MKISOFS</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>virtual</name></name> <operator>&amp;&amp;</operator>
<name><name>isoent</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"rr_moved"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rr_flag</name> <operator>|=</operator> <name>RR_USE_RE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>DIR_REC_SELF</name> <operator>&amp;&amp;</operator> <name>isoent</name> <operator>==</operator> <name><name>isoent</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xBE</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xEF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_next_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>rr_flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>rr_flag</name> <operator>&amp;</operator> <name>RR_USE_NM</name></expr>)</condition> <block>{<block_content>









<decl_stmt><decl><type><name>size_t</name></type> <name>nmlen</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nm</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nmmax</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_next_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'N'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'M'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nmmax</name> <operator>=</operator> <call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nmmax</name> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nmmax</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>nmlen</name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;</operator> <name>nmmax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nmmax</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>nm</name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nmlen</name> <operator>-=</operator> <name>length</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nm</name> <operator>+=</operator> <name>length</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_next_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nmmax</name> <operator>=</operator> <call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nmmax</name> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nmmax</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'N'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'M'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nmlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>nm</name></expr></argument>, <argument><expr><name>nmlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>rr_flag</name> <operator>&amp;</operator> <name>RR_USE_PX</name></expr>)</condition> <block>{<block_content>












<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">44</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_next_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>gid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>archive_entry_mode</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <call><name>archive_entry_uid</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gid</name> <operator>=</operator> <call><name>archive_entry_gid</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>==</operator> <name>OPT_RR_USEFUL</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>mode</name> <operator>|=</operator> <literal type="number">0444</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <literal type="number">0111</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <literal type="number">0111</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0222</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">07000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">13</literal></expr></argument>,
<argument><expr><call><name>archive_entry_nlink</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">21</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">29</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pxent</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">37</literal></expr></argument>, <argument><expr><name><name>pxent</name><operator>-&gt;</operator><name>dir_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>hardlink_target</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">37</literal></expr></argument>,
<argument><expr><name><name>file</name><operator>-&gt;</operator><name>hardlink_target</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">37</literal></expr></argument>,
<argument><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>rr_flag</name> <operator>&amp;</operator> <name>RR_USE_SL</name></expr>)</condition> <block>{<block_content>
























<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sl_last</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_next_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sl</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>symlink</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sl_last</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cl</name></decl>, <decl><type ref="prev"/><name>cldmy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sllen</name></decl>, <decl><type ref="prev"/><name>slmax</name></decl>;</decl_stmt>

<expr_stmt><expr><name>slmax</name> <operator>=</operator> <call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slmax</name> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slmax</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <operator>&amp;</operator><name><name>bp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <name>cl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sllen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>sl</name> <operator>&amp;&amp;</operator> <name>sllen</name> <operator>+</operator> <literal type="number">11</literal> <operator>&lt;</operator> <name>slmax</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sl_last</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><name>nc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <name>nc</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cf</name> <operator>=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nc</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sllen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sl</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sl_last</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>sl_last</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>sl_last</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator>
<name><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>nc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <name>nc</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cf</name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nc</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sllen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sl</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sl</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>sl_last</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>sl_last</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>sl_last</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>nc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <name>nc</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cf</name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nc</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sllen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sl</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sl</name> <operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>sl_last</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>cl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <name>nc</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cl</name> <operator>=</operator> <name>nc</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cl</name> <operator>=</operator> <operator>&amp;</operator><name>cldmy</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>sllen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sl_last</name> <operator>=</operator> <operator>*</operator><name>sl</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sl_last</name> <operator>=</operator> <operator>*</operator><name>sl</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nc</name><operator>++</operator> <operator>=</operator> <name>sl_last</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>cl</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sllen</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name>sllen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>cf</name> <operator>|=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>








<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_next_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name>sllen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>rr_flag</name> <operator>&amp;</operator> <name>RR_USE_TF</name></expr>)</condition> <block>{<block_content>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TF_CREATION</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TF_MODIFY</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TF_ACCESS</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TF_ATTRIBUTES</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TF_BACKUP</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TF_EXPIRATION</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TF_EFFECTIVE</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TF_LONG_FORM</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>tf_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tf_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPAT_MKISOFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_birthtime_is_set</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>archive_entry_birthtime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator>
<call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tf_flags</name> <operator>|=</operator> <name>TF_CREATION</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_mtime_is_set</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tf_flags</name> <operator>|=</operator> <name>TF_MODIFY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_atime_is_set</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tf_flags</name> <operator>|=</operator> <name>TF_ACCESS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_ctime_is_set</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tf_flags</name> <operator>|=</operator> <name>TF_ATTRIBUTES</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_next_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'T'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'F'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>tf_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tf_flags</name> <operator>&amp;</operator> <name>TF_CREATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_time_915</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_entry_birthtime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tf_flags</name> <operator>&amp;</operator> <name>TF_MODIFY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_time_915</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tf_flags</name> <operator>&amp;</operator> <name>TF_ACCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_time_915</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_entry_atime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tf_flags</name> <operator>&amp;</operator> <name>TF_ATTRIBUTES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_time_915</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_entry_ctime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>rr_flag</name> <operator>&amp;</operator> <name>RR_USE_RE</name></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_next_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>rr_flag</name> <operator>&amp;</operator> <name>RR_USE_PL</name></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_next_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>,
<argument><expr><name><name>rr_parent</name><operator>-&gt;</operator><name>dir_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>rr_flag</name> <operator>&amp;</operator> <name>RR_USE_CL</name></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_next_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>,
<argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>rr_child</name><operator>-&gt;</operator><name>dir_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>rr_flag</name> <operator>&amp;</operator> <name>RR_USE_PN</name></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_next_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dev</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'N'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>archive_entry_rdev</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>dev</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name> <operator>+</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>dev</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>header_size</name></name></expr>)</condition> <block>{<block_content>












<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>extra_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>extra_next_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'Z'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'F'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'z'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>header_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>log2_bs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>DIR_REC_SELF</name> <operator>&amp;&amp;</operator> <name>isoent</name> <operator>==</operator> <name><name>isoent</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name>RR_CE_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_SUSP_CE</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>location_rrip_er</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RRIP_ER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>extra_tell_used_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>extra_close_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>ctl</name><operator>.</operator><name>dr_len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_directory_record</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dir_rec_type</name></name></type> <name>t</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vdd_type</name></name></type> <name>vdd_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dr_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fi_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>





<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DIR_REC_VD</name></expr>:</case>
<expr_stmt><expr><name>dr_len</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>dr_len</name><operator>.</operator><name>vd</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DIR_REC_SELF</name></expr>:</case>
<expr_stmt><expr><name>dr_len</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>dr_len</name><operator>.</operator><name>self</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DIR_REC_PARENT</name></expr>:</case>
<expr_stmt><expr><name>dr_len</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>dr_len</name><operator>.</operator><name>parent</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DIR_REC_NORMAL</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>dr_len</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>dr_len</name><operator>.</operator><name>normal</name></name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>dr_len</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>DIR_REC_NORMAL</name> <operator>&amp;&amp;</operator> <name><name>isoent</name><operator>-&gt;</operator><name>identifier</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fi_len</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>id_len</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fi_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>xisoent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>DIR_REC_PARENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xisoent</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>xisoent</name> <operator>=</operator> <name>isoent</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>hardlink_target</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>hardlink_target</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xisoent</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>FILE_FLAG_DIRECTORY</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>FILE_FLAG_MULTI_EXTENT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>p</name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xisoent</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>xisoent</name><operator>-&gt;</operator><name>dir_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xisoent</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">11</literal></expr></argument>,
<argument><expr><name><name>xisoent</name><operator>-&gt;</operator><name>dir_block</name></name> <operator>*</operator> <name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">11</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>







<expr_stmt><expr><call><name>set_time_915</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">19</literal></expr></argument>,
<argument><expr><call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name><name>xisoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_723</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">29</literal></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>volume_sequence_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">33</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>fi_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DIR_REC_VD</name></expr>:</case>
<case>case <expr><name>DIR_REC_SELF</name></expr>:</case>
<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DIR_REC_PARENT</name></expr>:</case>
<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DIR_REC_NORMAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>identifier</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">34</literal></expr></argument>, <argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument>, <argument><expr><name>fi_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>dr_len</name> <operator>=</operator> <literal type="number">33</literal> <operator>+</operator> <name>fi_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dr_len</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dr_len</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><name>dr_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>DIR_REC_VD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>dr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>dr_len</name><operator>.</operator><name>vd</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>dr_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>dr_len</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>&amp;&amp;</operator> <name>vdd_type</name> <operator>!=</operator> <name>VDD_JOLIET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dr_len</name> <operator>=</operator> <call><name>set_directory_record_rr</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>dr_len</name></expr></argument>,
<argument><expr><name>isoent</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>dr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>




<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DIR_REC_VD</name></expr>:</case>



<break>break;</break>
<case>case <expr><name>DIR_REC_SELF</name></expr>:</case>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>dr_len</name><operator>.</operator><name>self</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>dr_len</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DIR_REC_PARENT</name></expr>:</case>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>dr_len</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>dr_len</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DIR_REC_NORMAL</name></expr>:</case>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>dr_len</name><operator>.</operator><name>normal</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>dr_len</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>dr_len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>get_dir_rec_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>dir_rec_type</name></name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vdd_type</name></name></type> <name>vdd_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>set_directory_record</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SIZE_MAX</name></expr></argument>,
<argument><expr><name>isoent</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>vdd_type</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>wb_buffptr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof>
<operator>-</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wb_write_out</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>wsize</name></decl>, <decl><type ref="prev"/><name>nw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <name>wsize</name> <operator>%</operator> <name>LOGICAL_BLOCK_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_type</name></name> <operator>==</operator> <name>WB_TO_STREAM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>__archive_write_output</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>, <argument><expr><name>wsize</name> <operator>-</operator> <name>nw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>write_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>, <argument><expr><name>wsize</name> <operator>-</operator> <name>nw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name> <operator>+=</operator> <name>wsize</name> <operator>-</operator> <name>nw</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name> <operator>&gt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_written</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_written</name></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>-=</operator> <name>nw</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name> <operator>+</operator> <name>wsize</name> <operator>-</operator> <name>nw</name></expr></argument>, <argument><expr><name>nw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wb_consume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>||</operator>
<name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Internal Programming error: iso9660:wb_consume()"</literal>
<literal type="string">" size=%jd, wbuff_remaining=%jd"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>&lt;</operator> <name>LOGICAL_BLOCK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>wb_write_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wb_set_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>used</name></decl>, <decl><type ref="prev"/><name>ext_bytes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_type</name></name> <operator>!=</operator> <name>WB_TO_TEMP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Internal Programming error: iso9660:wb_set_offset()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name> <operator>+</operator> <name>used</name> <operator>&gt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_tail</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_tail</name></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name> <operator>+</operator> <name>used</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name> <operator>&lt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_written</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>write_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>used</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_written</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>wb_write_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>off</name> <operator>&lt;=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_tail</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator>
<operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>off</name> <operator>-</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ext_bytes</name> <operator>=</operator> <name>off</name> <operator>-</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_tail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof>
<operator>-</operator> <operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_tail</name></name> <operator>-</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_offset</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ext_bytes</name> <operator>&gt;=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write_null</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ext_bytes</name> <operator>-=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>wbuff_remaining</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>ext_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write_null</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ext_bytes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_null</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>remaining</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>remaining</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>old</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>wsize</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wsize</name> <operator>&gt;</operator> <name>remaining</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wsize</name> <operator>=</operator> <name>remaining</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>wsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>wsize</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_VD_terminator</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_VD_bp</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>VDT_TERMINATOR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_unused_field_bp</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_file_identifier</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vdc</name></name></type> <name>vdc</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leading_under</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>char_type</name></name></type> <name>char_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>identifier</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>leading_under</name> <operator>&amp;&amp;</operator> <name><name>id</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>char_type</name> <operator>==</operator> <name>A_CHAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_str_a_characters_bp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>vdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_str_d_characters_bp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>vdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ids</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>leading_under</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ids</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>isoent</name> <operator>=</operator> <call><name>isoent_find_entry</name><argument_list>(<argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>rootent</name></name></expr></argument>, <argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isoent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Not Found %s `%s'."</literal></expr></argument>,
<argument><expr><name>label</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>+</operator> <name><name>isoent</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name> <operator>==</operator> <name>VDD_JOLIET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>identifier</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name> <operator>==</operator> <name>VDD_JOLIET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>identifier</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vdc</name> <operator>=</operator> <name>VDC_UCS2_DIRECT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>char_type</name> <operator>==</operator> <name>A_CHAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_str_a_characters_bp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>,
<argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>vdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_str_d_characters_bp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>,
<argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>vdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>char_type</name> <operator>==</operator> <name>A_CHAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_str_a_characters_bp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_str_d_characters_bp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_VD</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>volume_set_size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>identifier</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>VD_type</name></name></type> <name>vdt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vdc</name></name></type> <name>vdc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>vd_ver</name></decl>, <decl><type ref="prev"/><name>fst_ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VDD_JOLIET</name></expr>:</case>
<expr_stmt><expr><name>vdt</name> <operator>=</operator> <name>VDT_SUPPLEMENTARY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vd_ver</name> <operator>=</operator> <name>fst_ver</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vdc</name> <operator>=</operator> <name>VDC_UCS2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VDD_ENHANCED</name></expr>:</case>
<expr_stmt><expr><name>vdt</name> <operator>=</operator> <name>VDT_SUPPLEMENTARY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vd_ver</name> <operator>=</operator> <name>fst_ver</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vdc</name> <operator>=</operator> <name>VDC_LOWERCASE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VDD_PRIMARY</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>vdt</name> <operator>=</operator> <name>VDT_PRIMARY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vd_ver</name> <operator>=</operator> <name>fst_ver</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPAT_MKISOFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>vdc</name> <operator>=</operator> <name>VDC_LOWERCASE</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>vdc</name> <operator>=</operator> <name>VDC_STD</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_VD_bp</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>vdt</name></expr></argument>, <argument><expr><name>vd_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_unused_field_bp</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_system_identitier</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_str_a_characters_bp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>vdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_str_d_characters_bp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>volume_identifier</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>vdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_unused_field_bp</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">73</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">81</literal></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>volume_space_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name> <operator>==</operator> <name>VDD_JOLIET</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">89</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x25</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">90</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x2F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">91</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x45</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bp</name> <operator>+</operator> <literal type="number">92</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">120</literal> <operator>-</operator> <literal type="number">92</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_unused_field_bp</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">89</literal></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_num_723</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">121</literal></expr></argument>, <argument><expr><name>volume_set_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_723</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">125</literal></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>volume_sequence_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_723</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">129</literal></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_733</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">133</literal></expr></argument>, <argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>path_table_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_731</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">141</literal></expr></argument>, <argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>location_type_L_path_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_731</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">145</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_732</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">149</literal></expr></argument>, <argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>location_type_M_path_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_732</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">153</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_directory_record</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">157</literal></expr></argument>, <argument><expr><literal type="number">190</literal><operator>-</operator><literal type="number">157</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>rootent</name></name></expr></argument>,
<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>DIR_REC_VD</name></expr></argument>, <argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_str_d_characters_bp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">191</literal></expr></argument>, <argument><expr><literal type="number">318</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>vdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_file_identifier</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">319</literal></expr></argument>, <argument><expr><literal type="number">446</literal></expr></argument>, <argument><expr><name>vdc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>vdd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>publisher_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"Publisher File"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>A_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_file_identifier</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">447</literal></expr></argument>, <argument><expr><literal type="number">574</literal></expr></argument>, <argument><expr><name>vdc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>vdd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>data_preparer_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"Data Preparer File"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>A_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_file_identifier</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">575</literal></expr></argument>, <argument><expr><literal type="number">702</literal></expr></argument>, <argument><expr><name>vdc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>vdd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>application_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"Application File"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>A_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_file_identifier</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">703</literal></expr></argument>, <argument><expr><literal type="number">739</literal></expr></argument>, <argument><expr><name>vdc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>vdd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>copyright_file_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"Copyright File"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_file_identifier</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">740</literal></expr></argument>, <argument><expr><literal type="number">776</literal></expr></argument>, <argument><expr><name>vdc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>vdd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>abstract_file_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"Abstract File"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_file_identifier</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">777</literal></expr></argument>, <argument><expr><literal type="number">813</literal></expr></argument>, <argument><expr><name>vdc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>vdd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>bibliographic_file_identifier</name></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"Bibliongraphic File"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_date_time</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">814</literal></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_date_time</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">831</literal></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_date_time_null</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">848</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_date_time</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">865</literal></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">882</literal></expr>]</index></name> <operator>=</operator> <name>fst_ver</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">883</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bp</name> <operator>+</operator> <literal type="number">884</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">1395</literal> <operator>-</operator> <literal type="number">884</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_unused_field_bp</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">1396</literal></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_VD_boot_record</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_VD_bp</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>VDT_BOOT_RECORD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"EL TORITO SPECIFICATION"</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_unused_field_bp</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>+</operator><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_unused_field_bp</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_731</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">72</literal></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>catalog</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_unused_field_bp</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">76</literal></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>keytype</name> <block>{
<decl><name>KEY_FLG</name></decl>,
<decl><name>KEY_STR</name></decl>,
<decl><name>KEY_INT</name></decl>,
<decl><name>KEY_HEX</name></decl>
}</block>;</enum>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_option_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>keytype</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>opt</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="char">' '</literal></expr></then><else>:<expr><literal type="char">','</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KEY_FLG</name></expr>:</case>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"%c%s%s"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>d</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"!"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_STR</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"%c%s=%s"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_INT</name></expr>:</case>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"%c%s=%d"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_HEX</name></expr>:</case>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"%c%s=%x"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>opt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_information_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>info_size</name> <init>= <expr><name>LOGICAL_BLOCK_SIZE</name> <operator>*</operator>
<name>NON_ISO_FILE_SYSTEM_INFORMATION_BLOCK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>info_size</name> <operator>&gt;</operator> <call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wb_write_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>info_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__CTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>__time64_t</name></type> <name>iso9660_birth_time_tmp</name> <init>= <expr><operator>(</operator><name>__time64_t</name><operator>)</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_ctime64_s</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name>iso9660_birth_time_tmp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>ctime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>,
<argument><expr><literal type="string">"INFO %s%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>archive_version_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>abstract_file</name></name> <operator>!=</operator> <name>OPT_ABSTRACT_FILE_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"abstract-file"</literal></expr></argument>,
<argument><expr><name>KEY_STR</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>abstract_file_identifier</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>application_id</name></name> <operator>!=</operator> <name>OPT_APPLICATION_ID_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"application-id"</literal></expr></argument>,
<argument><expr><name>KEY_STR</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>application_identifier</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>allow_vernum</name></name> <operator>!=</operator> <name>OPT_ALLOW_VERNUM_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"allow-vernum"</literal></expr></argument>,
<argument><expr><name>KEY_FLG</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>allow_vernum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>biblio_file</name></name> <operator>!=</operator> <name>OPT_BIBLIO_FILE_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"biblio-file"</literal></expr></argument>,
<argument><expr><name>KEY_STR</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>bibliographic_file_identifier</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot</name></name> <operator>!=</operator> <name>OPT_BOOT_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"boot"</literal></expr></argument>,
<argument><expr><name>KEY_STR</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_filename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_catalog</name></name> <operator>!=</operator> <name>OPT_BOOT_CATALOG_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"boot-catalog"</literal></expr></argument>,
<argument><expr><name>KEY_STR</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>catalog_filename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_info_table</name></name> <operator>!=</operator> <name>OPT_BOOT_INFO_TABLE_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"boot-info-table"</literal></expr></argument>,
<argument><expr><name>KEY_FLG</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_info_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_load_seg</name></name> <operator>!=</operator> <name>OPT_BOOT_LOAD_SEG_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"boot-load-seg"</literal></expr></argument>,
<argument><expr><name>KEY_HEX</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_load_seg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_load_size</name></name> <operator>!=</operator> <name>OPT_BOOT_LOAD_SIZE_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"boot-load-size"</literal></expr></argument>,
<argument><expr><name>KEY_INT</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_load_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_type</name></name> <operator>!=</operator> <name>OPT_BOOT_TYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="string">"no-emulation"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_type</name></name> <operator>==</operator> <name>OPT_BOOT_TYPE_FD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="string">"fd"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_type</name></name> <operator>==</operator> <name>OPT_BOOT_TYPE_HARD_DISK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="string">"hard-disk"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"boot-type"</literal></expr></argument>,
<argument><expr><name>KEY_STR</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>compression_level</name></name> <operator>!=</operator> <name>OPT_COMPRESSION_LEVEL_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"compression-level"</literal></expr></argument>,
<argument><expr><name>KEY_INT</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>compression_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>copyright_file</name></name> <operator>!=</operator> <name>OPT_COPYRIGHT_FILE_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"copyright-file"</literal></expr></argument>,
<argument><expr><name>KEY_STR</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>copyright_file_identifier</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name> <operator>!=</operator> <name>OPT_ISO_LEVEL_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"iso-level"</literal></expr></argument>,
<argument><expr><name>KEY_INT</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name> <operator>!=</operator> <name>OPT_JOLIET_DEFAULT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name> <operator>==</operator> <name>OPT_JOLIET_LONGNAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"joliet"</literal></expr></argument>,
<argument><expr><name>KEY_STR</name></expr></argument>, <argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"joliet"</literal></expr></argument>,
<argument><expr><name>KEY_FLG</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>limit_depth</name></name> <operator>!=</operator> <name>OPT_LIMIT_DEPTH_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"limit-depth"</literal></expr></argument>,
<argument><expr><name>KEY_FLG</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>limit_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>limit_dirs</name></name> <operator>!=</operator> <name>OPT_LIMIT_DIRS_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"limit-dirs"</literal></expr></argument>,
<argument><expr><name>KEY_FLG</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>limit_dirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>pad</name></name> <operator>!=</operator> <name>OPT_PAD_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"pad"</literal></expr></argument>,
<argument><expr><name>KEY_FLG</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>publisher</name></name> <operator>!=</operator> <name>OPT_PUBLISHER_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"publisher"</literal></expr></argument>,
<argument><expr><name>KEY_STR</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>publisher_identifier</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>!=</operator> <name>OPT_RR_DEFAULT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>==</operator> <name>OPT_RR_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"rockridge"</literal></expr></argument>,
<argument><expr><name>KEY_FLG</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>==</operator> <name>OPT_RR_STRICT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"rockridge"</literal></expr></argument>,
<argument><expr><name>KEY_STR</name></expr></argument>, <argument><expr><literal type="string">"strict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>==</operator> <name>OPT_RR_USEFUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"rockridge"</literal></expr></argument>,
<argument><expr><name>KEY_STR</name></expr></argument>, <argument><expr><literal type="string">"useful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>volume_id</name></name> <operator>!=</operator> <name>OPT_VOLUME_ID_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"volume-id"</literal></expr></argument>,
<argument><expr><name>KEY_STR</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>volume_identifier</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>zisofs</name></name> <operator>!=</operator> <name>OPT_ZISOFS_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"zisofs"</literal></expr></argument>,
<argument><expr><name>KEY_FLG</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>zisofs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>info_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_rr_ER</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>RRIP_ER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>RRIP_ER_ID_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>RRIP_ER_DSC_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>RRIP_ER_SRC_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rrip_identifier</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">8</literal><operator>+</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>rrip_descriptor</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">8</literal><operator>+</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>rrip_source</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>calculate_path_table_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>path_table</name></name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>depth</name> <operator>&lt;</operator> <name><name>vdd</name><operator>-&gt;</operator><name>max_depth</name></name></expr>;</condition> <incr><expr><name>depth</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ptbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cnt</name> <operator>=</operator> <name><name>pt</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>cnt</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptbl</name> <operator>=</operator> <name><name>pt</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>sorted</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>identifier</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ptbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">8</literal> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>vdd</name><operator>-&gt;</operator><name>path_table_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vdd</name><operator>-&gt;</operator><name>path_table_block</name></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>size</name> <operator>+</operator> <name>PATH_TABLE_BLOCK_SIZE</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator>
<name>PATH_TABLE_BLOCK_SIZE</name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name>PATH_TABLE_BLOCK_SIZE</name> <operator>/</operator> <name>LOGICAL_BLOCK_SIZE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_write_path_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type_m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ptbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>wbremaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>wsize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wb</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wbremaining</name> <operator>=</operator> <call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>wb</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptbl</name> <operator>=</operator> <name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>sorted</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>ptbl</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>identifier</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>id_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wbremaining</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>bp</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>wb</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>bp</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>wb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wb</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wbremaining</name> <operator>=</operator> <call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>wb</name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_711</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type_m</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_732</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>dir_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_731</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>dir_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type_m</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_722</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>dir_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_721</name><argument_list>(<argument><expr><name>bp</name><operator>+</operator><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>dir_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>identifier</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">9</literal><operator>+</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wsize</name> <operator>+=</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <literal type="number">8</literal> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>wb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>bp</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><name>wb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>wsize</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_path_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type_m</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>path_table_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>path_table_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>depth</name> <operator>&lt;</operator> <name><name>vdd</name><operator>-&gt;</operator><name>max_depth</name></name></expr>;</condition> <incr><expr><name>depth</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_write_path_table</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>type_m</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>vdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>path_table_size</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>path_table_size</name> <operator>=</operator> <name>path_table_size</name> <operator>%</operator> <name>PATH_TABLE_BLOCK_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>path_table_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>write_null</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>PATH_TABLE_BLOCK_SIZE</name> <operator>-</operator> <name>path_table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>calculate_directory_descriptors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>enttbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bs</name></decl>, <decl><type ref="prev"/><name>block</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>get_dir_rec_size</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>isoent</name></expr></argument>, <argument><expr><name>DIR_REC_SELF</name></expr></argument>, <argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bs</name> <operator>+=</operator> <call><name>get_dir_rec_size</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>isoent</name></expr></argument>, <argument><expr><name>DIR_REC_PARENT</name></expr></argument>, <argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name> <operator>!=</operator> <name>VDD_JOLIET</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>vdd</name><operator>-&gt;</operator><name>max_depth</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>block</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>enttbl</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>children_sorted</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name> <init>= <expr><name><name>enttbl</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>hardlink_target</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>hardlink_target</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>content</name></name><operator>)</operator></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dr_l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dr_l</name> <operator>=</operator> <call><name>get_dir_rec_size</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>np</name></expr></argument>, <argument><expr><name>DIR_REC_NORMAL</name></expr></argument>,
<argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bs</name> <operator>+</operator> <name>dr_l</name><operator>)</operator> <operator>&gt;</operator> <name>LOGICAL_BLOCK_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <name>dr_l</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bs</name> <operator>+=</operator> <name>dr_l</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>block</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_write_directory_descriptors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>enttbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dr_l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>wb</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WD_REMAINING</name></cpp:macro> <cpp:value>(LOGICAL_BLOCK_SIZE - (p - wb))</cpp:value></cpp:define>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>set_directory_record</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>WD_REMAINING</name></expr></argument>, <argument><expr><name>isoent</name></expr></argument>,
<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>DIR_REC_SELF</name></expr></argument>, <argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>set_directory_record</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>WD_REMAINING</name></expr></argument>, <argument><expr><name>isoent</name></expr></argument>,
<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>DIR_REC_PARENT</name></expr></argument>, <argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name> <operator>!=</operator> <name>VDD_JOLIET</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>vdd</name><operator>-&gt;</operator><name>max_depth</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WD_REMAINING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>enttbl</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>children_sorted</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name> <init>= <expr><name><name>enttbl</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>np</name><operator>-&gt;</operator><name>file</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>hardlink_target</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>hardlink_target</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>content</name></name><operator>)</operator></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>dr_l</name> <operator>=</operator> <call><name>set_directory_record</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>WD_REMAINING</name></expr></argument>,
<argument><expr><name>np</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>DIR_REC_NORMAL</name></expr></argument>,
<argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dr_l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WD_REMAINING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>wb</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dr_l</name> <operator>=</operator> <call><name>set_directory_record</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>WD_REMAINING</name></expr></argument>, <argument><expr><name>np</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>,
<argument><expr><name>DIR_REC_NORMAL</name></expr></argument>, <argument><expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>dr_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WD_REMAINING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_directory_descriptors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>vdd</name><operator>-&gt;</operator><name>rootent</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>extr_rec</name></name> <modifier>*</modifier></type><name>extr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_write_directory_descriptors</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>vdd</name></expr></argument>, <argument><expr><name>np</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name> <operator>!=</operator> <name>VDD_JOLIET</name></expr>)</condition> <block>{<block_content>




<for>for <control>(<init><expr><name>extr</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>first</name></name></expr>;</init>
<condition><expr><name>extr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>extr</name> <operator>=</operator> <name><name>extr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>wb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wb</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><name><name>extr</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>extr</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>wb</name> <operator>+</operator> <name><name>extr</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>LOGICAL_BLOCK_SIZE</name> <operator>-</operator> <name><name>extr</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>vdd</name><operator>-&gt;</operator><name>max_depth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>np</name> <operator>!=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>drnext</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>drnext</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>np</name> <operator>!=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_file_contents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>rsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>wb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wb</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rsize</name> <operator>=</operator> <call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rsize</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rsize</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rs</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>, <argument><expr><name>wb</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't read temporary file(%jd)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>rs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_file_descriptors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>blocks</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>catalog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>make_boot_catalog</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>blocks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>offset_of_temp</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>write_file_contents</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>blocks</name> <operator>&lt;&lt;</operator> <name>LOGICAL_BLOCK_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>blocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>file</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>data_file_list</name><operator>.</operator><name>first</name></name></expr>;</init>
<condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>datanext</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>write_content</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>+</operator> <operator>(</operator><name>blocks</name> <operator>&lt;&lt;</operator> <name>LOGICAL_BLOCK_BITS</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator>
<name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>offset_of_temp</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>blocks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>write_file_contents</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>blocks</name> <operator>&lt;&lt;</operator> <name>LOGICAL_BLOCK_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>blocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>offset_of_temp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>content</name></name><operator>)</operator></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>blocks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>write_file_contents</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>blocks</name> <operator>&lt;&lt;</operator> <name>LOGICAL_BLOCK_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>isofile_init_entry_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>all_file_list</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>all_file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>all_file_list</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>isofile_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>allnext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>iso9660</name><operator>-&gt;</operator><name>all_file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>all_file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>allnext</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>isofile_free_all_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>file_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>all_file_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file_next</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>allnext</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>isofile_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>file_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>isofile_init_entry_data_file_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>data_file_list</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>data_file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>data_file_list</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>isofile_add_data_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>datanext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>iso9660</name><operator>-&gt;</operator><name>data_file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>data_file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>datanext</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type>
<name>isofile_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <call><name>archive_entry_clone</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <call><name>archive_entry_new2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>basename_utf16</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>content</name></name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>file</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>isofile_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>content</name></name> <modifier>*</modifier></type><name>con</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>con</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>con</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>
<expr_stmt><expr><name>con</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>basename_utf16</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cleanup_backslash_1</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb</name></decl>, <decl><type ref="prev"/><name>dos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <name>dos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb</name> <operator>||</operator> <operator>!</operator><name>dos</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cleanup_backslash_2</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>L</name><literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>isofile_gen_utility_names</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dirname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>basename_utf16</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pathname</name> <operator>=</operator> <call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pathname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pathname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dircnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>u16</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ulast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u16len</name></decl>, <decl><type ref="prev"/><name>ulen_last</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_to_utf16be</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_to_utf16be</name></name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_to_utf16be</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_from_utf16be</name></name> <operator>=</operator>
<call><name>archive_string_conversion_from_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_from_utf16be</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>archive_entry_pathname_l</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u16len</name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_to_utf16be</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for UTF-16BE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"A filename cannot be converted to UTF-16BE;"</literal>
<literal type="string">"You should disable making Joliet extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<while>while <condition>(<expr><name>u16len</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>u16</name><index>[<expr><name>u16len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>u16</name><index>[<expr><name>u16len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>u16</name><index>[<expr><name>u16len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>u16</name><index>[<expr><name>u16len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>u16</name><index>[<expr><name>u16len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>u16len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>




<expr_stmt><expr><name>ulast</name> <operator>=</operator> <name>u16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u16len</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ulen_last</name> <operator>=</operator> <name>u16len</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>u16len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>u16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>u16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>u16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>ulast</name> <operator>=</operator> <name>u16</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ulen_last</name> <operator>=</operator> <name>u16len</name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>u16</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u16len</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>ulen_last</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>basename_utf16</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ulen_last</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for UTF-16BE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>basename_utf16</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>ulast</name></expr></argument>, <argument><expr><name>ulen_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>basename_utf16</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>ulen_last</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>cleanup_backslash_1</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>archive_entry_pathname_w</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_wstring</name></name></type> <name>ws</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cleanup_backslash_2</name><argument_list>(<argument><expr><name><name>ws</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_string_append_from_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>ws</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>ws</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstring_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dirname</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>




<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>dirname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dirname</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ll</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
<name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ll</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>p</name> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>rp</name> <operator>&gt;=</operator> <name>dirname</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>rp</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>&gt;</operator> <name>dirname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dirname</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dirname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFLNK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pathname</name> <operator>=</operator> <call><name>archive_entry_symlink</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>cleanup_backslash_1</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>symlink</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wp</name> <init>=
<expr><call><name>archive_entry_symlink_w</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_wstring</name></name></type> <name>ws</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cleanup_backslash_2</name><argument_list>(<argument><expr><name><name>ws</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_string_append_from_wcs</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>ws</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>ws</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstring_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>slash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dircnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dircnt</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>slash</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>slash</name> <operator>-</operator> <name>dirname</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>, <argument><expr><name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dircnt</name></name> <operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>isofile_register_hardlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hardlink</name></name> <modifier>*</modifier></type><name>hl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_entry_set_nlink</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pathname</name> <operator>=</operator> <call><name>archive_entry_hardlink</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pathname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hl</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>hl</name><operator>-&gt;</operator><name>nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>hlnext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hl</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hl</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>hlnext</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_rb_tree_insert_node</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>hardlink_rbtree</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator>struct <name>archive_rb_node</name> <operator>*</operator><operator>)</operator><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>hl</name> <operator>=</operator> <operator>(</operator>struct <name>hardlink</name> <operator>*</operator><operator>)</operator><call><name>__archive_rb_tree_find_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>hardlink_rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>hlnext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>hl</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hl</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>hlnext</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hl</name><operator>-&gt;</operator><name>nlink</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_unset_size</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>isofile_connect_hardlink_files</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hardlink</name></name> <modifier>*</modifier></type><name>hl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>target</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nf</name></decl>;</decl_stmt>

<macro><name>ARCHIVE_RB_TREE_FOREACH</name><argument_list>(<argument>n</argument>, <argument>&amp;(iso9660-&gt;hardlink_rbtree)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>hl</name> <operator>=</operator> <operator>(</operator>struct <name>hardlink</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>


<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>hl</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_nlink</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name><name>hl</name><operator>-&gt;</operator><name>nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>nf</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>hlnext</name></name></expr>;</init>
<condition><expr><name>nf</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>nf</name> <operator>=</operator> <name><name>nf</name><operator>-&gt;</operator><name>hlnext</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>nf</name><operator>-&gt;</operator><name>hardlink_target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_nlink</name><argument_list>(<argument><expr><name><name>nf</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name><name>hl</name><operator>-&gt;</operator><name>nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isofile_hd_cmp_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hardlink</name></name> <modifier>*</modifier></type><name>h1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>hardlink</name> <operator>*</operator><operator>)</operator><name>n1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hardlink</name></name> <modifier>*</modifier></type><name>h2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>hardlink</name> <operator>*</operator><operator>)</operator><name>n2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>h1</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>h2</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isofile_hd_cmp_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hardlink</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>hardlink</name> <operator>*</operator><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>isofile_init_hardlinks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>archive_rb_tree_ops</name></name></type> <name>rb_ops</name> <init>= <expr><block>{
<expr><name>isofile_hd_cmp_node</name></expr>, <expr><name>isofile_hd_cmp_key</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__archive_rb_tree_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>hardlink_rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>isofile_free_hardlinks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<macro><name>ARCHIVE_RB_TREE_FOREACH_SAFE</name><argument_list>(<argument>n</argument>, <argument>&amp;(iso9660-&gt;hardlink_rbtree)</argument>, <argument>tmp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_rb_tree_remove_node</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>hardlink_rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type>
<name>isoent_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>archive_rb_tree_ops</name></name></type> <name>rb_ops</name> <init>= <expr><block>{
<expr><name>isoent_cmp_node</name></expr>, <expr><name>isoent_cmp_key</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>isoent</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>isoent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isoent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_rb_tree_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>isoent</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>isoent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>isoent</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type>
<name>isoent_clone</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>isoent_new</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_isoent_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>extr_rec</name></name> <modifier>*</modifier></type><name>er</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>er_next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>children_sorted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>er</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>extr_rec_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>er</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>er_next</name> <operator>=</operator> <name><name>er</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>er</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>er</name> <operator>=</operator> <name>er_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>isoent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>isoent_free_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np_temp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>isoent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name>isoent</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>np_temp</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>chnext</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_isoent_free</name><argument_list>(<argument><expr><name>np_temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>np_temp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>chnext</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_isoent_free</name><argument_list>(<argument><expr><name>np_temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type>
<name>isoent_create_virtual_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>isofile_new</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_unset_mtime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_unset_atime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_unset_ctime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_uid</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><call><name>getuid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_gid</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><call><name>getgid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><literal type="number">0555</literal> <operator>|</operator> <name>AE_IFDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_nlink</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isofile_gen_utility_names</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>isofile_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>isofile_add_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>isoent</name> <operator>=</operator> <call><name>isoent_new</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isoent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>virtual</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>isoent</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_cmp_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>e1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>isoent</name> <operator>*</operator><operator>)</operator><name>n1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>e2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>isoent</name> <operator>*</operator><operator>)</operator><name>n2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>e1</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>e2</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_cmp_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>isoent</name> <operator>*</operator><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_add_child_head</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__archive_rb_tree_insert_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator>struct <name>archive_rb_node</name> <operator>*</operator><operator>)</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>child</name><operator>-&gt;</operator><name>chnext</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>child</name><operator>-&gt;</operator><name>chnext</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>child</name><operator>-&gt;</operator><name>drnext</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>child</name><operator>-&gt;</operator><name>drnext</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>drnext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_add_child_tail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__archive_rb_tree_insert_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator>struct <name>archive_rb_node</name> <operator>*</operator><operator>)</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>chnext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>child</name><operator>-&gt;</operator><name>chnext</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>drnext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>parent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>child</name><operator>-&gt;</operator><name>drnext</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>isoent_remove_child</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>


<expr_stmt><expr><name>ent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>chnext</name></name> <operator>!=</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>chnext</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>chnext</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>chnext</name><operator>-&gt;</operator><name>chnext</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>chnext</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>drnext</name></name> <operator>!=</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>drnext</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>drnext</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>drnext</name><operator>-&gt;</operator><name>drnext</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>drnext</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>cnt</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__archive_rb_tree_remove_node</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator>struct <name>archive_rb_node</name> <operator>*</operator><operator>)</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_clone_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>nroot</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xroot</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xroot</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>newent</name> <operator>=</operator> <call><name>isoent_clone</name><argument_list>(<argument><expr><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>xroot</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nroot</name> <operator>=</operator> <name>xroot</name> <operator>=</operator> <name>newent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newent</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>xroot</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>isoent_add_child_tail</name><argument_list>(<argument><expr><name>xroot</name></expr></argument>, <argument><expr><name>newent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>dir</name></name> <operator>&amp;&amp;</operator> <name><name>np</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xroot</name> <operator>=</operator> <name>newent</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>np</name> <operator>!=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>chnext</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xroot</name> <operator>=</operator> <name><name>xroot</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>chnext</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>np</name> <operator>!=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>isoent_setup_directory_location</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vdd</name><operator>-&gt;</operator><name>total_dir_block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>vdd</name><operator>-&gt;</operator><name>rootent</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>dir_block</name></name> <operator>=</operator> <call><name>calculate_directory_descriptors</name><argument_list>(
<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>vdd</name></expr></argument>, <argument><expr><name>np</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vdd</name><operator>-&gt;</operator><name>total_dir_block</name></name> <operator>+=</operator> <name><name>np</name><operator>-&gt;</operator><name>dir_block</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>dir_location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>
<expr_stmt><expr><name>location</name> <operator>+=</operator> <name><name>np</name><operator>-&gt;</operator><name>dir_block</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>extra_setup_location</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vdd</name><operator>-&gt;</operator><name>total_dir_block</name></name> <operator>+=</operator> <name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name>location</name> <operator>+=</operator> <name>block</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>vdd</name><operator>-&gt;</operator><name>max_depth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>np</name> <operator>!=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>drnext</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>drnext</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>np</name> <operator>!=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_isoent_file_location</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>symlocation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>children</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>children_sorted</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>children</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>boot</name></name> <operator>||</operator> <name><name>file</name><operator>-&gt;</operator><name>hardlink_target</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFLNK</name> <operator>||</operator>
<name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>symlocation</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>write_content</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>isoent_setup_file_location</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>joliet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>symlocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_block</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>total_file_block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>isoent</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>catalog</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>archive_entry_size</name><argument_list>(<argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<name>LOGICAL_BLOCK_SIZE</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>LOGICAL_BLOCK_BITS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>location</name> <operator>+=</operator> <name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>total_file_block</name></name> <operator>+=</operator> <name>block</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>isoent</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>fd_boot_image_size</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>archive_entry_size</name><argument_list>(<argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>size</name> <operator>+</operator> <name>LOGICAL_BLOCK_SIZE</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>&gt;&gt;</operator> <name>LOGICAL_BLOCK_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>location</name> <operator>+=</operator> <name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>total_file_block</name></name> <operator>+=</operator> <name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>blocks</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>symlocation</name> <operator>=</operator> <operator>-</operator><literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>&amp;&amp;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>joliet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>rootent</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>joliet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>_isoent_file_location</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>np</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>symlocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>joliet</name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>==</operator> <name>OPT_RR_DISABLED</name> <operator>&amp;&amp;</operator>
<name>depth</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>max_depth</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>&amp;&amp;</operator>
<name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>max_depth</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>np</name> <operator>!=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>drnext</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>drnext</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>np</name> <operator>!=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition>;</do>

<expr_stmt><expr><name>total_block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>file</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>data_file_list</name><operator>.</operator><name>first</name></name></expr>;</init>
<condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>datanext</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>write_content</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>content</name></name><operator>)</operator></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>
<expr_stmt><expr><name>location</name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_block</name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></for>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>total_file_block</name></name> <operator>+=</operator> <name>total_block</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_path_component</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>fn</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>n</name> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>l</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>isoentpp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>_MAX_FNAME</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NAME_MAX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NAME_MAX</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr></cpp:elif>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>NAME_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>dent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>isoent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>f1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>isoent</name> <operator>=</operator> <operator>*</operator><name>isoentpp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dent</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>parentdir</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <name>p</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>)</argument_list></call>
<operator>==</operator> <call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirstr</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isoent_add_child_tail</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirent</name></name></expr></argument>, <argument><expr><name>isoent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <operator>(</operator>struct <name>isoent</name> <operator>*</operator><operator>)</operator><call><name>__archive_rb_tree_find_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirent</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>same_entry</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>get_path_component</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"A name buffer is too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_isoent_free</name><argument_list>(<argument><expr><name>isoent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>isoent_find_child</name><argument_list>(<argument><expr><name>dent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>np</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"`%s' is not directory, we cannot insert `%s' "</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_isoent_free</name><argument_list>(<argument><expr><name>isoent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>isoentpp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fn</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fn</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dent</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<while>while <condition>(<expr><name><name>fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>as</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>fn</name> <operator>-</operator> <name>p</name> <operator>+</operator> <name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>as</name><operator>.</operator><name>s</name><index>[<expr><name><name>as</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>as</name><operator>.</operator><name>s</name><index>[<expr><name><name>as</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>.</operator><name>length</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>isoent_create_virtual_dir</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name><name>as</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_isoent_free</name><argument_list>(<argument><expr><name>isoent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>isoentpp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>dircnt</name></name> <operator>&gt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>dircnt_max</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>dircnt_max</name></name> <operator>=</operator> <name><name>vp</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>dircnt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>isoent_add_child_tail</name><argument_list>(<argument><expr><name>dent</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name>vp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fn</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fn</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>get_path_component</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"A name buffer is too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_isoent_free</name><argument_list>(<argument><expr><name>isoent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>isoentpp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dent</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirent</name></name> <operator>=</operator> <name>dent</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirstr</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>parentdir</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cur_dirstr</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isoent_add_child_tail</name><argument_list>(<argument><expr><name>dent</name></expr></argument>, <argument><expr><name>isoent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <operator>(</operator>struct <name>isoent</name> <operator>*</operator><operator>)</operator><call><name>__archive_rb_tree_find_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dent</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>same_entry</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>same_entry</name>:</label>




<expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>f1</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name><name>f2</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Found duplicate entries `%s' and its file type is "</literal>
<literal type="string">"different"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>f1</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_isoent_free</name><argument_list>(<argument><expr><name>isoent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>isoentpp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>f2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>virtual</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_isoent_free</name><argument_list>(<argument><expr><name>isoent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>isoentpp</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type>
<name>isoent_find_child</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>child_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<expr_stmt><expr><name>np</name> <operator>=</operator> <operator>(</operator>struct <name>isoent</name> <operator>*</operator><operator>)</operator><call><name>__archive_rb_tree_find_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>isoent</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><name>child_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>np</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type>
<name>isoent_find_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>rootent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>_MAX_FNAME</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NAME_MAX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NAME_MAX</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr></cpp:elif>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>NAME_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>isoent</name> <operator>=</operator> <name>rootent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>get_path_component</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fn</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fn</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>isoent_find_child</name><argument_list>(<argument><expr><name>isoent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>isoent</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>isoent</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>np</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>idr_relaxed_filenames</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0x21</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0x2F</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0x3A</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0x41</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0x5B</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0x5E</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>map</name><index>[<expr><literal type="number">0x60</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0x7B</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0x7E</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>idr_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type><name>idr</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>idr</name><operator>-&gt;</operator><name>idrent_pool</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idr</name><operator>-&gt;</operator><name>pool_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name> <operator>!=</operator> <name>VDD_JOLIET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>idr</name><operator>-&gt;</operator><name>char_map</name></name></expr></argument>, <argument><expr><name>d_characters_map</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>idr</name><operator>-&gt;</operator><name>char_map</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>idr</name><operator>-&gt;</operator><name>char_map</name></name></expr></argument>, <argument><expr><name>d1_characters_map</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>idr</name><operator>-&gt;</operator><name>char_map</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>idr_relaxed_filenames</name><argument_list>(<argument><expr><name><name>idr</name><operator>-&gt;</operator><name>char_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>idr_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type><name>idr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>idr</name><operator>-&gt;</operator><name>idrent_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>idr_ensure_poolsize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type><name>idr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>idr</name><operator>-&gt;</operator><name>pool_size</name></name> <operator>&lt;</operator> <name>cnt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bk</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>psize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psize</name> <operator>=</operator> <operator>(</operator><name>cnt</name> <operator>+</operator> <name>bk</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>bk</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>idr</name><operator>-&gt;</operator><name>idrent_pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>idrent</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>idr</name><operator>-&gt;</operator><name>idrent_pool</name></name> <operator>=</operator> <operator>(</operator>struct <name>idrent</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idr</name><operator>-&gt;</operator><name>pool_size</name></name> <operator>=</operator> <name>psize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>idr_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type><name>idr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ffmax</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>null_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_tree_ops</name></name> <modifier>*</modifier></type><name>rbt_ops</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ffmax</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>idr_ensure_poolsize</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>idr</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>__archive_rb_tree_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>idr</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><name>rbt_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idr</name><operator>-&gt;</operator><name>wait_list</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idr</name><operator>-&gt;</operator><name>wait_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>idr</name><operator>-&gt;</operator><name>wait_list</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idr</name><operator>-&gt;</operator><name>pool_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idr</name><operator>-&gt;</operator><name>num_size</name></name> <operator>=</operator> <name>num_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idr</name><operator>-&gt;</operator><name>null_size</name></name> <operator>=</operator> <name>null_size</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>idr_register</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type><name>idr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>idrent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idrent</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>idr</name><operator>-&gt;</operator><name>idrent_pool</name><index>[<expr><name><name>idr</name><operator>-&gt;</operator><name>pool_idx</name></name><operator>++</operator></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idrent</name><operator>-&gt;</operator><name>wnext</name></name> <operator>=</operator> <name><name>idrent</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idrent</name><operator>-&gt;</operator><name>isoent</name></name> <operator>=</operator> <name>isoent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idrent</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name>weight</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idrent</name><operator>-&gt;</operator><name>noff</name></name> <operator>=</operator> <name>noff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idrent</name><operator>-&gt;</operator><name>rename_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__archive_rb_tree_insert_node</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>idr</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>idrent</name><operator>-&gt;</operator><name>rbnode</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator>struct <name>idrent</name> <operator>*</operator><operator>)</operator><call><name>__archive_rb_tree_find_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>idr</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>idrent</name><operator>-&gt;</operator><name>isoent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>idrent</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>idr</name><operator>-&gt;</operator><name>wait_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>idrent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idr</name><operator>-&gt;</operator><name>wait_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>idrent</name><operator>-&gt;</operator><name>wnext</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>idr_extend_identifier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>wnp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nullsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wnp_ext_off</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wnp_ext_off</name> <operator>=</operator> <name><name>wnp</name><operator>-&gt;</operator><name>isoent</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wnp</name><operator>-&gt;</operator><name>noff</name></name> <operator>+</operator> <name>numsize</name> <operator>!=</operator> <name>wnp_ext_off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>wnp</name><operator>-&gt;</operator><name>isoent</name><operator>-&gt;</operator><name>identifier</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name><name>wnp</name><operator>-&gt;</operator><name>noff</name></name> <operator>+</operator> <name>numsize</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>wnp_ext_off</name></expr></argument>,
<argument><expr><name><name>wnp</name><operator>-&gt;</operator><name>isoent</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>+</operator> <name>nullsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnp</name><operator>-&gt;</operator><name>isoent</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>=</operator> <name>wnp_ext_off</name> <operator>=</operator> <name><name>wnp</name><operator>-&gt;</operator><name>noff</name></name> <operator>+</operator> <name>numsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnp</name><operator>-&gt;</operator><name>isoent</name><operator>-&gt;</operator><name>id_len</name></name> <operator>=</operator> <name>wnp_ext_off</name> <operator>+</operator> <name><name>wnp</name><operator>-&gt;</operator><name>isoent</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>idr_resolve</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type><name>idr</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fsetnum</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>idr</name><operator>-&gt;</operator><name>wait_list</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>wnext</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>idr_extend_identifier</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>idr</name><operator>-&gt;</operator><name>num_size</name></name></expr></argument>, <argument><expr><name><name>idr</name><operator>-&gt;</operator><name>null_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>isoent</name><operator>-&gt;</operator><name>identifier</name></name> <operator>+</operator> <name><name>n</name><operator>-&gt;</operator><name>noff</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>fsetnum</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>avail</name><operator>-&gt;</operator><name>rename_num</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>__archive_rb_tree_insert_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>idr</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>rbnode</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>idr_set_num</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>xdig</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'5'</literal></expr>, <expr><literal type="char">'6'</literal></expr>, <expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'9'</literal></expr>,
<expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'J'</literal></expr>,
<expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'T'</literal></expr>,
<expr><literal type="char">'U'</literal></expr>, <expr><literal type="char">'V'</literal></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'Y'</literal></expr>, <expr><literal type="char">'Z'</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>%=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xdig</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xdig</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xdig</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>xdig</name><index>[<expr><operator>(</operator><name>num</name> <operator>/</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>xdig</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xdig</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>%=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xdig</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xdig</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>xdig</name><index>[ <expr><operator>(</operator><name>num</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xdig</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>%=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xdig</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>xdig</name><index>[<expr><name>num</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>idr_set_num_beutf16</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>xdig</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0030</literal></expr>, <expr><literal type="number">0x0031</literal></expr>, <expr><literal type="number">0x0032</literal></expr>, <expr><literal type="number">0x0033</literal></expr>, <expr><literal type="number">0x0034</literal></expr>, <expr><literal type="number">0x0035</literal></expr>,
<expr><literal type="number">0x0036</literal></expr>, <expr><literal type="number">0x0037</literal></expr>, <expr><literal type="number">0x0038</literal></expr>, <expr><literal type="number">0x0039</literal></expr>,
<expr><literal type="number">0x0041</literal></expr>, <expr><literal type="number">0x0042</literal></expr>, <expr><literal type="number">0x0043</literal></expr>, <expr><literal type="number">0x0044</literal></expr>, <expr><literal type="number">0x0045</literal></expr>, <expr><literal type="number">0x0046</literal></expr>,
<expr><literal type="number">0x0047</literal></expr>, <expr><literal type="number">0x0048</literal></expr>, <expr><literal type="number">0x0049</literal></expr>, <expr><literal type="number">0x004A</literal></expr>, <expr><literal type="number">0x004B</literal></expr>, <expr><literal type="number">0x004C</literal></expr>,
<expr><literal type="number">0x004D</literal></expr>, <expr><literal type="number">0x004E</literal></expr>, <expr><literal type="number">0x004F</literal></expr>, <expr><literal type="number">0x0050</literal></expr>, <expr><literal type="number">0x0051</literal></expr>, <expr><literal type="number">0x0052</literal></expr>,
<expr><literal type="number">0x0053</literal></expr>, <expr><literal type="number">0x0054</literal></expr>, <expr><literal type="number">0x0055</literal></expr>, <expr><literal type="number">0x0056</literal></expr>, <expr><literal type="number">0x0057</literal></expr>, <expr><literal type="number">0x0058</literal></expr>,
<expr><literal type="number">0x0059</literal></expr>, <expr><literal type="number">0x005A</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDIG_CNT</name></cpp:macro> <cpp:value>(sizeof(xdig)/sizeof(xdig[0]))</cpp:value></cpp:define>

<expr_stmt><expr><name>num</name> <operator>%=</operator> <name>XDIG_CNT</name> <operator>*</operator> <name>XDIG_CNT</name> <operator>*</operator> <name>XDIG_CNT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>xdig</name><index>[<expr><operator>(</operator><name>num</name> <operator>/</operator> <operator>(</operator><name>XDIG_CNT</name> <operator>*</operator> <name>XDIG_CNT</name><operator>)</operator><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>%=</operator> <name>XDIG_CNT</name> <operator>*</operator> <name>XDIG_CNT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>xdig</name><index>[ <expr><operator>(</operator><name>num</name> <operator>/</operator> <name>XDIG_CNT</name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>%=</operator> <name>XDIG_CNT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>xdig</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_gen_iso9660_identifier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type><name>idr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>char_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>allow_ldots</name></decl>, <decl><type ref="prev"/><name>allow_multidot</name></decl>, <decl><type ref="prev"/><name>allow_period</name></decl>, <decl><type ref="prev"/><name>allow_vernum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fnmax</name></decl>, <decl><type ref="prev"/><name>ffmax</name></decl>, <decl><type ref="prev"/><name>dnmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>archive_rb_tree_ops</name></name></type> <name>rb_ops</name> <init>= <expr><block>{
<expr><name>isoent_cmp_node_iso9660</name></expr>, <expr><name>isoent_cmp_key_iso9660</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_map</name> <operator>=</operator> <name><name>idr</name><operator>-&gt;</operator><name>char_map</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>allow_ldots</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>allow_multidot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>allow_period</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>allow_vernum</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>allow_vernum</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fnmax</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ffmax</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dnmax</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fnmax</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ffmax</name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dnmax</name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>allow_ldots</name> <operator>=</operator> <name>allow_multidot</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>allow_period</name> <operator>=</operator> <name>allow_vernum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name></expr>)</condition><block type="pseudo"><block_content>






<expr_stmt><expr><name>fnmax</name> <operator>=</operator> <name>ffmax</name> <operator>=</operator> <name>dnmax</name> <operator>=</operator> <literal type="number">193</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>





<expr_stmt><expr><name>fnmax</name> <operator>=</operator> <name>ffmax</name> <operator>=</operator> <name>dnmax</name> <operator>=</operator> <literal type="number">207</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>idr_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>idr</name></expr></argument>, <argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name></expr></argument>, <argument><expr><name>ffmax</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>np</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>chnext</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dot</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xdot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ext_off</name></decl>, <decl><type ref="prev"/><name>noff</name></decl>, <decl><type ref="prev"/><name>weight</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">31</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>identifier</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dot</name> <operator>=</operator> <name>xdot</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allow_ldots</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init><condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>char_map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name></expr>]</index></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xdot</name> <operator>=</operator> <name>dot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dot</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xdot</name> <operator>=</operator> <name>dot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dot</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>allow_multidot</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>identifier</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nammax</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nammax</name> <operator>=</operator> <name>dnmax</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nammax</name> <operator>=</operator> <name>fnmax</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>nammax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>nammax</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <name>nammax</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ext_off</name> <operator>=</operator> <name>nammax</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ext_off</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dot</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ext_off</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dot</name> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>-</operator> <name>p</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>dot</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>dot</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>dot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>dot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>dot</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>dot</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ext_off</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>dnmax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>dnmax</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <name>dnmax</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ext_off</name> <operator>&gt;</operator> <name>dnmax</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ext_off</name> <operator>=</operator> <name>dnmax</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>ffmax</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>extlen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xdoff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xdot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xdoff</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>xdot</name> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>xdoff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extlen</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>xdoff</name> <operator>&lt;</operator> <name>fnmax</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>extlen</name> <operator>&gt;</operator> <name>ffmax</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extlen</name> <operator>=</operator> <name>ffmax</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>ffmax</name> <operator>-</operator> <name>extlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>off</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>extlen</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>off</name></expr></argument>, <argument><expr><name>dot</name></expr></argument>, <argument><expr><name>extlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>ffmax</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ext_off</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPAT_MKISOFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>xdoff</name> <operator>&gt;=</operator> <name>fnmax</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>fnmax</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ext_off</name> <operator>=</operator> <name>fnmax</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <name>fnmax</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>fnmax</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ext_off</name> <operator>=</operator> <name>fnmax</name></expr>;</expr_stmt>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <name>fnmax</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>=</operator> <name>ext_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>ext_off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>id_len</name></name> <operator>=</operator> <name>l</name> <operator>=</operator> <name>ext_off</name> <operator>+</operator> <name><name>np</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ext_off</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>noff</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>noff</name> <operator>=</operator> <name>ext_off</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>ffmax</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>noff</name> <operator>=</operator> <name>ext_off</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <name>ffmax</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>noff</name> <operator>=</operator> <name>ext_off</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <name>ffmax</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>noff</name> <operator>=</operator> <name>ext_off</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>noff</name> <operator>=</operator> <name>ext_off</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>idr_register</name><argument_list>(<argument><expr><name>idr</name></expr></argument>, <argument><expr><name>np</name></expr></argument>, <argument><expr><name>weight</name></expr></argument>, <argument><expr><name>noff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>idr_resolve</name><argument_list>(<argument><expr><name>idr</name></expr></argument>, <argument><expr><name>idr_set_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>np</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>chnext</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>np</name><operator>-&gt;</operator><name>dir</name></name> <operator>&amp;&amp;</operator> <name><name>np</name><operator>-&gt;</operator><name>rr_child</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>identifier</name></name> <operator>+</operator> <name><name>np</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>+</operator> <name><name>np</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>allow_period</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>allow_period</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>id_len</name></name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>+</operator> <name><name>np</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>allow_vernum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">';'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>id_len</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>id_len</name></name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>+</operator> <name><name>np</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>mb_len</name></name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>id_len</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_gen_joliet_identifier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type><name>idr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ffmax</name></decl>, <decl><type ref="prev"/><name>parent_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>archive_rb_tree_ops</name></name></type> <name>rb_ops</name> <init>= <expr><block>{
<expr><name>isoent_cmp_node_joliet</name></expr>, <expr><name>isoent_cmp_key_joliet</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name> <operator>==</operator> <name>OPT_JOLIET_LONGNAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ffmax</name> <operator>=</operator> <literal type="number">206</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ffmax</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>idr_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>idr</name></expr></argument>, <argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ffmax</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parent_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name>isoent</name></expr>;</init> <condition><expr><name><name>np</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>np</name></expr>;</condition> <incr><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>parent_len</name> <operator>+=</operator> <name><name>np</name><operator>-&gt;</operator><name>mb_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>np</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>chnext</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ext_off</name></decl>, <decl><type ref="prev"/><name>noff</name></decl>, <decl><type ref="prev"/><name>weight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename_utf16</name><operator>.</operator><name>length</name></name><operator>)</operator> <operator>&gt;</operator> <name>ffmax</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>ffmax</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename_utf16</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>identifier</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lt</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dot</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>lt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>joliet_allowed_char</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0x005F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x2E</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dot</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lt</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>ext_off</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dot</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>np</name><operator>-&gt;</operator><name>identifier</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>=</operator> <name>ext_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>l</name> <operator>-</operator> <name>ext_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>id_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>l</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename_utf16</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>ffmax</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_strncpy_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iso9660</name><operator>-&gt;</operator><name>mbs</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>np</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_from_utf16be</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>mb_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>mbs</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>mb_len</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>mb_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>mb_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>basename</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>parent_len</name> <operator>&gt;</operator> <literal type="number">240</literal>
<operator>||</operator> <name><name>np</name><operator>-&gt;</operator><name>mb_len</name></name> <operator>&gt;</operator> <literal type="number">240</literal>
<operator>||</operator> <name>parent_len</name> <operator>+</operator> <name><name>np</name><operator>-&gt;</operator><name>mb_len</name></name> <operator>&gt;</operator> <literal type="number">240</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"The regulation of Joliet extensions;"</literal>
<literal type="string">" A length of a full-pathname of `%s' is "</literal>
<literal type="string">"longer than 240 bytes, (p=%d, b=%d)"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>parent_len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>np</name><operator>-&gt;</operator><name>mb_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>ffmax</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>noff</name> <operator>=</operator> <name>ext_off</name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <name>ffmax</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>noff</name> <operator>=</operator> <name>ext_off</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <name>ffmax</name><operator>-</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>noff</name> <operator>=</operator> <name>ext_off</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>noff</name> <operator>=</operator> <name>ext_off</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>idr_register</name><argument_list>(<argument><expr><name>idr</name></expr></argument>, <argument><expr><name>np</name></expr></argument>, <argument><expr><name>weight</name></expr></argument>, <argument><expr><name>noff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>idr_resolve</name><argument_list>(<argument><expr><name>idr</name></expr></argument>, <argument><expr><name>idr_set_num_beutf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_cmp_iso9660_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>identifier</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>identifier</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>cmp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>-</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0x20</literal> <operator>!=</operator> <operator>*</operator><name>s2</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0x20</literal>
<operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>-</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0x20</literal> <operator>!=</operator> <operator>*</operator><name>s1</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>-</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>identifier</name></name> <operator>+</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>identifier</name></name> <operator>+</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>cmp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>-</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0x20</literal> <operator>!=</operator> <operator>*</operator><name>s2</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0x20</literal>
<operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>-</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0x20</literal> <operator>!=</operator> <operator>*</operator><name>s1</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>-</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>



<return>return <expr><operator>(</operator><name>cmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_cmp_node_iso9660</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>e1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>idrent</name> <operator>*</operator><operator>)</operator><name>n1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>e2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>idrent</name> <operator>*</operator><operator>)</operator><name>n2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>isoent_cmp_iso9660_identifier</name><argument_list>(<argument><expr><name><name>e2</name><operator>-&gt;</operator><name>isoent</name></name></expr></argument>, <argument><expr><name><name>e1</name><operator>-&gt;</operator><name>isoent</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_cmp_key_iso9660</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>isoent</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>idrent</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>idrent</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>isoent_cmp_iso9660_identifier</name><argument_list>(<argument><expr><name>isoent</name></expr></argument>, <argument><expr><name><name>idrent</name><operator>-&gt;</operator><name>isoent</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_cmp_joliet_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>p1</name><operator>-&gt;</operator><name>identifier</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>p2</name><operator>-&gt;</operator><name>identifier</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>cmp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>-</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>*</operator><name>s2</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>-</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>*</operator><name>s1</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p1</name><operator>-&gt;</operator><name>identifier</name></name> <operator>+</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p2</name><operator>-&gt;</operator><name>identifier</name></name> <operator>+</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>cmp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>-</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>*</operator><name>s2</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_len</name></name> <operator>-</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_len</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>*</operator><name>s1</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>



<return>return <expr><operator>(</operator><name>cmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_cmp_node_joliet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>e1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>idrent</name> <operator>*</operator><operator>)</operator><name>n1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>e2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>idrent</name> <operator>*</operator><operator>)</operator><name>n2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>isoent_cmp_joliet_identifier</name><argument_list>(<argument><expr><name><name>e2</name><operator>-&gt;</operator><name>isoent</name></name></expr></argument>, <argument><expr><name><name>e1</name><operator>-&gt;</operator><name>isoent</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_cmp_key_joliet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>isoent</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>idrent</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>idrent</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>isoent_cmp_joliet_identifier</name><argument_list>(<argument><expr><name>isoent</name></expr></argument>, <argument><expr><name><name>idrent</name><operator>-&gt;</operator><name>isoent</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_make_sorted_files</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type><name>idr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>rn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>

<expr_stmt><expr><name>children</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>isoent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>isoent</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>children</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>children_sorted</name></name> <operator>=</operator> <name>children</name></expr>;</expr_stmt>

<macro><name>ARCHIVE_RB_TREE_FOREACH</name><argument_list>(<argument>rn</argument>, <argument>&amp;(idr-&gt;rbtree)</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>idrent</name></name> <modifier>*</modifier></type><name>idrent</name> <init>= <expr><operator>(</operator>struct <name>idrent</name> <operator>*</operator><operator>)</operator><name>rn</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>children</name> <operator>++</operator> <operator>=</operator> <name><name>idrent</name><operator>-&gt;</operator><name>isoent</name></name></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_traverse_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name><modifier>*</modifier></type> <name>vdd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>idr</name></name></type> <name>idr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>genid</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>idr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>idr_init</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>vdd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>vdd</name><operator>-&gt;</operator><name>rootent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name> <operator>==</operator> <name>VDD_JOLIET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>genid</name> <operator>=</operator> <name>isoent_gen_joliet_identifier</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>genid</name> <operator>=</operator> <name>isoent_gen_iso9660_identifier</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>virtual</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>archive_entry_mtime_is_set</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_atime</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_ctime</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name> <operator>!=</operator> <name>VDD_JOLIET</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>vdd</name><operator>-&gt;</operator><name>max_depth</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>directories_too_deep</name></name> <operator>=</operator> <name>np</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>genid</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>np</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit_traverse_tree</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isoent_make_sorted_files</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>np</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit_traverse_tree</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>vdd</name><operator>-&gt;</operator><name>max_depth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>np</name> <operator>!=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>drnext</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>drnext</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>np</name> <operator>!=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition>;</do>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<label><name>exit_traverse_tree</name>:</label>
<expr_stmt><expr><call><name>idr_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_collect_dirs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>rootent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rootent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rootent</name> <operator>=</operator> <name><name>vdd</name><operator>-&gt;</operator><name>rootent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name>rootent</name></expr>;</expr_stmt>
<do>do <block>{<block_content>

<expr_stmt><expr><call><name>path_table_add_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name><index>[<expr><name>depth</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>vdd</name><operator>-&gt;</operator><name>max_depth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>np</name> <operator>!=</operator> <name>rootent</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>drnext</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>drnext</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>np</name> <operator>!=</operator> <name>rootent</name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_rr_move_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>rr_moved</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>curent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>newent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>rrmoved</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mvent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rrmoved</name> <operator>=</operator> <operator>*</operator><name>rr_moved</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>rootent</name> <init>= <expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>rrmoved</name> <operator>=</operator> <call><name>isoent_create_virtual_dir</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>, <argument><expr><literal type="string">"rr_moved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rrmoved</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>isoent_add_child_head</name><argument_list>(<argument><expr><name>rootent</name></expr></argument>, <argument><expr><name>rrmoved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_nlink</name><argument_list>(<argument><expr><name><name>rootent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>,
<argument><expr><call><name>archive_entry_nlink</name><argument_list>(<argument><expr><name><name>rootent</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>path_table_add_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>pathtbl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>rrmoved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rr_moved</name> <operator>=</operator> <name>rrmoved</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>mvent</name> <operator>=</operator> <call><name>isoent_clone</name><argument_list>(<argument><expr><name>curent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mvent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mvent</name><operator>-&gt;</operator><name>rr_parent</name></name> <operator>=</operator> <name><name>curent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curent</name><operator>-&gt;</operator><name>rr_child</name></name> <operator>=</operator> <name>mvent</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>curent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>mvent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>curent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mvent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>curent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>last</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name><name>mvent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>np</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>chnext</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>mvent</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>mvent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name> <operator>=</operator> <name><name>curent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>curent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>mvent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>curent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mvent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>curent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>last</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mvent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>cnt</name></name> <operator>=</operator> <name><name>curent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>curent</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>isoent_add_child_tail</name><argument_list>(<argument><expr><name>rrmoved</name></expr></argument>, <argument><expr><name>mvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_nlink</name><argument_list>(<argument><expr><name><name>rrmoved</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>,
<argument><expr><call><name>archive_entry_nlink</name><argument_list>(<argument><expr><name><name>rrmoved</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>curent</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>newent</name> <operator>=</operator> <name>mvent</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_rr_move</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>path_table</name></name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>rootent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rr_moved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>pathtbl</name><index>[<expr><name>MAX_DEPTH</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rootent</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>rootent</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>rr_moved</name> <operator>=</operator> <call><name>isoent_find_child</name><argument_list>(<argument><expr><name>rootent</name></expr></argument>, <argument><expr><literal type="string">"rr_moved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rr_moved</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name>rr_moved</name> <operator>!=</operator> <name><name>rootent</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>first</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>isoent_remove_child</name><argument_list>(<argument><expr><name>rootent</name></expr></argument>, <argument><expr><name>rr_moved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>isoent_add_child_head</name><argument_list>(<argument><expr><name>rootent</name></expr></argument>, <argument><expr><name>rr_moved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>np</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>path_table_last_entry</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>np</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>ptnext</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>mvent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>newent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>np</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>mvent</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>subdirs</name><operator>.</operator><name>first</name></name></expr>;</init>
<condition><expr><name>mvent</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>mvent</name> <operator>=</operator> <name><name>mvent</name><operator>-&gt;</operator><name>drnext</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isoent_rr_move_dir</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rr_moved</name></expr></argument>,
<argument><expr><name>mvent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>isoent_collect_dirs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>newent</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>



<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>ptnext</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>_compare_path_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>isoent</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>v1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>isoent</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>v2</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>cmp</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>dir_number</name></name> <operator>-</operator> <name><name>p2</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>dir_number</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>cmp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>identifier</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>identifier</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>cmp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>-</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0x20</literal> <operator>!=</operator> <operator>*</operator><name>s2</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0x20</literal>
<operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>-</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0x20</literal> <operator>!=</operator> <operator>*</operator><name>s1</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>-</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_compare_path_table_joliet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>isoent</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>v1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>isoent</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>v2</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>cmp</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>dir_number</name></name> <operator>-</operator> <name><name>p2</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>dir_number</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>cmp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>p1</name><operator>-&gt;</operator><name>identifier</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>p2</name><operator>-&gt;</operator><name>identifier</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>cmp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>-</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>*</operator><name>s2</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>ext_off</name></name> <operator>-</operator> <name><name>p2</name><operator>-&gt;</operator><name>ext_off</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>*</operator><name>s1</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>path_table_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>path_table</name></name> <modifier>*</modifier></type><name>pathtbl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>ptnext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>pathtbl</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>ent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pathtbl</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>ptnext</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pathtbl</name><operator>-&gt;</operator><name>cnt</name></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type>
<name>path_table_last_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>path_table</name></name> <modifier>*</modifier></type><name>pathtbl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pathtbl</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>isoent</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pathtbl</name><operator>-&gt;</operator><name>last</name></name><operator>)</operator> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>isoent</name></expr></argument>, <argument><expr><name>ptnext</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_make_path_table_2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dir_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>enttbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>path_table</name></name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pt</name> <operator>=</operator> <operator>&amp;</operator><name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name><index>[<expr><name>depth</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>sorted</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>enttbl</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>cnt</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>isoent</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enttbl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>sorted</name></name> <operator>=</operator> <name>enttbl</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>np</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>ptnext</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>enttbl</name> <operator>++</operator> <operator>=</operator> <name>np</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>enttbl</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>sorted</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>vdd</name><operator>-&gt;</operator><name>vdd_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VDD_PRIMARY</name></expr>:</case>
<case>case <expr><name>VDD_ENHANCED</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__COMPAR_FN_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>enttbl</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>isoent</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>__compar_fn_t</name><operator>)</operator><name>_compare_path_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>enttbl</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>isoent</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>_compare_path_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>VDD_JOLIET</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__COMPAR_FN_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>enttbl</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>isoent</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>__compar_fn_t</name><operator>)</operator><name>_compare_path_table_joliet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>enttbl</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>isoent</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>_compare_path_table_joliet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enttbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>dir_number</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>dir_number</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_alloc_path_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vdd</name></name> <modifier>*</modifier></type><name>vdd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vdd</name><operator>-&gt;</operator><name>max_depth</name></name> <operator>=</operator> <name>max_depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>vdd</name><operator>-&gt;</operator><name>max_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vdd</name><operator>-&gt;</operator><name>max_depth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sorted</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vdd</name><operator>-&gt;</operator><name>pathtbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_make_path_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dir_number</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>dircnt_max</name></name> <operator>&gt;=</operator> <name>MAX_DEPTH</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>limit_depth</name></name> <operator>||</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>iso_level</name></name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isoent_alloc_path_table</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>dircnt_max</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isoent_alloc_path_table</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>MAX_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isoent_alloc_path_table</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>dircnt_max</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>isoent_collect_dirs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>isoent_collect_dirs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isoent_rr_move</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>isofile_connect_hardlink_files</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isoent_traverse_tree</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isoent_traverse_tree</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>dir_number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>depth</name> <operator>&lt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>max_depth</name></name></expr>;</condition> <incr><expr><name>depth</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isoent_make_path_table_2</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dir_number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>depth</name> <operator>&lt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>max_depth</name></name></expr>;</condition> <incr><expr><name>depth</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>isoent_make_path_table_2</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>limit_dirs</name></name> <operator>&amp;&amp;</operator> <name>dir_number</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Too many directories(%d) over 65535."</literal></expr></argument>, <argument><expr><name>dir_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>calculate_path_table_size</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>joliet</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>calculate_path_table_size</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_find_out_boot_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>rootent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name></name> <operator>=</operator> <call><name>isoent_find_entry</name><argument_list>(<argument><expr><name>rootent</name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_filename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Can't find the boot image file ``%s''"</literal></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_filename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>boot</name></name> <operator>=</operator> <name>BOOT_IMAGE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isoent_create_boot_catalog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>rootent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>isoent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>rootent</name></expr>;</expr_stmt>



<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>isofile_new</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>catalog_filename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_atime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_ctime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>birth_time</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_uid</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><call><name>getuid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_gid</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><call><name>getgid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>AE_IFREG</name> <operator>|</operator> <literal type="number">0444</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_nlink</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isofile_gen_utility_names</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>isofile_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>boot</name></name> <operator>=</operator> <name>BOOT_CATALOG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>LOGICAL_BLOCK_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>isofile_add_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>isoent</name> <operator>=</operator> <call><name>isoent_new</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isoent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>isoent</name><operator>-&gt;</operator><name>virtual</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>isoent_tree</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isoent</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>catalog</name></name> <operator>=</operator> <name>isoent</name></expr>;</expr_stmt>



<switch>switch <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>boot_type</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>OPT_BOOT_TYPE_AUTO</name></expr>:</case>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FD_1_2M_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name> <operator>=</operator>
<name>BOOT_MEDIA_1_2M_DISKETTE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FD_1_44M_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name> <operator>=</operator>
<name>BOOT_MEDIA_1_44M_DISKETTE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FD_2_88M_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name> <operator>=</operator>
<name>BOOT_MEDIA_2_88M_DISKETTE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name> <operator>=</operator>
<name>BOOT_MEDIA_NO_EMULATION</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>OPT_BOOT_TYPE_NO_EMU</name></expr>:</case>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name> <operator>=</operator> <name>BOOT_MEDIA_NO_EMULATION</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPT_BOOT_TYPE_HARD_DISK</name></expr>:</case>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name> <operator>=</operator> <name>BOOT_MEDIA_HARD_DISK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPT_BOOT_TYPE_FD</name></expr>:</case>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>FD_1_2M_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name> <operator>=</operator>
<name>BOOT_MEDIA_1_2M_DISKETTE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>FD_1_44M_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name> <operator>=</operator>
<name>BOOT_MEDIA_1_44M_DISKETTE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>FD_2_88M_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name> <operator>=</operator>
<name>BOOT_MEDIA_2_88M_DISKETTE</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Boot image file(``%s'') size is too big "</literal>
<literal type="string">"for fd type."</literal></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_filename</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>






<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>system_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>publisher</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>id</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>publisher_identifier</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>fd_boot_image_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>media_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>media_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BOOT_MEDIA_1_2M_DISKETTE</name></expr>:</case>
<return>return <expr><operator>(</operator><name>FD_1_2M_SIZE</name><operator>)</operator></expr>;</return>
<case>case <expr><name>BOOT_MEDIA_1_44M_DISKETTE</name></expr>:</case>
<return>return <expr><operator>(</operator><name>FD_1_44M_SIZE</name><operator>)</operator></expr>;</return>
<case>case <expr><name>BOOT_MEDIA_2_88M_DISKETTE</name></expr>:</case>
<return>return <expr><operator>(</operator><name>FD_2_88M_SIZE</name><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_boot_catalog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sum</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>platform_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>id</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x55</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xAA</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>block</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>wp</name> <operator>&lt;</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>wp</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>set_num_721</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>~</operator><name>sum</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x88</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name> <operator>==</operator> <name>BOOT_MEDIA_NO_EMULATION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_721</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_load_seg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_721</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>system_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name> <operator>==</operator> <name>BOOT_MEDIA_NO_EMULATION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_721</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot_load_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_num_721</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_num_731</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>LOGICAL_BLOCK_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>setup_boot_information</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isoent</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>,
<argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>offset_of_temp</name></name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>archive_entry_size</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Boot file(%jd) is too small"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>size</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>rsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rsize</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>rs</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't read temporary file(%jd)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rs</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>rs</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>set_num_731</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>SYSTEM_AREA_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_731</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>fd_boot_image_size</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>media_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>archive_entry_size</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_num_731</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_num_731</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">12</literal></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>,
<argument><expr><name><name>np</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>offset_of_temp</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>write_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zisofs_init_zstream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>deflateReset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>deflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>compression_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<case>case <expr><name>Z_STREAM_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing "</literal>
<literal type="string">"compression library: invalid setup parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
<case>case <expr><name>Z_MEM_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing "</literal>
<literal type="string">"compression library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
<case>case <expr><name>Z_VERSION_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing "</literal>
<literal type="string">"compression library: invalid library version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zisofs_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>_ceil</name></decl>, <decl><type ref="prev"/><name>bpsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>detect_magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>making</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rr</name></name> <operator>||</operator> <operator>!</operator><name><name>iso9660</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>zisofs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator>
<call><name>archive_entry_size</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MULTI_EXTENT_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>detect_magic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>magic_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>detect_magic</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>LOGICAL_BLOCK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>zisofs_init_zstream</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>header_size</name></name> <operator>=</operator> <name>ZF_HEADER_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>log2_bs</name></name> <operator>=</operator> <name>ZF_LOG2_BS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>uncompressed_size</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>archive_entry_size</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>_ceil</name> <operator>=</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>uncompressed_size</name></name> <operator>+</operator> <name>ZF_BLOCK_SIZE</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>log2_bs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers_cnt</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>_ceil</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>bpsize</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers_cnt</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers_allocated</name></name> <operator>&lt;</operator> <name>bpsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>bpsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers_allocated</name></name> <operator>=</operator> <name>bpsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>tsize</name> <operator>=</operator> <name>ZF_HEADER_SIZE</name> <operator>+</operator> <name>bpsize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_null</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>tsize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>tsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>remaining</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>making</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>allzero</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_offset</name></name> <operator>=</operator> <name>tsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>total_size</name></name> <operator>=</operator> <name>tsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>tsize</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zisofs_detect_magic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>magic_buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>log2_bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>_ceil</name></decl>, <decl><type ref="prev"/><name>doff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bst</name></decl>, <decl><type ref="prev"/><name>bed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>magic_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>entry_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry_size</name> <operator>=</operator> <call><name>archive_entry_size</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int64_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>magic_buffer</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>entry_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>magic_max</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>entry_size</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>magic_max</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>magic_buffer</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>magic_cnt</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>magic_max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>magic_buff</name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>magic_cnt</name></name> <operator>&lt;</operator> <name>magic_max</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>magic_buffer</name></name></expr></argument>)</argument_list></sizeof>
<operator>-</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>magic_cnt</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>magic_buffer</name></name>
<operator>+</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>magic_cnt</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>magic_cnt</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>magic_cnt</name></name> <operator>&lt;</operator> <name>magic_max</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>magic_buff</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>magic_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>detect_magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>magic_buff</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zisofs_magic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zisofs_magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>zisofs_magic</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


<expr_stmt><expr><name>uncompressed_size</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>header_size</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>log2_bs</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uncompressed_size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">24</literal> <operator>||</operator> <name>header_size</name> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator>
<name>log2_bs</name></expr></argument> &gt;</argument_list></name> <literal type="number">30</literal> <operator>||</operator> <name>log2_bs</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>_ceil</name> <operator>=</operator> <operator>(</operator><name>uncompressed_size</name> <operator>+</operator>
<operator>(</operator><call><name>ARCHIVE_LITERAL_LL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>log2_bs</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_bs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>doff</name> <operator>=</operator> <operator>(</operator><name>_ceil</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry_size</name> <operator>&lt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>doff</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>magic_buff</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>magic_buff</name> <operator>+</operator> <name>magic_max</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>_ceil</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;=</operator> <name>endp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bst</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bst</name> <operator>!=</operator> <name>doff</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bed</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bed</name> <argument_list type="generic">&lt; <argument><expr><name>bst</name> <operator>||</operator> <name>bed</name></expr></argument> &gt;</argument_list></name> <name>entry_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>doff</name> <operator>+=</operator> <name>bed</name> <operator>-</operator> <name>bst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_ceil</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>uncompressed_size</name></name> <operator>=</operator> <name>uncompressed_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>header_size</name></name> <operator>=</operator> <name>header_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>log2_bs</name></name> <operator>=</operator> <name>log2_bs</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>making</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>zisofs_write_to_temp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_stream</name> <modifier>*</modifier></type><name>zstrm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name></decl>, <decl><type ref="prev"/><name>csize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flush</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zstrm</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zstrm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zstrm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <name>ZF_BLOCK_SIZE</name> <operator>-</operator> <name><name>zstrm</name><operator>-&gt;</operator><name>total_in</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>avail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <name>Z_NO_FLUSH</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <name>Z_FINISH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>remaining</name></name> <operator>-=</operator> <name>avail</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>remaining</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <name>Z_FINISH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>zstrm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zstrm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name>avail</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>allzero</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nonzero</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nonzeroend</name> <init>= <expr><name>b</name> <operator>+</operator> <name>avail</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>nonzero</name> <operator>&lt;</operator> <name>nonzeroend</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nonzero</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>allzero</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name>avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>-=</operator> <name>avail</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>==</operator> <name>Z_FINISH</name> <operator>&amp;&amp;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>allzero</name></name> <operator>&amp;&amp;</operator>
<name>avail</name> <operator>+</operator> <name><name>zstrm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>==</operator> <name>ZF_BLOCK_SIZE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_offset</name></name> <operator>!=</operator>
<name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>diff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wb_set_offset</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>offset_of_temp</name></name> <operator>+</operator>
<name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator>
<name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>total_size</name></name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zstrm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<while>while <condition>(<expr><name><name>zstrm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>csize</name> <operator>=</operator> <name><name>zstrm</name><operator>-&gt;</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><name>zstrm</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_OK</name></expr>:</case>
<case>case <expr><name>Z_STREAM_END</name></expr>:</case>
<expr_stmt><expr><name>csize</name> <operator>=</operator> <name><name>zstrm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>-</operator> <name>csize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>total_size</name></name> <operator>+=</operator> <name>csize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>csize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zstrm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zstrm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Compression failed:"</literal>
<literal type="string">" deflate() call returned status %d"</literal></expr></argument>,
<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>==</operator> <name>Z_FINISH</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers_idx</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers</name><index>[
<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers_idx</name></name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>total_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>zisofs_init_zstream</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>allzero</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_offset</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>cur_content</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>s</name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zisofs_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>iso9660</name><operator>-&gt;</operator><name>cur_file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tail</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>total_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>wb_offset</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




























<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>zisofs_magic</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_num_731</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>header_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>log2_bs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>buff</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>wb_set_offset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>offset_of_temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>wb_write_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers_cnt</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wb_write_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>wb_set_offset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zisofs_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream_valid</name></name> <operator>&amp;&amp;</operator>
<call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up compressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>block_pointers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>stream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>zisofs_extract</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pz_log2_bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pz_uncompressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>uncompressed_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>initialized</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>header_passed</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pz_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>block_pointers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_pointers_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_pointers_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>block_avail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_stream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_valid</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>zisofs_extract_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>zisofs_extract</name></name> <modifier>*</modifier></type><name>zisofs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name> <init>= <expr><name>bytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>_ceil</name></decl>, <decl><type ref="prev"/><name>xsize</name></decl>;</decl_stmt>


<expr_stmt><expr><name>_ceil</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>zisofs</name><operator>-&gt;</operator><name>pz_uncompressed_size</name></name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>pz_log2_bs</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>pz_log2_bs</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <operator>(</operator><name>_ceil</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name> <init>= <expr><operator>(</operator><operator>(</operator><name>xsize</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for zisofs decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_size</name></name> <operator>=</operator> <name>xsize</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>pz_log2_bs</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zisofs</name><operator>-&gt;</operator><name>header_passed</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Illegal zisofs file body"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zisofs_magic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zisofs_magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>pz_uncompressed_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>!=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>pz_log2_bs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Illegal zisofs file body"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>avail</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>header_passed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>header_passed</name></name> <operator>&amp;&amp;</operator>
<name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_avail</name></name> <operator>&lt;</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_size</name></name>
<operator>-</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_avail</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <name>xsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <name>avail</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name>
<operator>+</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_avail</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_avail</name></name> <operator>+=</operator> <name>xsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>-=</operator> <name>xsize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_avail</name></name>
<operator>==</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_size</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name>avail</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>zisofs_extract</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>zisofs_extract</name></name> <modifier>*</modifier></type><name>zisofs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zisofs</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rs</name> <init>= <expr><call><name>zisofs_extract_init</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>zisofs</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rs</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zisofs</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>pz_offset</name></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>bytes</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>bytes</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <name>rs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>bytes</name> <operator>-</operator> <name>avail</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bst</name></decl>, <decl><type ref="prev"/><name>bed</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_off</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Illegal zisofs block pointers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bst</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(
<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name> <operator>+</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bst</name> <operator>!=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>pz_offset</name></name> <operator>+</operator> <operator>(</operator><name>bytes</name> <operator>-</operator> <name>avail</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Illegal zisofs block pointers(cannot seek)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bed</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(
<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name> <operator>+</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_off</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bed</name> <operator>&lt;</operator> <name>bst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Illegal zisofs block pointers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name> <operator>=</operator> <name>bed</name> <operator>-</operator> <name>bst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_off</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Can't initialize zisofs decompression."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>wb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>wsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wb</name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wsize</name> <operator>=</operator> <call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>wsize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>wsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>wsize</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&gt;</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name>avail</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <call><name>wb_buffptr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_OK</name></expr>:</case>
<case>case <expr><name>Z_STREAM_END</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"zisofs decompression failed (%d)"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>avail</name> <operator>-=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name> <operator>-=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wb_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>wb_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>pz_offset</name></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>bytes</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>bytes</name> <operator>-</operator> <name>avail</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zisofs_rewind_boot_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>isofile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rbuff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name></decl>, <decl><type ref="prev"/><name>rbuff_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zisofs_extract</name></name></type> <name>zext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>read_offset</name></decl>, <decl><type ref="prev"/><name>write_offset</name></decl>, <decl><type ref="prev"/><name>new_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>header_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zext</name><operator>.</operator><name>pz_uncompressed_size</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zext</name><operator>.</operator><name>pz_log2_bs</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>log2_bs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_offset</name> <operator>=</operator> <call><name>wb_offset</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>read_offset</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>offset_of_temp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&gt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rbuff_size</name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rbuff_size</name> <operator>=</operator> <name>remaining</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>rbuff</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>rbuff_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rbuff</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>remaining</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>rsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rs</name></decl>;</decl_stmt>


<expr_stmt><expr><name>write_offset</name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>read_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rsize</name> <operator>=</operator> <name>rbuff_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rsize</name> <operator>&gt;</operator> <name>remaining</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rsize</name> <operator>=</operator> <name>remaining</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rs</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>, <argument><expr><name>rbuff</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't read temporary file(%jd)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>rs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>read_offset</name> <operator>+=</operator> <name>rs</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>write_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>zisofs_extract</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zext</name></expr></argument>, <argument><expr><name>rbuff</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>offset_of_temp</name></name> <operator>=</operator> <name>new_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>header_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>log2_bs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>uncompressed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wb_write_padding_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zext</name><operator>.</operator><name>block_pointers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zext</name><operator>.</operator><name>stream_valid</name></name> <operator>&amp;&amp;</operator> <call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zext</name><operator>.</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up compressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zisofs_write_to_temp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buff</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"Programming error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zisofs_rewind_boot_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>el_torito</name><operator>.</operator><name>boot</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>zisofs</name><operator>.</operator><name>header_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"We cannot extract the zisofs imaged boot file;"</literal>
<literal type="string">" this may not boot in being zisofs imaged"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zisofs_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zisofs_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
