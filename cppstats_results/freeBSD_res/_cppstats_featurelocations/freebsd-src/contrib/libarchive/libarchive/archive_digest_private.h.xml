<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_digest_private.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_DIGEST_PRIVATE_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_DIGEST_PRIVATE_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBARCHIVE_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This header is only to be used internally to libarchive.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBARCHIVE_CONFIG_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Should have include config.h first!"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;md5.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rmd160.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sha1.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBC</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBC2</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBC3</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_LIBC</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_LIBC2</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_LIBC3</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBC</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBC2</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBC3</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sha2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_LIBMD</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_LIBMD</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_LIBMD</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBMD</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBMD</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_CRYPTO_LIBMD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_LIBMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;md5.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_LIBMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ripemd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_LIBMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sha.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sha256.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sha512.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_LIBSYSTEM</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_LIBSYSTEM</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBSYSTEM</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_LIBSYSTEM</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBSYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CommonCrypto/CommonDigest.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/md5.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/ripemd160.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/sha1.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/sha256.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/sha512.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/md5.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/ripemd160.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_NETTLE</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_NETTLE</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_NETTLE</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/sha.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_CRYPTO_OPENSSL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_openssl_evp_private.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_WIN</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_WIN</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_WIN</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_WIN</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCRYPTPROV</name></type> <name>cryptProv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCRYPTHASH</name></type> <name>hash</name></decl>;</decl_stmt>
}</block></struct></type> <name>Digest_CTX</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>MD5_CTX</name></type> <name>archive_md5_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_LIBMD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>MD5_CTX</name></type> <name>archive_md5_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_LIBSYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>CC_MD5_CTX</name></type> <name>archive_md5_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>mbedtls_md5_context</name></type> <name>archive_md5_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name><name>struct</name> <name>md5_ctx</name></name></type> <name>archive_md5_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>archive_md5_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>Digest_CTX</name></type> <name>archive_md5_ctx</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>archive_md5_ctx</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>RMD160_CTX</name></type> <name>archive_rmd160_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_LIBMD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>RIPEMD160_CTX</name></type> <name>archive_rmd160_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>mbedtls_ripemd160_context</name></type> <name>archive_rmd160_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name><name>struct</name> <name>ripemd160_ctx</name></name></type> <name>archive_rmd160_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>archive_rmd160_ctx</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>archive_rmd160_ctx</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>SHA1_CTX</name></type> <name>archive_sha1_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_LIBMD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>SHA1_CTX</name></type> <name>archive_sha1_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_LIBSYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>CC_SHA1_CTX</name></type> <name>archive_sha1_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>mbedtls_sha1_context</name></type> <name>archive_sha1_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name><name>struct</name> <name>sha1_ctx</name></name></type> <name>archive_sha1_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>archive_sha1_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>Digest_CTX</name></type> <name>archive_sha1_ctx</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>archive_sha1_ctx</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>SHA256_CTX</name></type> <name>archive_sha256_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBC2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>SHA256_CTX</name></type> <name>archive_sha256_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBC3</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>SHA2_CTX</name></type> <name>archive_sha256_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBMD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>SHA256_CTX</name></type> <name>archive_sha256_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBSYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>CC_SHA256_CTX</name></type> <name>archive_sha256_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>mbedtls_sha256_context</name></type> <name>archive_sha256_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name><name>struct</name> <name>sha256_ctx</name></name></type> <name>archive_sha256_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>archive_sha256_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>Digest_CTX</name></type> <name>archive_sha256_ctx</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>archive_sha256_ctx</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>SHA384_CTX</name></type> <name>archive_sha384_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_LIBC2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>SHA384_CTX</name></type> <name>archive_sha384_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_LIBC3</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>SHA2_CTX</name></type> <name>archive_sha384_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_LIBSYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>CC_SHA512_CTX</name></type> <name>archive_sha384_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>mbedtls_sha512_context</name></type> <name>archive_sha384_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name><name>struct</name> <name>sha384_ctx</name></name></type> <name>archive_sha384_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>archive_sha384_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>Digest_CTX</name></type> <name>archive_sha384_ctx</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>archive_sha384_ctx</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>SHA512_CTX</name></type> <name>archive_sha512_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBC2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>SHA512_CTX</name></type> <name>archive_sha512_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBC3</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>SHA2_CTX</name></type> <name>archive_sha512_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBMD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>SHA512_CTX</name></type> <name>archive_sha512_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBSYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>CC_SHA512_CTX</name></type> <name>archive_sha512_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>mbedtls_sha512_context</name></type> <name>archive_sha512_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name><name>struct</name> <name>sha512_ctx</name></name></type> <name>archive_sha512_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>archive_sha512_ctx</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>Digest_CTX</name></type> <name>archive_sha512_ctx</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>archive_sha512_ctx</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_LIBC</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_LIBMD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_LIBSYSTEM</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_NETTLE</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_MD5_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_HAS_MD5</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_md5_init</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.md5init(ctx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_md5_final</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>md</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.md5final(ctx, md)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_md5_update</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.md5update(ctx, buf, n)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_LIBC</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_NETTLE</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_RMD160_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_HAS_RMD160</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_rmd160_init</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.rmd160init(ctx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_rmd160_final</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>md</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.rmd160final(ctx, md)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_rmd160_update</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.rmd160update(ctx, buf, n)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_LIBC</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_LIBMD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_LIBSYSTEM</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_NETTLE</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA1_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_HAS_SHA1</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_sha1_init</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.sha1init(ctx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_sha1_final</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>md</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.sha1final(ctx, md)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_sha1_update</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.sha1update(ctx, buf, n)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBC</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBC2</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBC3</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBMD</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_LIBSYSTEM</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_NETTLE</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA256_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_HAS_SHA256</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_sha256_init</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.sha256init(ctx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_sha256_final</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>md</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.sha256final(ctx, md)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_sha256_update</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.sha256update(ctx, buf, n)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_LIBC</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_LIBC2</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_LIBC3</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_LIBSYSTEM</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_NETTLE</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA384_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_HAS_SHA384</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_sha384_init</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.sha384init(ctx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_sha384_final</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>md</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.sha384final(ctx, md)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_sha384_update</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.sha384update(ctx, buf, n)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBC</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBC2</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBC3</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBMD</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_LIBSYSTEM</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_NETTLE</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTO_SHA512_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_HAS_SHA512</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_sha512_init</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.sha512init(ctx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_sha512_final</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>md</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.sha512final(ctx, md)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>archive_sha512_update</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__archive_digest.sha512update(ctx, buf, n)</cpp:value></cpp:define>



<struct>struct <name>archive_digest</name>
<block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>md5init</name>)<parameter_list>(<parameter><decl><type><name>archive_md5_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>md5update</name>)<parameter_list>(<parameter><decl><type><name>archive_md5_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>md5final</name>)<parameter_list>(<parameter><decl><type><name>archive_md5_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rmd160init</name>)<parameter_list>(<parameter><decl><type><name>archive_rmd160_ctx</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rmd160update</name>)<parameter_list>(<parameter><decl><type><name>archive_rmd160_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rmd160final</name>)<parameter_list>(<parameter><decl><type><name>archive_rmd160_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sha1init</name>)<parameter_list>(<parameter><decl><type><name>archive_sha1_ctx</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sha1update</name>)<parameter_list>(<parameter><decl><type><name>archive_sha1_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sha1final</name>)<parameter_list>(<parameter><decl><type><name>archive_sha1_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sha256init</name>)<parameter_list>(<parameter><decl><type><name>archive_sha256_ctx</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sha256update</name>)<parameter_list>(<parameter><decl><type><name>archive_sha256_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sha256final</name>)<parameter_list>(<parameter><decl><type><name>archive_sha256_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sha384init</name>)<parameter_list>(<parameter><decl><type><name>archive_sha384_ctx</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sha384update</name>)<parameter_list>(<parameter><decl><type><name>archive_sha384_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sha384final</name>)<parameter_list>(<parameter><decl><type><name>archive_sha384_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sha512init</name>)<parameter_list>(<parameter><decl><type><name>archive_sha512_ctx</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sha512update</name>)<parameter_list>(<parameter><decl><type><name>archive_sha512_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sha512final</name>)<parameter_list>(<parameter><decl><type><name>archive_sha512_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>archive_digest</name></name></type> <name>__archive_digest</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
