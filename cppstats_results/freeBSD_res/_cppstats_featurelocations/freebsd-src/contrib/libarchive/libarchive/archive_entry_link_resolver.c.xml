<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_entry_link_resolver.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_STAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_ENTRY_LINKIFY_LIKE_TAR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_ENTRY_LINKIFY_LIKE_MTREE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_ENTRY_LINKIFY_LIKE_OLD_CPIO</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_ENTRY_LINKIFY_LIKE_NEW_CPIO</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>links_cache_initial_size</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<struct>struct <name>links_entry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>canonical</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>links</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>archive_entry_linkresolver</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>buckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>spare</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>number_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>number_buckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strategy</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_ENTRY_DEFERRED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_ENTRY_PARTIAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_ENTRY_ALL</name></cpp:macro> <cpp:value>(NEXT_ENTRY_DEFERRED | NEXT_ENTRY_PARTIAL)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>find_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>grow_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>insert_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>next_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type>
<name>archive_entry_linkresolver_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>links_cache_initial_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>links_cache_initial_size</name> <operator>&amp;</operator> <operator>(</operator><name>links_cache_initial_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>archive_entry_linkresolver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>number_buckets</name></name> <operator>=</operator> <name>links_cache_initial_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>number_buckets</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_linkresolver_set_strategy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fmtbase</name> <init>= <expr><name>fmt</name> <operator>&amp;</operator> <name>ARCHIVE_FORMAT_BASE_MASK</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>fmtbase</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_FORMAT_7ZIP</name></expr>:</case>
<case>case <expr><name>ARCHIVE_FORMAT_AR</name></expr>:</case>
<case>case <expr><name>ARCHIVE_FORMAT_ZIP</name></expr>:</case>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>strategy</name></name> <operator>=</operator> <name>ARCHIVE_ENTRY_LINKIFY_LIKE_OLD_CPIO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_FORMAT_CPIO</name></expr>:</case>
<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_FORMAT_CPIO_SVR4_NOCRC</name></expr>:</case>
<case>case <expr><name>ARCHIVE_FORMAT_CPIO_SVR4_CRC</name></expr>:</case>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>strategy</name></name> <operator>=</operator> <name>ARCHIVE_ENTRY_LINKIFY_LIKE_NEW_CPIO</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>strategy</name></name> <operator>=</operator> <name>ARCHIVE_ENTRY_LINKIFY_LIKE_OLD_CPIO</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>ARCHIVE_FORMAT_MTREE</name></expr>:</case>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>strategy</name></name> <operator>=</operator> <name>ARCHIVE_ENTRY_LINKIFY_LIKE_MTREE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_FORMAT_ISO9660</name></expr>:</case>
<case>case <expr><name>ARCHIVE_FORMAT_SHAR</name></expr>:</case>
<case>case <expr><name>ARCHIVE_FORMAT_TAR</name></expr>:</case>
<case>case <expr><name>ARCHIVE_FORMAT_XAR</name></expr>:</case>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>strategy</name></name> <operator>=</operator> <name>ARCHIVE_ENTRY_LINKIFY_LIKE_TAR</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>strategy</name></name> <operator>=</operator> <name>ARCHIVE_ENTRY_LINKIFY_LIKE_OLD_CPIO</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_linkresolver_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>le</name> <operator>=</operator> <call><name>next_entry</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>NEXT_ENTRY_ALL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_linkify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>le</name> <operator>=</operator> <call><name>next_entry</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>NEXT_ENTRY_DEFERRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>archive_entry_nlink</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFDIR</name>
<operator>||</operator> <call><name>archive_entry_filetype</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFBLK</name>
<operator>||</operator> <call><name>archive_entry_filetype</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFCHR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>strategy</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_LINKIFY_LIKE_TAR</name></expr>:</case>
<expr_stmt><expr><name>le</name> <operator>=</operator> <call><name>find_entry</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_unset_size</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_hardlink</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>canonical</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_entry</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
<case>case <expr><name>ARCHIVE_ENTRY_LINKIFY_LIKE_MTREE</name></expr>:</case>
<expr_stmt><expr><name>le</name> <operator>=</operator> <call><name>find_entry</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_copy_hardlink</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>canonical</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_entry</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
<case>case <expr><name>ARCHIVE_ENTRY_LINKIFY_LIKE_OLD_CPIO</name></expr>:</case>

<return>return;</return>
<case>case <expr><name>ARCHIVE_ENTRY_LINKIFY_LIKE_NEW_CPIO</name></expr>:</case>
<expr_stmt><expr><name>le</name> <operator>=</operator> <call><name>find_entry</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_entry_unset_size</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_hardlink</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>canonical</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>links</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>le</name> <operator>=</operator> <call><name>insert_entry</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>le</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <operator>*</operator><name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type>
<name>find_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hash</name></decl>, <decl><type ref="prev"/><name>bucket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ino</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>spare</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name><operator>-&gt;</operator><name>canonical</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>archive_entry_dev</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ino</name> <operator>=</operator> <call><name>archive_entry_ino64</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>dev</name> <operator>^</operator> <name>ino</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>bucket</name> <operator>=</operator> <name>hash</name> <operator>&amp;</operator> <operator>(</operator><name><name>res</name><operator>-&gt;</operator><name>number_buckets</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>le</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>bucket</name></expr>]</index></name></expr>;</init> <condition><expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>le</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>hash</name></name> <operator>==</operator> <name>hash</name>
<operator>&amp;&amp;</operator> <name>dev</name> <operator>==</operator> <call><name>archive_entry_dev</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>canonical</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>ino</name> <operator>==</operator> <call><name>archive_entry_ino64</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>canonical</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><operator>--</operator><name><name>le</name><operator>-&gt;</operator><name>links</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>links</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>le</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>previous</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>previous</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>previous</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>bucket</name></expr>]</index></name> <operator>==</operator> <name>le</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>bucket</name></expr>]</index></name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>number_entries</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name></name> <operator>=</operator> <name>le</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>le</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type>
<name>next_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bucket</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>spare</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name><operator>-&gt;</operator><name>canonical</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>bucket</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bucket</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>number_buckets</name></name></expr>;</condition> <incr><expr><name>bucket</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>le</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>bucket</name></expr>]</index></name></expr>;</init> <condition><expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>le</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>entry</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>NEXT_ENTRY_DEFERRED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>entry</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>NEXT_ENTRY_PARTIAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>previous</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>previous</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>previous</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>bucket</name></expr>]</index></name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>number_entries</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name></name> <operator>=</operator> <name>le</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>le</name><operator>)</operator></expr>;</return>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type>
<name>insert_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hash</name></decl>, <decl><type ref="prev"/><name>bucket</name></decl>;</decl_stmt>


<expr_stmt><expr><name>le</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>links_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>le</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>canonical</name></name> <operator>=</operator> <call><name>archive_entry_clone</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>number_entries</name></name> <operator>&gt;</operator> <name><name>res</name><operator>-&gt;</operator><name>number_buckets</name></name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>grow_hash</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><call><name>archive_entry_dev</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>archive_entry_ino64</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bucket</name> <operator>=</operator> <name>hash</name> <operator>&amp;</operator> <operator>(</operator><name><name>res</name><operator>-&gt;</operator><name>number_buckets</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>bucket</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>bucket</name></expr>]</index></name><operator>-&gt;</operator><name>previous</name> <operator>=</operator> <name>le</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>number_entries</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>bucket</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>bucket</name></expr>]</index></name> <operator>=</operator> <name>le</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>links</name></name> <operator>=</operator> <call><name>archive_entry_nlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>le</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>grow_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>new_buckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bucket</name></decl>;</decl_stmt>


<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>number_buckets</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>number_buckets</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>new_buckets</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>links_entry</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_buckets</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>number_buckets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>le</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>bucket</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>hash</name></name> <operator>&amp;</operator> <operator>(</operator><name>new_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>new_buckets</name><index>[<expr><name>bucket</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_buckets</name><index>[<expr><name>bucket</name></expr>]</index></name><operator>-&gt;</operator><name>previous</name> <operator>=</operator> <name>le</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>new_buckets</name><index>[<expr><name>bucket</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_buckets</name><index>[<expr><name>bucket</name></expr>]</index></name> <operator>=</operator> <name>le</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <name>new_buckets</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>number_buckets</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type>
<name>archive_entry_partial_links</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry_linkresolver</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>links</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>links_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>spare</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name><operator>-&gt;</operator><name>canonical</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>spare</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>le</name> <operator>=</operator> <call><name>next_entry</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>NEXT_ENTRY_PARTIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>canonical</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>links</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>links</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>links</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>canonical</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>links</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>links</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>e</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
