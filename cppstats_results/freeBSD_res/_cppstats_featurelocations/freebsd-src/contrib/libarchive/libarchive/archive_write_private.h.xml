<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_write_private.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_WRITE_PRIVATE_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_WRITE_PRIVATE_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBARCHIVE_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBARCHIVE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This header is only to be used internally to libarchive.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_WRITE_FILTER_STATE_NEW</name></cpp:macro> <cpp:value>1U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_WRITE_FILTER_STATE_OPEN</name></cpp:macro> <cpp:value>2U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_WRITE_FILTER_STATE_CLOSED</name></cpp:macro> <cpp:value>4U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_WRITE_FILTER_STATE_FATAL</name></cpp:macro> <cpp:value>0x8000U</cpp:value></cpp:define>

<struct_decl>struct <name>archive_write</name>;</struct_decl>

<struct>struct <name>archive_write_filter</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>archive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>next_filter</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>options</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>open</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>write</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>close</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_in_last_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION</name> <operator>&lt;</operator> <literal type="number">4000000</literal></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>__archive_write_filters_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>__archive_write_allocate_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__archive_write_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>__archive_write_nulls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>__archive_write_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>archive_write</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name></type> <name>archive</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>skip_file_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skip_file_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skip_file_ino</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>null_length</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>archive_open_callback</name> <modifier>*</modifier></type><name>client_opener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>archive_write_callback</name> <modifier>*</modifier></type><name>client_writer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>archive_close_callback</name> <modifier>*</modifier></type><name>client_closer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>archive_free_callback</name> <modifier>*</modifier></type><name>client_freer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_in_last_block</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>filter_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type><name>filter_last</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>format_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format_name</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>format_init</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>format_options</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>format_finish_entry</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>format_write_header</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>format_write_data</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>format_close</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>format_free</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>passphrase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>archive_passphrase_callback</name> <modifier>*</modifier></type><name>passphrase_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>passphrase_client_data</name></decl>;</decl_stmt>
}</block>;</struct>











<function_decl><type><name>int</name></type>
<name>__archive_write_format_header_ustar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tartype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>archive_write_program_data</name>;</struct_decl>
<function_decl><type><name><name>struct</name> <name>archive_write_program_data</name></name> <modifier>*</modifier></type> <name>__archive_write_program_allocate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>program_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>__archive_write_program_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_program_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>__archive_write_program_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_write_program_data</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>__archive_write_program_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_write_program_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>__archive_write_program_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write_filter</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_write_program_data</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>__archive_write_get_passphrase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
