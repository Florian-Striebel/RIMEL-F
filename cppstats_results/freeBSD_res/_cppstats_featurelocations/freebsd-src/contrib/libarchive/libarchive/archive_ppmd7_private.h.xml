<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_ppmd7_private.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_PPMD7_PRIVATE_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_PPMD7_PRIVATE_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBARCHIVE_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This header is only to be used internally to libarchive.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_ppmd_private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD7_MIN_ORDER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD7_MAX_ORDER</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD7_MIN_MEM_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD7_MAX_MEM_SIZE</name></cpp:macro> <cpp:value>(0xFFFFFFFFu - 12 * 3)</cpp:value></cpp:define>

<struct_decl>struct <name>CPpmd7_Context_</name>;</struct_decl>

<typedef>typedef
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<type><name><name>struct</name> <name>CPpmd7_Context_</name></name> <modifier>*</modifier>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>UInt32</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>CPpmd7_Context_Ref</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CPpmd7_Context_</name>
<block>{
<decl_stmt><decl><type><name>UInt16</name></type> <name>NumStats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name></type> <name>SummFreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State_Ref</name></type> <name>Stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd7_Context_Ref</name></type> <name>Suffix</name></decl>;</decl_stmt>
}</block></struct></type> <name>CPpmd7_Context</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd7Context_OneState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CPpmd_State *)&amp;(p)-&gt;SummFreq)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>CPpmd7_Context</name> <modifier>*</modifier></type><name>MinContext</name></decl>, <modifier>*</modifier><name>MaxContext</name>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>FoundState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>OrderFall</name></decl>, <name>InitEsc</name>, <name>PrevSuccess</name>, <name>MaxOrder</name>, <name>HiBitsFlag</name>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>RunLength</name></decl>, <name>InitRL</name>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>Size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>GlueCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name> <modifier>*</modifier></type><name>Base</name></decl>, <modifier>*</modifier><name>LoUnit</name>, <modifier>*</modifier><name>HiUnit</name>, <modifier>*</modifier><name>Text</name>, <modifier>*</modifier><name>UnitsStart</name>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>AlignOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Byte</name></type> <name><name>Indx2Units</name><index>[<expr><name>PPMD_NUM_INDEXES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name></type> <name><name>Units2Indx</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_Void_Ref</name></type> <name><name>FreeList</name><index>[<expr><name>PPMD_NUM_INDEXES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name></type> <name><name>NS2Indx</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <name><name>NS2BSIndx</name><index>[<expr><literal type="number">256</literal></expr>]</index></name>, <name><name>HB2Flag</name><index>[<expr><literal type="number">256</literal></expr>]</index></name>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_See</name></type> <name>DummySee</name></decl>, <name><name>See</name><index>[<expr><literal type="number">25</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name></type> <name><name>BinSumm</name><index>[<expr><literal type="number">128</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CPpmd7</name>;</typedef>



<typedef>typedef <type><struct>struct
<block>{
<function_decl><type><name>UInt32</name></type> (<modifier>*</modifier><name>GetThreshold</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>total</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Decode</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>UInt32</name></type> (<modifier>*</modifier><name>DecodeBit</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size0</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>IPpmd7_RangeDec</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>IPpmd7_RangeDec</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>Range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>Code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>Low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>Bottom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IByteIn</name> <modifier>*</modifier></type><name>Stream</name></decl>;</decl_stmt>
}</block></struct></type> <name>CPpmd7z_RangeDec</name>;</typedef>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>UInt64</name></type> <name>Low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>Range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name></type> <name>Cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt64</name></type> <name>CacheSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IByteOut</name> <modifier>*</modifier></type><name>Stream</name></decl>;</decl_stmt>
}</block></struct></type> <name>CPpmd7z_RangeEnc</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Ppmd7_Construct</name>)<parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Bool</name></type> (<modifier>*</modifier><name>Ppmd7_Alloc</name>)<parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Ppmd7_Free</name>)<parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Ppmd7_Init</name>)<parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxOrder</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd7_WasAllocated</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;Base != NULL)</cpp:value></cpp:define>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Ppmd7z_RangeDec_CreateVTable</name>)<parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>PpmdRAR_RangeDec_CreateVTable</name>)<parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Bool</name></type> (<modifier>*</modifier><name>Ppmd7z_RangeDec_Init</name>)<parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Bool</name></type> (<modifier>*</modifier><name>PpmdRAR_RangeDec_Init</name>)<parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd7z_RangeDec_IsFinishedOK</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;Code == 0)</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>Ppmd7_DecodeSymbol</name>)<parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>IPpmd7_RangeDec</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Ppmd7z_RangeEnc_Init</name>)<parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeEnc</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Ppmd7z_RangeEnc_FlushData</name>)<parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeEnc</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Ppmd7_EncodeSymbol</name>)<parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>CPpmd7z_RangeEnc</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symbol</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>IPpmd7</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IPpmd7</name></type> <name>__archive_ppmd7_functions</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
